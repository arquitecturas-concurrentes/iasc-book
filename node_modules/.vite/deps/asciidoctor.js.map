{
  "version": 3,
  "sources": ["../../@asciidoctor/core/dist/browser/asciidoctor.js", "../../asciidoctor/index.js"],
  "sourcesContent": ["/**\n * @license Asciidoctor.js 3.0.4 | MIT | https://github.com/asciidoctor/asciidoctor.js\n */\n(function(global_object) {\n  \"use strict\";\n\n  // @note\n  //   A few conventions for the documentation of this file:\n  //   1. Always use \"//\" (in contrast with \"/**/\")\n  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)\n  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to\n  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.\n  //   4. `nil` and `null` being unambiguous refer to the respective\n  //      objects/values in Ruby and JavaScript\n  //   5. This is still WIP :) so please give feedback and suggestions on how\n  //      to improve or for alternative solutions\n  //\n  //   The way the code is digested before going through Yardoc is a secret kept\n  //   in the docs repo (https://github.com/opal/docs/tree/master).\n\n  var console;\n\n  // Detect the global object\n  if (typeof(globalThis) !== 'undefined') { global_object = globalThis; }\n  else if (typeof(global) !== 'undefined') { global_object = global; }\n  else if (typeof(window) !== 'undefined') { global_object = window; }\n\n  // Setup a dummy console object if missing\n  if (global_object.console == null) {\n    global_object.console = {};\n  }\n\n  if (typeof(global_object.console) === 'object') {\n    console = global_object.console;\n  } else {\n    console = {};\n  }\n\n  if (!('log' in console)) { console.log = function () {}; }\n  if (!('warn' in console)) { console.warn = console.log; }\n\n  if (typeof(global_object.Opal) !== 'undefined') {\n    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');\n    return global_object.Opal;\n  }\n\n  var nil;\n\n  // The actual class for BasicObject\n  var BasicObject;\n\n  // The actual Object class.\n  // The leading underscore is to avoid confusion with window.Object()\n  var _Object;\n\n  // The actual Module class\n  var Module;\n\n  // The actual Class class\n  var Class;\n\n  // The Opal.Opal class (helpers etc.)\n  var _Opal;\n\n  // The Kernel module\n  var Kernel;\n\n  // The Opal object that is exposed globally\n  var Opal = global_object.Opal = {};\n\n  // This is a useful reference to global object inside ruby files\n  Opal.global = global_object;\n\n  // Configure runtime behavior with regards to require and unsupported features\n  Opal.config = {\n    missing_require_severity: 'error',        // error, warning, ignore\n    unsupported_features_severity: 'warning', // error, warning, ignore\n    experimental_features_severity: 'warning',// warning, ignore\n    enable_stack_trace: true                  // true, false\n  };\n\n  // Minify common function calls\n  var $call      = Function.prototype.call;\n  var $bind      = Function.prototype.bind;\n  var $has_own   = Object.hasOwn || $call.bind(Object.prototype.hasOwnProperty);\n  var $set_proto = Object.setPrototypeOf;\n  var $slice     = $call.bind(Array.prototype.slice);\n  var $splice    = $call.bind(Array.prototype.splice);\n\n  // Nil object id is always 4\n  var nil_id = 4;\n\n  // Generates even sequential numbers greater than 4\n  // (nil_id) to serve as unique ids for ruby objects\n  var unique_id = nil_id;\n\n  // Return next unique id\n  function $uid() {\n    unique_id += 2;\n    return unique_id;\n  };\n  Opal.uid = $uid;\n\n  // Retrieve or assign the id of an object\n  Opal.id = function(obj) {\n    if (obj.$$is_number) return (obj * 2)+1;\n    if (obj.$$id == null) {\n      $prop(obj, '$$id', $uid());\n    }\n    return obj.$$id;\n  };\n\n  // Globals table\n  var $gvars = Opal.gvars = {};\n\n  // Exit function, this should be replaced by platform specific implementation\n  // (See nodejs and chrome for examples)\n  Opal.exit = function(status) { if ($gvars.DEBUG) console.log('Exited with status '+status); };\n\n  // keeps track of exceptions for $!\n  Opal.exceptions = [];\n\n  // @private\n  // Pops an exception from the stack and updates `$!`.\n  Opal.pop_exception = function() {\n    var exception = Opal.exceptions.pop();\n    if (exception) {\n      $gvars[\"!\"] = exception;\n      $gvars[\"@\"] = exception.$backtrace();\n    }\n    else {\n      $gvars[\"!\"] = $gvars[\"@\"] = nil;\n    }\n  };\n\n  // A helper function for raising things, that gracefully degrades if necessary\n  // functionality is not yet loaded.\n  function $raise(klass, message) {\n    // Raise Exception, so we can know that something wrong is going on.\n    if (!klass) klass = Opal.Exception || Error;\n\n    if (Kernel && Kernel.$raise) {\n      if (arguments.length > 2) {\n        Kernel.$raise(klass.$new.apply(klass, $slice(arguments, 1)));\n      }\n      else {\n        Kernel.$raise(klass, message);\n      }\n    }\n    else if (!klass.$new) {\n      throw new klass(message);\n    }\n    else {\n      throw klass.$new(message);\n    }\n  }\n\n  function $prop(object, name, initialValue) {\n    if (typeof(object) === \"string\") {\n      // Special case for:\n      //   s = \"string\"\n      //   def s.m; end\n      // String class is the only class that:\n      // + compiles to JS primitive\n      // + allows method definition directly on instances\n      // numbers, true, false and null do not support it.\n      object[name] = initialValue;\n    } else {\n      Object.defineProperty(object, name, {\n        value: initialValue,\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n  }\n\n  Opal.prop = $prop;\n\n  // @deprecated\n  Opal.defineProperty = Opal.prop;\n\n  Opal.slice = $slice;\n\n  // Helpers\n  // -----\n\n  var $truthy = Opal.truthy = function(val) {\n    return false !== val && nil !== val && undefined !== val && null !== val && (!(val instanceof Boolean) || true === val.valueOf());\n  };\n\n  Opal.falsy = function(val) {\n    return !$truthy(val);\n  };\n\n  Opal.type_error = function(object, type, method, coerced) {\n    object = object.$$class;\n\n    if (coerced && method) {\n      coerced = coerced.$$class;\n      $raise(Opal.TypeError,\n        \"can't convert \" + object + \" into \" + type +\n        \" (\" + object + \"#\" + method + \" gives \" + coerced + \")\"\n      )\n    } else {\n      $raise(Opal.TypeError,\n        \"no implicit conversion of \" + object + \" into \" + type\n      )\n    }\n  };\n\n  Opal.coerce_to = function(object, type, method, args) {\n    var body;\n\n    if (method === 'to_int' && type === Opal.Integer && object.$$is_number)\n      return object < 0 ? Math.ceil(object) : Math.floor(object);\n\n    if (method === 'to_str' && type === Opal.String && object.$$is_string)\n      return object;\n\n    if (Opal.is_a(object, type)) return object;\n\n    // Fast path for the most common situation\n    if (object['$respond_to?'].$$pristine && object.$method_missing.$$pristine) {\n      body = object[$jsid(method)];\n      if (body == null || body.$$stub) Opal.type_error(object, type);\n      return body.apply(object, args);\n    }\n\n    if (!object['$respond_to?'](method)) {\n      Opal.type_error(object, type);\n    }\n\n    if (args == null) args = [];\n    return Opal.send(object, method, args);\n  }\n\n  Opal.respond_to = function(obj, jsid, include_all) {\n    if (obj == null || !obj.$$class) return false;\n    include_all = !!include_all;\n    var body = obj[jsid];\n\n    if (obj['$respond_to?'].$$pristine) {\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n      if (!obj['$respond_to_missing?'].$$pristine) {\n        return Opal.send(obj, obj['$respond_to_missing?'], [jsid.substr(1), include_all]);\n      }\n    } else {\n      return Opal.send(obj, obj['$respond_to?'], [jsid.substr(1), include_all]);\n    }\n  }\n\n  // TracePoint support\n  // ------------------\n  //\n  // Support for `TracePoint.trace(:class) do ... end`\n  Opal.trace_class = false;\n  Opal.tracers_for_class = [];\n\n  function invoke_tracers_for_class(klass_or_module) {\n    var i, ii, tracer;\n\n    for(i = 0, ii = Opal.tracers_for_class.length; i < ii; i++) {\n      tracer = Opal.tracers_for_class[i];\n      tracer.trace_object = klass_or_module;\n      tracer.block.$call(tracer);\n    }\n  }\n\n  function handle_autoload(cref, name) {\n    if (!cref.$$autoload[name].loaded) {\n      cref.$$autoload[name].loaded = true;\n      try {\n        Opal.Kernel.$require(cref.$$autoload[name].path);\n      } catch (e) {\n        cref.$$autoload[name].exception = e;\n        throw e;\n      }\n      cref.$$autoload[name].required = true;\n      if (cref.$$const[name] != null) {\n        cref.$$autoload[name].success = true;\n        return cref.$$const[name];\n      }\n    } else if (cref.$$autoload[name].loaded && !cref.$$autoload[name].required) {\n      if (cref.$$autoload[name].exception) { throw cref.$$autoload[name].exception; }\n    }\n  }\n\n  // Constants\n  // ---------\n  //\n  // For future reference:\n  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)\n  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)\n  //\n  // Legend of MRI concepts/names:\n  // - constant reference (cref): the module/class that acts as a namespace\n  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside\n  //            `module A; module B::C; end; end` is `[B::C, A]`\n\n  // Get the constant in the scope of the current cref\n  function const_get_name(cref, name) {\n    if (cref) {\n      if (cref.$$const[name] != null) { return cref.$$const[name]; }\n      if (cref.$$autoload && cref.$$autoload[name]) {\n        return handle_autoload(cref, name);\n      }\n    }\n  }\n\n  // Walk up the nesting array looking for the constant\n  function const_lookup_nesting(nesting, name) {\n    var i, ii, constant;\n\n    if (nesting.length === 0) return;\n\n    // If the nesting is not empty the constant is looked up in its elements\n    // and in order. The ancestors of those elements are ignored.\n    for (i = 0, ii = nesting.length; i < ii; i++) {\n      constant = nesting[i].$$const[name];\n      if (constant != null) {\n        return constant;\n      } else if (nesting[i].$$autoload && nesting[i].$$autoload[name]) {\n        return handle_autoload(nesting[i], name);\n      }\n    }\n  }\n\n  // Walk up the ancestors chain looking for the constant\n  function const_lookup_ancestors(cref, name) {\n    var i, ii, ancestors;\n\n    if (cref == null) return;\n\n    ancestors = $ancestors(cref);\n\n    for (i = 0, ii = ancestors.length; i < ii; i++) {\n      if (ancestors[i].$$const && $has_own(ancestors[i].$$const, name)) {\n        return ancestors[i].$$const[name];\n      } else if (ancestors[i].$$autoload && ancestors[i].$$autoload[name]) {\n        return handle_autoload(ancestors[i], name);\n      }\n    }\n  }\n\n  // Walk up Object's ancestors chain looking for the constant,\n  // but only if cref is missing or a module.\n  function const_lookup_Object(cref, name) {\n    if (cref == null || cref.$$is_module) {\n      return const_lookup_ancestors(_Object, name);\n    }\n  }\n\n  // Call const_missing if nothing else worked\n  function const_missing(cref, name) {\n    return (cref || _Object).$const_missing(name);\n  }\n\n  // Look for the constant just in the current cref or call `#const_missing`\n  Opal.const_get_local = function(cref, name, skip_missing) {\n    var result;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      $raise(Opal.TypeError, cref.toString() + \" is not a class/module\");\n    }\n\n    result = const_get_name(cref, name);\n    return result != null || skip_missing ? result : const_missing(cref, name);\n  };\n\n  // Look for the constant relative to a cref or call `#const_missing` (when the\n  // constant is prefixed by `::`).\n  Opal.const_get_qualified = function(cref, name, skip_missing) {\n    var result, cache, cached, current_version = Opal.const_cache_version;\n\n    if (name == null) {\n      // A shortpath for calls like ::String => $$$(\"String\")\n      result = const_get_name(_Object, cref);\n\n      if (result != null) return result;\n      return Opal.const_get_qualified(_Object, cref, skip_missing);\n    }\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      $raise(Opal.TypeError, cref.toString() + \" is not a class/module\");\n    }\n\n    if ((cache = cref.$$const_cache) == null) {\n      $prop(cref, '$$const_cache', Object.create(null));\n      cache = cref.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null);\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null || skip_missing ? result : const_missing(cref, name);\n  };\n\n  // Initialize the top level constant cache generation counter\n  Opal.const_cache_version = 1;\n\n  // Look for the constant in the open using the current nesting and the nearest\n  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).\n  Opal.const_get_relative = function(nesting, name, skip_missing) {\n    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;\n\n    if ((cache = nesting.$$const_cache) == null) {\n      $prop(nesting, '$$const_cache', Object.create(null));\n      cache = nesting.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_nesting(nesting, name))     != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null) ||\n      ((result = const_lookup_Object(cref, name))         != null);\n\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null || skip_missing ? result : const_missing(cref, name);\n  };\n\n  // Register the constant on a cref and opportunistically set the name of\n  // unnamed classes/modules.\n  function $const_set(cref, name, value) {\n    var new_const = true;\n\n    if (cref == null || cref === '::') cref = _Object;\n\n    if (value.$$is_a_module) {\n      if (value.$$name == null || value.$$name === nil) value.$$name = name;\n      if (value.$$base_module == null) value.$$base_module = cref;\n    }\n\n    cref.$$const = (cref.$$const || Object.create(null));\n\n    if (name in cref.$$const || (\"$$autoload\" in cref && name in cref.$$autoload)) {\n      new_const = false;\n    }\n\n    cref.$$const[name] = value;\n\n    // Add a short helper to navigate constants manually.\n    // @example\n    //   Opal.$$.Regexp.$$.IGNORECASE\n    cref.$$ = cref.$$const;\n\n    Opal.const_cache_version++;\n\n    // Expose top level constants onto the Opal object\n    if (cref === _Object) Opal[name] = value;\n\n    // Name new class directly onto current scope (Opal.Foo.Baz = klass)\n    $prop(cref, name, value);\n\n    if (new_const && cref.$const_added && !cref.$const_added.$$pristine) {\n      cref.$const_added(name);\n    }\n\n    return value;\n  };\n\n  Opal.const_set = $const_set;\n\n  // Get all the constants reachable from a given cref, by default will include\n  // inherited constants.\n  Opal.constants = function(cref, inherit) {\n    if (inherit == null) inherit = true;\n\n    var module, modules = [cref], i, ii, constants = {}, constant;\n\n    if (inherit) modules = modules.concat($ancestors(cref));\n    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat($ancestors(Opal.Object));\n\n    for (i = 0, ii = modules.length; i < ii; i++) {\n      module = modules[i];\n\n      // Do not show Objects constants unless we're querying Object itself\n      if (cref !== _Object && module == _Object) break;\n\n      for (constant in module.$$const) {\n        constants[constant] = true;\n      }\n      if (module.$$autoload) {\n        for (constant in module.$$autoload) {\n          constants[constant] = true;\n        }\n      }\n    }\n\n    return Object.keys(constants);\n  };\n\n  // Remove a constant from a cref.\n  Opal.const_remove = function(cref, name) {\n    Opal.const_cache_version++;\n\n    if (cref.$$const[name] != null) {\n      var old = cref.$$const[name];\n      delete cref.$$const[name];\n      return old;\n    }\n\n    if (cref.$$autoload && cref.$$autoload[name]) {\n      delete cref.$$autoload[name];\n      return nil;\n    }\n\n    $raise(Opal.NameError, \"constant \"+cref+\"::\"+cref.$name()+\" not defined\");\n  };\n\n  // Generates a function that is a curried const_get_relative.\n  Opal.const_get_relative_factory = function(nesting) {\n    return function(name, skip_missing) {\n      return Opal.$$(nesting, name, skip_missing);\n    }\n  }\n\n  // Setup some shortcuts to reduce compiled size\n  Opal.$$ = Opal.const_get_relative;\n  Opal.$$$ = Opal.const_get_qualified;\n  Opal.$r = Opal.const_get_relative_factory;\n\n  // Modules & Classes\n  // -----------------\n\n  // A `class Foo; end` expression in ruby is compiled to call this runtime\n  // method which either returns an existing class of the given name, or creates\n  // a new class in the given `base` scope.\n  //\n  // If a constant with the given name exists, then we check to make sure that\n  // it is a class and also that the superclasses match. If either of these\n  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one\n  // was not specified in the ruby code.\n  //\n  // We pass a constructor to this method of the form `function ClassName() {}`\n  // simply so that classes show up with nicely formatted names inside debuggers\n  // in the web browser (or node/sprockets).\n  //\n  // The `scope` is the current `self` value where the class is being created\n  // from. We use this to get the scope for where the class should be created.\n  // If `scope` is an object (not a class/module), we simple get its class and\n  // use that as the scope instead.\n  //\n  // @param scope        [Object] where the class is being created\n  // @param superclass   [Class,null] superclass of the new class (may be null)\n  // @param singleton    [Boolean,null] a true value denotes we want to allocate\n  //                                    a singleton\n  //\n  // @return new [Class]  or existing ruby class\n  //\n  function $allocate_class(name, superclass, singleton) {\n    var klass;\n\n    if (superclass != null && superclass.$$bridge) {\n      // Inheritance from bridged classes requires\n      // calling original JS constructors\n      klass = function() {\n        var args = $slice(arguments),\n            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();\n\n        // and replacing a __proto__ manually\n        $set_proto(self, klass.$$prototype);\n        return self;\n      }\n    } else {\n      klass = function(){};\n    }\n\n    if (name && name !== nil) {\n      $prop(klass, 'displayName', '::'+name);\n    }\n\n    $prop(klass, '$$name', name);\n    $prop(klass, '$$constructor', klass);\n    $prop(klass, '$$prototype', klass.prototype);\n    $prop(klass, '$$const', {});\n    $prop(klass, '$$is_class', true);\n    $prop(klass, '$$is_a_module', true);\n    $prop(klass, '$$super', superclass);\n    $prop(klass, '$$cvars', {});\n    $prop(klass, '$$own_included_modules', []);\n    $prop(klass, '$$own_prepended_modules', []);\n    $prop(klass, '$$ancestors', []);\n    $prop(klass, '$$ancestors_cache_version', null);\n    $prop(klass, '$$subclasses', []);\n\n    $prop(klass.$$prototype, '$$class', klass);\n\n    // By default if there are no singleton class methods\n    // __proto__ is Class.prototype\n    // Later singleton methods generate a singleton_class\n    // and inject it into ancestors chain\n    if (Opal.Class) {\n      $set_proto(klass, Opal.Class.prototype);\n    }\n\n    if (superclass != null) {\n      $set_proto(klass.$$prototype, superclass.$$prototype);\n\n      if (singleton !== true) {\n        // Let's not forbid GC from cleaning up our\n        // subclasses.\n        if (typeof WeakRef !== 'undefined') {\n          // First, let's clean up our array from empty objects.\n          var i, subclass, rebuilt_subclasses = [];\n          for (i = 0; i < superclass.$$subclasses.length; i++) {\n            subclass = superclass.$$subclasses[i];\n            if (subclass.deref() !== undefined) {\n              rebuilt_subclasses.push(subclass);\n            }\n          }\n          // Now, let's add our class.\n          rebuilt_subclasses.push(new WeakRef(klass));\n          superclass.$$subclasses = rebuilt_subclasses;\n        }\n        else {\n          superclass.$$subclasses.push(klass);\n        }\n      }\n\n      if (superclass.$$meta) {\n        // If superclass has metaclass then we have explicitely inherit it.\n        Opal.build_class_singleton_class(klass);\n      }\n    }\n\n    return klass;\n  };\n  Opal.allocate_class = $allocate_class;\n\n\n  function find_existing_class(scope, name) {\n    // Try to find the class in the current scope\n    var klass = const_get_name(scope, name);\n\n    // If the class exists in the scope, then we must use that\n    if (klass) {\n      // Make sure the existing constant is a class, or raise error\n      if (!klass.$$is_class) {\n        $raise(Opal.TypeError, name + \" is not a class\");\n      }\n\n      return klass;\n    }\n  }\n\n  function ensureSuperclassMatch(klass, superclass) {\n    if (klass.$$super !== superclass) {\n      $raise(Opal.TypeError, \"superclass mismatch for class \" + klass.$$name);\n    }\n  }\n\n  Opal.klass = function(scope, superclass, name) {\n    var bridged;\n\n    if (scope == null || scope == '::') {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    // If the superclass is not an Opal-generated class then we're bridging a native JS class\n    if (\n      superclass != null && (!superclass.hasOwnProperty || (\n        superclass.hasOwnProperty && !superclass.hasOwnProperty('$$is_class')\n      ))\n    ) {\n      if (superclass.constructor && superclass.constructor.name == \"Function\") {\n        bridged = superclass;\n        superclass = _Object;\n      } else {\n        $raise(Opal.TypeError, \"superclass must be a Class (\" + (\n          (superclass.constructor && (superclass.constructor.name || superclass.constructor.$$name)) ||\n          typeof(superclass)\n        ) + \" given)\");\n      }\n    }\n\n    var klass = find_existing_class(scope, name);\n\n    if (klass != null) {\n      if (superclass) {\n        // Make sure existing class has same superclass\n        ensureSuperclassMatch(klass, superclass);\n      }\n    }\n    else {\n      // Class doesn't exist, create a new one with given superclass...\n\n      // Not specifying a superclass means we can assume it to be Object\n      if (superclass == null) {\n        superclass = _Object;\n      }\n\n      // Create the class object (instance of Class)\n      klass = $allocate_class(name, superclass);\n      $const_set(scope, name, klass);\n\n      // Call .inherited() hook with new class on the superclass\n      if (superclass.$inherited) {\n        superclass.$inherited(klass);\n      }\n\n      if (bridged) {\n        Opal.bridge(bridged, klass);\n      }\n    }\n\n    if (Opal.trace_class) { invoke_tracers_for_class(klass); }\n\n    return klass;\n  };\n\n  // Define new module (or return existing module). The given `scope` is basically\n  // the current `self` value the `module` statement was defined in. If this is\n  // a ruby module or class, then it is used, otherwise if the scope is a ruby\n  // object then that objects real ruby class is used (e.g. if the scope is the\n  // main object, then the top level `Object` class is used as the scope).\n  //\n  // If a module of the given name is already defined in the scope, then that\n  // instance is just returned.\n  //\n  // If there is a class of the given name in the scope, then an error is\n  // generated instead (cannot have a class and module of same name in same scope).\n  //\n  // Otherwise, a new module is created in the scope with the given name, and that\n  // new instance is returned back (to be referenced at runtime).\n  //\n  // @param  scope [Module, Class] class or module this definition is inside\n  // @param  id   [String] the name of the new (or existing) module\n  //\n  // @return [Module]\n  function $allocate_module(name) {\n    var constructor = function(){};\n    var module = constructor;\n\n    if (name)\n      $prop(constructor, 'displayName', name+'.constructor');\n\n    $prop(module, '$$name', name);\n    $prop(module, '$$prototype', constructor.prototype);\n    $prop(module, '$$const', {});\n    $prop(module, '$$is_module', true);\n    $prop(module, '$$is_a_module', true);\n    $prop(module, '$$cvars', {});\n    $prop(module, '$$iclasses', []);\n    $prop(module, '$$own_included_modules', []);\n    $prop(module, '$$own_prepended_modules', []);\n    $prop(module, '$$ancestors', [module]);\n    $prop(module, '$$ancestors_cache_version', null);\n\n    $set_proto(module, Opal.Module.prototype);\n\n    return module;\n  };\n  Opal.allocate_module = $allocate_module;\n\n  function find_existing_module(scope, name) {\n    var module = const_get_name(scope, name);\n    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);\n\n    if (module) {\n      if (!module.$$is_module && module !== _Object) {\n        $raise(Opal.TypeError, name + \" is not a module\");\n      }\n    }\n\n    return module;\n  }\n\n  Opal.module = function(scope, name) {\n    var module;\n\n    if (scope == null || scope == '::') {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    module = find_existing_module(scope, name);\n\n    if (module == null) {\n      // Module doesnt exist, create a new one...\n      module = $allocate_module(name);\n      $const_set(scope, name, module);\n    }\n\n    if (Opal.trace_class) { invoke_tracers_for_class(module); }\n\n    return module;\n  };\n\n  // Return the singleton class for the passed object.\n  //\n  // If the given object alredy has a singleton class, then it will be stored on\n  // the object as the `$$meta` property. If this exists, then it is simply\n  // returned back.\n  //\n  // Otherwise, a new singleton object for the class or object is created, set on\n  // the object at `$$meta` for future use, and then returned.\n  //\n  // @param object [Object] the ruby object\n  // @return [Class] the singleton class for object\n  Opal.get_singleton_class = function(object) {\n    if (object.$$is_number) {\n      $raise(Opal.TypeError, \"can't define singleton\");\n    }\n    if (object.$$meta) {\n      return object.$$meta;\n    }\n\n    if (object.hasOwnProperty('$$is_class')) {\n      return Opal.build_class_singleton_class(object);\n    } else if (object.hasOwnProperty('$$is_module')) {\n      return Opal.build_module_singleton_class(object);\n    } else {\n      return Opal.build_object_singleton_class(object);\n    }\n  };\n\n  // helper to set $$meta on klass, module or instance\n  function set_meta(obj, meta) {\n    if (obj.hasOwnProperty('$$meta')) {\n      obj.$$meta = meta;\n    } else {\n      $prop(obj, '$$meta', meta);\n    }\n    if (obj.$$frozen) {\n      // If a object is frozen (sealed), freeze $$meta too.\n      // No need to inject $$meta.$$prototype in the prototype chain,\n      // as $$meta cannot be modified anyway.\n      obj.$$meta.$freeze();\n    } else {\n      $set_proto(obj, meta.$$prototype);\n    }\n  };\n\n  // Build the singleton class for an existing class. Class object are built\n  // with their singleton class already in the prototype chain and inheriting\n  // from their superclass object (up to `Class` itself).\n  //\n  // NOTE: Actually in MRI a class' singleton class inherits from its\n  // superclass' singleton class which in turn inherits from Class.\n  //\n  // @param klass [Class]\n  // @return [Class]\n  Opal.build_class_singleton_class = function(klass) {\n    if (klass.$$meta) {\n      return klass.$$meta;\n    }\n\n    // The singleton_class superclass is the singleton_class of its superclass;\n    // but BasicObject has no superclass (its `$$super` is null), thus we\n    // fallback on `Class`.\n    var superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);\n\n    var meta = $allocate_class(null, superclass, true);\n\n    $prop(meta, '$$is_singleton', true);\n    $prop(meta, '$$singleton_of', klass);\n    set_meta(klass, meta);\n    // Restoring ClassName.class\n    $prop(klass, '$$class', Opal.Class);\n\n    return meta;\n  };\n\n  Opal.build_module_singleton_class = function(mod) {\n    if (mod.$$meta) {\n      return mod.$$meta;\n    }\n\n    var meta = $allocate_class(null, Opal.Module, true);\n\n    $prop(meta, '$$is_singleton', true);\n    $prop(meta, '$$singleton_of', mod);\n    set_meta(mod, meta);\n    // Restoring ModuleName.class\n    $prop(mod, '$$class', Opal.Module);\n\n    return meta;\n  };\n\n  // Build the singleton class for a Ruby (non class) Object.\n  //\n  // @param object [Object]\n  // @return [Class]\n  Opal.build_object_singleton_class = function(object) {\n    var superclass = object.$$class,\n        klass = $allocate_class(nil, superclass, true);\n\n    $prop(klass, '$$is_singleton', true);\n    $prop(klass, '$$singleton_of', object);\n\n    delete klass.$$prototype.$$class;\n\n    set_meta(object, klass);\n\n    return klass;\n  };\n\n  Opal.is_method = function(prop) {\n    return (prop[0] === '$' && prop[1] !== '$');\n  };\n\n  Opal.instance_methods = function(mod) {\n    var exclude = [], results = [], ancestors = $ancestors(mod);\n\n    for (var i = 0, l = ancestors.length; i < l; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      var props = Object.getOwnPropertyNames(proto);\n\n      for (var j = 0, ll = props.length; j < ll; j++) {\n        var prop = props[j];\n\n        if (Opal.is_method(prop)) {\n          var method_name = prop.slice(1),\n              method = proto[prop];\n\n          if (method.$$stub && exclude.indexOf(method_name) === -1) {\n            exclude.push(method_name);\n          }\n\n          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {\n            results.push(method_name);\n          }\n        }\n      }\n    }\n\n    return results;\n  };\n\n  Opal.own_instance_methods = function(mod) {\n    var results = [],\n        proto = mod.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0, length = props.length; i < length; i++) {\n      var prop = props[i];\n\n      if (Opal.is_method(prop)) {\n        var method = proto[prop];\n\n        if (!method.$$stub) {\n          var method_name = prop.slice(1);\n          results.push(method_name);\n        }\n      }\n    }\n\n    return results;\n  };\n\n  Opal.methods = function(obj) {\n    return Opal.instance_methods(obj.$$meta || obj.$$class);\n  };\n\n  Opal.own_methods = function(obj) {\n    return obj.$$meta ? Opal.own_instance_methods(obj.$$meta) : [];\n  };\n\n  Opal.receiver_methods = function(obj) {\n    var mod = Opal.get_singleton_class(obj);\n    var singleton_methods = Opal.own_instance_methods(mod);\n    var instance_methods = Opal.own_instance_methods(mod.$$super);\n    return singleton_methods.concat(instance_methods);\n  };\n\n  // Returns an object containing all pairs of names/values\n  // for all class variables defined in provided +module+\n  // and its ancestors.\n  //\n  // @param module [Module]\n  // @return [Object]\n  Opal.class_variables = function(module) {\n    var ancestors = $ancestors(module),\n        i, length = ancestors.length,\n        result = {};\n\n    for (i = length - 1; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      for (var cvar in ancestor.$$cvars) {\n        result[cvar] = ancestor.$$cvars[cvar];\n      }\n    }\n\n    return result;\n  };\n\n  // Sets class variable with specified +name+ to +value+\n  // in provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  // @param value [Object]\n  Opal.class_variable_set = function(module, name, value) {\n    var ancestors = $ancestors(module),\n        i, length = ancestors.length;\n\n    for (i = length - 2; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      if ($has_own(ancestor.$$cvars, name)) {\n        ancestor.$$cvars[name] = value;\n        return value;\n      }\n    }\n\n    module.$$cvars[name] = value;\n\n    return value;\n  };\n\n  // Gets class variable with specified +name+ from provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  Opal.class_variable_get = function(module, name, tolerant) {\n    if ($has_own(module.$$cvars, name))\n      return module.$$cvars[name];\n\n    var ancestors = $ancestors(module),\n      i, length = ancestors.length;\n\n    for (i = 0; i < length; i++) {\n      var ancestor = ancestors[i];\n\n      if ($has_own(ancestor.$$cvars, name)) {\n        return ancestor.$$cvars[name];\n      }\n    }\n\n    if (!tolerant)\n      $raise(Opal.NameError, 'uninitialized class variable '+name+' in '+module.$name());\n\n    return nil;\n  }\n\n  function isRoot(proto) {\n    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');\n  }\n\n  function own_included_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    while (proto) {\n      if (proto.hasOwnProperty('$$class')) {\n        // superclass\n        break;\n      }\n      mod = protoToModule(proto);\n      if (mod) {\n        result.push(mod);\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return result;\n  }\n\n  function own_prepended_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    if (module.$$prototype.hasOwnProperty('$$dummy')) {\n      while (proto) {\n        if (proto === module.$$prototype.$$define_methods_on) {\n          break;\n        }\n\n        mod = protoToModule(proto);\n        if (mod) {\n          result.push(mod);\n        }\n\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n\n    return result;\n  }\n\n\n  // The actual inclusion of a module into a class.\n  //\n  // ## Class `$$parent` and `iclass`\n  //\n  // To handle `super` calls, every class has a `$$parent`. This parent is\n  // used to resolve the next class for a super call. A normal class would\n  // have this point to its superclass. However, if a class includes a module\n  // then this would need to take into account the module. The module would\n  // also have to then point its `$$parent` to the actual superclass. We\n  // cannot modify modules like this, because it might be included in more\n  // then one class. To fix this, we actually insert an `iclass` as the class'\n  // `$$parent` which can then point to the superclass. The `iclass` acts as\n  // a proxy to the actual module, so the `super` chain can then search it for\n  // the required method.\n  //\n  // @param module [Module] the module to include\n  // @param includer [Module] the target class to include module into\n  // @return [null]\n  Opal.append_features = function(module, includer) {\n    var module_ancestors = $ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(includer) !== -1) {\n      $raise(Opal.ArgumentError, 'cyclic include detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $prop(iclass, '$$included', true);\n      iclasses.push(iclass);\n    }\n    var includer_ancestors = $ancestors(includer),\n        chain = chain_iclasses(iclasses),\n        start_chain_after,\n        end_chain_on;\n\n    if (includer_ancestors.indexOf(module) === -1) {\n      // first time include\n\n      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent\n      start_chain_after = includer.$$prototype;\n      end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n    } else {\n      // The module has been already included,\n      // we don't need to put it into the ancestors chain again,\n      // but this module may have new included modules.\n      // If it's true we need to copy them.\n      //\n      // The simplest way is to replace ancestors chain from\n      //          parent\n      //            |\n      //   `module` iclass (has a $$root flag)\n      //            |\n      //   ...previos chain of module.included_modules ...\n      //            |\n      //  \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // to\n      //          parent\n      //            |\n      //    `module` iclass (has a $$root flag)\n      //            |\n      //   ...regenerated chain of module.included_modules\n      //            |\n      //   \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // because there are no intermediate classes between `parent` and `next ancestor`.\n      // It doesn't break any prototypes of other objects as we don't change class references.\n\n      var parent = includer.$$prototype, module_iclass = Object.getPrototypeOf(parent);\n\n      while (module_iclass != null) {\n        if (module_iclass.$$module === module && isRoot(module_iclass)) {\n          break;\n        }\n\n        parent = module_iclass;\n        module_iclass = Object.getPrototypeOf(module_iclass);\n      }\n\n      if (module_iclass) {\n        // module has been directly included\n        var next_ancestor = Object.getPrototypeOf(module_iclass);\n\n        // skip non-root iclasses (that were recursively included)\n        while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {\n          next_ancestor = Object.getPrototypeOf(next_ancestor);\n        }\n\n        start_chain_after = parent;\n        end_chain_on = next_ancestor;\n      } else {\n        // module has not been directly included but was in ancestor chain because it was included by another module\n        // include it directly\n        start_chain_after = includer.$$prototype;\n        end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n      }\n    }\n\n    $set_proto(start_chain_after, chain.first);\n    $set_proto(chain.last, end_chain_on);\n\n    // recalculate own_included_modules cache\n    includer.$$own_included_modules = own_included_modules(includer);\n\n    Opal.const_cache_version++;\n  };\n\n  Opal.prepend_features = function(module, prepender) {\n    // Here we change the ancestors chain from\n    //\n    //   prepender\n    //      |\n    //    parent\n    //\n    // to:\n    //\n    // dummy(prepender)\n    //      |\n    //  iclass(module)\n    //      |\n    // iclass(prepender)\n    //      |\n    //    parent\n    var module_ancestors = $ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(prepender) !== -1) {\n      $raise(Opal.ArgumentError, 'cyclic prepend detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $prop(iclass, '$$prepended', true);\n      iclasses.push(iclass);\n    }\n\n    var chain = chain_iclasses(iclasses),\n        dummy_prepender = prepender.$$prototype,\n        previous_parent = Object.getPrototypeOf(dummy_prepender),\n        prepender_iclass,\n        start_chain_after,\n        end_chain_on;\n\n    if (dummy_prepender.hasOwnProperty('$$dummy')) {\n      // The module already has some prepended modules\n      // which means that we don't need to make it \"dummy\"\n      prepender_iclass = dummy_prepender.$$define_methods_on;\n    } else {\n      // Making the module \"dummy\"\n      prepender_iclass = create_dummy_iclass(prepender);\n      flush_methods_in(prepender);\n      $prop(dummy_prepender, '$$dummy', true);\n      $prop(dummy_prepender, '$$define_methods_on', prepender_iclass);\n\n      // Converting\n      //   dummy(prepender) -> previous_parent\n      // to\n      //   dummy(prepender) -> iclass(prepender) -> previous_parent\n      $set_proto(dummy_prepender, prepender_iclass);\n      $set_proto(prepender_iclass, previous_parent);\n    }\n\n    var prepender_ancestors = $ancestors(prepender);\n\n    if (prepender_ancestors.indexOf(module) === -1) {\n      // first time prepend\n\n      start_chain_after = dummy_prepender;\n\n      // next $$root or prepender_iclass or non-$$iclass\n      end_chain_on = Object.getPrototypeOf(dummy_prepender);\n      while (end_chain_on != null) {\n        if (\n          end_chain_on.hasOwnProperty('$$root') ||\n          end_chain_on === prepender_iclass ||\n          !end_chain_on.hasOwnProperty('$$iclass')\n        ) {\n          break;\n        }\n\n        end_chain_on = Object.getPrototypeOf(end_chain_on);\n      }\n    } else {\n      $raise(Opal.RuntimeError, \"Prepending a module multiple times is not supported\");\n    }\n\n    $set_proto(start_chain_after, chain.first);\n    $set_proto(chain.last, end_chain_on);\n\n    // recalculate own_prepended_modules cache\n    prepender.$$own_prepended_modules = own_prepended_modules(prepender);\n\n    Opal.const_cache_version++;\n  };\n\n  function flush_methods_in(module) {\n    var proto = module.$$prototype,\n        props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      if (Opal.is_method(prop)) {\n        delete proto[prop];\n      }\n    }\n  }\n\n  function create_iclass(module) {\n    var iclass = create_dummy_iclass(module);\n\n    if (module.$$is_module) {\n      module.$$iclasses.push(iclass);\n    }\n\n    return iclass;\n  }\n\n  // Dummy iclass doesn't receive updates when the module gets a new method.\n  function create_dummy_iclass(module) {\n    var iclass = {},\n        proto = module.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto),\n        length = props.length, i;\n\n    for (i = 0; i < length; i++) {\n      var prop = props[i];\n      $prop(iclass, prop, proto[prop]);\n    }\n\n    $prop(iclass, '$$iclass', true);\n    $prop(iclass, '$$module', module);\n\n    return iclass;\n  }\n\n  function chain_iclasses(iclasses) {\n    var length = iclasses.length, first = iclasses[0];\n\n    $prop(first, '$$root', true);\n\n    if (length === 1) {\n      return { first: first, last: first };\n    }\n\n    var previous = first;\n\n    for (var i = 1; i < length; i++) {\n      var current = iclasses[i];\n      $set_proto(previous, current);\n      previous = current;\n    }\n\n\n    return { first: iclasses[0], last: iclasses[length - 1] };\n  }\n\n  // For performance, some core Ruby classes are toll-free bridged to their\n  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).\n  //\n  // This method is used to setup a native constructor (e.g. Array), to have\n  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is\n  // created using the native constructor so that its prototype is set as the\n  // target for the new class. Note: all bridged classes are set to inherit\n  // from Object.\n  //\n  // Example:\n  //\n  //    Opal.bridge(self, Function);\n  //\n  // @param klass       [Class] the Ruby class to bridge\n  // @param constructor [JS.Function] native JavaScript constructor to use\n  // @return [Class] returns the passed Ruby class\n  //\n  Opal.bridge = function(native_klass, klass) {\n    if (native_klass.hasOwnProperty('$$bridge')) {\n      $raise(Opal.ArgumentError, \"already bridged\");\n    }\n\n    // constructor is a JS function with a prototype chain like:\n    // - constructor\n    //   - super\n    //\n    // What we need to do is to inject our class (with its prototype chain)\n    // between constructor and super. For example, after injecting ::Object\n    // into JS String we get:\n    //\n    // - constructor (window.String)\n    //   - Opal.Object\n    //     - Opal.Kernel\n    //       - Opal.BasicObject\n    //         - super (window.Object)\n    //           - null\n    //\n    $prop(native_klass, '$$bridge', klass);\n    $set_proto(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);\n    $prop(klass, '$$prototype', native_klass.prototype);\n\n    $prop(klass.$$prototype, '$$class', klass);\n    $prop(klass, '$$constructor', native_klass);\n    $prop(klass, '$$bridge', true);\n  };\n\n  function protoToModule(proto) {\n    if (proto.hasOwnProperty('$$dummy')) {\n      return;\n    } else if (proto.hasOwnProperty('$$iclass')) {\n      return proto.$$module;\n    } else if (proto.hasOwnProperty('$$class')) {\n      return proto.$$class;\n    }\n  }\n\n  function own_ancestors(module) {\n    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);\n  }\n\n  // The Array of ancestors for a given module/class\n  function $ancestors(module) {\n    if (!module) { return []; }\n\n    if (module.$$ancestors_cache_version === Opal.const_cache_version) {\n      return module.$$ancestors;\n    }\n\n    var result = [], i, mods, length;\n\n    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {\n      result.push(mods[i]);\n    }\n\n    if (module.$$super) {\n      for (i = 0, mods = $ancestors(module.$$super), length = mods.length; i < length; i++) {\n        result.push(mods[i]);\n      }\n    }\n\n    module.$$ancestors_cache_version = Opal.const_cache_version;\n    module.$$ancestors = result;\n\n    return result;\n  };\n  Opal.ancestors = $ancestors;\n\n  Opal.included_modules = function(module) {\n    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);\n\n    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {\n      mod = protoToModule(proto);\n      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {\n        result.push(mod);\n      }\n    }\n\n    return result;\n  };\n\n\n  // Method Missing\n  // --------------\n\n  // Methods stubs are used to facilitate method_missing in opal. A stub is a\n  // placeholder function which just calls `method_missing` on the receiver.\n  // If no method with the given name is actually defined on an object, then it\n  // is obvious to say that the stub will be called instead, and then in turn\n  // method_missing will be called.\n  //\n  // When a file in ruby gets compiled to javascript, it includes a call to\n  // this function which adds stubs for every method name in the compiled file.\n  // It should then be safe to assume that method_missing will work for any\n  // method call detected.\n  //\n  // Method stubs are added to the BasicObject prototype, which every other\n  // ruby object inherits, so all objects should handle method missing. A stub\n  // is only added if the given property name (method name) is not already\n  // defined.\n  //\n  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will\n  // have this prefix as well (to make this method more performant).\n  //\n  //    Opal.add_stubs(\"foo,bar,baz=\");\n  //\n  // All stub functions will have a private `$$stub` property set to true so\n  // that other internal methods can detect if a method is just a stub or not.\n  // `Kernel#respond_to?` uses this property to detect a methods presence.\n  //\n  // @param stubs [Array] an array of method stubs to add\n  // @return [undefined]\n  Opal.add_stubs = function(stubs) {\n    var proto = Opal.BasicObject.$$prototype;\n    var stub, existing_method;\n    stubs = stubs.split(',');\n\n    for (var i = 0, length = stubs.length; i < length; i++) {\n      stub = $jsid(stubs[i]), existing_method = proto[stub];\n\n      if (existing_method == null || existing_method.$$stub) {\n        Opal.add_stub_for(proto, stub);\n      }\n    }\n  };\n\n  // Add a method_missing stub function to the given prototype for the\n  // given name.\n  //\n  // @param prototype [Prototype] the target prototype\n  // @param stub [String] stub name to add (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.add_stub_for = function(prototype, stub) {\n    // Opal.stub_for(stub) is the method_missing_stub\n    $prop(prototype, stub, Opal.stub_for(stub));\n  };\n\n  // Generate the method_missing stub for a given method name.\n  //\n  // @param method_name [String] The js-name of the method to stub (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.stub_for = function(method_name) {\n\n    function method_missing_stub() {\n      // Copy any given block onto the method_missing dispatcher\n      this.$method_missing.$$p = method_missing_stub.$$p;\n\n      // Set block property to null ready for the next call (stop false-positives)\n      method_missing_stub.$$p = null;\n\n      // call method missing with correct args (remove '$' prefix on method name)\n      var args_ary = new Array(arguments.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }\n\n      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));\n    }\n\n    method_missing_stub.$$stub = true;\n\n    return method_missing_stub;\n  };\n\n\n  // Methods\n  // -------\n\n  // Arity count error dispatcher for methods\n  //\n  // @param actual [Fixnum] number of arguments given to method\n  // @param expected [Fixnum] expected number of arguments\n  // @param object [Object] owner of the method +meth+\n  // @param meth [String] method name that got wrong number of arguments\n  // @raise [ArgumentError]\n  Opal.ac = function(actual, expected, object, meth) {\n    var inspect = '';\n    if (object.$$is_a_module) {\n      inspect += object.$$name + '.';\n    }\n    else {\n      inspect += object.$$class.$$name + '#';\n    }\n    inspect += meth;\n\n    $raise(Opal.ArgumentError, '[' + inspect + '] wrong number of arguments (given ' + actual + ', expected ' + expected + ')');\n  };\n\n  // Arity count error dispatcher for blocks\n  //\n  // @param actual [Fixnum] number of arguments given to block\n  // @param expected [Fixnum] expected number of arguments\n  // @param context [Object] context of the block definition\n  // @raise [ArgumentError]\n  Opal.block_ac = function(actual, expected, context) {\n    var inspect = \"`block in \" + context + \"'\";\n\n    $raise(Opal.ArgumentError, inspect + ': wrong number of arguments (given ' + actual + ', expected ' + expected + ')');\n  };\n\n  function get_ancestors(obj) {\n    if (obj.hasOwnProperty('$$meta') && obj.$$meta !== null) {\n      return $ancestors(obj.$$meta);\n    } else {\n      return $ancestors(obj.$$class);\n    }\n  };\n\n  // Super dispatcher\n  Opal.find_super = function(obj, mid, current_func, defcheck, allow_stubs) {\n    var jsid = $jsid(mid), ancestors, super_method;\n\n    ancestors = get_ancestors(obj);\n\n    var current_index = ancestors.indexOf(current_func.$$owner);\n\n    for (var i = current_index + 1; i < ancestors.length; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      if (proto.hasOwnProperty(jsid)) {\n        super_method = proto[jsid];\n        break;\n      }\n    }\n\n    if (!defcheck && super_method && super_method.$$stub && obj.$method_missing.$$pristine) {\n      // method_missing hasn't been explicitly defined\n      $raise(Opal.NoMethodError, 'super: no superclass method `'+mid+\"' for \"+obj, mid);\n    }\n\n    return (super_method.$$stub && !allow_stubs) ? null : super_method;\n  };\n\n  // Iter dispatcher for super in a block\n  Opal.find_block_super = function(obj, jsid, current_func, defcheck, implicit) {\n    var call_jsid = jsid;\n\n    if (!current_func) {\n      $raise(Opal.RuntimeError, \"super called outside of method\");\n    }\n\n    if (implicit && current_func.$$define_meth) {\n      $raise(Opal.RuntimeError,\n        \"implicit argument passing of super from method defined by define_method() is not supported. \" +\n        \"Specify all arguments explicitly\"\n      );\n    }\n\n    if (current_func.$$def) {\n      call_jsid = current_func.$$jsid;\n    }\n\n    return Opal.find_super(obj, call_jsid, current_func, defcheck);\n  };\n\n  // @deprecated\n  Opal.find_super_dispatcher = Opal.find_super;\n\n  // @deprecated\n  Opal.find_iter_super_dispatcher = Opal.find_block_super;\n\n  // handles yield calls for 1 yielded arg\n  Opal.yield1 = function(block, arg) {\n    if (typeof(block) !== \"function\") {\n      $raise(Opal.LocalJumpError, \"no block given\");\n    }\n\n    var has_mlhs = block.$$has_top_level_mlhs_arg,\n        has_trailing_comma = block.$$has_trailing_comma_in_args;\n\n    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {\n      arg = Opal.to_ary(arg);\n    }\n\n    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {\n      return block.apply(null, arg);\n    }\n    else {\n      return block(arg);\n    }\n  };\n\n  // handles yield for > 1 yielded arg\n  Opal.yieldX = function(block, args) {\n    if (typeof(block) !== \"function\") {\n      $raise(Opal.LocalJumpError, \"no block given\");\n    }\n\n    if (block.length > 1 && args.length === 1) {\n      if (args[0].$$is_array) {\n        return block.apply(null, args[0]);\n      }\n    }\n\n    if (!args.$$is_array) {\n      var args_ary = new Array(args.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n      return block.apply(null, args_ary);\n    }\n\n    return block.apply(null, args);\n  };\n\n  // Finds the corresponding exception match in candidates.  Each candidate can\n  // be a value, or an array of values.  Returns null if not found.\n  Opal.rescue = function(exception, candidates) {\n    for (var i = 0; i < candidates.length; i++) {\n      var candidate = candidates[i];\n\n      if (candidate.$$is_array) {\n        var result = Opal.rescue(exception, candidate);\n\n        if (result) {\n          return result;\n        }\n      }\n      else if (candidate === Opal.JS.Error || candidate['$==='](exception)) {\n        return candidate;\n      }\n    }\n\n    return null;\n  };\n\n  Opal.is_a = function(object, klass) {\n    if (klass != null && object.$$meta === klass || object.$$class === klass) {\n      return true;\n    }\n\n    if (object.$$is_number && klass.$$is_number_class) {\n      return (klass.$$is_integer_class) ? (object % 1) === 0 : true;\n    }\n\n    var ancestors = $ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));\n\n    return ancestors.indexOf(klass) !== -1;\n  };\n\n  // Helpers for extracting kwsplats\n  // Used for: { **h }\n  Opal.to_hash = function(value) {\n    if (value.$$is_hash) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_hash', true)) {\n      var hash = value.$to_hash();\n      if (hash.$$is_hash) {\n        return hash;\n      }\n      else {\n        $raise(Opal.TypeError, \"Can't convert \" + value.$$class +\n          \" to Hash (\" + value.$$class + \"#to_hash gives \" + hash.$$class + \")\");\n      }\n    }\n    else {\n      $raise(Opal.TypeError, \"no implicit conversion of \" + value.$$class + \" into Hash\");\n    }\n  };\n\n  // Helpers for implementing multiple assignment\n  // Our code for extracting the values and assigning them only works if the\n  // return value is a JS array.\n  // So if we get an Array subclass, extract the wrapped JS array from it\n\n  // Used for: a, b = something (no splat)\n  Opal.to_ary = function(value) {\n    if (value.$$is_array) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_ary', true)) {\n      var ary = value.$to_ary();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        $raise(Opal.TypeError, \"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_ary gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for: a, b = *something (with splat)\n  Opal.to_a = function(value) {\n    if (value.$$is_array) {\n      // A splatted array must be copied\n      return value.slice();\n    }\n    else if (value['$respond_to?']('to_a', true)) {\n      var ary = value.$to_a();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        $raise(Opal.TypeError, \"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_a gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for extracting keyword arguments from arguments passed to\n  // JS function. If provided +arguments+ list doesn't have a Hash\n  // as a last item, returns a blank Hash.\n  //\n  // @param parameters [Array]\n  // @return [Hash]\n  //\n  Opal.extract_kwargs = function(parameters) {\n    var kwargs = parameters[parameters.length - 1];\n    if (kwargs != null && Opal.respond_to(kwargs, '$to_hash', true)) {\n      $splice(parameters, parameters.length - 1);\n      return kwargs;\n    }\n  };\n\n  // Used to get a list of rest keyword arguments. Method takes the given\n  // keyword args, i.e. the hash literal passed to the method containing all\n  // keyword arguemnts passed to method, as well as the used args which are\n  // the names of required and optional arguments defined. This method then\n  // just returns all key/value pairs which have not been used, in a new\n  // hash literal.\n  //\n  // @param given_args [Hash] all kwargs given to method\n  // @param used_args [Object<String: true>] all keys used as named kwargs\n  // @return [Hash]\n  //\n  Opal.kwrestargs = function(given_args, used_args) {\n    var keys      = [],\n        map       = {},\n        key           ,\n        given_map = given_args.$$smap;\n\n    for (key in given_map) {\n      if (!used_args[key]) {\n        keys.push(key);\n        map[key] = given_map[key];\n      }\n    }\n\n    return Opal.hash2(keys, map);\n  };\n\n  function apply_blockopts(block, blockopts) {\n    if (typeof(blockopts) === 'number') {\n      block.$$arity = blockopts;\n    }\n    else if (typeof(blockopts) === 'object') {\n      Object.assign(block, blockopts);\n    }\n  }\n\n  // Optimization for a costly operation of prepending '$' to method names\n  var jsid_cache = {}\n  function $jsid(name) {\n    return jsid_cache[name] || (jsid_cache[name] = '$' + name);\n  }\n  Opal.jsid = $jsid;\n\n  // Calls passed method on a ruby object with arguments and block:\n  //\n  // Can take a method or a method name.\n  //\n  // 1. When method name gets passed it invokes it by its name\n  //    and calls 'method_missing' when object doesn't have this method.\n  //    Used internally by Opal to invoke method that takes a block or a splat.\n  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'\n  //    because it doesn't know the name of the actual method.\n  //    Used internally by Opal to invoke 'super'.\n  //\n  // @example\n  //   var my_array = [1, 2, 3, 4]\n  //   Opal.send(my_array, 'length')                    # => 4\n  //   Opal.send(my_array, my_array.$length)            # => 4\n  //\n  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]\n  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]\n  //\n  // @param recv [Object] ruby object\n  // @param method [Function, String] method body or name of the method\n  // @param args [Array] arguments that will be passed to the method call\n  // @param block [Function] ruby block\n  // @param blockopts [Object, Number] optional properties to set on the block\n  // @return [Object] returning value of the method call\n  Opal.send = function(recv, method, args, block, blockopts) {\n    var body;\n\n    if (typeof(method) === 'function') {\n      body = method;\n      method = null;\n    } else if (typeof(method) === 'string') {\n      body = recv[$jsid(method)];\n    } else {\n      $raise(Opal.NameError, \"Passed method should be a string or a function\");\n    }\n\n    return Opal.send2(recv, body, method, args, block, blockopts);\n  };\n\n  Opal.send2 = function(recv, body, method, args, block, blockopts) {\n    if (body == null && method != null && recv.$method_missing) {\n      body = recv.$method_missing;\n      args = [method].concat(args);\n    }\n\n    apply_blockopts(block, blockopts);\n\n    if (typeof block === 'function') body.$$p = block;\n    return body.apply(recv, args);\n  };\n\n  Opal.refined_send = function(refinement_groups, recv, method, args, block, blockopts) {\n    var i, j, k, ancestors, ancestor, refinements, refinement, refine_modules, refine_module, body;\n\n    ancestors = get_ancestors(recv);\n\n    // For all ancestors that there are, starting from the closest to the furthest...\n    for (i = 0; i < ancestors.length; i++) {\n      ancestor = Opal.id(ancestors[i]);\n\n      // For all refinement groups there are, starting from the closest scope to the furthest...\n      for (j = 0; j < refinement_groups.length; j++) {\n        refinements = refinement_groups[j];\n\n        // For all refinements there are, starting from the last `using` call to the furthest...\n        for (k = refinements.length - 1; k >= 0; k--) {\n          refinement = refinements[k];\n          if (typeof refinement.$$refine_modules === 'undefined') continue;\n\n          // A single module being given as an argument of the `using` call contains multiple\n          // refinement modules\n          refine_modules = refinement.$$refine_modules;\n\n          // Does this module refine a given call for a given ancestor module?\n          if (typeof refine_modules[ancestor] === 'undefined') continue;\n          refine_module = refine_modules[ancestor];\n\n          // Does this module define a method we want to call?\n          if (typeof refine_module.$$prototype[$jsid(method)] !== 'undefined') {\n            body = refine_module.$$prototype[$jsid(method)];\n            return Opal.send2(recv, body, method, args, block, blockopts);\n          }\n        }\n      }\n    }\n\n    return Opal.send(recv, method, args, block, blockopts);\n  };\n\n  Opal.lambda = function(block, blockopts) {\n    block.$$is_lambda = true;\n\n    apply_blockopts(block, blockopts);\n\n    return block;\n  };\n\n  // Used to define methods on an object. This is a helper method, used by the\n  // compiled source to define methods on special case objects when the compiler\n  // can not determine the destination object, or the object is a Module\n  // instance. This can get called by `Module#define_method` as well.\n  //\n  // ## Modules\n  //\n  // Any method defined on a module will come through this runtime helper.\n  // The method is added to the module body, and the owner of the method is\n  // set to be the module itself. This is used later when choosing which\n  // method should show on a class if more than 1 included modules define\n  // the same method. Finally, if the module is in `module_function` mode,\n  // then the method is also defined onto the module itself.\n  //\n  // ## Classes\n  //\n  // This helper will only be called for classes when a method is being\n  // defined indirectly; either through `Module#define_method`, or by a\n  // literal `def` method inside an `instance_eval` or `class_eval` body. In\n  // either case, the method is simply added to the class' prototype. A special\n  // exception exists for `BasicObject` and `Object`. These two classes are\n  // special because they are used in toll-free bridged classes. In each of\n  // these two cases, extra work is required to define the methods on toll-free\n  // bridged class' prototypes as well.\n  //\n  // ## Objects\n  //\n  // If a simple ruby object is the object, then the method is simply just\n  // defined on the object as a singleton method. This would be the case when\n  // a method is defined inside an `instance_eval` block.\n  //\n  // @param obj  [Object, Class] the actual obj to define method for\n  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')\n  // @param body [JS.Function] the literal JavaScript function used as method\n  // @param blockopts [Object, Number] optional properties to set on the body\n  // @return [null]\n  //\n  Opal.def = function(obj, jsid, body, blockopts) {\n    apply_blockopts(body, blockopts);\n\n    // Special case for a method definition in the\n    // top-level namespace\n    if (obj === Opal.top) {\n      return Opal.defn(Opal.Object, jsid, body);\n    }\n    // if instance_eval is invoked on a module/class, it sets inst_eval_mod\n    else if (!obj.$$eval && obj.$$is_a_module) {\n      return Opal.defn(obj, jsid, body);\n    }\n    else {\n      return Opal.defs(obj, jsid, body);\n    }\n  };\n\n  // Define method on a module or class (see Opal.def).\n  Opal.defn = function(module, jsid, body) {\n    $deny_frozen_access(module);\n\n    body.displayName = jsid;\n    body.$$owner = module;\n\n    var name = jsid.substr(1);\n\n    var proto = module.$$prototype;\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n    $prop(proto, jsid, body);\n\n    if (module.$$is_module) {\n      if (module.$$module_function) {\n        Opal.defs(module, jsid, body)\n      }\n\n      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {\n        var iclass = iclasses[i];\n        $prop(iclass, jsid, body);\n      }\n    }\n\n    var singleton_of = module.$$singleton_of;\n    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {\n      module.$method_added(name);\n    }\n    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {\n      singleton_of.$singleton_method_added(name);\n    }\n\n    return name;\n  };\n\n  // Define a singleton method on the given object (see Opal.def).\n  Opal.defs = function(obj, jsid, body, blockopts) {\n    apply_blockopts(body, blockopts);\n\n    if (obj.$$is_string || obj.$$is_number) {\n      $raise(Opal.TypeError, \"can't define singleton\");\n    }\n    return Opal.defn(Opal.get_singleton_class(obj), jsid, body);\n  };\n\n  // Called from #remove_method.\n  Opal.rdef = function(obj, jsid) {\n    if (!$has_own(obj.$$prototype, jsid)) {\n      $raise(Opal.NameError, \"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    delete obj.$$prototype[jsid];\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {\n        obj.$$prototype.$singleton_method_removed(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_removed && !obj.$method_removed.$$stub) {\n        obj.$method_removed(jsid.substr(1));\n      }\n    }\n  };\n\n  // Called from #undef_method.\n  Opal.udef = function(obj, jsid) {\n    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {\n      $raise(Opal.NameError, \"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    Opal.add_stub_for(obj.$$prototype, jsid);\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {\n        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {\n        obj.$method_undefined(jsid.substr(1));\n      }\n    }\n  };\n\n  function is_method_body(body) {\n    return (typeof(body) === \"function\" && !body.$$stub);\n  }\n\n  Opal.alias = function(obj, name, old) {\n    var id     = $jsid(name),\n        old_id = $jsid(old),\n        body,\n        alias;\n\n    // Aliasing on main means aliasing on Object...\n    if (typeof obj.$$prototype === 'undefined') {\n      obj = Opal.Object;\n    }\n\n    body = obj.$$prototype[old_id];\n\n    // When running inside #instance_eval the alias refers to class methods.\n    if (obj.$$eval) {\n      return Opal.alias(Opal.get_singleton_class(obj), name, old);\n    }\n\n    if (!is_method_body(body)) {\n      var ancestor = obj.$$super;\n\n      while (typeof(body) !== \"function\" && ancestor) {\n        body     = ancestor[old_id];\n        ancestor = ancestor.$$super;\n      }\n\n      if (!is_method_body(body) && obj.$$is_module) {\n        // try to look into Object\n        body = Opal.Object.$$prototype[old_id]\n      }\n\n      if (!is_method_body(body)) {\n        $raise(Opal.NameError, \"undefined method `\" + old + \"' for class `\" + obj.$name() + \"'\")\n      }\n    }\n\n    // If the body is itself an alias use the original body\n    // to keep the max depth at 1.\n    if (body.$$alias_of) body = body.$$alias_of;\n\n    // We need a wrapper because otherwise properties\n    // would be overwritten on the original body.\n    alias = function() {\n      var block = alias.$$p, args, i, ii;\n\n      args = new Array(arguments.length);\n      for(i = 0, ii = arguments.length; i < ii; i++) {\n        args[i] = arguments[i];\n      }\n\n      alias.$$p = null;\n\n      return Opal.send(this, body, args, block);\n    };\n\n    // Assign the 'length' value with defineProperty because\n    // in strict mode the property is not writable.\n    // It doesn't work in older browsers (like Chrome 38), where\n    // an exception is thrown breaking Opal altogether.\n    try {\n      Object.defineProperty(alias, 'length', { value: body.length });\n    } catch (e) {}\n\n    // Try to make the browser pick the right name\n    alias.displayName       = name;\n\n    alias.$$arity           = body.$$arity == null ? body.length : body.$$arity;\n    alias.$$parameters      = body.$$parameters;\n    alias.$$source_location = body.$$source_location;\n    alias.$$alias_of        = body;\n    alias.$$alias_name      = name;\n\n    Opal.defn(obj, id, alias);\n\n    return obj;\n  };\n\n  Opal.alias_gvar = function(new_name, old_name) {\n    Object.defineProperty($gvars, new_name, {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        return $gvars[old_name];\n      },\n      set: function(new_value) {\n        $gvars[old_name] = new_value;\n      }\n    });\n    return nil;\n  }\n\n  Opal.alias_native = function(obj, name, native_name) {\n    var id   = $jsid(name),\n        body = obj.$$prototype[native_name];\n\n    if (typeof(body) !== \"function\" || body.$$stub) {\n      $raise(Opal.NameError, \"undefined native method `\" + native_name + \"' for class `\" + obj.$name() + \"'\")\n    }\n\n    Opal.defn(obj, id, body);\n\n    return obj;\n  };\n\n\n  // Hashes\n  // ------\n\n  Opal.hash_init = function(hash) {\n    hash.$$smap = Object.create(null);\n    hash.$$map  = Object.create(null);\n    hash.$$keys = [];\n  };\n\n  Opal.hash_clone = function(from_hash, to_hash) {\n    to_hash.$$none = from_hash.$$none;\n    to_hash.$$proc = from_hash.$$proc;\n\n    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {\n      key = keys[i];\n\n      if (key.$$is_string) {\n        value = smap[key];\n      } else {\n        value = key.value;\n        key = key.key;\n      }\n\n      Opal.hash_put(to_hash, key, value);\n    }\n  };\n\n  Opal.hash_put = function(hash, key, value) {\n    if (key.$$is_string) {\n      if (!$has_own(hash.$$smap, key)) {\n        hash.$$keys.push(key);\n      }\n      hash.$$smap[key] = value;\n      return;\n    }\n\n    var key_hash, bucket, last_bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if (!$has_own(hash.$$map, key_hash)) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      hash.$$map[key_hash] = bucket;\n      return;\n    }\n\n    bucket = hash.$$map[key_hash];\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        last_bucket = undefined;\n        bucket.value = value;\n        break;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n\n    if (last_bucket) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      last_bucket.next = bucket;\n    }\n  };\n\n  Opal.hash_get = function(hash, key) {\n    if (key.$$is_string) {\n      if ($has_own(hash.$$smap, key)) {\n        return hash.$$smap[key];\n      }\n      return;\n    }\n\n    var key_hash, bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if ($has_own(hash.$$map, key_hash)) {\n      bucket = hash.$$map[key_hash];\n\n      while (bucket) {\n        if (key === bucket.key || key['$eql?'](bucket.key)) {\n          return bucket.value;\n        }\n        bucket = bucket.next;\n      }\n    }\n  };\n\n  Opal.hash_delete = function(hash, key) {\n    var i, keys = hash.$$keys, length = keys.length, value, key_tmp;\n\n    if (key.$$is_string) {\n      if (typeof key !== \"string\") key = key.valueOf();\n\n      if (!$has_own(hash.$$smap, key)) {\n        return;\n      }\n\n      for (i = 0; i < length; i++) {\n        key_tmp = keys[i];\n\n        if (key_tmp.$$is_string && typeof key_tmp !== \"string\") {\n          key_tmp = key_tmp.valueOf();\n        }\n\n        if (key_tmp === key) {\n          keys.splice(i, 1);\n          break;\n        }\n      }\n\n      value = hash.$$smap[key];\n      delete hash.$$smap[key];\n      return value;\n    }\n\n    var key_hash = key.$hash();\n\n    if (!$has_own(hash.$$map, key_hash)) {\n      return;\n    }\n\n    var bucket = hash.$$map[key_hash], last_bucket;\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        value = bucket.value;\n\n        for (i = 0; i < length; i++) {\n          if (keys[i] === bucket) {\n            keys.splice(i, 1);\n            break;\n          }\n        }\n\n        if (last_bucket && bucket.next) {\n          last_bucket.next = bucket.next;\n        }\n        else if (last_bucket) {\n          delete last_bucket.next;\n        }\n        else if (bucket.next) {\n          hash.$$map[key_hash] = bucket.next;\n        }\n        else {\n          delete hash.$$map[key_hash];\n        }\n\n        return value;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n  };\n\n  Opal.hash_rehash = function(hash) {\n    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {\n\n      if (hash.$$keys[i].$$is_string) {\n        continue;\n      }\n\n      key_hash = hash.$$keys[i].key.$hash();\n\n      if (key_hash === hash.$$keys[i].key_hash) {\n        continue;\n      }\n\n      bucket = hash.$$map[hash.$$keys[i].key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          if (last_bucket && bucket.next) {\n            last_bucket.next = bucket.next;\n          }\n          else if (last_bucket) {\n            delete last_bucket.next;\n          }\n          else if (bucket.next) {\n            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;\n          }\n          else {\n            delete hash.$$map[hash.$$keys[i].key_hash];\n          }\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      hash.$$keys[i].key_hash = key_hash;\n\n      if (!$has_own(hash.$$map, key_hash)) {\n        hash.$$map[key_hash] = hash.$$keys[i];\n        continue;\n      }\n\n      bucket = hash.$$map[key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          last_bucket = undefined;\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      if (last_bucket) {\n        last_bucket.next = hash.$$keys[i];\n      }\n    }\n  };\n\n  Opal.hash = function() {\n    var arguments_length = arguments.length, args, hash, i, length, key, value;\n\n    if (arguments_length === 1 && arguments[0].$$is_hash) {\n      return arguments[0];\n    }\n\n    hash = new Opal.Hash();\n    Opal.hash_init(hash);\n\n    if (arguments_length === 1) {\n      args = arguments[0];\n\n      if (arguments[0].$$is_array) {\n        length = args.length;\n\n        for (i = 0; i < length; i++) {\n          if (args[i].length !== 2) {\n            $raise(Opal.ArgumentError, \"value not of length 2: \" + args[i].$inspect());\n          }\n\n          key = args[i][0];\n          value = args[i][1];\n\n          Opal.hash_put(hash, key, value);\n        }\n\n        return hash;\n      }\n      else {\n        args = arguments[0];\n        for (key in args) {\n          if ($has_own(args, key)) {\n            value = args[key];\n\n            Opal.hash_put(hash, key, value);\n          }\n        }\n\n        return hash;\n      }\n    }\n\n    if (arguments_length % 2 !== 0) {\n      $raise(Opal.ArgumentError, \"odd number of arguments for Hash\");\n    }\n\n    for (i = 0; i < arguments_length; i += 2) {\n      key = arguments[i];\n      value = arguments[i + 1];\n\n      Opal.hash_put(hash, key, value);\n    }\n\n    return hash;\n  };\n\n  // A faster Hash creator for hashes that just use symbols and\n  // strings as keys. The map and keys array can be constructed at\n  // compile time, so they are just added here by the constructor\n  // function.\n  //\n  Opal.hash2 = function(keys, smap) {\n    var hash = new Opal.Hash();\n\n    hash.$$smap = smap;\n    hash.$$map  = Object.create(null);\n    hash.$$keys = keys;\n\n    return hash;\n  };\n\n  // Create a new range instance with first and last values, and whether the\n  // range excludes the last value.\n  //\n  Opal.range = function(first, last, exc) {\n    var range         = new Opal.Range();\n        range.begin   = first;\n        range.end     = last;\n        range.excl    = exc;\n\n    return range;\n  };\n\n  var reserved_ivar_names = [\n    // properties\n    \"constructor\", \"displayName\", \"__count__\", \"__noSuchMethod__\",\n    \"__parent__\", \"__proto__\",\n    // methods\n    \"hasOwnProperty\", \"valueOf\"\n  ];\n\n  // Get the ivar name for a given name.\n  // Mostly adds a trailing $ to reserved names.\n  //\n  Opal.ivar = function(name) {\n    if (reserved_ivar_names.indexOf(name) !== -1) {\n      name += \"$\";\n    }\n\n    return name;\n  };\n\n  // Support for #freeze\n  // -------------------\n\n  // helper that can be used from methods\n  function $deny_frozen_access(obj) {\n    if (obj.$$frozen) {\n      $raise(Opal.FrozenError, \"can't modify frozen \" + (obj.$class()) + \": \" + (obj), Opal.hash2([\"receiver\"], {\"receiver\": obj}));\n    }\n  };\n  Opal.deny_frozen_access = $deny_frozen_access;\n\n  // common #freeze runtime support\n  Opal.freeze = function(obj) {\n    $prop(obj, \"$$frozen\", true);\n\n    // set $$id\n    if (!obj.hasOwnProperty('$$id')) { $prop(obj, '$$id', $uid()); }\n\n    if (obj.hasOwnProperty('$$meta')) {\n      // freeze $$meta if it has already been set\n      obj.$$meta.$freeze();\n    } else {\n      // ensure $$meta can be set lazily, $$meta is frozen when set in runtime.js\n      $prop(obj, '$$meta', null);\n    }\n\n    // $$comparable is used internally and set multiple times\n    // defining it before sealing ensures it can be modified later on\n    if (!obj.hasOwnProperty('$$comparable')) { $prop(obj, '$$comparable', null); }\n\n    // seal the Object\n    Object.seal(obj);\n\n    return obj;\n  };\n\n  // freze props, make setters of instance variables throw FrozenError\n  Opal.freeze_props = function(obj) {\n    var prop, prop_type, desc;\n\n    for(prop in obj) {\n      prop_type = typeof(prop);\n\n      // prop_type \"object\" here is a String(), skip $ props\n      if ((prop_type === \"string\" || prop_type === \"object\") && prop[0] === '$') {\n        continue;\n      }\n\n      desc = Object.getOwnPropertyDescriptor(obj, prop);\n      if (desc && desc.enumerable && desc.writable) {\n        // create closure to retain current value as cv\n        // for Opal 2.0 let for cv should do the trick, instead of a function\n        (function() {\n          // set v to undefined, as if the property is not set\n          var cv = obj[prop];\n          Object.defineProperty(obj, prop, {\n            get: function() { return cv; },\n            set: function(_val) { $deny_frozen_access(obj); },\n            enumerable: true\n          });\n        })();\n      }\n    }\n  };\n\n  // Regexps\n  // -------\n\n  // Escape Regexp special chars letting the resulting string be used to build\n  // a new Regexp.\n  //\n  Opal.escape_regexp = function(str) {\n    return str.replace(/([-[\\]\\/{}()*+?.^$\\\\| ])/g, '\\\\$1')\n              .replace(/[\\n]/g, '\\\\n')\n              .replace(/[\\r]/g, '\\\\r')\n              .replace(/[\\f]/g, '\\\\f')\n              .replace(/[\\t]/g, '\\\\t');\n  };\n\n  // Create a global Regexp from a RegExp object and cache the result\n  // on the object itself ($$g attribute).\n  //\n  Opal.global_regexp = function(pattern) {\n    if (pattern.global) {\n      return pattern; // RegExp already has the global flag\n    }\n    if (pattern.$$g == null) {\n      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));\n    } else {\n      pattern.$$g.lastIndex = null; // reset lastIndex property\n    }\n    return pattern.$$g;\n  };\n\n  // Create a global multiline Regexp from a RegExp object and cache the result\n  // on the object itself ($$gm or $$g attribute).\n  //\n  Opal.global_multiline_regexp = function(pattern) {\n    var result, flags;\n\n    // RegExp already has the global and multiline flag\n    if (pattern.global && pattern.multiline) return pattern;\n\n    flags = 'gm' + (pattern.ignoreCase ? 'i' : '');\n    if (pattern.multiline) {\n      // we are using the $$g attribute because the Regexp is already multiline\n      if (pattern.$$g == null) {\n        pattern.$$g = new RegExp(pattern.source, flags);\n      }\n      result = pattern.$$g;\n    } else {\n      if (pattern.$$gm == null) {\n        pattern.$$gm = new RegExp(pattern.source, flags);\n      }\n      result = pattern.$$gm;\n    }\n    result.lastIndex = null; // reset lastIndex property\n    return result;\n  };\n\n  // Combine multiple regexp parts together\n  Opal.regexp = function(parts, flags) {\n    var part;\n    var ignoreCase = typeof flags !== 'undefined' && flags && flags.indexOf('i') >= 0;\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part instanceof RegExp) {\n        if (part.ignoreCase !== ignoreCase)\n          Opal.Kernel.$warn(\n            \"ignore case doesn't match for \" + part.source.$inspect(),\n            Opal.hash({uplevel: 1})\n          )\n\n        part = part.source;\n      }\n      if (part === '') part = '(?:' + part + ')';\n      parts[i] = part;\n    }\n\n    if (flags) {\n      return new RegExp(parts.join(''), flags);\n    } else {\n      return new RegExp(parts.join(''));\n    }\n  };\n\n  // Require system\n  // --------------\n\n  Opal.modules         = {};\n  Opal.loaded_features = ['corelib/runtime'];\n  Opal.current_dir     = '.';\n  Opal.require_table   = {'corelib/runtime': true};\n\n  Opal.normalize = function(path) {\n    var parts, part, new_parts = [], SEPARATOR = '/';\n\n    if (Opal.current_dir !== '.') {\n      path = Opal.current_dir.replace(/\\/*$/, '/') + path;\n    }\n\n    path = path.replace(/^\\.\\//, '');\n    path = path.replace(/\\.(rb|opal|js)$/, '');\n    parts = path.split(SEPARATOR);\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part === '') continue;\n      (part === '..') ? new_parts.pop() : new_parts.push(part)\n    }\n\n    return new_parts.join(SEPARATOR);\n  };\n\n  Opal.loaded = function(paths) {\n    var i, l, path;\n\n    for (i = 0, l = paths.length; i < l; i++) {\n      path = Opal.normalize(paths[i]);\n\n      if (Opal.require_table[path]) {\n        continue;\n      }\n\n      Opal.loaded_features.push(path);\n      Opal.require_table[path] = true;\n    }\n  };\n\n  Opal.load_normalized = function(path) {\n    Opal.loaded([path]);\n\n    var module = Opal.modules[path];\n\n    if (module) {\n      var retval = module(Opal);\n      if (typeof Promise !== 'undefined' && retval instanceof Promise) {\n        // A special case of require having an async top:\n        // We will need to await it.\n        return retval.then($return_val(true));\n      }\n    }\n    else {\n      var severity = Opal.config.missing_require_severity;\n      var message  = 'cannot load such file -- ' + path;\n\n      if (severity === \"error\") {\n        $raise(Opal.LoadError, message);\n      }\n      else if (severity === \"warning\") {\n        console.warn('WARNING: LoadError: ' + message);\n      }\n    }\n\n    return true;\n  };\n\n  Opal.load = function(path) {\n    path = Opal.normalize(path);\n\n    return Opal.load_normalized(path);\n  };\n\n  Opal.require = function(path) {\n    path = Opal.normalize(path);\n\n    if (Opal.require_table[path]) {\n      return false;\n    }\n\n    return Opal.load_normalized(path);\n  };\n\n\n  // Strings\n  // -------\n\n  Opal.encodings = Object.create(null);\n\n  // Sets the encoding on a string, will treat string literals as frozen strings\n  // raising a FrozenError.\n  //\n  // @param str [String] the string on which the encoding should be set\n  // @param name [String] the canonical name of the encoding\n  // @param type [String] possible values are either `\"encoding\"`, `\"internal_encoding\"`, or `undefined\n  Opal.set_encoding = function(str, name, type) {\n    if (typeof type === \"undefined\") type = \"encoding\";\n    if (typeof str === 'string' || str.$$frozen === true)\n      $raise(Opal.FrozenError, \"can't modify frozen String\");\n\n    var encoding = Opal.find_encoding(name);\n\n    if (encoding === str[type]) { return str; }\n\n    str[type] = encoding;\n\n    return str;\n  };\n\n  // Fetches the encoding for the given name or raises ArgumentError.\n  Opal.find_encoding = function(name) {\n    var register = Opal.encodings;\n    var encoding = register[name] || register[name.toUpperCase()];\n    if (!encoding) $raise(Opal.ArgumentError, \"unknown encoding name - \" + name);\n    return encoding;\n  }\n\n  // @returns a String object with the encoding set from a string literal\n  Opal.enc = function(str, name) {\n    var dup = new String(str);\n    dup = Opal.set_encoding(dup, name);\n    dup.internal_encoding = dup.encoding;\n    return dup\n  }\n\n  // @returns a String object with the internal encoding set to Binary\n  Opal.binary = function(str) {\n    var dup = new String(str);\n    return Opal.set_encoding(dup, \"binary\", \"internal_encoding\");\n  }\n\n  Opal.last_promise = null;\n  Opal.promise_unhandled_exception = false;\n\n  // Run a block of code, but if it returns a Promise, don't run the next\n  // one, but queue it.\n  Opal.queue = function(proc) {\n    if (Opal.last_promise) {\n      // The async path is taken only if anything before returned a\n      // Promise(V2).\n      Opal.last_promise = Opal.last_promise.then(function() {\n        if (!Opal.promise_unhandled_exception) return proc(Opal);\n      })['catch'](function(error) {\n        if (Opal.respond_to(error, '$full_message')) {\n          error = error.$full_message();\n        }\n        console.error(error);\n        // Abort further execution\n        Opal.promise_unhandled_exception = true;\n        Opal.exit(1);\n      });\n      return Opal.last_promise;\n    }\n    else {\n      var ret = proc(Opal);\n      if (typeof Promise === 'function' && typeof ret === 'object' && ret instanceof Promise) {\n        Opal.last_promise = ret;\n      }\n      return ret;\n    }\n  }\n\n  // Operator helpers\n  // ----------------\n\n  function are_both_numbers(l,r) { return typeof(l) === 'number' && typeof(r) === 'number' }\n\n  Opal.rb_plus   = function(l,r) { return are_both_numbers(l,r) ? l + r : l['$+'](r); }\n  Opal.rb_minus  = function(l,r) { return are_both_numbers(l,r) ? l - r : l['$-'](r); }\n  Opal.rb_times  = function(l,r) { return are_both_numbers(l,r) ? l * r : l['$*'](r); }\n  Opal.rb_divide = function(l,r) { return are_both_numbers(l,r) ? l / r : l['$/'](r); }\n  Opal.rb_lt     = function(l,r) { return are_both_numbers(l,r) ? l < r : l['$<'](r); }\n  Opal.rb_gt     = function(l,r) { return are_both_numbers(l,r) ? l > r : l['$>'](r); }\n  Opal.rb_le     = function(l,r) { return are_both_numbers(l,r) ? l <= r : l['$<='](r); }\n  Opal.rb_ge     = function(l,r) { return are_both_numbers(l,r) ? l >= r : l['$>='](r); }\n\n  // Optimized helpers for calls like $truthy((a)['$==='](b)) -> $eqeqeq(a, b)\n  function are_both_numbers_or_strings(lhs, rhs) {\n    return (typeof lhs === 'number' && typeof rhs === 'number') ||\n           (typeof lhs === 'string' && typeof rhs === 'string');\n  }\n\n  function $eqeq(lhs, rhs) {\n    return are_both_numbers_or_strings(lhs,rhs) ? lhs === rhs : $truthy((lhs)['$=='](rhs));\n  };\n  Opal.eqeq = $eqeq;\n  Opal.eqeqeq = function(lhs, rhs) {\n    return are_both_numbers_or_strings(lhs,rhs) ? lhs === rhs : $truthy((lhs)['$==='](rhs));\n  };\n  Opal.neqeq = function(lhs, rhs) {\n    return are_both_numbers_or_strings(lhs,rhs) ? lhs !== rhs : $truthy((lhs)['$!='](rhs));\n  };\n  Opal.not = function(arg) {\n    if (undefined === arg || null === arg || false === arg || nil === arg) return true;\n    if (true === arg || arg['$!'].$$pristine) return false;\n    return $truthy(arg['$!']());\n  }\n\n  // Shortcuts - optimized function generators for simple kinds of functions\n  function $return_val(arg) {\n    return function() {\n      return arg;\n    }\n  }\n  Opal.return_val = $return_val;\n\n  Opal.return_self = function() {\n    return this;\n  }\n  Opal.return_ivar = function(ivar) {\n    return function() {\n      if (this[ivar] == null) { return nil; }\n      return this[ivar];\n    }\n  }\n  Opal.assign_ivar = function(ivar) {\n    return function(val) {\n      $deny_frozen_access(this);\n      return this[ivar] = val;\n    }\n  }\n  Opal.assign_ivar_val = function(ivar, static_val) {\n    return function() {\n      $deny_frozen_access(this);\n      return this[ivar] = static_val;\n    }\n  }\n\n  // Primitives for handling parameters\n  Opal.ensure_kwargs = function(kwargs) {\n    if (kwargs == null) {\n      return Opal.hash2([], {});\n    } else if (kwargs.$$is_hash) {\n      return kwargs;\n    } else {\n      $raise(Opal.ArgumentError, 'expected kwargs');\n    }\n  }\n\n  Opal.get_kwarg = function(kwargs, key) {\n    if (!$has_own(kwargs.$$smap, key)) {\n      $raise(Opal.ArgumentError, 'missing keyword: '+key);\n    }\n    return kwargs.$$smap[key];\n  }\n\n  // Arrays of size > 32 elements that contain only strings,\n  // symbols, integers and nils are compiled as a self-extracting\n  // string.\n  Opal.large_array_unpack = function(str) {\n    var array = str.split(\",\"), length = array.length, i;\n    for (i = 0; i < length; i++) {\n      switch(array[i][0]) {\n        case undefined:\n          array[i] = nil\n          break;\n        case '-':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          array[i] = +array[i];\n      }\n    }\n    return array;\n  }\n\n  // Initialization\n  // --------------\n  Opal.BasicObject = BasicObject = $allocate_class('BasicObject', null);\n  Opal.Object      = _Object     = $allocate_class('Object', Opal.BasicObject);\n  Opal.Module      = Module      = $allocate_class('Module', Opal.Object);\n  Opal.Class       = Class       = $allocate_class('Class', Opal.Module);\n  Opal.Opal        = _Opal       = $allocate_module('Opal');\n  Opal.Kernel      = Kernel      = $allocate_module('Kernel');\n\n  $set_proto(Opal.BasicObject, Opal.Class.$$prototype);\n  $set_proto(Opal.Object, Opal.Class.$$prototype);\n  $set_proto(Opal.Module, Opal.Class.$$prototype);\n  $set_proto(Opal.Class, Opal.Class.$$prototype);\n\n  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic\n  BasicObject.$$const.BasicObject = BasicObject;\n\n  // Assign basic constants\n  $const_set(_Object, \"BasicObject\",  BasicObject);\n  $const_set(_Object, \"Object\",       _Object);\n  $const_set(_Object, \"Module\",       Module);\n  $const_set(_Object, \"Class\",        Class);\n  $const_set(_Object, \"Opal\",         _Opal);\n  $const_set(_Object, \"Kernel\",       Kernel);\n\n  // Fix booted classes to have correct .class value\n  BasicObject.$$class = Class;\n  _Object.$$class     = Class;\n  Module.$$class      = Class;\n  Class.$$class       = Class;\n  _Opal.$$class       = Module;\n  Kernel.$$class      = Module;\n\n  // Forward .toString() to #to_s\n  $prop(_Object.$$prototype, 'toString', function() {\n    var to_s = this.$to_s();\n    if (to_s.$$is_string && typeof(to_s) === 'object') {\n      // a string created using new String('string')\n      return to_s.valueOf();\n    } else {\n      return to_s;\n    }\n  });\n\n  // Make Kernel#require immediately available as it's needed to require all the\n  // other corelib files.\n  $prop(_Object.$$prototype, '$require', Opal.require);\n\n  // Instantiate the main object\n  Opal.top = new _Object();\n  Opal.top.$to_s = Opal.top.$inspect = $return_val('main');\n  Opal.top.$define_method = top_define_method;\n\n  // Foward calls to define_method on the top object to Object\n  function top_define_method() {\n    var args = $slice(arguments);\n    var block = top_define_method.$$p;\n    top_define_method.$$p = null;\n    return Opal.send(_Object, 'define_method', args, block)\n  };\n\n  // Nil\n  Opal.NilClass = $allocate_class('NilClass', Opal.Object);\n  $const_set(_Object, 'NilClass', Opal.NilClass);\n  nil = Opal.nil = new Opal.NilClass();\n  nil.$$id = nil_id;\n  nil.call = nil.apply = function() { $raise(Opal.LocalJumpError, 'no block given'); };\n  nil.$$frozen = true;\n  nil.$$comparable = false;\n  Object.seal(nil);\n\n  Opal.thrower = function(type) {\n    var thrower = new Error('unexpected '+type);\n    thrower.$thrower_type = type;\n    thrower.$throw = function(value) {\n      if (value == null) value = nil;\n      thrower.$v = value;\n      throw thrower;\n    };\n    return thrower;\n  };\n\n  Opal.t_eval_return = Opal.thrower(\"return\");\n\n  TypeError.$$super = Error;\n\n  // If enable-file-source-embed compiler option is enabled, each module loaded will add its\n  // sources to this object\n  Opal.file_sources = {};\n}).call(this);\nOpal.loaded([\"corelib/runtime.js\"]);\nOpal.modules[\"corelib/helpers\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $type_error = Opal.type_error, $coerce_to = Opal.coerce_to, $module = Opal.module, $defs = Opal.defs, $slice = Opal.slice, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $Opal = Opal.Opal, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('===,raise,respond_to?,nil?,__send__,<=>,class,coerce_to!,new,to_s,__id__');\n  return (function($base) {\n    var self = $module($base, 'Opal');\n\n    \n    \n    $defs(self, '$bridge', function $$bridge(constructor, klass) {\n      \n      return Opal.bridge(constructor, klass);\n    });\n    $defs(self, '$coerce_to!', function $Opal_coerce_to$excl$1(object, type, method, $a) {\n      var $post_args, args, coerced = nil;\n\n      \n      $post_args = $slice(arguments, 3);\n      args = $post_args;\n      coerced = $coerce_to(object, type, method, args);\n      if (!$eqeqeq(type, coerced)) {\n        $Kernel.$raise($type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, -4);\n    $defs(self, '$coerce_to?', function $Opal_coerce_to$ques$2(object, type, method, $a) {\n      var $post_args, args, coerced = nil;\n\n      \n      $post_args = $slice(arguments, 3);\n      args = $post_args;\n      if (!$truthy(object['$respond_to?'](method))) {\n        return nil\n      };\n      coerced = $coerce_to(object, type, method, args);\n      if ($truthy(coerced['$nil?']())) {\n        return nil\n      };\n      if (!$eqeqeq(type, coerced)) {\n        $Kernel.$raise($type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, -4);\n    $defs(self, '$try_convert', function $$try_convert(object, type, method) {\n      \n      \n      if ($eqeqeq(type, object)) {\n        return object\n      };\n      if ($truthy(object['$respond_to?'](method))) {\n        return object.$__send__(method)\n      } else {\n        return nil\n      };\n    });\n    $defs(self, '$compare', function $$compare(a, b) {\n      var compare = nil;\n\n      \n      compare = a['$<=>'](b);\n      if ($truthy(compare === nil)) {\n        $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (a.$class()) + \" with \" + (b.$class()) + \" failed\")\n      };\n      return compare;\n    });\n    $defs(self, '$destructure', function $$destructure(args) {\n      \n      \n      if (args.length == 1) {\n        return args[0];\n      }\n      else if (args.$$is_array) {\n        return args;\n      }\n      else {\n        var args_ary = new Array(args.length);\n        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n        return args_ary;\n      }\n    \n    });\n    $defs(self, '$respond_to?', function $Opal_respond_to$ques$3(obj, method, include_all) {\n      \n      \n      if (include_all == null) include_all = false;\n      \n      if (obj == null || !obj.$$class) {\n        return false;\n      }\n    ;\n      return obj['$respond_to?'](method, include_all);\n    }, -3);\n    $defs(self, '$instance_variable_name!', function $Opal_instance_variable_name$excl$4(name) {\n      \n      \n      name = $Opal['$coerce_to!'](name, $$$('String'), \"to_str\");\n      if (!$truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {\n        $Kernel.$raise($$$('NameError').$new(\"'\" + (name) + \"' is not allowed as an instance variable name\", name))\n      };\n      return name;\n    });\n    $defs(self, '$class_variable_name!', function $Opal_class_variable_name$excl$5(name) {\n      \n      \n      name = $Opal['$coerce_to!'](name, $$$('String'), \"to_str\");\n      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {\n        $Kernel.$raise($$$('NameError').$new(\"`\" + (name) + \"' is not allowed as a class variable name\", name))\n      };\n      return name;\n    });\n    $defs(self, '$const_name?', function $Opal_const_name$ques$6(const_name) {\n      \n      \n      if (typeof const_name !== 'string') {\n        (const_name = $Opal['$coerce_to!'](const_name, $$$('String'), \"to_str\"))\n      }\n\n      return const_name[0] === const_name[0].toUpperCase()\n    \n    });\n    $defs(self, '$const_name!', function $Opal_const_name$excl$7(const_name) {\n      var $a, self = this;\n\n      \n      if ($truthy((($a = $$$('::', 'String', 'skip_raise')) ? 'constant' : nil))) {\n        const_name = $Opal['$coerce_to!'](const_name, $$$('String'), \"to_str\")\n      };\n      \n      if (!const_name || const_name[0] != const_name[0].toUpperCase()) {\n        self.$raise($$$('NameError'), \"wrong constant name \" + (const_name))\n      }\n    ;\n      return const_name;\n    });\n    $defs(self, '$pristine', function $$pristine(owner_class, $a) {\n      var $post_args, method_names;\n\n      \n      $post_args = $slice(arguments, 1);\n      method_names = $post_args;\n      \n      var method_name, method;\n      for (var i = method_names.length - 1; i >= 0; i--) {\n        method_name = method_names[i];\n        method = owner_class.$$prototype[Opal.jsid(method_name)];\n\n        if (method && !method.$$stub) {\n          method.$$pristine = true;\n        }\n      }\n    ;\n      return nil;\n    }, -2);\n    var inspect_stack = [];\n    return $defs(self, '$inspect', function $$inspect(value) {\n      var e = nil;\n\n      \n      ;\n      var pushed = false;\n      \n      return (function() { try {\n      try {\n        \n        \n        if (value === null) {\n          // JS null value\n          return 'null';\n        }\n        else if (value === undefined) {\n          // JS undefined value\n          return 'undefined';\n        }\n        else if (typeof value.$$class === 'undefined') {\n          // JS object / other value that is not bridged\n          return Object.prototype.toString.apply(value);\n        }\n        else if (typeof value.$inspect !== 'function' || value.$inspect.$$stub) {\n          // BasicObject and friends\n          return \"#<\" + (value.$$class) + \":0x\" + (value.$__id__().$to_s(16)) + \">\"\n        }\n        else if (inspect_stack.indexOf(value.$__id__()) !== -1) {\n          // inspect recursing inside inspect to find out about the\n          // same object\n          return \"#<\" + (value.$$class) + \":0x\" + (value.$__id__().$to_s(16)) + \">\"\n        }\n        else {\n          // anything supporting Opal\n          inspect_stack.push(value.$__id__());\n          pushed = true;\n          return value.$inspect();\n        }\n      ;\n        return nil;\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('Exception')])) {(e = $err)\n          try {\n            return \"#<\" + (value.$$class) + \":0x\" + (value.$__id__().$to_s(16)) + \">\"\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n      } finally {\n        if (pushed) inspect_stack.pop()\n      }; })();;\n    }, -1);\n  })('::')\n};\n\nOpal.modules[\"corelib/module\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $const_set = Opal.const_set, $Object = Opal.Object, $return_ivar = Opal.return_ivar, $assign_ivar = Opal.assign_ivar, $ivar = Opal.ivar, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $prop = Opal.prop, $jsid = Opal.jsid, $klass = Opal.klass, $defs = Opal.defs, $send = Opal.send, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $Module = Opal.Module, $Kernel = Opal.Kernel, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $slice = Opal.slice, $to_a = Opal.to_a, $hash2 = Opal.hash2, $Opal = Opal.Opal, $return_val = Opal.return_val, $eqeq = Opal.eqeq, $lambda = Opal.lambda, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('module_eval,to_proc,===,raise,equal?,<,>,nil?,attr_reader,attr_writer,warn,attr_accessor,const_name?,class_variable_name!,pristine,const_name!,=~,new,inject,split,const_get,==,start_with?,!~,bind,call,class,frozen?,name,append_features,included,cover?,size,merge,compile,proc,any?,prepend_features,prepended,to_s,__id__,constants,include?,copy_class_variables,copy_constants,class_exec,module_exec,inspect');\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Module');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $defs(self, '$allocate', function $$allocate() {\n      var self = this;\n\n      \n      var module = Opal.allocate_module(nil, function(){});\n      // Link the prototype of Module subclasses\n      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);\n      return module;\n    \n    });\n    \n    $def(self, '$initialize', function $$initialize() {\n      var block = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      ;\n      if ((block !== nil)) {\n        return $send(self, 'module_eval', [], block.$to_proc())\n      } else {\n        return nil\n      };\n    });\n    \n    $def(self, '$===', function $Module_$eq_eq_eq$1(object) {\n      var self = this;\n\n      \n      if ($truthy(object == null)) {\n        return false\n      };\n      return Opal.is_a(object, self);;\n    });\n    \n    $def(self, '$<', function $Module_$lt$2(other) {\n      var self = this;\n\n      \n      if (!$eqeqeq($Module, other)) {\n        $Kernel.$raise($$$('TypeError'), \"compared with non class/module\")\n      };\n      \n      var working = self,\n          ancestors,\n          i, length;\n\n      if (working === other) {\n        return false;\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === other) {\n          return true;\n        }\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === self) {\n          return false;\n        }\n      }\n\n      return nil;\n    ;\n    });\n    \n    $def(self, '$<=', function $Module_$lt_eq$3(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self['$equal?'](other)))) {\n        return $ret_or_1\n      } else {\n        return $rb_lt(self, other)\n      }\n    });\n    \n    $def(self, '$>', function $Module_$gt$4(other) {\n      var self = this;\n\n      \n      if (!$eqeqeq($Module, other)) {\n        $Kernel.$raise($$$('TypeError'), \"compared with non class/module\")\n      };\n      return $rb_lt(other, self);\n    });\n    \n    $def(self, '$>=', function $Module_$gt_eq$5(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self['$equal?'](other)))) {\n        return $ret_or_1\n      } else {\n        return $rb_gt(self, other)\n      }\n    });\n    \n    $def(self, '$<=>', function $Module_$lt_eq_gt$6(other) {\n      var self = this, lt = nil;\n\n      \n      \n      if (self === other) {\n        return 0;\n      }\n    ;\n      if (!$eqeqeq($Module, other)) {\n        return nil\n      };\n      lt = $rb_lt(self, other);\n      if ($truthy(lt['$nil?']())) {\n        return nil\n      };\n      if ($truthy(lt)) {\n        return -1\n      } else {\n        return 1\n      };\n    });\n    \n    $def(self, '$alias_method', function $$alias_method(newname, oldname) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      newname = $coerce_to(newname, $$$('String'), 'to_str');\n      oldname = $coerce_to(oldname, $$$('String'), 'to_str');\n      Opal.alias(self, newname, oldname);\n      return self;\n    });\n    \n    $def(self, '$alias_native', function $$alias_native(mid, jsid) {\n      var self = this;\n\n      \n      if (jsid == null) jsid = mid;\n      $deny_frozen_access(self);\n      Opal.alias_native(self, mid, jsid);\n      return self;\n    }, -2);\n    \n    $def(self, '$ancestors', function $$ancestors() {\n      var self = this;\n\n      return Opal.ancestors(self);\n    });\n    \n    $def(self, '$append_features', function $$append_features(includer) {\n      var self = this;\n\n      \n      $deny_frozen_access(includer);\n      Opal.append_features(self, includer);\n      return self;\n    });\n    \n    $def(self, '$attr_accessor', function $$attr_accessor($a) {\n      var $post_args, names, self = this;\n\n      \n      $post_args = $slice(arguments);\n      names = $post_args;\n      $send(self, 'attr_reader', $to_a(names));\n      return $send(self, 'attr_writer', $to_a(names));\n    }, -1);\n    \n    $def(self, '$attr', function $$attr($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      if (args.length == 2 && (args[1] === true || args[1] === false)) {\n        self.$warn(\"optional boolean argument is obsoleted\", $hash2([\"uplevel\"], {\"uplevel\": 1}))\n\n        args[1] ? self.$attr_accessor(args[0]) : self.$attr_reader(args[0]);\n        return nil;\n      }\n    ;\n      return $send(self, 'attr_reader', $to_a(args));\n    }, -1);\n    \n    $def(self, '$attr_reader', function $$attr_reader($a) {\n      var $post_args, names, self = this;\n\n      \n      $post_args = $slice(arguments);\n      names = $post_args;\n      \n      $deny_frozen_access(self);\n\n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = $jsid(name),\n            ivar = $ivar(name);\n\n        var body = $return_ivar(ivar);\n\n        // initialize the instance variable as nil\n        Opal.prop(proto, ivar, nil);\n\n        body.$$parameters = [];\n        body.$$arity = 0;\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, -1);\n    \n    $def(self, '$attr_writer', function $$attr_writer($a) {\n      var $post_args, names, self = this;\n\n      \n      $post_args = $slice(arguments);\n      names = $post_args;\n      \n      $deny_frozen_access(self);\n\n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = $jsid(name + '='),\n            ivar = $ivar(name);\n\n        var body = $assign_ivar(ivar)\n\n        body.$$parameters = [['req']];\n        body.$$arity = 1;\n\n        // initialize the instance variable as nil\n        Opal.prop(proto, ivar, nil);\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, -1);\n    \n    $def(self, '$autoload', function $$autoload(const$, path) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      if (!$$('Opal')['$const_name?'](const$)) {\n        $Kernel.$raise($$$('NameError'), \"autoload must be constant name: \" + (const$))\n      }\n\n      if (path == \"\") {\n        $Kernel.$raise($$$('ArgumentError'), \"empty file name\")\n      }\n\n      if (!self.$$const.hasOwnProperty(const$)) {\n        if (!self.$$autoload) {\n          self.$$autoload = {};\n        }\n        Opal.const_cache_version++;\n        self.$$autoload[const$] = { path: path, loaded: false, required: false, success: false, exception: false };\n\n        if (self.$const_added && !self.$const_added.$$pristine) {\n          self.$const_added(const$);\n        }\n      }\n      return nil;\n    \n    });\n    \n    $def(self, '$autoload?', function $Module_autoload$ques$7(const$) {\n      var self = this;\n\n      \n      if (self.$$autoload && self.$$autoload[const$] && !self.$$autoload[const$].required && !self.$$autoload[const$].success) {\n        return self.$$autoload[const$].path;\n      }\n\n      var ancestors = self.$ancestors();\n\n      for (var i = 0, length = ancestors.length; i < length; i++) {\n        if (ancestors[i].$$autoload && ancestors[i].$$autoload[const$] && !ancestors[i].$$autoload[const$].required && !ancestors[i].$$autoload[const$].success) {\n          return ancestors[i].$$autoload[const$].path;\n        }\n      }\n      return nil;\n    \n    });\n    \n    $def(self, '$class_variables', function $$class_variables() {\n      var self = this;\n\n      return Object.keys(Opal.class_variables(self));\n    });\n    \n    $def(self, '$class_variable_get', function $$class_variable_get(name) {\n      var self = this;\n\n      \n      name = $Opal['$class_variable_name!'](name);\n      return Opal.class_variable_get(self, name, false);;\n    });\n    \n    $def(self, '$class_variable_set', function $$class_variable_set(name, value) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      name = $Opal['$class_variable_name!'](name);\n      return Opal.class_variable_set(self, name, value);;\n    });\n    \n    $def(self, '$class_variable_defined?', function $Module_class_variable_defined$ques$8(name) {\n      var self = this;\n\n      \n      name = $Opal['$class_variable_name!'](name);\n      return Opal.class_variables(self).hasOwnProperty(name);;\n    });\n    \n    $def(self, '$const_added', $return_val(nil));\n    $Opal.$pristine(self, \"const_added\");\n    \n    $def(self, '$remove_class_variable', function $$remove_class_variable(name) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      name = $Opal['$class_variable_name!'](name);\n      \n      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {\n        var value = self.$$cvars[name];\n        delete self.$$cvars[name];\n        return value;\n      } else {\n        $Kernel.$raise($$$('NameError'), \"cannot remove \" + (name) + \" for \" + (self))\n      }\n    ;\n    });\n    \n    $def(self, '$constants', function $$constants(inherit) {\n      var self = this;\n\n      \n      if (inherit == null) inherit = true;\n      return Opal.constants(self, inherit);;\n    }, -1);\n    $defs(self, '$constants', function $$constants(inherit) {\n      var self = this;\n\n      \n      ;\n      \n      if (inherit == null) {\n        var nesting = (self.$$nesting || []).concat($Object),\n            constant, constants = {},\n            i, ii;\n\n        for(i = 0, ii = nesting.length; i < ii; i++) {\n          for (constant in nesting[i].$$const) {\n            constants[constant] = true;\n          }\n        }\n        return Object.keys(constants);\n      } else {\n        return Opal.constants(self, inherit)\n      }\n    ;\n    }, -1);\n    $defs(self, '$nesting', function $$nesting() {\n      var self = this;\n\n      return self.$$nesting || [];\n    });\n    \n    $def(self, '$const_defined?', function $Module_const_defined$ques$9(name, inherit) {\n      var self = this;\n\n      \n      if (inherit == null) inherit = true;\n      name = $$('Opal')['$const_name!'](name);\n      if (!$truthy(name['$=~']($$$($Opal, 'CONST_NAME_REGEXP')))) {\n        $Kernel.$raise($$$('NameError').$new(\"wrong constant name \" + (name), name))\n      };\n      \n      var module, modules = [self], module_constants, i, ii;\n\n      // Add up ancestors if inherit is true\n      if (inherit) {\n        modules = modules.concat(Opal.ancestors(self));\n\n        // Add Object's ancestors if it's a module – modules have no ancestors otherwise\n        if (self.$$is_module) {\n          modules = modules.concat([$Object]).concat(Opal.ancestors($Object));\n        }\n      }\n\n      for (i = 0, ii = modules.length; i < ii; i++) {\n        module = modules[i];\n        if (module.$$const[name] != null) { return true; }\n        if (\n          module.$$autoload &&\n          module.$$autoload[name] &&\n          !module.$$autoload[name].required &&\n          !module.$$autoload[name].success\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    ;\n    }, -2);\n    \n    $def(self, '$const_get', function $$const_get(name, inherit) {\n      var self = this;\n\n      \n      if (inherit == null) inherit = true;\n      name = $$('Opal')['$const_name!'](name);\n      \n      if (name.indexOf('::') === 0 && name !== '::'){\n        name = name.slice(2);\n      }\n    ;\n      if ($truthy(name.indexOf('::') != -1 && name != '::')) {\n        return $send(name.$split(\"::\"), 'inject', [self], function $$10(o, c){\n          \n          if (o == null) o = nil;\n          if (c == null) c = nil;\n          return o.$const_get(c);})\n      };\n      if (!$truthy(name['$=~']($$$($Opal, 'CONST_NAME_REGEXP')))) {\n        $Kernel.$raise($$$('NameError').$new(\"wrong constant name \" + (name), name))\n      };\n      \n      if (inherit) {\n        return Opal.$$([self], name);\n      } else {\n        return Opal.const_get_local(self, name);\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$const_missing', function $$const_missing(name) {\n      var self = this, full_const_name = nil;\n\n      \n      full_const_name = ($eqeq(self, $Object) ? (name) : (\"\" + (self) + \"::\" + (name)));\n      return $Kernel.$raise($$$('NameError').$new(\"uninitialized constant \" + (full_const_name), name));\n    });\n    \n    $def(self, '$const_set', function $$const_set(name, value) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      name = $Opal['$const_name!'](name);\n      if (($truthy(name['$!~']($$$($Opal, 'CONST_NAME_REGEXP'))) || ($truthy(name['$start_with?'](\"::\"))))) {\n        $Kernel.$raise($$$('NameError').$new(\"wrong constant name \" + (name), name))\n      };\n      $const_set(self, name, value);\n      return value;\n    });\n    \n    $def(self, '$public_constant', $return_val(nil));\n    \n    $def(self, '$define_method', function $$define_method(name, method) {\n      var block = $$define_method.$$p || nil, self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n      $$define_method.$$p = null;\n      \n      ;\n      ;\n      \n      $deny_frozen_access(self);\n\n      if (method === undefined && block === nil)\n        $Kernel.$raise($$$('ArgumentError'), \"tried to create a Proc object without a block\")\n    ;\n      block = ($truthy(($ret_or_1 = block)) ? ($ret_or_1) : ($eqeqeq($$$('Proc'), ($ret_or_2 = method)) ? (method) : ($eqeqeq($$$('Method'), $ret_or_2) ? (method.$to_proc().$$unbound) : ($eqeqeq($$$('UnboundMethod'), $ret_or_2) ? ($lambda(function $$11($a){var $post_args, args, self = $$11.$$s == null ? this : $$11.$$s, bound = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        bound = method.$bind(self);\n        return $send(bound, 'call', $to_a(args));}, {$$arity: -1, $$s: self})) : ($Kernel.$raise($$$('TypeError'), \"wrong argument type \" + (block.$class()) + \" (expected Proc/Method)\"))))));\n      \n      if (typeof(Proxy) !== 'undefined') {\n        var meta = Object.create(null)\n\n        block.$$proxy_target = block\n        block = new Proxy(block, {\n          apply: function(target, self, args) {\n            var old_name = target.$$jsid\n            target.$$jsid = name;\n            try {\n              return target.apply(self, args);\n            } catch(e) {\n              if (e === target.$$brk || e === target.$$ret) return e.$v;\n              throw e;\n            } finally {\n              target.$$jsid = old_name\n            }\n          }\n        })\n      }\n\n      block.$$jsid        = name;\n      block.$$s           = null;\n      block.$$def         = block;\n      block.$$define_meth = true;\n\n      return Opal.defn(self, $jsid(name), block);\n    ;\n    }, -2);\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      \n      if (!self.hasOwnProperty('$$base_module')) { $prop(self, '$$base_module', null); }\n\n      return $freeze(self);\n    ;\n    });\n    \n    $def(self, '$remove_method', function $$remove_method($a) {\n      var $post_args, names, self = this;\n\n      \n      $post_args = $slice(arguments);\n      names = $post_args;\n      \n      for (var i = 0; i < names.length; i++) {\n        var name = names[i];\n        if (!(typeof name === \"string\" || name.$$is_string)) {\n          self.$raise($$$('TypeError'), \"\" + (self.$name()) + \" is not a symbol nor a string\")\n        }\n        $deny_frozen_access(self);\n\n        Opal.rdef(self, \"$\" + name);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$singleton_class?', function $Module_singleton_class$ques$12() {\n      var self = this;\n\n      return !!self.$$is_singleton;\n    });\n    \n    $def(self, '$include', function $$include($a) {\n      var $post_args, mods, self = this;\n\n      \n      $post_args = $slice(arguments);\n      mods = $post_args;\n      \n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(self);\n        (mod).$included(self);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$included_modules', function $$included_modules() {\n      var self = this;\n\n      return Opal.included_modules(self);\n    });\n    \n    $def(self, '$include?', function $Module_include$ques$13(mod) {\n      var self = this;\n\n      \n      if (!mod.$$is_module) {\n        $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n      }\n\n      var i, ii, mod2, ancestors = Opal.ancestors(self);\n\n      for (i = 0, ii = ancestors.length; i < ii; i++) {\n        mod2 = ancestors[i];\n        if (mod2 === mod && mod2 !== self) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    });\n    \n    $def(self, '$instance_method', function $$instance_method(name) {\n      var self = this;\n\n      \n      var meth = self.$$prototype[$jsid(name)];\n\n      if (!meth || meth.$$stub) {\n        $Kernel.$raise($$$('NameError').$new(\"undefined method `\" + (name) + \"' for class `\" + (self.$name()) + \"'\", name));\n      }\n\n      return $$$('UnboundMethod').$new(self, meth.$$owner || self, meth, name);\n    \n    });\n    \n    $def(self, '$instance_methods', function $$instance_methods(include_super) {\n      var self = this;\n\n      \n      if (include_super == null) include_super = true;\n      \n      if ($truthy(include_super)) {\n        return Opal.instance_methods(self);\n      } else {\n        return Opal.own_instance_methods(self);\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$included', $return_val(nil));\n    \n    $def(self, '$extended', $return_val(nil));\n    \n    $def(self, '$extend_object', function $$extend_object(object) {\n      \n      \n      $deny_frozen_access(object);\n      return nil;\n    });\n    \n    $def(self, '$method_added', function $$method_added($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$method_removed', function $$method_removed($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$method_undefined', function $$method_undefined($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$module_eval', function $$module_eval($a) {\n      var block = $$module_eval.$$p || nil, $post_args, args, $b, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, compiled = nil;\n\n      $$module_eval.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if (($truthy(block['$nil?']()) && ($truthy(!!Opal.compile)))) {\n        \n        if (!$truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat($to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy(($ret_or_1 = file)) ? ($ret_or_1) : (\"(eval)\")), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $Opal.$compile(string, compiling_options);\n        block = $send($Kernel, 'proc', [], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;\n\n          return new Function(\"Opal,self\", \"return \" + compiled)(Opal, self);}, {$$s: self});\n      } else if ($truthy(args['$any?']())) {\n        $Kernel.$raise($$$('ArgumentError'), \"\" + (\"wrong number of arguments (\" + (args.$size()) + \" for 0)\") + \"\\n\\n  NOTE:If you want to enable passing a String argument please add \\\"require 'opal-parser'\\\" to your script\\n\")\n      };\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n      result = block.apply(self, [self]);\n      block.$$s = old;\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$module_exec', function $$module_exec($a) {\n      var block = $$module_exec.$$p || nil, $post_args, args, self = this;\n\n      $$module_exec.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      if (block === nil) {\n        $Kernel.$raise($$$('LocalJumpError'), \"no block given\")\n      }\n\n      var block_self = block.$$s, result;\n\n      block.$$s = null;\n      result = block.apply(self, args);\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$method_defined?', function $Module_method_defined$ques$15(method) {\n      var self = this;\n\n      \n      var body = self.$$prototype[$jsid(method)];\n      return (!!body) && !body.$$stub;\n    \n    });\n    \n    $def(self, '$module_function', function $$module_function($a) {\n      var $post_args, methods, self = this;\n\n      \n      $post_args = $slice(arguments);\n      methods = $post_args;\n      \n      $deny_frozen_access(self);\n\n      if (methods.length === 0) {\n        self.$$module_function = true;\n        return nil;\n      }\n      else {\n        for (var i = 0, length = methods.length; i < length; i++) {\n          var meth = methods[i],\n              id   = $jsid(meth),\n              func = self.$$prototype[id];\n\n          Opal.defs(self, id, func);\n        }\n        return methods.length === 1 ? methods[0] : methods;\n      }\n\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$name', function $$name() {\n      var self = this;\n\n      \n      if (self.$$full_name) {\n        return self.$$full_name;\n      }\n\n      var result = [], base = self;\n\n      while (base) {\n        // Give up if any of the ancestors is unnamed\n        if (base.$$name === nil || base.$$name == null) return nil;\n\n        result.unshift(base.$$name);\n\n        base = base.$$base_module;\n\n        if (base === $Object) {\n          break;\n        }\n      }\n\n      if (result.length === 0) {\n        return nil;\n      }\n\n      return self.$$full_name = result.join('::');\n    \n    });\n    \n    $def(self, '$prepend', function $$prepend($a) {\n      var $post_args, mods, self = this;\n\n      \n      $post_args = $slice(arguments);\n      mods = $post_args;\n      \n      if (mods.length === 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (given 0, expected 1+)\")\n      }\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$prepend_features(self);\n        (mod).$prepended(self);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$prepend_features', function $$prepend_features(prepender) {\n      var self = this;\n\n      \n      \n      $deny_frozen_access(prepender);\n\n      if (!self.$$is_module) {\n        $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + (self.$class()) + \" (expected Module)\");\n      }\n\n      Opal.prepend_features(self, prepender)\n    ;\n      return self;\n    });\n    \n    $def(self, '$prepended', $return_val(nil));\n    \n    $def(self, '$remove_const', function $$remove_const(name) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      return Opal.const_remove(self, name);;\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = Opal.Module.$name.call(self)))) {\n        return $ret_or_1\n      } else {\n        return \"#<\" + (self.$$is_module ? 'Module' : 'Class') + \":0x\" + (self.$__id__().$to_s(16)) + \">\"\n      }\n    });\n    \n    $def(self, '$undef_method', function $$undef_method($a) {\n      var $post_args, names, self = this;\n\n      \n      $post_args = $slice(arguments);\n      names = $post_args;\n      \n      for (var i = 0; i < names.length; i++) {\n        var name = names[i];\n        if (!(typeof name === \"string\" || name.$$is_string)) {\n          self.$raise($$$('TypeError'), \"\" + (self.$name()) + \" is not a symbol nor a string\")\n        }\n        $deny_frozen_access(self);\n\n        Opal.udef(self, \"$\" + names[i]);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$instance_variables', function $$instance_variables() {\n      var self = this, consts = nil;\n\n      \n      consts = (Opal.Module.$$nesting = $nesting, self.$constants());\n      \n      var result = [];\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {\n          result.push('@' + name);\n        }\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$dup', function $$dup() {\n      var $yield = $$dup.$$p || nil, self = this, copy = nil;\n\n      $$dup.$$p = null;\n      \n      copy = $send2(self, $find_super(self, 'dup', $$dup, false, true), 'dup', [], $yield);\n      copy.$copy_class_variables(self);\n      copy.$copy_constants(self);\n      return copy;\n    });\n    \n    $def(self, '$copy_class_variables', function $$copy_class_variables(other) {\n      var self = this;\n\n      \n      for (var name in other.$$cvars) {\n        self.$$cvars[name] = other.$$cvars[name];\n      }\n    \n    });\n    \n    $def(self, '$copy_constants', function $$copy_constants(other) {\n      var self = this;\n\n      \n      var name, other_constants = other.$$const;\n\n      for (name in other_constants) {\n        $const_set(self, name, other_constants[name]);\n      }\n    \n    });\n    \n    $def(self, '$refine', function $$refine(klass) {\n      var block = $$refine.$$p || nil, $a, self = this, refinement_module = nil, m = nil, klass_id = nil;\n\n      $$refine.$$p = null;\n      \n      ;\n      $a = [self, nil, nil], (refinement_module = $a[0]), (m = $a[1]), (klass_id = $a[2]), $a;\n      \n      klass_id = Opal.id(klass);\n      if (typeof self.$$refine_modules === \"undefined\") {\n        self.$$refine_modules = Object.create(null);\n      }\n      if (typeof self.$$refine_modules[klass_id] === \"undefined\") {\n        m = self.$$refine_modules[klass_id] = $$$('Refinement').$new();\n      }\n      else {\n        m = self.$$refine_modules[klass_id];\n      }\n      m.refinement_module = refinement_module\n      m.refined_class = klass\n    ;\n      $send(m, 'class_exec', [], block.$to_proc());\n      return m;\n    });\n    \n    $def(self, '$refinements', function $$refinements() {\n      var self = this;\n\n      \n      var refine_modules = self.$$refine_modules, hash = $hash2([], {});;\n      if (typeof refine_modules === \"undefined\") return hash;\n      for (var id in refine_modules) {\n        hash['$[]='](refine_modules[id].refined_class, refine_modules[id]);\n      }\n      return hash;\n    \n    });\n    \n    $def(self, '$using', function $$using(mod) {\n      \n      return $Kernel.$raise(\"Module#using is not permitted in methods\")\n    });\n    $alias(self, \"class_eval\", \"module_eval\");\n    $alias(self, \"class_exec\", \"module_exec\");\n    return $alias(self, \"inspect\", \"to_s\");\n  })('::', null, $nesting);\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Refinement');\n\n    var $proto = self.$$prototype;\n\n    $proto.refinement_module = $proto.refined_class = nil;\n    \n    self.$attr_reader(\"refined_class\");\n    return $def(self, '$inspect', function $$inspect() {\n      var $yield = $$inspect.$$p || nil, self = this;\n\n      $$inspect.$$p = null;\n      if ($truthy(self.refinement_module)) {\n        return \"#<refinement:\" + (self.refined_class.$inspect()) + \"@\" + (self.refinement_module.$inspect()) + \">\"\n      } else {\n        return $send2(self, $find_super(self, 'inspect', $$inspect, false, true), 'inspect', [], $yield)\n      }\n    });\n  })('::', $Module);\n};\n\nOpal.modules[\"corelib/class\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $send = Opal.send, $defs = Opal.defs, $def = Opal.def, $rb_plus = Opal.rb_plus, $return_val = Opal.return_val, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $Kernel = Opal.Kernel, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,class_eval,to_proc,+,subclasses,flatten,map,initialize_copy,allocate,name,to_s,raise');\n  \n  self.$require(\"corelib/module\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Class');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $defs(self, '$new', function $Class_new$1(superclass) {\n      var block = $Class_new$1.$$p || nil;\n\n      $Class_new$1.$$p = null;\n      \n      ;\n      if (superclass == null) superclass = $$('Object');\n      \n      if (!superclass.$$is_class) {\n        throw Opal.TypeError.$new(\"superclass must be a Class\");\n      }\n\n      var klass = Opal.allocate_class(nil, superclass);\n      superclass.$inherited(klass);\n      ((block !== nil) ? ($send((klass), 'class_eval', [], block.$to_proc())) : nil)\n      return klass;\n    ;\n    }, -1);\n    \n    $def(self, '$allocate', function $$allocate() {\n      var self = this;\n\n      \n      var obj = new self.$$constructor();\n      obj.$$id = Opal.uid();\n      return obj;\n    \n    });\n    \n    $def(self, '$descendants', function $$descendants() {\n      var self = this;\n\n      return $rb_plus(self.$subclasses(), $send(self.$subclasses(), 'map', [], \"descendants\".$to_proc()).$flatten())\n    });\n    \n    $def(self, '$inherited', $return_val(nil));\n    \n    $def(self, '$initialize_dup', function $$initialize_dup(original) {\n      var self = this;\n\n      \n      self.$initialize_copy(original);\n      \n      self.$$name = null;\n      self.$$full_name = null;\n    ;\n    });\n    \n    $def(self, '$new', function $Class_new$2($a) {\n      var block = $Class_new$2.$$p || nil, $post_args, args, self = this;\n\n      $Class_new$2.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var object = self.$allocate();\n      Opal.send(object, object.$initialize, args, block);\n      return object;\n    ;\n    }, -1);\n    \n    $def(self, '$subclasses', function $$subclasses() {\n      var self = this;\n\n      \n      if (typeof WeakRef !== 'undefined') {\n        var i, subclass, out = [];\n        for (i = 0; i < self.$$subclasses.length; i++) {\n          subclass = self.$$subclasses[i].deref();\n          if (subclass !== undefined) {\n            out.push(subclass);\n          }\n        }\n        return out;\n      }\n      else {\n        return self.$$subclasses;\n      }\n    \n    });\n    \n    $def(self, '$superclass', function $$superclass() {\n      var self = this;\n\n      return self.$$super || nil;\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var $yield = $$to_s.$$p || nil, self = this;\n\n      $$to_s.$$p = null;\n      \n      var singleton_of = self.$$singleton_of;\n\n      if (singleton_of && singleton_of.$$is_a_module) {\n        return \"#<Class:\" + ((singleton_of).$name()) + \">\";\n      }\n      else if (singleton_of) {\n        // a singleton class created from an object\n        return \"#<Class:#<\" + ((singleton_of.$$class).$name()) + \":0x\" + ((Opal.id(singleton_of)).$to_s(16)) + \">>\";\n      }\n\n      return $send2(self, $find_super(self, 'to_s', $$to_s, false, true), 'to_s', [], null);\n    \n    });\n    \n    $def(self, '$attached_object', function $$attached_object() {\n      var self = this;\n\n      \n      if (self.$$singleton_of != null) {\n        return self.$$singleton_of;\n      }\n      else {\n        $Kernel.$raise($$$('TypeError'), \"`\" + (self) + \"' is not a singleton class\")\n      }\n    \n    });\n    return $alias(self, \"inspect\", \"to_s\");\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/basic_object\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $slice = Opal.slice, $def = Opal.def, $alias = Opal.alias, $return_val = Opal.return_val, $Opal = Opal.Opal, $truthy = Opal.truthy, $range = Opal.range, $Kernel = Opal.Kernel, $to_a = Opal.to_a, $hash2 = Opal.hash2, $send = Opal.send, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('==,raise,inspect,pristine,!,nil?,cover?,size,merge,compile,proc,[],first,>=,length,instance_variable_get,any?,new,caller');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'BasicObject');\n\n    \n    \n    \n    $def(self, '$initialize', function $$initialize($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$==', function $BasicObject_$eq_eq$1(other) {\n      var self = this;\n\n      return self === other;\n    });\n    \n    $def(self, '$eql?', function $BasicObject_eql$ques$2(other) {\n      var self = this;\n\n      return self['$=='](other)\n    });\n    $alias(self, \"equal?\", \"==\");\n    \n    $def(self, '$__id__', function $$__id__() {\n      var self = this;\n\n      \n      if (self.$$id != null) {\n        return self.$$id;\n      }\n      Opal.prop(self, '$$id', Opal.uid());\n      return self.$$id;\n    \n    });\n    \n    $def(self, '$__send__', function $$__send__(symbol, $a) {\n      var block = $$__send__.$$p || nil, $post_args, args, self = this;\n\n      $$__send__.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      \n      if (!symbol.$$is_string) {\n        self.$raise($$$('TypeError'), \"\" + (self.$inspect()) + \" is not a symbol nor a string\")\n      }\n\n      var func = self[Opal.jsid(symbol)];\n\n      if (func) {\n        if (block !== nil) {\n          func.$$p = block;\n        }\n\n        return func.apply(self, args);\n      }\n\n      if (block !== nil) {\n        self.$method_missing.$$p = block;\n      }\n\n      return self.$method_missing.apply(self, [symbol].concat(args));\n    ;\n    }, -2);\n    \n    $def(self, '$!', $return_val(false));\n    $Opal.$pristine(\"!\");\n    \n    $def(self, '$!=', function $BasicObject_$not_eq$3(other) {\n      var self = this;\n\n      return self['$=='](other)['$!']()\n    });\n    \n    $def(self, '$instance_eval', function $$instance_eval($a) {\n      var block = $$instance_eval.$$p || nil, $post_args, args, $b, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, compiled = nil;\n\n      $$instance_eval.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if (($truthy(block['$nil?']()) && ($truthy(!!Opal.compile)))) {\n        \n        if (!$truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat($to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy(($ret_or_1 = file)) ? ($ret_or_1) : (\"(eval)\")), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $Opal.$compile(string, compiling_options);\n        block = $send($Kernel, 'proc', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;\n\n          return new Function(\"Opal,self\", \"return \" + compiled)(Opal, self);}, {$$s: self});\n      } else if ((($truthy(block['$nil?']()) && ($truthy($rb_ge(args.$length(), 1)))) && ($eqeq(args.$first()['$[]'](0), \"@\")))) {\n        return self.$instance_variable_get(args.$first())\n      } else if ($truthy(args['$any?']())) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (args.$size()) + \" for 0)\")\n      };\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      // Need to pass $$eval so that method definitions know if this is\n      // being done on a class/module. Cannot be compiler driven since\n      // send(:instance_eval) needs to work.\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.call(self, self);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.call(self, self);\n      }\n\n      block.$$s = old;\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$instance_exec', function $$instance_exec($a) {\n      var block = $$instance_exec.$$p || nil, $post_args, args, self = this;\n\n      $$instance_exec.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if (!$truthy(block)) {\n        $Kernel.$raise($$$('ArgumentError'), \"no block given\")\n      };\n      \n      var block_self = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.apply(self, args);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.apply(self, args);\n      }\n\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$singleton_method_added', function $$singleton_method_added($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$singleton_method_removed', function $$singleton_method_removed($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$singleton_method_undefined', function $$singleton_method_undefined($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    \n    $def(self, '$method_missing', function $$method_missing(symbol, $a) {\n      var block = $$method_missing.$$p || nil, $post_args, args, self = this, inspect_result = nil;\n\n      $$method_missing.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      inspect_result = $Opal.$inspect(self);\n      return $Kernel.$raise($$$('NoMethodError').$new(\"undefined method `\" + (symbol) + \"' for \" + (inspect_result), symbol, args), nil, $Kernel.$caller(1));\n    }, -2);\n    $Opal.$pristine(self, \"method_missing\");\n    return $def(self, '$respond_to_missing?', function $BasicObject_respond_to_missing$ques$5(method_name, include_all) {\n      \n      \n      if (include_all == null) include_all = false;\n      return false;\n    }, -2);\n  })('::', null)\n};\n\nOpal.modules[\"corelib/kernel\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $Opal = Opal.Opal, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $freeze_props = Opal.freeze_props, $jsid = Opal.jsid, $module = Opal.module, $return_val = Opal.return_val, $def = Opal.def, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $ensure_kwargs = Opal.ensure_kwargs, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $eqeqeq = Opal.eqeqeq, $return_self = Opal.return_self, $rb_le = Opal.rb_le, $extract_kwargs = Opal.extract_kwargs, $rb_lt = Opal.rb_lt, $Object = Opal.Object, $alias = Opal.alias, $klass = Opal.klass, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('!,=~,==,object_id,raise,new,class,coerce_to?,<<,map,caller,nil?,allocate,copy_instance_variables,copy_singleton_methods,initialize_clone,frozen?,freeze,initialize_copy,define_method,singleton_class,to_proc,initialize_dup,for,empty?,pop,call,append_features,extend_object,extended,gets,__id__,include?,each,instance_variables,instance_variable_get,inspect,+,to_s,instance_variable_name!,respond_to?,to_int,coerce_to!,Integer,===,enum_for,result,any?,print,format,puts,<=,length,[],readline,<,first,split,to_str,exception,backtrace,rand,respond_to_missing?,pristine,try_convert!,expand_path,join,start_with?,new_seed,srand,tag,value,open,is_a?,__send__,yield_self,include');\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    \n    $def(self, '$=~', $return_val(false));\n    \n    $def(self, '$!~', function $Kernel_$excl_tilde$1(obj) {\n      var self = this;\n\n      return self['$=~'](obj)['$!']()\n    });\n    \n    $def(self, '$===', function $Kernel_$eq_eq_eq$2(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.$object_id()['$=='](other.$object_id())))) {\n        return $ret_or_1\n      } else {\n        return self['$=='](other)\n      }\n    });\n    \n    $def(self, '$<=>', function $Kernel_$lt_eq_gt$3(other) {\n      var self = this;\n\n      \n      // set guard for infinite recursion\n      self.$$comparable = true;\n\n      var x = self['$=='](other);\n\n      if (x && x !== nil) {\n        return 0;\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$method', function $$method(name) {\n      var self = this;\n\n      \n      var meth = self[$jsid(name)];\n\n      if (!meth || meth.$$stub) {\n        $Kernel.$raise($$$('NameError').$new(\"undefined method `\" + (name) + \"' for class `\" + (self.$class()) + \"'\", name));\n      }\n\n      return $$$('Method').$new(self, meth.$$owner || self.$class(), meth, name);\n    \n    });\n    \n    $def(self, '$methods', function $$methods(all) {\n      var self = this;\n\n      \n      if (all == null) all = true;\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.own_methods(self);\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$public_methods', function $$public_methods(all) {\n      var self = this;\n\n      \n      if (all == null) all = true;\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.receiver_methods(self);\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$Array', function $$Array(object) {\n      \n      \n      var coerced;\n\n      if (object === nil) {\n        return [];\n      }\n\n      if (object.$$is_array) {\n        return object;\n      }\n\n      coerced = $Opal['$coerce_to?'](object, $$$('Array'), \"to_ary\");\n      if (coerced !== nil) { return coerced; }\n\n      coerced = $Opal['$coerce_to?'](object, $$$('Array'), \"to_a\");\n      if (coerced !== nil) { return coerced; }\n\n      return [object];\n    \n    });\n    \n    $def(self, '$at_exit', function $$at_exit() {\n      var block = $$at_exit.$$p || nil, $ret_or_1 = nil;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      $$at_exit.$$p = null;\n      \n      ;\n      $gvars.__at_exit__ = ($truthy(($ret_or_1 = $gvars.__at_exit__)) ? ($ret_or_1) : ([]));\n      $gvars.__at_exit__['$<<'](block);\n      return block;\n    });\n    \n    $def(self, '$caller', function $$caller(start, length) {\n      \n      \n      if (start == null) start = 1;\n      if (length == null) length = nil;\n      \n      var stack, result;\n\n      stack = new Error().$backtrace();\n      result = [];\n\n      for (var i = start + 1, ii = stack.length; i < ii; i++) {\n        if (!stack[i].match(/runtime\\.js/)) {\n          result.push(stack[i]);\n        }\n      }\n      if (length != nil) result = result.slice(0, length);\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$caller_locations', function $$caller_locations($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send($send(self, 'caller', $to_a(args)), 'map', [], function $$4(loc){\n        \n        if (loc == null) loc = nil;\n        return $$$($$$($$$('Thread'), 'Backtrace'), 'Location').$new(loc);});\n    }, -1);\n    \n    $def(self, '$class', function $Kernel_class$5() {\n      var self = this;\n\n      return self.$$class;\n    });\n    \n    $def(self, '$copy_instance_variables', function $$copy_instance_variables(other) {\n      var self = this;\n\n      \n      var keys = Object.keys(other), i, ii, name;\n      for (i = 0, ii = keys.length; i < ii; i++) {\n        name = keys[i];\n        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    });\n    \n    $def(self, '$copy_singleton_methods', function $$copy_singleton_methods(other) {\n      var self = this;\n\n      \n      var i, name, names, length;\n\n      if (other.hasOwnProperty('$$meta') && other.$$meta !== null) {\n        var other_singleton_class = Opal.get_singleton_class(other);\n        var self_singleton_class = Opal.get_singleton_class(self);\n        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);\n\n        for (i = 0, length = names.length; i < length; i++) {\n          name = names[i];\n          if (Opal.is_method(name)) {\n            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];\n          }\n        }\n\n        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);\n        Object.setPrototypeOf(\n          self_singleton_class.$$prototype,\n          Object.getPrototypeOf(other_singleton_class.$$prototype)\n        );\n      }\n\n      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {\n        name = names[i];\n        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    });\n    \n    $def(self, '$clone', function $$clone($kwargs) {\n      var freeze, self = this, copy = nil;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = nil;\n      if (!(($truthy(freeze['$nil?']()) || ($eqeq(freeze, true))) || ($eqeq(freeze, false)))) {\n        self.$raise($$('ArgumentError'), \"unexpected value for freeze: \" + (freeze.$class()))\n      };\n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self, $hash2([\"freeze\"], {\"freeze\": freeze}));\n      if (($eqeq(freeze, true) || (($truthy(freeze['$nil?']()) && ($truthy(self['$frozen?']())))))) {\n        copy.$freeze()\n      };\n      return copy;\n    }, -1);\n    \n    $def(self, '$initialize_clone', function $$initialize_clone(other, $kwargs) {\n      var freeze, self = this;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = nil;\n      self.$initialize_copy(other);\n      return self;\n    }, -2);\n    \n    $def(self, '$define_singleton_method', function $$define_singleton_method(name, method) {\n      var block = $$define_singleton_method.$$p || nil, self = this;\n\n      $$define_singleton_method.$$p = null;\n      \n      ;\n      ;\n      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());\n    }, -2);\n    \n    $def(self, '$dup', function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$initialize_dup(self);\n      return copy;\n    });\n    \n    $def(self, '$initialize_dup', function $$initialize_dup(other) {\n      var self = this;\n\n      return self.$initialize_copy(other)\n    });\n    \n    $def(self, '$enum_for', function $$enum_for($a, $b) {\n      var block = $$enum_for.$$p || nil, $post_args, method, args, self = this;\n\n      $$enum_for.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      \n      if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = \"each\";\n      args = $post_args;\n      return $send($$$('Enumerator'), 'for', [self, method].concat($to_a(args)), block.$to_proc());\n    }, -1);\n    \n    $def(self, '$equal?', function $Kernel_equal$ques$6(other) {\n      var self = this;\n\n      return self === other;\n    });\n    \n    $def(self, '$exit', function $$exit(status) {\n      var $ret_or_1 = nil, block = nil;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      \n      if (status == null) status = true;\n      $gvars.__at_exit__ = ($truthy(($ret_or_1 = $gvars.__at_exit__)) ? ($ret_or_1) : ([]));\n      while (!($truthy($gvars.__at_exit__['$empty?']()))) {\n      \n        block = $gvars.__at_exit__.$pop();\n        block.$call();\n      };\n      \n      if (status.$$is_boolean) {\n        status = status ? 0 : 1;\n      } else {\n        status = $coerce_to(status, $$$('Integer'), 'to_int')\n      }\n\n      Opal.exit(status);\n    ;\n      return nil;\n    }, -1);\n    \n    $def(self, '$extend', function $$extend($a) {\n      var $post_args, mods, self = this;\n\n      \n      $post_args = $slice(arguments);\n      mods = $post_args;\n      \n      if (mods.length == 0) {\n        self.$raise($$$('ArgumentError'), \"wrong number of arguments (given 0, expected 1+)\")\n      }\n\n      $deny_frozen_access(self);\n\n      var singleton = self.$singleton_class();\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(singleton);\n        (mod).$extend_object(self);\n        (mod).$extended(self);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      \n      if (typeof(self) === \"object\") {\n        $freeze_props(self);\n        return $freeze(self);\n      }\n      return self;\n    ;\n    });\n    \n    $def(self, '$frozen?', function $Kernel_frozen$ques$7() {\n      var self = this;\n\n      \n      switch (typeof(self)) {\n      case \"string\":\n      case \"symbol\":\n      case \"number\":\n      case \"boolean\":\n        return true;\n      case \"object\":\n        return (self.$$frozen || false);\n      default:\n        return false;\n      }\n    \n    });\n    \n    $def(self, '$gets', function $$gets($a) {\n      var $post_args, args;\n      if ($gvars.stdin == null) $gvars.stdin = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send($gvars.stdin, 'gets', $to_a(args));\n    }, -1);\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return self.$__id__()\n    });\n    \n    $def(self, '$initialize_copy', $return_val(nil));\n    var inspect_stack = [];\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this, ivs = nil, id = nil, pushed = nil, e = nil;\n\n      return (function() { try {\n      try {\n        \n        ivs = \"\";\n        id = self.$__id__();\n        if ($truthy((inspect_stack)['$include?'](id))) {\n          ivs = \" ...\"\n        } else {\n          \n          (inspect_stack)['$<<'](id);\n          pushed = true;\n          $send(self.$instance_variables(), 'each', [], function $$8(i){var self = $$8.$$s == null ? this : $$8.$$s, ivar = nil, inspect = nil;\n\n            \n            if (i == null) i = nil;\n            ivar = self.$instance_variable_get(i);\n            inspect = $$('Opal').$inspect(ivar);\n            return (ivs = $rb_plus(ivs, \" \" + (i) + \"=\" + (inspect)));}, {$$s: self});\n        };\n        return \"#<\" + (self.$class()) + \":0x\" + (id.$to_s(16)) + (ivs) + \">\";\n      } catch ($err) {\n        if (Opal.rescue($err, [$$('StandardError')])) {(e = $err)\n          try {\n            return \"#<\" + (self.$class()) + \":0x\" + (id.$to_s(16)) + \">\"\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n      } finally {\n        ($truthy(pushed) ? ((inspect_stack).$pop()) : nil)\n      }; })()\n    });\n    \n    $def(self, '$instance_of?', function $Kernel_instance_of$ques$9(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        $Kernel.$raise($$$('TypeError'), \"class or module required\");\n      }\n\n      return self.$$class === klass;\n    \n    });\n    \n    $def(self, '$instance_variable_defined?', function $Kernel_instance_variable_defined$ques$10(name) {\n      var self = this;\n\n      \n      name = $Opal['$instance_variable_name!'](name);\n      return Opal.hasOwnProperty.call(self, name.substr(1));;\n    });\n    \n    $def(self, '$instance_variable_get', function $$instance_variable_get(name) {\n      var self = this;\n\n      \n      name = $Opal['$instance_variable_name!'](name);\n      \n      var ivar = self[Opal.ivar(name.substr(1))];\n\n      return ivar == null ? nil : ivar;\n    ;\n    });\n    \n    $def(self, '$instance_variable_set', function $$instance_variable_set(name, value) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      name = $Opal['$instance_variable_name!'](name);\n      return self[Opal.ivar(name.substr(1))] = value;;\n    });\n    \n    $def(self, '$remove_instance_variable', function $$remove_instance_variable(name) {\n      var self = this;\n\n      \n      name = $Opal['$instance_variable_name!'](name);\n      \n      var key = Opal.ivar(name.substr(1)),\n          val;\n      if (self.hasOwnProperty(key)) {\n        val = self[key];\n        delete self[key];\n        return val;\n      }\n    ;\n      return $Kernel.$raise($$$('NameError'), \"instance variable \" + (name) + \" not defined\");\n    });\n    \n    $def(self, '$instance_variables', function $$instance_variables() {\n      var self = this;\n\n      \n      var result = [], ivar;\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {\n          if (name.substr(-1) === '$') {\n            ivar = name.slice(0, name.length - 1);\n          } else {\n            ivar = name;\n          }\n          result.push('@' + ivar);\n        }\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$Integer', function $$Integer(value, base) {\n      \n      \n      ;\n      \n      var i, str, base_digits;\n\n      if (!value.$$is_string) {\n        if (base !== undefined) {\n          $Kernel.$raise($$$('ArgumentError'), \"base specified for non string value\")\n        }\n        if (value === nil) {\n          $Kernel.$raise($$$('TypeError'), \"can't convert nil into Integer\")\n        }\n        if (value.$$is_number) {\n          if (value === Infinity || value === -Infinity || isNaN(value)) {\n            $Kernel.$raise($$$('FloatDomainError'), value)\n          }\n          return Math.floor(value);\n        }\n        if (value['$respond_to?'](\"to_int\")) {\n          i = value.$to_int();\n          if (i !== nil) {\n            return i;\n          }\n        }\n        return $Opal['$coerce_to!'](value, $$$('Integer'), \"to_i\");\n      }\n\n      if (value === \"0\") {\n        return 0;\n      }\n\n      if (base === undefined) {\n        base = 0;\n      } else {\n        base = $coerce_to(base, $$$('Integer'), 'to_int');\n        if (base === 1 || base < 0 || base > 36) {\n          $Kernel.$raise($$$('ArgumentError'), \"invalid radix \" + (base))\n        }\n      }\n\n      str = value.toLowerCase();\n\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n      str = str.replace(/^(\\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {\n        switch (flag) {\n        case '0b':\n          if (base === 0 || base === 2) {\n            base = 2;\n            return head;\n          }\n          // no-break\n        case '0':\n        case '0o':\n          if (base === 0 || base === 8) {\n            base = 8;\n            return head;\n          }\n          // no-break\n        case '0d':\n          if (base === 0 || base === 10) {\n            base = 10;\n            return head;\n          }\n          // no-break\n        case '0x':\n          if (base === 0 || base === 16) {\n            base = 16;\n            return head;\n          }\n          // no-break\n        }\n        $Kernel.$raise($$$('ArgumentError'), \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      });\n\n      base = (base === 0 ? 10 : base);\n\n      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));\n\n      if (!(new RegExp('^\\\\s*[+-]?[' + base_digits + ']+\\\\s*$')).test(str)) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      i = parseInt(str, base);\n\n      if (isNaN(i)) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      return i;\n    ;\n    }, -2);\n    \n    $def(self, '$Float', function $$Float(value) {\n      \n      \n      var str;\n\n      if (value === nil) {\n        $Kernel.$raise($$$('TypeError'), \"can't convert nil into Float\")\n      }\n\n      if (value.$$is_string) {\n        str = value.toString();\n\n        str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n        //Special case for hex strings only:\n        if (/^\\s*[-+]?0[xX][0-9a-fA-F]+\\s*$/.test(str)) {\n          return $Kernel.$Integer(str);\n        }\n\n        if (!/^\\s*[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.test(str)) {\n          $Kernel.$raise($$$('ArgumentError'), \"invalid value for Float(): \\\"\" + (value) + \"\\\"\")\n        }\n\n        return parseFloat(str);\n      }\n\n      return $Opal['$coerce_to!'](value, $$$('Float'), \"to_f\");\n    \n    });\n    \n    $def(self, '$Hash', function $$Hash(arg) {\n      \n      \n      if (($truthy(arg['$nil?']()) || ($eqeq(arg, [])))) {\n        return $hash2([], {})\n      };\n      if ($eqeqeq($$$('Hash'), arg)) {\n        return arg\n      };\n      return $Opal['$coerce_to!'](arg, $$$('Hash'), \"to_hash\");\n    });\n    \n    $def(self, '$is_a?', function $Kernel_is_a$ques$11(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        $Kernel.$raise($$$('TypeError'), \"class or module required\");\n      }\n\n      return Opal.is_a(self, klass);\n    \n    });\n    \n    $def(self, '$itself', $return_self);\n    \n    $def(self, '$lambda', function $$lambda() {\n      var block = $$lambda.$$p || nil;\n\n      $$lambda.$$p = null;\n      \n      ;\n      return Opal.lambda(block);;\n    });\n    \n    $def(self, '$load', function $$load(file) {\n      \n      \n      file = $Opal['$coerce_to!'](file, $$$('String'), \"to_str\");\n      return Opal.load(file);\n    });\n    \n    $def(self, '$loop', function $$loop() {\n      var $yield = $$loop.$$p || nil, self = this, e = nil;\n\n      $$loop.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"loop\"], function $$12(){\n          return $$$($$$('Float'), 'INFINITY')})\n      };\n      while ($truthy(true)) {\n      \n        try {\n          Opal.yieldX($yield, [])\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('StopIteration')])) {(e = $err)\n            try {\n              return e.$result()\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };\n      };\n      return self;\n    });\n    \n    $def(self, '$nil?', $return_val(false));\n    \n    $def(self, '$printf', function $$printf($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      if ($truthy(args['$any?']())) {\n        self.$print($send(self, 'format', $to_a(args)))\n      };\n      return nil;\n    }, -1);\n    \n    $def(self, '$proc', function $$proc() {\n      var block = $$proc.$$p || nil;\n\n      $$proc.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        $Kernel.$raise($$$('ArgumentError'), \"tried to create Proc object without a block\")\n      };\n      block.$$is_lambda = false;\n      return block;\n    });\n    \n    $def(self, '$puts', function $$puts($a) {\n      var $post_args, strs;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      $post_args = $slice(arguments);\n      strs = $post_args;\n      return $send($gvars.stdout, 'puts', $to_a(strs));\n    }, -1);\n    \n    $def(self, '$p', function $$p($a) {\n      var $post_args, args;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      $send(args, 'each', [], function $$13(obj){        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n        \n        if (obj == null) obj = nil;\n        return $gvars.stdout.$puts(obj.$inspect());});\n      if ($truthy($rb_le(args.$length(), 1))) {\n        return args['$[]'](0)\n      } else {\n        return args\n      };\n    }, -1);\n    \n    $def(self, '$print', function $$print($a) {\n      var $post_args, strs;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      $post_args = $slice(arguments);\n      strs = $post_args;\n      return $send($gvars.stdout, 'print', $to_a(strs));\n    }, -1);\n    \n    $def(self, '$readline', function $$readline($a) {\n      var $post_args, args;\n      if ($gvars.stdin == null) $gvars.stdin = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send($gvars.stdin, 'readline', $to_a(args));\n    }, -1);\n    \n    $def(self, '$warn', function $$warn($a, $b) {\n      var $post_args, $kwargs, strs, uplevel, $c, $d, self = this, location = nil;\n      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;\n      if ($gvars.stderr == null) $gvars.stderr = nil;\n\n      \n      $post_args = $slice(arguments);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      strs = $post_args;\n      \n      uplevel = $kwargs.$$smap[\"uplevel\"];if (uplevel == null) uplevel = nil;\n      if ($truthy(uplevel)) {\n        \n        uplevel = $Opal['$coerce_to!'](uplevel, $$$('Integer'), \"to_str\");\n        if ($truthy($rb_lt(uplevel, 0))) {\n          $Kernel.$raise($$$('ArgumentError'), \"negative level (\" + (uplevel) + \")\")\n        };\n        location = ($c = ($d = self.$caller($rb_plus(uplevel, 1), 1).$first(), ($d === nil || $d == null) ? nil : $d.$split(\":in `\")), ($c === nil || $c == null) ? nil : $c.$first());\n        if ($truthy(location)) {\n          location = \"\" + (location) + \": \"\n        };\n        strs = $send(strs, 'map', [], function $$14(s){\n          \n          if (s == null) s = nil;\n          return \"\" + (location) + \"warning: \" + (s);});\n      };\n      if (($truthy($gvars.VERBOSE['$nil?']()) || ($truthy(strs['$empty?']())))) {\n        return nil\n      } else {\n        return $send($gvars.stderr, 'puts', $to_a(strs))\n      };\n    }, -1);\n    \n    $def(self, '$raise', function $$raise(exception, string, backtrace) {\n            if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n      if ($gvars[\"@\"] == null) $gvars[\"@\"] = nil;\n\n      \n      ;\n      if (string == null) string = nil;\n      if (backtrace == null) backtrace = nil;\n      \n      if (exception == null && $gvars[\"!\"] !== nil) {\n        throw $gvars[\"!\"];\n      }\n      if (exception == null) {\n        exception = $$$('RuntimeError').$new(\"\");\n      }\n      else if ($respond_to(exception, '$to_str')) {\n        exception = $$$('RuntimeError').$new(exception.$to_str());\n      }\n      // using respond_to? and not an undefined check to avoid method_missing matching as true\n      else if (exception.$$is_class && $respond_to(exception, '$exception')) {\n        exception = exception.$exception(string);\n      }\n      else if (exception.$$is_exception) {\n        // exception is fine\n      }\n      else {\n        exception = $$$('TypeError').$new(\"exception class/object expected\");\n      }\n\n      if (backtrace !== nil) {\n        exception.$set_backtrace(backtrace);\n      }\n\n      if ($gvars[\"!\"] !== nil) {\n        Opal.exceptions.push($gvars[\"!\"]);\n      }\n\n      $gvars[\"!\"] = exception;\n      $gvars[\"@\"] = (exception).$backtrace();\n\n      throw exception;\n    ;\n    }, -1);\n    \n    $def(self, '$rand', function $$rand(max) {\n      \n      \n      ;\n      \n      if (max === undefined) {\n        return $$$($$$('Random'), 'DEFAULT').$rand();\n      }\n\n      if (max.$$is_number) {\n        if (max < 0) {\n          max = Math.abs(max);\n        }\n\n        if (max % 1 !== 0) {\n          max = max.$to_i();\n        }\n\n        if (max === 0) {\n          max = undefined;\n        }\n      }\n    ;\n      return $$$($$$('Random'), 'DEFAULT').$rand(max);\n    }, -1);\n    \n    $def(self, '$respond_to?', function $Kernel_respond_to$ques$15(name, include_all) {\n      var self = this;\n\n      \n      if (include_all == null) include_all = false;\n      \n      var body = self[$jsid(name)];\n\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n\n      if (self['$respond_to_missing?'].$$pristine === true) {\n        return false;\n      } else {\n        return self['$respond_to_missing?'](name, include_all);\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$respond_to_missing?', function $Kernel_respond_to_missing$ques$16(method_name, include_all) {\n      \n      \n      if (include_all == null) include_all = false;\n      return false;\n    }, -2);\n    $Opal.$pristine(self, \"respond_to?\", \"respond_to_missing?\");\n    \n    $def(self, '$require', function $$require(file) {\n      \n      \n      // As Object.require refers to Kernel.require once Kernel has been loaded the String\n      // class may not be available yet, the coercion requires both  String and Array to be loaded.\n      if (typeof file !== 'string' && Opal.String && Opal.Array) {\n        (file = $Opal['$coerce_to!'](file, $$$('String'), \"to_str\"))\n      }\n      return Opal.require(file)\n    \n    });\n    \n    $def(self, '$require_relative', function $$require_relative(file) {\n      \n      \n      $Opal['$try_convert!'](file, $$$('String'), \"to_str\");\n      file = $$$('File').$expand_path($$$('File').$join(Opal.current_file, \"..\", file));\n      return Opal.require(file);\n    });\n    \n    $def(self, '$require_tree', function $$require_tree(path, $kwargs) {\n      var autoload;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      autoload = $kwargs.$$smap[\"autoload\"];if (autoload == null) autoload = false;\n      \n      var result = [];\n\n      path = $$$('File').$expand_path(path)\n      path = Opal.normalize(path);\n      if (path === '.') path = '';\n      for (var name in Opal.modules) {\n        if ((name)['$start_with?'](path)) {\n          if(!autoload) {\n            result.push([name, Opal.require(name)]);\n          } else {\n            result.push([name, true]); // do nothing, delegated to a autoloading\n          }\n        }\n      }\n\n      return result;\n    ;\n    }, -2);\n    \n    $def(self, '$singleton_class', function $$singleton_class() {\n      var self = this;\n\n      return Opal.get_singleton_class(self);\n    });\n    \n    $def(self, '$sleep', function $$sleep(seconds) {\n      \n      \n      if (seconds == null) seconds = nil;\n      \n      if (seconds === nil) {\n        $Kernel.$raise($$$('TypeError'), \"can't convert NilClass into time interval\")\n      }\n      if (!seconds.$$is_number) {\n        $Kernel.$raise($$$('TypeError'), \"can't convert \" + (seconds.$class()) + \" into time interval\")\n      }\n      if (seconds < 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"time interval must be positive\")\n      }\n      var get_time = Opal.global.performance ?\n        function() {return performance.now()} :\n        function() {return new Date()}\n\n      var t = get_time();\n      while (get_time() - t <= seconds * 1000);\n      return Math.round(seconds);\n    ;\n    }, -1);\n    \n    $def(self, '$srand', function $$srand(seed) {\n      \n      \n      if (seed == null) seed = $$('Random').$new_seed();\n      return $$$('Random').$srand(seed);\n    }, -1);\n    \n    $def(self, '$String', function $$String(str) {\n      var $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = $Opal['$coerce_to?'](str, $$$('String'), \"to_str\")))) {\n        return $ret_or_1\n      } else {\n        return $Opal['$coerce_to!'](str, $$$('String'), \"to_s\")\n      }\n    });\n    \n    $def(self, '$tap', function $$tap() {\n      var block = $$tap.$$p || nil, self = this;\n\n      $$tap.$$p = null;\n      \n      ;\n      Opal.yield1(block, self);\n      return self;\n    });\n    \n    $def(self, '$to_proc', $return_self);\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this;\n\n      return \"#<\" + (self.$class()) + \":0x\" + (self.$__id__().$to_s(16)) + \">\"\n    });\n    \n    $def(self, '$catch', function $Kernel_catch$17(tag) {\n      var $yield = $Kernel_catch$17.$$p || nil, $ret_or_1 = nil, e = nil;\n\n      $Kernel_catch$17.$$p = null;\n      \n      if (tag == null) tag = nil;\n      try {\n        \n        tag = ($truthy(($ret_or_1 = tag)) ? ($ret_or_1) : ($Object.$new()));\n        return Opal.yield1($yield, tag);;\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('UncaughtThrowError')])) {(e = $err)\n          try {\n            \n            if ($eqeq(e.$tag(), tag)) {\n              return e.$value()\n            };\n            return $Kernel.$raise();\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      };\n    }, -1);\n    \n    $def(self, '$throw', function $Kernel_throw$18(tag, obj) {\n      \n      \n      if (obj == null) obj = nil;\n      return $Kernel.$raise($$$('UncaughtThrowError').$new(tag, obj));\n    }, -2);\n    \n    $def(self, '$open', function $$open($a) {\n      var block = $$open.$$p || nil, $post_args, args;\n\n      $$open.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send($$$('File'), 'open', $to_a(args), block.$to_proc());\n    }, -1);\n    \n    $def(self, '$yield_self', function $$yield_self() {\n      var $yield = $$yield_self.$$p || nil, self = this;\n\n      $$yield_self.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"yield_self\"], $return_val(1))\n      };\n      return Opal.yield1($yield, self);;\n    });\n    $alias(self, \"fail\", \"raise\");\n    $alias(self, \"kind_of?\", \"is_a?\");\n    $alias(self, \"object_id\", \"__id__\");\n    $alias(self, \"public_send\", \"__send__\");\n    $alias(self, \"send\", \"__send__\");\n    $alias(self, \"then\", \"yield_self\");\n    return $alias(self, \"to_enum\", \"enum_for\");\n  })('::', $nesting);\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Object');\n\n    \n    \n    delete $Object.$$prototype.$require;\n    return self.$include($Kernel);\n  })('::', null);\n};\n\nOpal.modules[\"corelib/main\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $return_val = Opal.return_val, $def = Opal.def, $Object = Opal.Object, $slice = Opal.slice, $Kernel = Opal.Kernel, self = Opal.top, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('include,raise');\n  return (function(self, $parent_nesting) {\n    \n    \n    \n    $def(self, '$to_s', $return_val(\"main\"));\n    \n    $def(self, '$include', function $$include(mod) {\n      \n      return $Object.$include(mod)\n    });\n    \n    $def(self, '$autoload', function $$autoload($a) {\n      var $post_args, args;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return Opal.Object.$autoload.apply(Opal.Object, args);;\n    }, -1);\n    return $def(self, '$using', function $$using(mod) {\n      \n      return $Kernel.$raise(\"main.using is permitted only at toplevel\")\n    });\n  })(Opal.get_singleton_class(self), $nesting)\n};\n\nOpal.modules[\"corelib/error/errno\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $klass = Opal.klass, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('+,errno,class,attr_reader');\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Errno');\n\n    var $nesting = [self].concat($parent_nesting), errors = nil, klass = nil;\n\n    \n    errors = [[\"EINVAL\", \"Invalid argument\", 22], [\"EEXIST\", \"File exists\", 17], [\"EISDIR\", \"Is a directory\", 21], [\"EMFILE\", \"Too many open files\", 24], [\"ESPIPE\", \"Illegal seek\", 29], [\"EACCES\", \"Permission denied\", 13], [\"EPERM\", \"Operation not permitted\", 1], [\"ENOENT\", \"No such file or directory\", 2], [\"ENAMETOOLONG\", \"File name too long\", 36]];\n    klass = nil;\n    \n    var i;\n    for (i = 0; i < errors.length; i++) {\n      (function() { // Create a closure\n        var class_name = errors[i][0];\n        var default_message = errors[i][1];\n        var errno = errors[i][2];\n\n        klass = Opal.klass(self, Opal.SystemCallError, class_name);\n        klass.errno = errno;\n\n        (function(self, $parent_nesting) {\n      \n      return $def(self, '$new', function $new$1(name) {\n        var $yield = $new$1.$$p || nil, self = this, message = nil;\n\n        $new$1.$$p = null;\n        \n        if (name == null) name = nil;\n        message = default_message;\n        if ($truthy(name)) {\n          message = $rb_plus(message, \" - \" + (name))\n        };\n        return $send2(self, $find_super(self, 'new', $new$1, false, true), 'new', [message], null);\n      }, -1)\n    })(Opal.get_singleton_class(klass), $nesting)\n      })();\n    }\n  ;\n  })('::', $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SystemCallError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    \n    $def(self, '$errno', function $$errno() {\n      var self = this;\n\n      return self.$class().$errno()\n    });\n    return (function(self, $parent_nesting) {\n      \n      return self.$attr_reader(\"errno\")\n    })(Opal.get_singleton_class(self), $nesting);\n  })('::', $$$('StandardError'), $nesting);\n};\n\nOpal.modules[\"corelib/error\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $slice = Opal.slice, $gvars = Opal.gvars, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $Kernel = Opal.Kernel, $not = Opal.not, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $Object = Opal.Object, $ensure_kwargs = Opal.ensure_kwargs, $send2 = Opal.send2, $find_super = Opal.find_super, $module = Opal.module, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('new,map,backtrace,clone,to_s,merge,tty?,[],include?,raise,dup,empty?,!,caller,shift,+,class,join,cause,full_message,==,reverse,split,autoload,attr_reader,inspect');\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Exception');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.message = nil;\n    \n    Opal.prop(self.$$prototype, '$$is_exception', true);\n    var stack_trace_limit;\n    Error.stackTraceLimit = 100;\n    $defs(self, '$new', function $Exception_new$1($a) {\n      var $post_args, args, self = this;\n      if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var message   = (args.length > 0) ? args[0] : nil;\n      var error     = new self.$$constructor(message);\n      error.name    = self.$$name;\n      error.message = message;\n      error.cause   = $gvars[\"!\"];\n      Opal.send(error, error.$initialize, args);\n\n      // Error.captureStackTrace() will use .name and .toString to build the\n      // first line of the stack trace so it must be called after the error\n      // has been initialized.\n      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html\n      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {\n        // Passing Kernel.raise will cut the stack trace from that point above\n        Error.captureStackTrace(error, stack_trace_limit);\n      }\n\n      return error;\n    ;\n    }, -1);\n    stack_trace_limit = self.$new;\n    $defs(self, '$exception', function $$exception($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send(self, 'new', $to_a(args));\n    }, -1);\n    \n    $def(self, '$initialize', function $$initialize($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return self.message = (args.length > 0) ? args[0] : nil;;\n    }, -1);\n    \n    // Convert backtrace from any format to Ruby format\n    function correct_backtrace(backtrace) {\n      var new_bt = [], m;\n\n      for (var i = 0; i < backtrace.length; i++) {\n        var loc = backtrace[i];\n        if (!loc || !loc.$$is_string) {\n          /* Do nothing */\n        }\n        /* Chromium format */\n        else if ((m = loc.match(/^    at (.*?) \\((.*?)\\)$/))) {\n          new_bt.push(m[2] + \":in `\" + m[1] + \"'\");\n        }\n        else if ((m = loc.match(/^    at (.*?)$/))) {\n          new_bt.push(m[1] + \":in `undefined'\");\n        }\n        /* Node format */\n        else if ((m = loc.match(/^  from (.*?)$/))) {\n          new_bt.push(m[1]);\n        }\n        /* Mozilla/Apple format */\n        else if ((m = loc.match(/^(.*?)@(.*?)$/))) {\n          new_bt.push(m[2] + ':in `' + m[1] + \"'\");\n        }\n      }\n\n      return new_bt;\n    }\n  ;\n    \n    $def(self, '$backtrace', function $$backtrace() {\n      var self = this;\n\n      \n      if (self.backtrace) {\n        // nil is a valid backtrace\n        return self.backtrace;\n      }\n\n      var backtrace = self.stack;\n\n      if (typeof(backtrace) !== 'undefined' && backtrace.$$is_string) {\n        return self.backtrace = correct_backtrace(backtrace.split(\"\\n\"));\n      }\n      else if (backtrace) {\n        return self.backtrace = correct_backtrace(backtrace);\n      }\n\n      return [];\n    \n    });\n    \n    $def(self, '$backtrace_locations', function $$backtrace_locations() {\n      var $a, self = this;\n\n      \n      if (self.backtrace_locations) return self.backtrace_locations;\n      self.backtrace_locations = ($a = self.$backtrace(), ($a === nil || $a == null) ? nil : $send($a, 'map', [], function $$2(loc){\n        \n        if (loc == null) loc = nil;\n        return $$$($$$($$$('Thread'), 'Backtrace'), 'Location').$new(loc);}))\n      return self.backtrace_locations;\n    \n    });\n    \n    $def(self, '$cause', function $$cause() {\n      var self = this;\n\n      return self.cause || nil;\n    });\n    \n    $def(self, '$exception', function $$exception(str) {\n      var self = this;\n\n      \n      if (str == null) str = nil;\n      \n      if (str === nil || self === str) {\n        return self;\n      }\n\n      var cloned = self.$clone();\n      cloned.message = str;\n      if (self.backtrace) cloned.backtrace = self.backtrace.$dup();\n      cloned.stack = self.stack;\n      cloned.cause = self.cause;\n      return cloned;\n    ;\n    }, -1);\n    \n    $def(self, '$message', function $$message() {\n      var self = this;\n\n      return self.$to_s()\n    });\n    \n    $def(self, '$full_message', function $$full_message(kwargs) {\n      var $a, $b, self = this, $ret_or_1 = nil, highlight = nil, order = nil, bold_underline = nil, bold = nil, reset = nil, bt = nil, first = nil, msg = nil;\n      if ($gvars.stderr == null) $gvars.stderr = nil;\n\n      \n      if (kwargs == null) kwargs = nil;\n      if (!$truthy((($a = $$('Hash', 'skip_raise')) ? 'constant' : nil))) {\n        return \"\" + (self.message) + \"\\n\" + (self.stack)\n      };\n      kwargs = $hash2([\"highlight\", \"order\"], {\"highlight\": $gvars.stderr['$tty?'](), \"order\": \"top\"}).$merge(($truthy(($ret_or_1 = kwargs)) ? ($ret_or_1) : ($hash2([], {}))));\n      $b = [kwargs['$[]'](\"highlight\"), kwargs['$[]'](\"order\")], (highlight = $b[0]), (order = $b[1]), $b;\n      if (!$truthy([true, false]['$include?'](highlight))) {\n        $Kernel.$raise($$$('ArgumentError'), \"expected true or false as highlight: \" + (highlight))\n      };\n      if (!$truthy([\"top\", \"bottom\"]['$include?'](order))) {\n        $Kernel.$raise($$$('ArgumentError'), \"expected :top or :bottom as order: \" + (order))\n      };\n      if ($truthy(highlight)) {\n        \n        bold_underline = \"\\u001b[1;4m\";\n        bold = \"\\u001b[1m\";\n        reset = \"\\u001b[m\";\n      } else {\n        bold_underline = (bold = (reset = \"\"))\n      };\n      bt = self.$backtrace().$dup();\n      if (($not(bt) || ($truthy(bt['$empty?']())))) {\n        bt = self.$caller()\n      };\n      first = bt.$shift();\n      msg = \"\" + (first) + \": \";\n      msg = $rb_plus(msg, \"\" + (bold) + (self.$to_s()) + \" (\" + (bold_underline) + (self.$class()) + (reset) + (bold) + \")\" + (reset) + \"\\n\");\n      msg = $rb_plus(msg, $send(bt, 'map', [], function $$3(loc){\n        \n        if (loc == null) loc = nil;\n        return \"\\tfrom \" + (loc) + \"\\n\";}).$join());\n      if ($truthy(self.$cause())) {\n        msg = $rb_plus(msg, self.$cause().$full_message($hash2([\"highlight\"], {\"highlight\": highlight})))\n      };\n      if ($eqeq(order, \"bottom\")) {\n        \n        msg = msg.$split(\"\\n\").$reverse().$join(\"\\n\");\n        msg = $rb_plus(\"\" + (bold) + \"Traceback\" + (reset) + \" (most recent call last):\\n\", msg);\n      };\n      return msg;\n    }, -1);\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this, as_str = nil;\n\n      \n      as_str = self.$to_s();\n      if ($truthy(as_str['$empty?']())) {\n        return self.$class().$to_s()\n      } else {\n        return \"#<\" + (self.$class().$to_s()) + \": \" + (self.$to_s()) + \">\"\n      };\n    });\n    \n    $def(self, '$set_backtrace', function $$set_backtrace(backtrace) {\n      var self = this;\n\n      \n      var valid = true, i, ii;\n\n      if (backtrace === nil) {\n        self.backtrace = nil;\n        self.stack = '';\n      } else if (backtrace.$$is_string) {\n        self.backtrace = [backtrace];\n        self.stack = '  from ' + backtrace;\n      } else {\n        if (backtrace.$$is_array) {\n          for (i = 0, ii = backtrace.length; i < ii; i++) {\n            if (!backtrace[i].$$is_string) {\n              valid = false;\n              break;\n            }\n          }\n        } else {\n          valid = false;\n        }\n\n        if (valid === false) {\n          $Kernel.$raise($$$('TypeError'), \"backtrace must be Array of String\")\n        }\n\n        self.backtrace = backtrace;\n        self.stack = $send((backtrace), 'map', [], function $$4(i){\n        \n        if (i == null) i = nil;\n        return $rb_plus(\"  from \", i);}).join(\"\\n\");\n      }\n\n      return backtrace;\n    \n    });\n    return $def(self, '$to_s', function $$to_s() {\n      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.message)) ? (self.message.$to_s()) : ($ret_or_2))))) {\n        return $ret_or_1\n      } else {\n        return self.$class().$to_s()\n      }\n    });\n  })('::', Error, $nesting);\n  $klass('::', $$$('Exception'), 'ScriptError');\n  $klass('::', $$$('ScriptError'), 'SyntaxError');\n  $klass('::', $$$('ScriptError'), 'LoadError');\n  $klass('::', $$$('ScriptError'), 'NotImplementedError');\n  $klass('::', $$$('Exception'), 'SystemExit');\n  $klass('::', $$$('Exception'), 'NoMemoryError');\n  $klass('::', $$$('Exception'), 'SignalException');\n  $klass('::', $$$('SignalException'), 'Interrupt');\n  $klass('::', $$$('Exception'), 'SecurityError');\n  $klass('::', $$$('Exception'), 'SystemStackError');\n  $klass('::', $$$('Exception'), 'StandardError');\n  $klass('::', $$$('StandardError'), 'EncodingError');\n  $klass('::', $$$('StandardError'), 'ZeroDivisionError');\n  $klass('::', $$$('StandardError'), 'NameError');\n  $klass('::', $$$('NameError'), 'NoMethodError');\n  $klass('::', $$$('StandardError'), 'RuntimeError');\n  $klass('::', $$$('RuntimeError'), 'FrozenError');\n  $klass('::', $$$('StandardError'), 'LocalJumpError');\n  $klass('::', $$$('StandardError'), 'TypeError');\n  $klass('::', $$$('StandardError'), 'ArgumentError');\n  $klass('::', $$$('ArgumentError'), 'UncaughtThrowError');\n  $klass('::', $$$('StandardError'), 'IndexError');\n  $klass('::', $$$('IndexError'), 'StopIteration');\n  $klass('::', $$$('StopIteration'), 'ClosedQueueError');\n  $klass('::', $$$('IndexError'), 'KeyError');\n  $klass('::', $$$('StandardError'), 'RangeError');\n  $klass('::', $$$('RangeError'), 'FloatDomainError');\n  $klass('::', $$$('StandardError'), 'IOError');\n  $klass('::', $$$('IOError'), 'EOFError');\n  $klass('::', $$$('StandardError'), 'SystemCallError');\n  $klass('::', $$$('StandardError'), 'RegexpError');\n  $klass('::', $$$('StandardError'), 'ThreadError');\n  $klass('::', $$$('StandardError'), 'FiberError');\n  $Object.$autoload(\"Errno\", \"corelib/error/errno\");\n  (function($base, $super) {\n    var self = $klass($base, $super, 'FrozenError');\n\n    \n    \n    self.$attr_reader(\"receiver\");\n    return $def(self, '$initialize', function $$initialize(message, $kwargs) {\n      var receiver, $yield = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      receiver = $kwargs.$$smap[\"receiver\"];if (receiver == null) receiver = nil;\n      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);\n      return (self.receiver = receiver);\n    }, -2);\n  })('::', $$$('RuntimeError'));\n  (function($base, $super) {\n    var self = $klass($base, $super, 'UncaughtThrowError');\n\n    var $proto = self.$$prototype;\n\n    $proto.tag = nil;\n    \n    self.$attr_reader(\"tag\", \"value\");\n    return $def(self, '$initialize', function $$initialize(tag, value) {\n      var $yield = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      if (value == null) value = nil;\n      self.tag = tag;\n      self.value = value;\n      return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [\"uncaught throw \" + (self.tag.$inspect())], null);\n    }, -2);\n  })('::', $$$('ArgumentError'));\n  (function($base, $super) {\n    var self = $klass($base, $super, 'NameError');\n\n    \n    \n    self.$attr_reader(\"name\");\n    return $def(self, '$initialize', function $$initialize(message, name) {\n      var $yield = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      if (name == null) name = nil;\n      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);\n      return (self.name = name);\n    }, -2);\n  })('::', null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'NoMethodError');\n\n    \n    \n    self.$attr_reader(\"args\");\n    return $def(self, '$initialize', function $$initialize(message, name, args) {\n      var $yield = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      if (name == null) name = nil;\n      if (args == null) args = [];\n      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message, name], null);\n      return (self.args = args);\n    }, -2);\n  })('::', null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'StopIteration');\n\n    \n    return self.$attr_reader(\"result\")\n  })('::', null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'KeyError');\n\n    var $proto = self.$$prototype;\n\n    $proto.receiver = $proto.key = nil;\n    \n    \n    $def(self, '$initialize', function $$initialize(message, $kwargs) {\n      var receiver, key, $yield = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      receiver = $kwargs.$$smap[\"receiver\"];if (receiver == null) receiver = nil;\n      \n      key = $kwargs.$$smap[\"key\"];if (key == null) key = nil;\n      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);\n      self.receiver = receiver;\n      return (self.key = key);\n    }, -2);\n    \n    $def(self, '$receiver', function $$receiver() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.receiver))) {\n        return $ret_or_1\n      } else {\n        return $Kernel.$raise($$$('ArgumentError'), \"no receiver is available\")\n      }\n    });\n    return $def(self, '$key', function $$key() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.key))) {\n        return $ret_or_1\n      } else {\n        return $Kernel.$raise($$$('ArgumentError'), \"no key is available\")\n      }\n    });\n  })('::', null);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'JS');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return ($klass($nesting[0], null, 'Error'), nil)\n  })('::', $nesting);\n};\n\nOpal.modules[\"corelib/constants\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $const_set = Opal.const_set, nil = Opal.nil, $$$ = Opal.$$$;\n\n  \n  $const_set('::', 'RUBY_PLATFORM', \"opal\");\n  $const_set('::', 'RUBY_ENGINE', \"opal\");\n  $const_set('::', 'RUBY_VERSION', \"3.2.0\");\n  $const_set('::', 'RUBY_ENGINE_VERSION', \"1.7.3\");\n  $const_set('::', 'RUBY_RELEASE_DATE', \"2023-03-23\");\n  $const_set('::', 'RUBY_PATCHLEVEL', 0);\n  $const_set('::', 'RUBY_REVISION', \"0\");\n  $const_set('::', 'RUBY_COPYRIGHT', \"opal - Copyright (C) 2011-2023 Adam Beynon and the Opal contributors\");\n  return $const_set('::', 'RUBY_DESCRIPTION', \"opal \" + ($$$('RUBY_ENGINE_VERSION')) + \" (\" + ($$$('RUBY_RELEASE_DATE')) + \" revision \" + ($$$('RUBY_REVISION')) + \")\");\n};\n\nOpal.modules[\"opal/base\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $Object = Opal.Object, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  $Object.$require(\"corelib/runtime\");\n  $Object.$require(\"corelib/helpers\");\n  $Object.$require(\"corelib/module\");\n  $Object.$require(\"corelib/class\");\n  $Object.$require(\"corelib/basic_object\");\n  $Object.$require(\"corelib/kernel\");\n  $Object.$require(\"corelib/main\");\n  $Object.$require(\"corelib/error\");\n  return $Object.$require(\"corelib/constants\");\n};\n\nOpal.modules[\"corelib/nil\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $Kernel = Opal.Kernel, $def = Opal.def, $return_val = Opal.return_val, $ensure_kwargs = Opal.ensure_kwargs, $NilClass = Opal.NilClass, $slice = Opal.slice, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('raise,name,new,>,length,Rational,to_i');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NilClass');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$prototype.$$meta = self;\n    (function(self, $parent_nesting) {\n      \n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var self = this;\n\n        return $Kernel.$raise($$$('TypeError'), \"allocator undefined for \" + (self.$name()))\n      });\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    $def(self, '$!', $return_val(true));\n    \n    $def(self, '$&', $return_val(false));\n    \n    $def(self, '$|', function $NilClass_$$1(other) {\n      \n      return other !== false && other !== nil;\n    });\n    \n    $def(self, '$^', function $NilClass_$$2(other) {\n      \n      return other !== false && other !== nil;\n    });\n    \n    $def(self, '$==', function $NilClass_$eq_eq$3(other) {\n      \n      return other === nil;\n    });\n    \n    $def(self, '$dup', $return_val(nil));\n    \n    $def(self, '$clone', function $$clone($kwargs) {\n      var freeze;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = true;\n      return nil;\n    }, -1);\n    \n    $def(self, '$inspect', $return_val(\"nil\"));\n    \n    $def(self, '$nil?', $return_val(true));\n    \n    $def(self, '$singleton_class', function $$singleton_class() {\n      \n      return $NilClass\n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      \n      return []\n    });\n    \n    $def(self, '$to_h', function $$to_h() {\n      \n      return Opal.hash();\n    });\n    \n    $def(self, '$to_i', $return_val(0));\n    \n    $def(self, '$to_s', $return_val(\"\"));\n    \n    $def(self, '$to_c', function $$to_c() {\n      \n      return $$$('Complex').$new(0, 0)\n    });\n    \n    $def(self, '$rationalize', function $$rationalize($a) {\n      var $post_args, args;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      if ($truthy($rb_gt(args.$length(), 1))) {\n        $Kernel.$raise($$$('ArgumentError'))\n      };\n      return $Kernel.$Rational(0, 1);\n    }, -1);\n    \n    $def(self, '$to_r', function $$to_r() {\n      \n      return $Kernel.$Rational(0, 1)\n    });\n    \n    $def(self, '$instance_variables', function $$instance_variables() {\n      \n      return []\n    });\n    return $alias(self, \"to_f\", \"to_i\");\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/boolean\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $Kernel = Opal.Kernel, $def = Opal.def, $return_self = Opal.return_self, $ensure_kwargs = Opal.ensure_kwargs, $slice = Opal.slice, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('raise,name,==,to_s,__id__');\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Boolean');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    Opal.prop(self.$$prototype, '$$is_boolean', true);\n    \n    var properties = ['$$class', '$$meta'];\n\n    for (var i = 0; i < properties.length; i++) {\n      Object.defineProperty(self.$$prototype, properties[i], {\n        configurable: true,\n        enumerable: false,\n        get: function() {\n          return this == true  ? Opal.TrueClass :\n                 this == false ? Opal.FalseClass :\n                                 Opal.Boolean;\n        }\n      });\n    }\n\n    Object.defineProperty(self.$$prototype, \"$$id\", {\n      configurable: true,\n      enumerable: false,\n      get: function() {\n        return this == true  ? 2 :\n               this == false ? 0 :\n                               nil;\n      }\n    });\n  ;\n    (function(self, $parent_nesting) {\n      \n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var self = this;\n\n        return $Kernel.$raise($$$('TypeError'), \"allocator undefined for \" + (self.$name()))\n      });\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    $def(self, '$__id__', function $$__id__() {\n      var self = this;\n\n      return self.valueOf() ? 2 : 0;\n    });\n    \n    $def(self, '$!', function $Boolean_$excl$1() {\n      var self = this;\n\n      return self != true;\n    });\n    \n    $def(self, '$&', function $Boolean_$$2(other) {\n      var self = this;\n\n      return (self == true) ? (other !== false && other !== nil) : false;\n    });\n    \n    $def(self, '$|', function $Boolean_$$3(other) {\n      var self = this;\n\n      return (self == true) ? true : (other !== false && other !== nil);\n    });\n    \n    $def(self, '$^', function $Boolean_$$4(other) {\n      var self = this;\n\n      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);\n    });\n    \n    $def(self, '$==', function $Boolean_$eq_eq$5(other) {\n      var self = this;\n\n      return (self == true) === other.valueOf();\n    });\n    \n    $def(self, '$singleton_class', function $$singleton_class() {\n      var self = this;\n\n      return self.$$meta;\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this;\n\n      return (self == true) ? 'true' : 'false';\n    });\n    \n    $def(self, '$dup', $return_self);\n    \n    $def(self, '$clone', function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = true;\n      return self;\n    }, -1);\n    \n    $def(self, '$method_missing', function $$method_missing(method, $a) {\n      var block = $$method_missing.$$p || nil, $post_args, args, self = this;\n\n      $$method_missing.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      var body = self.$$class.$$prototype[Opal.jsid(method)];\n      if (!$truthy(typeof body !== 'undefined' && !body.$$stub)) {\n        $send2(self, $find_super(self, 'method_missing', $$method_missing, false, true), 'method_missing', [method].concat($to_a(args)), block)\n      };\n      return Opal.send(self, body, args, block);\n    }, -2);\n    \n    $def(self, '$respond_to_missing?', function $Boolean_respond_to_missing$ques$6(method, _include_all) {\n      var self = this;\n\n      \n      if (_include_all == null) _include_all = false;\n      var body = self.$$class.$$prototype[Opal.jsid(method)];\n      return typeof body !== 'undefined' && !body.$$stub;;\n    }, -2);\n    $alias(self, \"eql?\", \"==\");\n    $alias(self, \"equal?\", \"==\");\n    $alias(self, \"inspect\", \"to_s\");\n    return $alias(self, \"object_id\", \"__id__\");\n  })('::', Boolean, $nesting);\n  $klass('::', $$$('Boolean'), 'TrueClass');\n  return ($klass('::', $$$('Boolean'), 'FalseClass'), nil);\n};\n\nOpal.modules[\"corelib/comparable\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $module = Opal.module, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $def = Opal.def, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('>,<,===,raise,class,<=>,equal?');\n  return (function($base) {\n    var self = $module($base, 'Comparable');\n\n    var $ret_or_1 = nil;\n\n    \n    \n    function normalize(what) {\n      if (Opal.is_a(what, Opal.Integer)) { return what; }\n\n      if ($rb_gt(what, 0)) { return 1; }\n      if ($rb_lt(what, 0)) { return -1; }\n      return 0;\n    }\n\n    function fail_comparison(lhs, rhs) {\n      var class_name;\n      (($eqeqeq(nil, ($ret_or_1 = rhs)) || (($eqeqeq(true, $ret_or_1) || (($eqeqeq(false, $ret_or_1) || (($eqeqeq($$$('Integer'), $ret_or_1) || ($eqeqeq($$$('Float'), $ret_or_1))))))))) ? (class_name = rhs.$inspect()) : (class_name = rhs.$$class))\n      $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + ((lhs).$class()) + \" with \" + (class_name) + \" failed\")\n    }\n\n    function cmp_or_fail(lhs, rhs) {\n      var cmp = (lhs)['$<=>'](rhs);\n      if (!$truthy(cmp)) fail_comparison(lhs, rhs);\n      return normalize(cmp);\n    }\n  ;\n    \n    $def(self, '$==', function $Comparable_$eq_eq$1(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy(self['$equal?'](other))) {\n        return true\n      };\n      \n      if (self[\"$<=>\"] == Opal.Kernel[\"$<=>\"]) {\n        return false;\n      }\n\n      // check for infinite recursion\n      if (self.$$comparable) {\n        self.$$comparable = false;\n        return false;\n      }\n    ;\n      if (!$truthy((cmp = self['$<=>'](other)))) {\n        return false\n      };\n      return normalize(cmp) == 0;;\n    });\n    \n    $def(self, '$>', function $Comparable_$gt$2(other) {\n      var self = this;\n\n      return cmp_or_fail(self, other) > 0;\n    });\n    \n    $def(self, '$>=', function $Comparable_$gt_eq$3(other) {\n      var self = this;\n\n      return cmp_or_fail(self, other) >= 0;\n    });\n    \n    $def(self, '$<', function $Comparable_$lt$4(other) {\n      var self = this;\n\n      return cmp_or_fail(self, other) < 0;\n    });\n    \n    $def(self, '$<=', function $Comparable_$lt_eq$5(other) {\n      var self = this;\n\n      return cmp_or_fail(self, other) <= 0;\n    });\n    \n    $def(self, '$between?', function $Comparable_between$ques$6(min, max) {\n      var self = this;\n\n      \n      if ($rb_lt(self, min)) {\n        return false\n      };\n      if ($rb_gt(self, max)) {\n        return false\n      };\n      return true;\n    });\n    return $def(self, '$clamp', function $$clamp(min, max) {\n      var self = this;\n\n      \n      if (max == null) max = nil;\n      \n      var c, excl;\n\n      if (max === nil) {\n        // We are dealing with a new Ruby 2.7 behaviour that we are able to\n        // provide a single Range argument instead of 2 Comparables.\n\n        if (!Opal.is_a(min, Opal.Range)) {\n          $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + (min.$class()) + \" (expected Range)\")\n        }\n\n        excl = min.excl;\n        max = min.end;\n        min = min.begin;\n\n        if (max !== nil && excl) {\n          $Kernel.$raise($$$('ArgumentError'), \"cannot clamp with an exclusive range\")\n        }\n      }\n\n      if (min !== nil && max !== nil && cmp_or_fail(min, max) > 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"min argument must be smaller than max argument\")\n      }\n\n      if (min !== nil) {\n        c = cmp_or_fail(self, min);\n\n        if (c == 0) return self;\n        if (c < 0) return min;\n      }\n\n      if (max !== nil) {\n        c = cmp_or_fail(self, max);\n\n        if (c > 0) return max;\n      }\n\n      return self;\n    ;\n    }, -2);\n  })('::')\n};\n\nOpal.modules[\"corelib/regexp\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $coerce_to = Opal.coerce_to, $prop = Opal.prop, $freeze = Opal.freeze, $klass = Opal.klass, $const_set = Opal.const_set, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $gvars = Opal.gvars, $slice = Opal.slice, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $alias = Opal.alias, $send = Opal.send, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $ensure_kwargs = Opal.ensure_kwargs, $rb_ge = Opal.rb_ge, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $rb_minus = Opal.rb_minus, $return_ivar = Opal.return_ivar, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('nil?,[],raise,escape,options,to_str,new,join,coerce_to!,!,match,coerce_to?,begin,frozen?,uniq,map,scan,source,to_proc,transform_values,group_by,each_with_index,+,last,=~,==,attr_reader,>=,length,is_a?,include?,names,regexp,named_captures,===,captures,-,inspect,empty?,each,to_a');\n  \n  $klass('::', $$$('StandardError'), 'RegexpError');\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Regexp');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $const_set(self, 'IGNORECASE', 1);\n    $const_set(self, 'EXTENDED', 2);\n    $const_set(self, 'MULTILINE', 4);\n    Opal.prop(self.$$prototype, '$$is_regexp', true);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var $yield = $$allocate.$$p || nil, self = this, allocated = nil;\n\n        $$allocate.$$p = null;\n        \n        allocated = $send2(self, $find_super(self, 'allocate', $$allocate, false, true), 'allocate', [], $yield);\n        allocated.uninitialized = true;\n        return allocated;\n      });\n      \n      $def(self, '$escape', function $$escape(string) {\n        \n        return Opal.escape_regexp(string);\n      });\n      \n      $def(self, '$last_match', function $$last_match(n) {\n                if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        if (n == null) n = nil;\n        if ($truthy(n['$nil?']())) {\n          return $gvars[\"~\"]\n        } else if ($truthy($gvars[\"~\"])) {\n          return $gvars[\"~\"]['$[]'](n)\n        } else {\n          return nil\n        };\n      }, -1);\n      \n      $def(self, '$union', function $$union($a) {\n        var $post_args, parts, self = this;\n\n        \n        $post_args = $slice(arguments);\n        parts = $post_args;\n        \n        var is_first_part_array, quoted_validated, part, options, each_part_options;\n        if (parts.length == 0) {\n          return /(?!)/;\n        }\n        // return fast if there's only one element\n        if (parts.length == 1 && parts[0].$$is_regexp) {\n          return parts[0];\n        }\n        // cover the 2 arrays passed as arguments case\n        is_first_part_array = parts[0].$$is_array;\n        if (parts.length > 1 && is_first_part_array) {\n          $Kernel.$raise($$$('TypeError'), \"no implicit conversion of Array into String\")\n        }\n        // deal with splat issues (related to https://github.com/opal/opal/issues/858)\n        if (is_first_part_array) {\n          parts = parts[0];\n        }\n        options = undefined;\n        quoted_validated = [];\n        for (var i=0; i < parts.length; i++) {\n          part = parts[i];\n          if (part.$$is_string) {\n            quoted_validated.push(self.$escape(part));\n          }\n          else if (part.$$is_regexp) {\n            each_part_options = (part).$options();\n            if (options != undefined && options != each_part_options) {\n              $Kernel.$raise($$$('TypeError'), \"All expressions must use the same options\")\n            }\n            options = each_part_options;\n            quoted_validated.push('('+part.source+')');\n          }\n          else {\n            quoted_validated.push(self.$escape((part).$to_str()));\n          }\n        }\n      ;\n        return self.$new((quoted_validated).$join(\"|\"), options);\n      }, -1);\n      \n      $def(self, '$new', function $new$1(regexp, options) {\n        \n        \n        ;\n        \n        if (regexp.$$is_regexp) {\n          return new RegExp(regexp);\n        }\n\n        regexp = $Opal['$coerce_to!'](regexp, $$$('String'), \"to_str\");\n\n        if (regexp.charAt(regexp.length - 1) === '\\\\' && regexp.charAt(regexp.length - 2) !== '\\\\') {\n          $Kernel.$raise($$$('RegexpError'), \"too short escape sequence: /\" + (regexp) + \"/\")\n        }\n\n        regexp = regexp.replace('\\\\A', '^').replace('\\\\z', '$')\n\n        if (options === undefined || options['$!']()) {\n          return new RegExp(regexp);\n        }\n\n        if (options.$$is_number) {\n          var temp = '';\n          if ($$('IGNORECASE') & options) { temp += 'i'; }\n          if ($$('MULTILINE')  & options) { temp += 'm'; }\n          options = temp;\n        }\n        else {\n          options = 'i';\n        }\n\n        return new RegExp(regexp, options);\n      ;\n      }, -2);\n      $alias(self, \"compile\", \"new\");\n      return $alias(self, \"quote\", \"escape\");\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    $def(self, '$==', function $Regexp_$eq_eq$2(other) {\n      var self = this;\n\n      return other instanceof RegExp && self.toString() === other.toString();\n    });\n    \n    $def(self, '$===', function $Regexp_$eq_eq_eq$3(string) {\n      var self = this;\n\n      return self.$match($Opal['$coerce_to?'](string, $$$('String'), \"to_str\")) !== nil\n    });\n    \n    $def(self, '$=~', function $Regexp_$eq_tilde$4(string) {\n      var self = this, $ret_or_1 = nil;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      if ($truthy(($ret_or_1 = self.$match(string)))) {\n        return $gvars[\"~\"].$begin(0)\n      } else {\n        return $ret_or_1\n      }\n    });\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      \n      if (!self.hasOwnProperty('$$g')) { $prop(self, '$$g', null); }\n      if (!self.hasOwnProperty('$$gm')) { $prop(self, '$$gm', null); }\n\n      return $freeze(self);\n    ;\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      \n      var regexp_format = /^\\/(.*)\\/([^\\/]*)$/;\n      var value = self.toString();\n      var matches = regexp_format.exec(value);\n      if (matches) {\n        var regexp_pattern = matches[1];\n        var regexp_flags = matches[2];\n        var chars = regexp_pattern.split('');\n        var chars_length = chars.length;\n        var char_escaped = false;\n        var regexp_pattern_escaped = '';\n        for (var i = 0; i < chars_length; i++) {\n          var current_char = chars[i];\n          if (!char_escaped && current_char == '/') {\n            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\\\');\n          }\n          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);\n          if (current_char == '\\\\') {\n            if (char_escaped) {\n              // does not over escape\n              char_escaped = false;\n            } else {\n              char_escaped = true;\n            }\n          } else {\n            char_escaped = false;\n          }\n        }\n        return '/' + regexp_pattern_escaped + '/' + regexp_flags;\n      } else {\n        return value;\n      }\n    \n    });\n    \n    $def(self, '$match', function $$match(string, pos) {\n      var block = $$match.$$p || nil, self = this;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      $$match.$$p = null;\n      \n      ;\n      ;\n      \n      if (self.uninitialized) {\n        $Kernel.$raise($$$('TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        if (string === nil) return ($gvars[\"~\"] = nil);\n        var m = self.exec($coerce_to(string, $$$('String'), 'to_str'));\n        if (m) {\n          ($gvars[\"~\"] = $$$('MatchData').$new(self, m));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        } else {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      pos = $coerce_to(pos, $$$('Integer'), 'to_int');\n\n      if (string === nil) {\n        return ($gvars[\"~\"] = nil);\n      }\n\n      string = $coerce_to(string, $$$('String'), 'to_str');\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      while (true) {\n        md = re.exec(string);\n        if (md === null) {\n          return ($gvars[\"~\"] = nil);\n        }\n        if (md.index >= pos) {\n          ($gvars[\"~\"] = $$$('MatchData').$new(re, md));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        }\n        re.lastIndex = md.index + 1;\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$match?', function $Regexp_match$ques$5(string, pos) {\n      var self = this;\n\n      \n      ;\n      \n      if (self.uninitialized) {\n        $Kernel.$raise($$$('TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        return string === nil ? false : self.test($coerce_to(string, $$$('String'), 'to_str'));\n      }\n\n      pos = $coerce_to(pos, $$$('Integer'), 'to_int');\n\n      if (string === nil) {\n        return false;\n      }\n\n      string = $coerce_to(string, $$$('String'), 'to_str');\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return false;\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      md = re.exec(string);\n      if (md === null || md.index < pos) {\n        return false;\n      } else {\n        return true;\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$names', function $$names() {\n      var self = this;\n\n      return $send(self.$source().$scan(/\\(?<(\\w+)>/, $hash2([\"no_matchdata\"], {\"no_matchdata\": true})), 'map', [], \"first\".$to_proc()).$uniq()\n    });\n    \n    $def(self, '$named_captures', function $$named_captures() {\n      var self = this;\n\n      return $send($send($send(self.$source().$scan(/\\(?<(\\w+)>/, $hash2([\"no_matchdata\"], {\"no_matchdata\": true})), 'map', [], \"first\".$to_proc()).$each_with_index(), 'group_by', [], \"first\".$to_proc()), 'transform_values', [], function $$6(i){\n        \n        if (i == null) i = nil;\n        return $send(i, 'map', [], function $$7(j){\n          \n          if (j == null) j = nil;\n          return $rb_plus(j.$last(), 1);});})\n    });\n    \n    $def(self, '$~', function $Regexp_$$8() {\n      var self = this;\n      if ($gvars._ == null) $gvars._ = nil;\n\n      return self['$=~']($gvars._)\n    });\n    \n    $def(self, '$source', function $$source() {\n      var self = this;\n\n      return self.source;\n    });\n    \n    $def(self, '$options', function $$options() {\n      var self = this;\n\n      \n      if (self.uninitialized) {\n        $Kernel.$raise($$$('TypeError'), \"uninitialized Regexp\")\n      }\n      var result = 0;\n      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx\n      if (self.multiline) {\n        result |= $$('MULTILINE');\n      }\n      if (self.ignoreCase) {\n        result |= $$('IGNORECASE');\n      }\n      return result;\n    \n    });\n    \n    $def(self, '$casefold?', function $Regexp_casefold$ques$9() {\n      var self = this;\n\n      return self.ignoreCase;\n    });\n    $alias(self, \"eql?\", \"==\");\n    return $alias(self, \"to_s\", \"source\");\n  })('::', RegExp, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.matches = nil;\n    \n    self.$attr_reader(\"post_match\", \"pre_match\", \"regexp\", \"string\");\n    \n    $def(self, '$initialize', function $$initialize(regexp, match_groups, $kwargs) {\n      var no_matchdata, self = this;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      no_matchdata = $kwargs.$$smap[\"no_matchdata\"];if (no_matchdata == null) no_matchdata = false;\n      if (!$truthy(no_matchdata)) {\n        $gvars[\"~\"] = self\n      };\n      self.regexp = regexp;\n      self.begin = match_groups.index;\n      self.string = match_groups.input;\n      self.pre_match = match_groups.input.slice(0, match_groups.index);\n      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);\n      self.matches = [];\n      \n      for (var i = 0, length = match_groups.length; i < length; i++) {\n        var group = match_groups[i];\n\n        if (group == null) {\n          self.matches.push(nil);\n        }\n        else {\n          self.matches.push(group);\n        }\n      }\n    ;\n    }, -3);\n    \n    $def(self, '$match', function $$match(idx) {\n      var self = this, match = nil;\n\n      if ($truthy((match = self['$[]'](idx)))) {\n        return match\n      } else if (($truthy(idx['$is_a?']($$('Integer'))) && ($truthy($rb_ge(idx, self.$length()))))) {\n        return $Kernel.$raise($$$('IndexError'), \"index \" + (idx) + \" out of matches\")\n      } else {\n        return nil\n      }\n    });\n    \n    $def(self, '$match_length', function $$match_length(idx) {\n      var $a, self = this;\n\n      return ($a = self.$match(idx), ($a === nil || $a == null) ? nil : $a.$length())\n    });\n    \n    $def(self, '$[]', function $MatchData_$$$10($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      if (args[0].$$is_string) {\n        if (self.$regexp().$names()['$include?'](args['$[]'](0))['$!']()) {\n          $Kernel.$raise($$$('IndexError'), \"undefined group name reference: \" + (args['$[]'](0)))\n        }\n        return self.$named_captures()['$[]'](args['$[]'](0))\n      }\n      else {\n        return $send(self.matches, '[]', $to_a(args))\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$offset', function $$offset(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"MatchData#offset only supports 0th element\")\n      }\n      return [self.begin, self.begin + self.matches[n].length];\n    \n    });\n    \n    $def(self, '$==', function $MatchData_$eq_eq$11(other) {\n      var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;\n\n      \n      if (!$eqeqeq($$$('MatchData'), other)) {\n        return false\n      };\n      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = self.string == other.string)) ? (self.regexp.toString() == other.regexp.toString()) : ($ret_or_4)))) ? (self.pre_match == other.pre_match) : ($ret_or_3)))) ? (self.post_match == other.post_match) : ($ret_or_2))))) {\n        return self.begin == other.begin;\n      } else {\n        return $ret_or_1\n      };\n    });\n    \n    $def(self, '$begin', function $$begin(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"MatchData#begin only supports 0th element\")\n      }\n      return self.begin;\n    \n    });\n    \n    $def(self, '$end', function $$end(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"MatchData#end only supports 0th element\")\n      }\n      return self.begin + self.matches[n].length;\n    \n    });\n    \n    $def(self, '$captures', function $$captures() {\n      var self = this;\n\n      return self.matches.slice(1)\n    });\n    \n    $def(self, '$named_captures', function $$named_captures() {\n      var self = this, matches = nil;\n\n      \n      matches = self.$captures();\n      return $send(self.$regexp().$named_captures(), 'transform_values', [], function $$12(i){\n        \n        if (i == null) i = nil;\n        return matches['$[]']($rb_minus(i.$last(), 1));});\n    });\n    \n    $def(self, '$names', function $$names() {\n      var self = this;\n\n      return self.$regexp().$names()\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      \n      var str = \"#<MatchData \" + (self.matches[0]).$inspect();\n\n      if (self.$regexp().$names()['$empty?']()) {\n        for (var i = 1, length = self.matches.length; i < length; i++) {\n          str += \" \" + i + \":\" + (self.matches[i]).$inspect();\n        }\n      }\n      else {\n        $send(self.$named_captures(), 'each', [], function $$13(k, v){\n        \n        if (k == null) k = nil;\n        if (v == null) v = nil;\n        return                str += \" \" + k + \":\" + v.$inspect();})\n      }\n\n      return str + \">\";\n    \n    });\n    \n    $def(self, '$length', function $$length() {\n      var self = this;\n\n      return self.matches.length\n    });\n    \n    $def(self, '$to_a', $return_ivar(\"matches\"));\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this;\n\n      return self.matches[0]\n    });\n    \n    $def(self, '$values_at', function $$values_at($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var i, a, index, values = [];\n\n      for (i = 0; i < args.length; i++) {\n\n        if (args[i].$$is_range) {\n          a = (args[i]).$to_a();\n          a.unshift(i, 1);\n          Array.prototype.splice.apply(args, a);\n        }\n\n        index = $Opal['$coerce_to!'](args[i], $$$('Integer'), \"to_int\");\n\n        if (index < 0) {\n          index += self.matches.length;\n          if (index < 0) {\n            values.push(nil);\n            continue;\n          }\n        }\n\n        values.push(self.matches[index]);\n      }\n\n      return values;\n    ;\n    }, -1);\n    $alias(self, \"eql?\", \"==\");\n    return $alias(self, \"size\", \"length\");\n  })($nesting[0], null, $nesting);\n};\n\nOpal.modules[\"corelib/string\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $global_multiline_regexp = Opal.global_multiline_regexp, $prop = Opal.prop, $klass = Opal.klass, $def = Opal.def, $Opal = Opal.Opal, $defs = Opal.defs, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $gvars = Opal.gvars, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $alias = Opal.alias, $const_set = Opal.const_set, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,coerce_to?,initialize,===,format,raise,respond_to?,to_s,to_str,<=>,==,=~,new,force_encoding,casecmp,empty?,ljust,ceil,/,+,rjust,floor,coerce_to!,nil?,class,copy_singleton_methods,initialize_clone,initialize_dup,enum_for,chomp,[],to_i,length,each_line,to_proc,to_a,match,match?,captures,proc,succ,escape,include?,upcase,unicode_normalize,dup,__id__,next,intern,pristine');\n  \n  self.$require(\"corelib/comparable\");\n  self.$require(\"corelib/regexp\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    self.$include($$$('Comparable'));\n    \n    Opal.prop(self.$$prototype, '$$is_string', true);\n  ;\n    \n    $def(self, '$__id__', function $$__id__() {\n      var self = this;\n\n      return self.toString();\n    });\n    $defs(self, '$try_convert', function $$try_convert(what) {\n      \n      return $Opal['$coerce_to?'](what, $$$('String'), \"to_str\")\n    });\n    $defs(self, '$new', function $String_new$1($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var str = args[0] || \"\";\n      var opts = args[args.length-1];\n      str = $coerce_to(str, $$$('String'), 'to_str');\n      if (opts && opts.$$is_hash) {\n        if (opts.$$smap.encoding) str = str.$force_encoding(opts.$$smap.encoding);\n      }\n      str = new self.$$constructor(str);\n      if (!str.$initialize.$$pristine) $send((str), 'initialize', $to_a(args));\n      return str;\n    ;\n    }, -1);\n    \n    $def(self, '$initialize', function $$initialize($a, $b) {\n      var $post_args, $kwargs, str, encoding, capacity;\n\n      \n      $post_args = $slice(arguments);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      \n      if ($post_args.length > 0) str = $post_args.shift();;\n      \n      encoding = $kwargs.$$smap[\"encoding\"];if (encoding == null) encoding = nil;\n      \n      capacity = $kwargs.$$smap[\"capacity\"];if (capacity == null) capacity = nil;\n      return nil;\n    }, -1);\n    \n    $def(self, '$%', function $String_$percent$2(data) {\n      var self = this;\n\n      if ($eqeqeq($$$('Array'), data)) {\n        return $send(self, 'format', [self].concat($to_a(data)))\n      } else {\n        return self.$format(self, data)\n      }\n    });\n    \n    $def(self, '$*', function $String_$$3(count) {\n      var self = this;\n\n      \n      count = $coerce_to(count, $$$('Integer'), 'to_int');\n\n      if (count < 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative argument\")\n      }\n\n      if (count === 0) {\n        return '';\n      }\n\n      var result = '',\n          string = self.toString();\n\n      // All credit for the bit-twiddling magic code below goes to Mozilla\n      // polyfill implementation of String.prototype.repeat() posted here:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n      if (string.length * count >= 1 << 28) {\n        $Kernel.$raise($$$('RangeError'), \"multiply count must not overflow maximum string size\")\n      }\n\n      for (;;) {\n        if ((count & 1) === 1) {\n          result += string;\n        }\n        count >>>= 1;\n        if (count === 0) {\n          break;\n        }\n        string += string;\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$+', function $String_$plus$4(other) {\n      var self = this;\n\n      \n      other = $coerce_to(other, $$$('String'), 'to_str');\n      \n      if (other == \"\" && self.$$class === Opal.String) return self;\n      if (self == \"\" && other.$$class === Opal.String) return other;\n      var out = self + other;\n      if (self.encoding === out.encoding && other.encoding === out.encoding) return out;\n      if (self.encoding.name === \"UTF-8\" || other.encoding.name === \"UTF-8\") return out;\n      return Opal.enc(out, self.encoding);\n    ;\n    });\n    \n    $def(self, '$<=>', function $String_$lt_eq_gt$5(other) {\n      var self = this;\n\n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        \n        other = other.$to_str().$to_s();\n        return self > other ? 1 : (self < other ? -1 : 0);;\n      } else {\n        \n        var cmp = other['$<=>'](self);\n\n        if (cmp === nil) {\n          return nil;\n        }\n        else {\n          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);\n        }\n      \n      }\n    });\n    \n    $def(self, '$==', function $String_$eq_eq$6(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        return self.toString() === other.toString();\n      }\n      if ($respond_to(other, '$to_str')) {\n        return other['$=='](self);\n      }\n      return false;\n    \n    });\n    \n    $def(self, '$=~', function $String_$eq_tilde$7(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        $Kernel.$raise($$$('TypeError'), \"type mismatch: String given\");\n      }\n\n      return other['$=~'](self);\n    \n    });\n    \n    $def(self, '$[]', function $String_$$$8(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      var size = self.length, exclude, range;\n\n      if (index.$$is_range) {\n        exclude = index.excl;\n        range   = index;\n        length  = index.end === nil ? -1 : $coerce_to(index.end, $$$('Integer'), 'to_int');\n        index   = index.begin === nil ? 0 : $coerce_to(index.begin, $$$('Integer'), 'to_int');\n\n        if (Math.abs(index) > size) {\n          return nil;\n        }\n\n        if (index < 0) {\n          index += size;\n        }\n\n        if (length < 0) {\n          length += size;\n        }\n\n        if (!exclude || range.end === nil) {\n          length += 1;\n        }\n\n        length = length - index;\n\n        if (length < 0) {\n          length = 0;\n        }\n\n        return self.substr(index, length);\n      }\n\n\n      if (index.$$is_string) {\n        if (length != null) {\n          $Kernel.$raise($$$('TypeError'))\n        }\n        return self.indexOf(index) !== -1 ? index : nil;\n      }\n\n\n      if (index.$$is_regexp) {\n        var match = self.match(index);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          return nil;\n        }\n\n        ($gvars[\"~\"] = $$$('MatchData').$new(index, match))\n\n        if (length == null) {\n          return match[0];\n        }\n\n        length = $coerce_to(length, $$$('Integer'), 'to_int');\n\n        if (length < 0 && -length < match.length) {\n          return match[length += match.length];\n        }\n\n        if (length >= 0 && length < match.length) {\n          return match[length];\n        }\n\n        return nil;\n      }\n\n\n      index = $coerce_to(index, $$$('Integer'), 'to_int');\n\n      if (index < 0) {\n        index += size;\n      }\n\n      if (length == null) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n        return self.substr(index, 1);\n      }\n\n      length = $coerce_to(length, $$$('Integer'), 'to_int');\n\n      if (length < 0) {\n        return nil;\n      }\n\n      if (index > size || index < 0) {\n        return nil;\n      }\n\n      return self.substr(index, length);\n    ;\n    }, -2);\n    \n    $def(self, '$b', function $$b() {\n      var self = this;\n\n      return (new String(self)).$force_encoding(\"binary\")\n    });\n    \n    $def(self, '$capitalize', function $$capitalize() {\n      var self = this;\n\n      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();\n    });\n    \n    $def(self, '$casecmp', function $$casecmp(other) {\n      var self = this;\n\n      \n      if (!$truthy(other['$respond_to?'](\"to_str\"))) {\n        return nil\n      };\n      other = ($coerce_to(other, $$$('String'), 'to_str')).$to_s();\n      \n      var ascii_only = /^[\\x00-\\x7F]*$/;\n      if (ascii_only.test(self) && ascii_only.test(other)) {\n        self = self.toLowerCase();\n        other = other.toLowerCase();\n      }\n    ;\n      return self['$<=>'](other);\n    });\n    \n    $def(self, '$casecmp?', function $String_casecmp$ques$9(other) {\n      var self = this;\n\n      \n      var cmp = self.$casecmp(other);\n      if (cmp === nil) {\n        return nil;\n      } else {\n        return cmp === 0;\n      }\n    \n    });\n    \n    $def(self, '$center', function $$center(width, padstr) {\n      var self = this;\n\n      \n      if (padstr == null) padstr = \" \";\n      width = $coerce_to(width, $$$('Integer'), 'to_int');\n      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        $Kernel.$raise($$$('ArgumentError'), \"zero width padding\")\n      };\n      if ($truthy(width <= self.length)) {\n        return self\n      };\n      \n      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),\n          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);\n\n      return rjustified + ljustified.slice(self.length);\n    ;\n    }, -2);\n    \n    $def(self, '$chomp', function $$chomp(separator) {\n      var self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      \n      if (separator == null) separator = $gvars[\"/\"];\n      if ($truthy(separator === nil || self.length === 0)) {\n        return self\n      };\n      separator = $Opal['$coerce_to!'](separator, $$$('String'), \"to_str\").$to_s();\n      \n      var result;\n\n      if (separator === \"\\n\") {\n        result = self.replace(/\\r?\\n?$/, '');\n      }\n      else if (separator === \"\") {\n        result = self.replace(/(\\r?\\n)+$/, '');\n      }\n      else if (self.length >= separator.length) {\n        var tail = self.substr(self.length - separator.length, separator.length);\n\n        if (tail === separator) {\n          result = self.substr(0, self.length - separator.length);\n        }\n      }\n\n      if (result != null) {\n        return result;\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$chop', function $$chop() {\n      var self = this;\n\n      \n      var length = self.length, result;\n\n      if (length <= 1) {\n        result = \"\";\n      } else if (self.charAt(length - 1) === \"\\n\" && self.charAt(length - 2) === \"\\r\") {\n        result = self.substr(0, length - 2);\n      } else {\n        result = self.substr(0, length - 1);\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$chr', function $$chr() {\n      var self = this;\n\n      return self.charAt(0);\n    });\n    \n    $def(self, '$clone', function $$clone($kwargs) {\n      var freeze, self = this, copy = nil;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = nil;\n      if (!(($truthy(freeze['$nil?']()) || ($eqeq(freeze, true))) || ($eqeq(freeze, false)))) {\n        self.$raise($$('ArgumentError'), \"unexpected value for freeze: \" + (freeze.$class()))\n      };\n      copy = new String(self);\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self, $hash2([\"freeze\"], {\"freeze\": freeze}));\n      if ($eqeq(freeze, true)) {\n        if (!copy.$$frozen) { copy.$$frozen = true; }\n      } else if ($truthy(freeze['$nil?']())) {\n        if (self.$$frozen) { copy.$$frozen = true; }\n      };\n      return copy;\n    }, -1);\n    \n    $def(self, '$dup', function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = new String(self);\n      copy.$initialize_dup(self);\n      return copy;\n    });\n    \n    $def(self, '$count', function $$count($a) {\n      var $post_args, sets, self = this;\n\n      \n      $post_args = $slice(arguments);\n      sets = $post_args;\n      \n      if (sets.length === 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return 0;\n      }\n      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;\n    ;\n    }, -1);\n    \n    $def(self, '$delete', function $String_delete$10($a) {\n      var $post_args, sets, self = this;\n\n      \n      $post_args = $slice(arguments);\n      sets = $post_args;\n      \n      if (sets.length === 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.replace(new RegExp(char_class, 'g'), '');\n    ;\n    }, -1);\n    \n    $def(self, '$delete_prefix', function $$delete_prefix(prefix) {\n      var self = this;\n\n      \n      if (!prefix.$$is_string) {\n        prefix = $coerce_to(prefix, $$$('String'), 'to_str');\n      }\n\n      if (self.slice(0, prefix.length) === prefix) {\n        return self.slice(prefix.length);\n      } else {\n        return self;\n      }\n    \n    });\n    \n    $def(self, '$delete_suffix', function $$delete_suffix(suffix) {\n      var self = this;\n\n      \n      if (!suffix.$$is_string) {\n        suffix = $coerce_to(suffix, $$$('String'), 'to_str');\n      }\n\n      if (self.slice(self.length - suffix.length) === suffix) {\n        return self.slice(0, self.length - suffix.length);\n      } else {\n        return self;\n      }\n    \n    });\n    \n    $def(self, '$downcase', function $$downcase() {\n      var self = this;\n\n      return self.toLowerCase();\n    });\n    \n    $def(self, '$each_line', function $$each_line($a, $b) {\n      var block = $$each_line.$$p || nil, $post_args, $kwargs, separator, chomp, self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      $$each_line.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      \n      if ($post_args.length > 0) separator = $post_args.shift();if (separator == null) separator = $gvars[\"/\"];\n      \n      chomp = $kwargs.$$smap[\"chomp\"];if (chomp == null) chomp = false;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"each_line\", separator, $hash2([\"chomp\"], {\"chomp\": chomp}))\n      };\n      \n      if (separator === nil) {\n        Opal.yield1(block, self);\n\n        return self;\n      }\n\n      separator = $coerce_to(separator, $$$('String'), 'to_str');\n\n      var a, i, n, length, chomped, trailing, splitted, value;\n\n      if (separator.length === 0) {\n        for (a = self.split(/((?:\\r?\\n){2})(?:(?:\\r?\\n)*)/), i = 0, n = a.length; i < n; i += 2) {\n          if (a[i] || a[i + 1]) {\n            value = (a[i] || \"\") + (a[i + 1] || \"\");\n            if (chomp) {\n              value = (value).$chomp(\"\\n\");\n            }\n            Opal.yield1(block, value);\n          }\n        }\n\n        return self;\n      }\n\n      chomped  = self.$chomp(separator);\n      trailing = self.length != chomped.length;\n      splitted = chomped.split(separator);\n\n      for (i = 0, length = splitted.length; i < length; i++) {\n        value = splitted[i];\n        if (i < length - 1 || trailing) {\n          value += separator;\n        }\n        if (chomp) {\n          value = (value).$chomp(separator);\n        }\n        Opal.yield1(block, value);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$empty?', function $String_empty$ques$11() {\n      var self = this;\n\n      return self.length === 0;\n    });\n    \n    $def(self, '$end_with?', function $String_end_with$ques$12($a) {\n      var $post_args, suffixes, self = this;\n\n      \n      $post_args = $slice(arguments);\n      suffixes = $post_args;\n      \n      for (var i = 0, length = suffixes.length; i < length; i++) {\n        var suffix = $coerce_to(suffixes[i], $$$('String'), 'to_str').$to_s();\n\n        if (self.length >= suffix.length &&\n            self.substr(self.length - suffix.length, suffix.length) == suffix) {\n          return true;\n        }\n      }\n    ;\n      return false;\n    }, -1);\n    \n    $def(self, '$gsub', function $$gsub(pattern, replacement) {\n      var block = $$gsub.$$p || nil, self = this;\n\n      $$gsub.$$p = null;\n      \n      ;\n      ;\n      \n      if (replacement === undefined && block === nil) {\n        return self.$enum_for(\"gsub\", pattern);\n      }\n\n      var result = '', match_data = nil, index = 0, match, _replacement;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, $$$('String'), 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      var lastIndex;\n      while (true) {\n        match = pattern.exec(self);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          result += self.slice(index);\n          break;\n        }\n\n        match_data = $$$('MatchData').$new(pattern, match);\n\n        if (replacement === undefined) {\n          lastIndex = pattern.lastIndex;\n          _replacement = block(match[0]);\n          pattern.lastIndex = lastIndex; // save and restore lastIndex\n        }\n        else if (replacement.$$is_hash) {\n          _replacement = (replacement)['$[]'](match[0]).$to_s();\n        }\n        else {\n          if (!replacement.$$is_string) {\n            replacement = $coerce_to(replacement, $$$('String'), 'to_str');\n          }\n          _replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n        }\n\n        if (pattern.lastIndex === match.index) {\n          result += (self.slice(index, match.index) + _replacement + (self[match.index] || \"\"));\n          pattern.lastIndex += 1;\n        }\n        else {\n          result += (self.slice(index, match.index) + _replacement)\n        }\n        index = pattern.lastIndex;\n      }\n\n      ($gvars[\"~\"] = match_data)\n      return result;\n    ;\n    }, -2);\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return self.toString();\n    });\n    \n    $def(self, '$hex', function $$hex() {\n      var self = this;\n\n      return self.$to_i(16)\n    });\n    \n    $def(self, '$include?', function $String_include$ques$13(other) {\n      var self = this;\n\n      \n      if (!other.$$is_string) {\n        other = $coerce_to(other, $$$('String'), 'to_str');\n      }\n      return self.indexOf(other) !== -1;\n    \n    });\n    \n    $def(self, '$index', function $$index(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var index,\n          match,\n          regex;\n\n      if (offset === undefined) {\n        offset = 0;\n      } else {\n        offset = $coerce_to(offset, $$$('Integer'), 'to_int');\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        regex = $global_multiline_regexp(search);\n        while (true) {\n          match = regex.exec(self);\n          if (match === null) {\n            ($gvars[\"~\"] = nil);\n            index = -1;\n            break;\n          }\n          if (match.index >= offset) {\n            ($gvars[\"~\"] = $$$('MatchData').$new(regex, match))\n            index = match.index;\n            break;\n          }\n          regex.lastIndex = match.index + 1;\n        }\n      } else {\n        search = $coerce_to(search, $$$('String'), 'to_str');\n        if (search.length === 0 && offset > self.length) {\n          index = -1;\n        } else {\n          index = self.indexOf(search, offset);\n        }\n      }\n\n      return index === -1 ? nil : index;\n    ;\n    }, -2);\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      \n      /* eslint-disable no-misleading-character-class */\n      var escapable = /[\\\\\\\"\\x00-\\x1f\\u007F-\\u009F\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n          meta = {\n            '\\u0007': '\\\\a',\n            '\\u001b': '\\\\e',\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\\v': '\\\\v',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n          },\n          escaped = self.replace(escapable, function (chr) {\n            if (meta[chr]) return meta[chr];\n            chr = chr.charCodeAt(0);\n            if (chr <= 0xff && (self.encoding[\"$binary?\"]() || self.internal_encoding[\"$binary?\"]())) {\n              return '\\\\x' + ('00' + chr.toString(16).toUpperCase()).slice(-2);\n            } else {\n              return '\\\\u' + ('0000' + chr.toString(16).toUpperCase()).slice(-4);\n            }\n          });\n      return '\"' + escaped.replace(/\\#[\\$\\@\\{]/g, '\\\\$&') + '\"';\n      /* eslint-enable no-misleading-character-class */\n    \n    });\n    \n    $def(self, '$intern', function $$intern() {\n      var self = this;\n\n      return self.toString();\n    });\n    \n    $def(self, '$length', function $$length() {\n      var self = this;\n\n      return self.length;\n    });\n    $alias(self, \"size\", \"length\");\n    \n    $def(self, '$lines', function $$lines($a, $b) {\n      var block = $$lines.$$p || nil, $post_args, $kwargs, separator, chomp, self = this, e = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      $$lines.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      \n      if ($post_args.length > 0) separator = $post_args.shift();if (separator == null) separator = $gvars[\"/\"];\n      \n      chomp = $kwargs.$$smap[\"chomp\"];if (chomp == null) chomp = false;\n      e = $send(self, 'each_line', [separator, $hash2([\"chomp\"], {\"chomp\": chomp})], block.$to_proc());\n      if ($truthy(block)) {\n        return self\n      } else {\n        return e.$to_a()\n      };\n    }, -1);\n    \n    $def(self, '$ljust', function $$ljust(width, padstr) {\n      var self = this;\n\n      \n      if (padstr == null) padstr = \" \";\n      width = $coerce_to(width, $$$('Integer'), 'to_int');\n      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        $Kernel.$raise($$$('ArgumentError'), \"zero width padding\")\n      };\n      if ($truthy(width <= self.length)) {\n        return self\n      };\n      \n      var index  = -1,\n          result = \"\";\n\n      width -= self.length;\n\n      while (++index < width) {\n        result += padstr;\n      }\n\n      return self + result.slice(0, width);\n    ;\n    }, -2);\n    \n    $def(self, '$lstrip', function $$lstrip() {\n      var self = this;\n\n      return self.replace(/^[\\u0000\\s]*/, '');\n    });\n    \n    $def(self, '$ascii_only?', function $String_ascii_only$ques$14() {\n      var self = this;\n\n      \n      if (!self.encoding.ascii) return false;\n      return /^[\\x00-\\x7F]*$/.test(self);\n    \n    });\n    \n    $def(self, '$match', function $$match(pattern, pos) {\n      var block = $$match.$$p || nil, self = this;\n\n      $$match.$$p = null;\n      \n      ;\n      ;\n      if (($eqeqeq($$('String'), pattern) || ($truthy(pattern['$respond_to?'](\"to_str\"))))) {\n        pattern = $$$('Regexp').$new(pattern.$to_str())\n      };\n      if (!$eqeqeq($$$('Regexp'), pattern)) {\n        $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return $send(pattern, 'match', [self, pos], block.$to_proc());\n    }, -2);\n    \n    $def(self, '$match?', function $String_match$ques$15(pattern, pos) {\n      var self = this;\n\n      \n      ;\n      if (($eqeqeq($$('String'), pattern) || ($truthy(pattern['$respond_to?'](\"to_str\"))))) {\n        pattern = $$$('Regexp').$new(pattern.$to_str())\n      };\n      if (!$eqeqeq($$$('Regexp'), pattern)) {\n        $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return pattern['$match?'](self, pos);\n    }, -2);\n    \n    $def(self, '$next', function $$next() {\n      var self = this;\n\n      \n      var i = self.length;\n      if (i === 0) {\n        return '';\n      }\n      var result = self;\n      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);\n      var carry = false;\n      var code;\n      while (i--) {\n        code = self.charCodeAt(i);\n        if ((code >= 48 && code <= 57) ||\n          (code >= 65 && code <= 90) ||\n          (code >= 97 && code <= 122)) {\n          switch (code) {\n          case 57:\n            carry = true;\n            code = 48;\n            break;\n          case 90:\n            carry = true;\n            code = 65;\n            break;\n          case 122:\n            carry = true;\n            code = 97;\n            break;\n          default:\n            carry = false;\n            code += 1;\n          }\n        } else {\n          if (first_alphanum_char_index === -1) {\n            if (code === 255) {\n              carry = true;\n              code = 0;\n            } else {\n              carry = false;\n              code += 1;\n            }\n          } else {\n            carry = true;\n          }\n        }\n        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);\n        if (carry && (i === 0 || i === first_alphanum_char_index)) {\n          switch (code) {\n          case 65:\n            break;\n          case 97:\n            break;\n          default:\n            code += 1;\n          }\n          if (i === 0) {\n            result = String.fromCharCode(code) + result;\n          } else {\n            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);\n          }\n          carry = false;\n        }\n        if (!carry) {\n          break;\n        }\n      }\n      return result;\n    \n    });\n    \n    $def(self, '$oct', function $$oct() {\n      var self = this;\n\n      \n      var result,\n          string = self,\n          radix = 8;\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x') {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          radix = 2;\n          break;\n        case '0':\n        case '0o':\n          radix = 8;\n          break;\n        case '0d':\n          radix = 10;\n          break;\n        case '0x':\n          radix = 16;\n          break;\n        }\n        return head + tail;\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    \n    });\n    \n    $def(self, '$ord', function $$ord() {\n      var self = this;\n\n      \n      if (typeof self.codePointAt === \"function\") {\n        return self.codePointAt(0);\n      }\n      else {\n        return self.charCodeAt(0);\n      }\n    \n    });\n    \n    $def(self, '$partition', function $$partition(sep) {\n      var self = this;\n\n      \n      var i, m;\n\n      if (sep.$$is_regexp) {\n        m = sep.exec(self);\n        if (m === null) {\n          i = -1;\n        } else {\n          $$$('MatchData').$new(sep, m);\n          sep = m[0];\n          i = m.index;\n        }\n      } else {\n        sep = $coerce_to(sep, $$$('String'), 'to_str');\n        i = self.indexOf(sep);\n      }\n\n      if (i === -1) {\n        return [self, '', ''];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    });\n    \n    $def(self, '$reverse', function $$reverse() {\n      var self = this;\n\n      return self.split('').reverse().join('');\n    });\n    \n    $def(self, '$rindex', function $$rindex(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var i, m, r, _m;\n\n      if (offset === undefined) {\n        offset = self.length;\n      } else {\n        offset = $coerce_to(offset, $$$('Integer'), 'to_int');\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        m = null;\n        r = $global_multiline_regexp(search);\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null || _m.index > offset) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n        if (m === null) {\n          ($gvars[\"~\"] = nil)\n          i = -1;\n        } else {\n          $$$('MatchData').$new(r, m);\n          i = m.index;\n        }\n      } else {\n        search = $coerce_to(search, $$$('String'), 'to_str');\n        i = self.lastIndexOf(search, offset);\n      }\n\n      return i === -1 ? nil : i;\n    ;\n    }, -2);\n    \n    $def(self, '$rjust', function $$rjust(width, padstr) {\n      var self = this;\n\n      \n      if (padstr == null) padstr = \" \";\n      width = $coerce_to(width, $$$('Integer'), 'to_int');\n      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        $Kernel.$raise($$$('ArgumentError'), \"zero width padding\")\n      };\n      if ($truthy(width <= self.length)) {\n        return self\n      };\n      \n      var chars     = Math.floor(width - self.length),\n          patterns  = Math.floor(chars / padstr.length),\n          result    = Array(patterns + 1).join(padstr),\n          remaining = chars - result.length;\n\n      return result + padstr.slice(0, remaining) + self;\n    ;\n    }, -2);\n    \n    $def(self, '$rpartition', function $$rpartition(sep) {\n      var self = this;\n\n      \n      var i, m, r, _m;\n\n      if (sep.$$is_regexp) {\n        m = null;\n        r = $global_multiline_regexp(sep);\n\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n\n        if (m === null) {\n          i = -1;\n        } else {\n          $$$('MatchData').$new(r, m);\n          sep = m[0];\n          i = m.index;\n        }\n\n      } else {\n        sep = $coerce_to(sep, $$$('String'), 'to_str');\n        i = self.lastIndexOf(sep);\n      }\n\n      if (i === -1) {\n        return ['', '', self];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    });\n    \n    $def(self, '$rstrip', function $$rstrip() {\n      var self = this;\n\n      return self.replace(/[\\s\\u0000]*$/, '');\n    });\n    \n    $def(self, '$scan', function $$scan(pattern, $kwargs) {\n      var block = $$scan.$$p || nil, no_matchdata, self = this;\n\n      $$scan.$$p = null;\n      \n      ;\n      $kwargs = $ensure_kwargs($kwargs);\n      \n      no_matchdata = $kwargs.$$smap[\"no_matchdata\"];if (no_matchdata == null) no_matchdata = false;\n      \n      var result = [],\n          match_data = nil,\n          match;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, $$$('String'), 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      while ((match = pattern.exec(self)) != null) {\n        match_data = $$$('MatchData').$new(pattern, match, $hash2([\"no_matchdata\"], {\"no_matchdata\": no_matchdata}));\n        if (block === nil) {\n          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());\n        } else {\n          match.length == 1 ? Opal.yield1(block, match[0]) : Opal.yield1(block, (match_data).$captures());\n        }\n        if (pattern.lastIndex === match.index) {\n          pattern.lastIndex += 1;\n        }\n      }\n\n      if (!no_matchdata) ($gvars[\"~\"] = match_data);\n\n      return (block !== nil ? self : result);\n    ;\n    }, -2);\n    \n    $def(self, '$singleton_class', function $$singleton_class() {\n      var self = this;\n\n      return Opal.get_singleton_class(self);\n    });\n    \n    $def(self, '$split', function $$split(pattern, limit) {\n      var self = this, $ret_or_1 = nil;\n      if ($gvars[\";\"] == null) $gvars[\";\"] = nil;\n\n      \n      ;\n      ;\n      \n      if (self.length === 0) {\n        return [];\n      }\n\n      if (limit === undefined) {\n        limit = 0;\n      } else {\n        limit = $Opal['$coerce_to!'](limit, $$$('Integer'), \"to_int\");\n        if (limit === 1) {\n          return [self];\n        }\n      }\n\n      if (pattern === undefined || pattern === nil) {\n        pattern = ($truthy(($ret_or_1 = $gvars[\";\"])) ? ($ret_or_1) : (\" \"));\n      }\n\n      var result = [],\n          string = self.toString(),\n          index = 0,\n          match,\n          i, ii;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, $$$('String'), 'to_str').$to_s();\n        if (pattern === ' ') {\n          pattern = /\\s+/gm;\n          string = string.replace(/^\\s+/, '');\n        } else {\n          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n        }\n      }\n\n      result = string.split(pattern);\n\n      if (result.length === 1 && result[0] === string) {\n        return [result[0]];\n      }\n\n      while ((i = result.indexOf(undefined)) !== -1) {\n        result.splice(i, 1);\n      }\n\n      if (limit === 0) {\n        while (result[result.length - 1] === '') {\n          result.length -= 1;\n        }\n        return result;\n      }\n\n      match = pattern.exec(string);\n\n      if (limit < 0) {\n        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {\n          for (i = 0, ii = match.length; i < ii; i++) {\n            result.push('');\n          }\n        }\n        return result;\n      }\n\n      if (match !== null && match[0] === '') {\n        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));\n        return result;\n      }\n\n      if (limit >= result.length) {\n        return result;\n      }\n\n      i = 0;\n      while (match !== null) {\n        i++;\n        index = pattern.lastIndex;\n        if (i + 1 === limit) {\n          break;\n        }\n        match = pattern.exec(string);\n      }\n      result.splice(limit - 1, result.length - 1, string.slice(index));\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$squeeze', function $$squeeze($a) {\n      var $post_args, sets, self = this;\n\n      \n      $post_args = $slice(arguments);\n      sets = $post_args;\n      \n      if (sets.length === 0) {\n        return self.replace(/(.)\\1+/g, '$1');\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.replace(new RegExp('(' + char_class + ')\\\\1+', 'g'), '$1');\n    ;\n    }, -1);\n    \n    $def(self, '$start_with?', function $String_start_with$ques$16($a) {\n      var $post_args, prefixes, self = this;\n\n      \n      $post_args = $slice(arguments);\n      prefixes = $post_args;\n      \n      for (var i = 0, length = prefixes.length; i < length; i++) {\n        if (prefixes[i].$$is_regexp) {\n          var regexp = prefixes[i];\n          var match = regexp.exec(self);\n\n          if (match != null && match.index === 0) {\n            ($gvars[\"~\"] = $$$('MatchData').$new(regexp, match));\n            return true;\n          } else {\n            ($gvars[\"~\"] = nil)\n          }\n        } else {\n          var prefix = $coerce_to(prefixes[i], $$$('String'), 'to_str').$to_s();\n\n          if (self.indexOf(prefix) === 0) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    ;\n    }, -1);\n    \n    $def(self, '$strip', function $$strip() {\n      var self = this;\n\n      return self.replace(/^[\\s\\u0000]*|[\\s\\u0000]*$/g, '');\n    });\n    \n    $def(self, '$sub', function $$sub(pattern, replacement) {\n      var block = $$sub.$$p || nil, self = this;\n\n      $$sub.$$p = null;\n      \n      ;\n      ;\n      \n      if (!pattern.$$is_regexp) {\n        pattern = $coerce_to(pattern, $$$('String'), 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n      }\n\n      var result, match = pattern.exec(self);\n\n      if (match === null) {\n        ($gvars[\"~\"] = nil)\n        result = self.toString();\n      } else {\n        $$$('MatchData').$new(pattern, match)\n\n        if (replacement === undefined) {\n\n          if (block === nil) {\n            $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (1 for 2)\")\n          }\n          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);\n\n        } else if (replacement.$$is_hash) {\n\n          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);\n\n        } else {\n\n          replacement = $coerce_to(replacement, $$$('String'), 'to_str');\n\n          replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n\n          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);\n        }\n      }\n\n      return result;\n    ;\n    }, -2);\n    \n    $def(self, '$sum', function $$sum(n) {\n      var self = this;\n\n      \n      if (n == null) n = 16;\n      \n      n = $coerce_to(n, $$$('Integer'), 'to_int');\n\n      var result = 0,\n          length = self.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        result += self.charCodeAt(i);\n      }\n\n      if (n <= 0) {\n        return result;\n      }\n\n      return result & (Math.pow(2, n) - 1);\n    ;\n    }, -1);\n    \n    $def(self, '$swapcase', function $$swapcase() {\n      var self = this;\n\n      \n      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {\n        return $1 ? $0.toUpperCase() : $0.toLowerCase();\n      });\n\n      return str;\n    \n    });\n    \n    $def(self, '$to_f', function $$to_f() {\n      var self = this;\n\n      \n      if (self.charAt(0) === '_') {\n        return 0;\n      }\n\n      var result = parseFloat(self.replace(/_/g, ''));\n\n      if (isNaN(result) || result == Infinity || result == -Infinity) {\n        return 0;\n      }\n      else {\n        return result;\n      }\n    \n    });\n    \n    $def(self, '$to_i', function $$to_i(base) {\n      var self = this;\n\n      \n      if (base == null) base = 10;\n      \n      var result,\n          string = self.toLowerCase(),\n          radix = $coerce_to(base, $$$('Integer'), 'to_int');\n\n      if (radix === 1 || radix < 0 || radix > 36) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid radix \" + (radix))\n      }\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          if (radix === 0 || radix === 2) {\n            radix = 2;\n            return head + tail;\n          }\n          break;\n        case '0':\n        case '0o':\n          if (radix === 0 || radix === 8) {\n            radix = 8;\n            return head + tail;\n          }\n          break;\n        case '0d':\n          if (radix === 0 || radix === 10) {\n            radix = 10;\n            return head + tail;\n          }\n          break;\n        case '0x':\n          if (radix === 0 || radix === 16) {\n            radix = 16;\n            return head + tail;\n          }\n          break;\n        }\n        return original\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    ;\n    }, -1);\n    \n    $def(self, '$to_proc', function $$to_proc() {\n      var $yield = $$to_proc.$$p || nil, self = this, method_name = nil, jsid = nil, proc = nil;\n\n      $$to_proc.$$p = null;\n      \n      method_name = self.valueOf();\n      jsid = Opal.jsid(method_name);\n      proc = $send($Kernel, 'proc', [], function $$17($a){var block = $$17.$$p || nil, $post_args, args;\n\n        $$17.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        args = $post_args;\n        \n        if (args.length === 0) {\n          $Kernel.$raise($$$('ArgumentError'), \"no receiver given\")\n        }\n\n        var recv = args[0];\n\n        if (recv == null) recv = nil;\n\n        var body = recv[jsid];\n\n        if (!body) {\n          body = recv.$method_missing;\n          args[0] = method_name;\n        } else {\n          args = args.slice(1);\n        }\n\n        if (typeof block === 'function') {\n          body.$$p = block;\n        }\n\n        if (args.length === 0) {\n          return body.call(recv);\n        } else {\n          return body.apply(recv, args);\n        }\n      ;}, -1);\n      proc.$$source_location = nil;\n      return proc;\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this;\n\n      return self.toString();\n    });\n    \n    $def(self, '$tr', function $$tr(from, to) {\n      var self = this;\n\n      \n      from = $coerce_to(from, $$$('String'), 'to_str').$to_s();\n      to = $coerce_to(to, $$$('String'), 'to_str').$to_s();\n\n      if (from.length == 0 || from === to) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            $Kernel.$raise($$$('ArgumentError'), \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_to == null) {\n              last_to = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_to.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                $Kernel.$raise($$$('ArgumentError'), \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_to = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n\n      var new_str = ''\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch];\n        if (inverse) {\n          new_str += (sub == null ? global_sub : ch);\n        }\n        else {\n          new_str += (sub != null ? sub : ch);\n        }\n      }\n      return new_str;\n    \n    });\n    \n    $def(self, '$tr_s', function $$tr_s(from, to) {\n      var self = this;\n\n      \n      from = $coerce_to(from, $$$('String'), 'to_str').$to_s();\n      to = $coerce_to(to, $$$('String'), 'to_str').$to_s();\n\n      if (from.length == 0) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            $Kernel.$raise($$$('ArgumentError'), \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_from == null) {\n              last_from = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_from.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                $Kernel.$raise($$$('ArgumentError'), \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_from = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n      var new_str = ''\n      var last_substitute = null\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch]\n        if (inverse) {\n          if (sub == null) {\n            if (last_substitute == null) {\n              new_str += global_sub;\n              last_substitute = true;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n        else {\n          if (sub != null) {\n            if (last_substitute == null || last_substitute !== sub) {\n              new_str += sub;\n              last_substitute = sub;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n      }\n      return new_str;\n    \n    });\n    \n    $def(self, '$upcase', function $$upcase() {\n      var self = this;\n\n      return self.toUpperCase();\n    });\n    \n    $def(self, '$upto', function $$upto(stop, excl) {\n      var block = $$upto.$$p || nil, self = this;\n\n      $$upto.$$p = null;\n      \n      ;\n      if (excl == null) excl = false;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"upto\", stop, excl)\n      };\n      \n      var a, b, s = self.toString();\n\n      stop = $coerce_to(stop, $$$('String'), 'to_str');\n\n      if (s.length === 1 && stop.length === 1) {\n\n        a = s.charCodeAt(0);\n        b = stop.charCodeAt(0);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(String.fromCharCode(a));\n\n          a += 1;\n        }\n\n      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {\n\n        a = parseInt(s, 10);\n        b = parseInt(stop, 10);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(a.toString());\n\n          a += 1;\n        }\n\n      } else {\n\n        while (s.length <= stop.length && s <= stop) {\n          if (excl && s === stop) {\n            break;\n          }\n\n          block(s);\n\n          s = (s).$succ();\n        }\n\n      }\n      return self;\n    ;\n    }, -2);\n    \n    function char_class_from_char_sets(sets) {\n      function explode_sequences_in_character_set(set) {\n        var result = '',\n            i, len = set.length,\n            curr_char,\n            skip_next_dash,\n            char_code_from,\n            char_code_upto,\n            char_code;\n        for (i = 0; i < len; i++) {\n          curr_char = set.charAt(i);\n          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {\n            char_code_from = set.charCodeAt(i - 1);\n            char_code_upto = set.charCodeAt(i + 1);\n            if (char_code_from > char_code_upto) {\n              $Kernel.$raise($$$('ArgumentError'), \"invalid range \\\"\" + (char_code_from) + \"-\" + (char_code_upto) + \"\\\" in string transliteration\")\n            }\n            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {\n              result += String.fromCharCode(char_code);\n            }\n            skip_next_dash = true;\n            i++;\n          } else {\n            skip_next_dash = (curr_char === '\\\\');\n            result += curr_char;\n          }\n        }\n        return result;\n      }\n\n      function intersection(setA, setB) {\n        if (setA.length === 0) {\n          return setB;\n        }\n        var result = '',\n            i, len = setA.length,\n            chr;\n        for (i = 0; i < len; i++) {\n          chr = setA.charAt(i);\n          if (setB.indexOf(chr) !== -1) {\n            result += chr;\n          }\n        }\n        return result;\n      }\n\n      var i, len, set, neg, chr, tmp,\n          pos_intersection = '',\n          neg_intersection = '';\n\n      for (i = 0, len = sets.length; i < len; i++) {\n        set = $coerce_to(sets[i], $$$('String'), 'to_str');\n        neg = (set.charAt(0) === '^' && set.length > 1);\n        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);\n        if (neg) {\n          neg_intersection = intersection(neg_intersection, set);\n        } else {\n          pos_intersection = intersection(pos_intersection, set);\n        }\n      }\n\n      if (pos_intersection.length > 0 && neg_intersection.length > 0) {\n        tmp = '';\n        for (i = 0, len = pos_intersection.length; i < len; i++) {\n          chr = pos_intersection.charAt(i);\n          if (neg_intersection.indexOf(chr) === -1) {\n            tmp += chr;\n          }\n        }\n        pos_intersection = tmp;\n        neg_intersection = '';\n      }\n\n      if (pos_intersection.length > 0) {\n        return '[' + $$$('Regexp').$escape(pos_intersection) + ']';\n      }\n\n      if (neg_intersection.length > 0) {\n        return '[^' + $$$('Regexp').$escape(neg_intersection) + ']';\n      }\n\n      return null;\n    }\n  ;\n    \n    $def(self, '$instance_variables', function $$instance_variables() {\n      \n      return []\n    });\n    $defs(self, '$_load', function $$_load($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $send(self, 'new', $to_a(args));\n    }, -1);\n    \n    $def(self, '$unicode_normalize', function $$unicode_normalize(form) {\n      var self = this;\n\n      \n      if (form == null) form = \"nfc\";\n      if (!$truthy([\"nfc\", \"nfd\", \"nfkc\", \"nfkd\"]['$include?'](form))) {\n        $Kernel.$raise($$$('ArgumentError'), \"Invalid normalization form \" + (form))\n      };\n      return self.normalize(form.$upcase());\n    }, -1);\n    \n    $def(self, '$unicode_normalized?', function $String_unicode_normalized$ques$18(form) {\n      var self = this;\n\n      \n      if (form == null) form = \"nfc\";\n      return self.$unicode_normalize(form)['$=='](self);\n    }, -1);\n    \n    $def(self, '$unpack', function $$unpack(format) {\n      \n      return $Kernel.$raise(\"To use String#unpack, you must first require 'corelib/string/unpack'.\")\n    });\n    \n    $def(self, '$unpack1', function $$unpack1(format) {\n      \n      return $Kernel.$raise(\"To use String#unpack1, you must first require 'corelib/string/unpack'.\")\n    });\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if (typeof self === 'string') { return self; }\n      $prop(self, \"$$frozen\", true);\n      return self;\n    \n    });\n    \n    $def(self, '$-@', function $String_$minus$$19() {\n      var self = this;\n\n      \n      if (typeof self === 'string') return self;\n      if (self.$$frozen) return self;\n      if (self.encoding.name == 'UTF-8' && self.internal_encoding.name == 'UTF-8') return self.toString();\n      return self.$dup().$freeze();\n    \n    });\n    \n    $def(self, '$frozen?', function $String_frozen$ques$20() {\n      var self = this;\n\n      return typeof self === 'string' || self.$$frozen === true;\n    });\n    $alias(self, \"+@\", \"dup\");\n    $alias(self, \"===\", \"==\");\n    $alias(self, \"byteslice\", \"[]\");\n    $alias(self, \"eql?\", \"==\");\n    $alias(self, \"equal?\", \"===\");\n    $alias(self, \"object_id\", \"__id__\");\n    $alias(self, \"slice\", \"[]\");\n    $alias(self, \"succ\", \"next\");\n    $alias(self, \"to_str\", \"to_s\");\n    $alias(self, \"to_sym\", \"intern\");\n    return $Opal.$pristine(self, \"initialize\");\n  })('::', String, $nesting);\n  return $const_set($nesting[0], 'Symbol', $$('String'));\n};\n\nOpal.modules[\"corelib/enumerable\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $yield1 = Opal.yield1, $yieldX = Opal.yieldX, $deny_frozen_access = Opal.deny_frozen_access, $module = Opal.module, $send = Opal.send, $slice = Opal.slice, $to_a = Opal.to_a, $Opal = Opal.Opal, $thrower = Opal.thrower, $def = Opal.def, $Kernel = Opal.Kernel, $return_val = Opal.return_val, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_le = Opal.rb_le, $hash2 = Opal.hash2, $lambda = Opal.lambda, $not = Opal.not, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('each,public_send,destructure,to_enum,enumerator_size,new,yield,raise,slice_when,!,enum_for,flatten,map,to_proc,compact,to_a,warn,proc,==,nil?,respond_to?,coerce_to!,>,*,try_convert,<,+,-,ceil,/,size,select,__send__,length,<=,[],push,<<,[]=,===,inspect,<=>,first,reverse,sort,take,sort_by,compare,call,dup,sort!,map!,include?,-@,key?,values,transform_values,group_by,fetch,to_h,coerce_to?,class,zip,detect,find_all,collect_concat,collect,inject,entries');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Enumerable');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    \n    function comparableForPattern(value) {\n      if (value.length === 0) {\n        value = [nil];\n      }\n\n      if (value.length > 1) {\n        value = [value];\n      }\n\n      return value;\n    }\n  ;\n    \n    $def(self, '$all?', function $Enumerable_all$ques$1(pattern) {try { var $t_return = $thrower('return'); \n      var block = $Enumerable_all$ques$1.$$p || nil, self = this;\n\n      $Enumerable_all$ques$1.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], function $$2($a){var $post_args, value, comparable = nil;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat($to_a(comparable))))) {\n            return nil\n          } else {\n            $t_return.$throw(false)\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], function $$3($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy(Opal.yieldX(block, $to_a(value)))) {\n            return nil\n          } else {\n            $t_return.$throw(false)\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else {\n        $send(self, 'each', [], function $$4($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy($Opal.$destructure(value))) {\n            return nil\n          } else {\n            $t_return.$throw(false)\n          };}, {$$arity: -1, $$ret: $t_return})\n      };\n      return true;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$any?', function $Enumerable_any$ques$5(pattern) {try { var $t_return = $thrower('return'); \n      var block = $Enumerable_any$ques$5.$$p || nil, self = this;\n\n      $Enumerable_any$ques$5.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], function $$6($a){var $post_args, value, comparable = nil;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat($to_a(comparable))))) {\n            $t_return.$throw(true)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], function $$7($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy(Opal.yieldX(block, $to_a(value)))) {\n            $t_return.$throw(true)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else {\n        $send(self, 'each', [], function $$8($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy($Opal.$destructure(value))) {\n            $t_return.$throw(true)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      };\n      return false;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$chunk', function $$chunk() {\n      var block = $$chunk.$$p || nil, self = this;\n\n      $$chunk.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'to_enum', [\"chunk\"], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      return $send($$$('Enumerator'), 'new', [], function $$10(yielder){var self = $$10.$$s == null ? this : $$10.$$s;\n\n        \n        if (yielder == null) yielder = nil;\n        \n        var previous = nil, accumulate = [];\n\n        function releaseAccumulate() {\n          if (accumulate.length > 0) {\n            yielder.$yield(previous, accumulate)\n          }\n        }\n\n        self.$each.$$p = function(value) {\n          var key = $yield1(block, value);\n\n          if (key === nil) {\n            releaseAccumulate();\n            accumulate = [];\n            previous = nil;\n          } else {\n            if (previous === nil || previous === key) {\n              accumulate.push(value);\n            } else {\n              releaseAccumulate();\n              accumulate = [value];\n            }\n\n            previous = key;\n          }\n        }\n\n        self.$each();\n\n        releaseAccumulate();\n      ;}, {$$s: self});\n    });\n    \n    $def(self, '$chunk_while', function $$chunk_while() {\n      var block = $$chunk_while.$$p || nil, self = this;\n\n      $$chunk_while.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        $Kernel.$raise($$$('ArgumentError'), \"no block given\")\n      };\n      return $send(self, 'slice_when', [], function $$11(before, after){\n        \n        if (before == null) before = nil;\n        if (after == null) after = nil;\n        return Opal.yieldX(block, [before, after])['$!']();});\n    });\n    \n    $def(self, '$collect', function $$collect() {\n      var block = $$collect.$$p || nil, self = this;\n\n      $$collect.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"collect\"], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var value = $yieldX(block, arguments);\n\n        result.push(value);\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$collect_concat', function $$collect_concat() {\n      var block = $$collect_concat.$$p || nil, self = this;\n\n      $$collect_concat.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"collect_concat\"], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      return $send(self, 'map', [], block.$to_proc()).$flatten(1);\n    });\n    \n    $def(self, '$compact', function $$compact() {\n      var self = this;\n\n      return self.$to_a().$compact()\n    });\n    \n    $def(self, '$count', function $$count(object) {\n      var block = $$count.$$p || nil, self = this, result = nil;\n\n      $$count.$$p = null;\n      \n      ;\n      ;\n      result = 0;\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      if ($truthy(object != null)) {\n        block = $send($Kernel, 'proc', [], function $$14($a){var $post_args, args;\n\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $Opal.$destructure(args)['$=='](object);}, -1)\n      } else if ($truthy(block['$nil?']())) {\n        block = $send($Kernel, 'proc', [], $return_val(true))\n      };\n      $send(self, 'each', [], function $$15($a){var $post_args, args;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        if ($truthy($yieldX(block, args))) {\n          return result++;\n        } else {\n          return nil\n        };}, -1);\n      return result;\n    }, -1);\n    \n    $def(self, '$cycle', function $$cycle(n) {\n      var block = $$cycle.$$p || nil, self = this;\n\n      $$cycle.$$p = null;\n      \n      ;\n      if (n == null) n = nil;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"cycle\", n], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;\n\n          if ($truthy(n['$nil?']())) {\n            if ($truthy(self['$respond_to?'](\"size\"))) {\n              return $$$($$$('Float'), 'INFINITY')\n            } else {\n              return nil\n            }\n          } else {\n            \n            n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, {$$s: self})\n      };\n      if (!$truthy(n['$nil?']())) {\n        \n        n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n        if ($truthy(n <= 0)) {\n          return nil\n        };\n      };\n      \n      var all = [], i, length, value;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        all.push(param);\n      }\n\n      self.$each();\n\n      if (all.length === 0) {\n        return nil;\n      }\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = $yield1(block, all[i]);\n          }\n        }\n      }\n      else {\n        while (n > 1) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = $yield1(block, all[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$detect', function $$detect(ifnone) {try { var $t_return = $thrower('return'); \n      var block = $$detect.$$p || nil, self = this;\n\n      $$detect.$$p = null;\n      \n      ;\n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"detect\", ifnone)\n      };\n      $send(self, 'each', [], function $$17($a){var $post_args, args, value = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        value = $Opal.$destructure(args);\n        if ($truthy(Opal.yield1(block, value))) {\n          $t_return.$throw(value)\n        } else {\n          return nil\n        };}, {$$arity: -1, $$ret: $t_return});\n      \n      if (ifnone !== undefined) {\n        if (typeof(ifnone) === 'function') {\n          return ifnone();\n        } else {\n          return ifnone;\n        }\n      }\n    ;\n      return nil;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$drop', function $$drop(number) {\n      var self = this;\n\n      \n      number = $coerce_to(number, $$$('Integer'), 'to_int');\n      if ($truthy(number < 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"attempt to drop negative size\")\n      };\n      \n      var result  = [],\n          current = 0;\n\n      self.$each.$$p = function() {\n        if (number <= current) {\n          result.push($Opal.$destructure(arguments));\n        }\n\n        current++;\n      };\n\n      self.$each()\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$drop_while', function $$drop_while() {\n      var block = $$drop_while.$$p || nil, self = this;\n\n      $$drop_while.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"drop_while\")\n      };\n      \n      var result   = [],\n          dropping = true;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments);\n\n        if (dropping) {\n          var value = $yield1(block, param);\n\n          if (!$truthy(value)) {\n            dropping = false;\n            result.push(param);\n          }\n        }\n        else {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$each_cons', function $$each_cons(n) {\n      var block = $$each_cons.$$p || nil, self = this;\n\n      $$each_cons.$$p = null;\n      \n      ;\n      if ($truthy(arguments.length != 1)) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" for 1)\")\n      };\n      n = $Opal.$try_convert(n, $$$('Integer'), \"to_int\");\n      if ($truthy(n <= 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid size\")\n      };\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_cons\", n], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s, enum_size = nil;\n\n          \n          enum_size = self.$enumerator_size();\n          if ($truthy(enum_size['$nil?']())) {\n            return nil\n          } else if (($eqeq(enum_size, 0) || ($truthy($rb_lt(enum_size, n))))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(enum_size, n), 1)\n          };}, {$$s: self})\n      };\n      \n      var buffer = [];\n\n      self.$each.$$p = function() {\n        var element = $Opal.$destructure(arguments);\n        buffer.push(element);\n        if (buffer.length > n) {\n          buffer.shift();\n        }\n        if (buffer.length == n) {\n          $yield1(block, buffer.slice(0, n));\n        }\n      }\n\n      self.$each();\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$each_entry', function $$each_entry($a) {\n      var block = $$each_entry.$$p || nil, $post_args, data, self = this;\n\n      $$each_entry.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      data = $post_args;\n      if (!(block !== nil)) {\n        return $send(self, 'to_enum', [\"each_entry\"].concat($to_a(data)), function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      self.$each.$$p = function() {\n        var item = $Opal.$destructure(arguments);\n\n        $yield1(block, item);\n      }\n\n      self.$each.apply(self, data);\n\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$each_slice', function $$each_slice(n) {\n      var block = $$each_slice.$$p || nil, self = this;\n\n      $$each_slice.$$p = null;\n      \n      ;\n      n = $coerce_to(n, $$$('Integer'), 'to_int');\n      if ($truthy(n <= 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid slice size\")\n      };\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_slice\", n], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;\n\n          if ($truthy(self['$respond_to?'](\"size\"))) {\n            return $rb_divide(self.$size(), n).$ceil()\n          } else {\n            return nil\n          }}, {$$s: self})\n      };\n      \n      var slice = []\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments);\n\n        slice.push(param);\n\n        if (slice.length === n) {\n          $yield1(block, slice);\n          slice = [];\n        }\n      };\n\n      self.$each();\n\n      // our \"last\" group, if smaller than n then won't have been yielded\n      if (slice.length > 0) {\n        $yield1(block, slice);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$each_with_index', function $$each_with_index($a) {\n      var block = $$each_with_index.$$p || nil, $post_args, args, self = this;\n\n      $$each_with_index.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_with_index\"].concat($to_a(args)), function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var index = 0;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments);\n\n        block(param, index);\n\n        index++;\n      };\n\n      self.$each.apply(self, args);\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$each_with_object', function $$each_with_object(object) {\n      var block = $$each_with_object.$$p || nil, self = this;\n\n      $$each_with_object.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_with_object\", object], function $$22(){var self = $$22.$$s == null ? this : $$22.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments);\n\n        block(param, object);\n      };\n\n      self.$each();\n    ;\n      return object;\n    });\n    \n    $def(self, '$entries', function $$entries($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push($Opal.$destructure(arguments));\n      };\n\n      self.$each.apply(self, args);\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$filter_map', function $$filter_map() {\n      var block = $$filter_map.$$p || nil, self = this;\n\n      $$filter_map.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"filter_map\"], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      return $send($send(self, 'map', [], block.$to_proc()), 'select', [], \"itself\".$to_proc());\n    });\n    \n    $def(self, '$find_all', function $$find_all() {\n      var block = $$find_all.$$p || nil, self = this;\n\n      $$find_all.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"find_all\"], function $$24(){var self = $$24.$$s == null ? this : $$24.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if ($truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$find_index', function $$find_index(object) {try { var $t_return = $thrower('return'); \n      var block = $$find_index.$$p || nil, self = this, index = nil;\n\n      $$find_index.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(object === undefined && block === nil)) {\n        return self.$enum_for(\"find_index\")\n      };\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      index = 0;\n      if ($truthy(object != null)) {\n        $send(self, 'each', [], function $$25($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($eqeq($Opal.$destructure(value), object)) {\n            $t_return.$throw(index)\n          };\n          return index += 1;;}, {$$arity: -1, $$ret: $t_return})\n      } else {\n        $send(self, 'each', [], function $$26($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy(Opal.yieldX(block, $to_a(value)))) {\n            $t_return.$throw(index)\n          };\n          return index += 1;;}, {$$arity: -1, $$ret: $t_return})\n      };\n      return nil;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$first', function $$first(number) {try { var $t_return = $thrower('return'); \n      var self = this, result = nil, current = nil;\n\n      \n      ;\n      if ($truthy(number === undefined)) {\n        return $send(self, 'each', [], function $$27(value){\n          \n          if (value == null) value = nil;\n          $t_return.$throw(value);}, {$$ret: $t_return})\n      } else {\n        \n        result = [];\n        number = $coerce_to(number, $$$('Integer'), 'to_int');\n        if ($truthy(number < 0)) {\n          $Kernel.$raise($$$('ArgumentError'), \"attempt to take negative size\")\n        };\n        if ($truthy(number == 0)) {\n          return []\n        };\n        current = 0;\n        $send(self, 'each', [], function $$28($a){var $post_args, args;\n\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          result.push($Opal.$destructure(args));\n          if ($truthy(number <= ++current)) {\n            $t_return.$throw(result)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return});\n        return result;\n      };} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$grep', function $$grep(pattern) {\n      var block = $$grep.$$p || nil, self = this, result = nil;\n\n      $$grep.$$p = null;\n      \n      ;\n      result = [];\n      $send(self, 'each', [], function $$29($a){var $post_args, value, cmp = nil;\n\n        \n        $post_args = $slice(arguments);\n        value = $post_args;\n        cmp = comparableForPattern(value);\n        if (!$truthy($send(pattern, '__send__', [\"===\"].concat($to_a(cmp))))) {\n          return nil\n        };\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]\n          };\n          value = Opal.yieldX(block, $to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)\n        };\n        return result.$push(value);}, -1);\n      return result;\n    });\n    \n    $def(self, '$grep_v', function $$grep_v(pattern) {\n      var block = $$grep_v.$$p || nil, self = this, result = nil;\n\n      $$grep_v.$$p = null;\n      \n      ;\n      result = [];\n      $send(self, 'each', [], function $$30($a){var $post_args, value, cmp = nil;\n\n        \n        $post_args = $slice(arguments);\n        value = $post_args;\n        cmp = comparableForPattern(value);\n        if ($truthy($send(pattern, '__send__', [\"===\"].concat($to_a(cmp))))) {\n          return nil\n        };\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]\n          };\n          value = Opal.yieldX(block, $to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)\n        };\n        return result.$push(value);}, -1);\n      return result;\n    });\n    \n    $def(self, '$group_by', function $$group_by() {\n      var block = $$group_by.$$p || nil, $a, self = this, hash = nil, $ret_or_1 = nil;\n\n      $$group_by.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"group_by\"], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      hash = $hash2([], {});\n      \n      var result;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        ($truthy(($ret_or_1 = hash['$[]'](value))) ? ($ret_or_1) : (($a = [value, []], $send(hash, '[]=', $a), $a[$a.length - 1])))['$<<'](param);\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return hash;\n    });\n    \n    $def(self, '$include?', function $Enumerable_include$ques$32(obj) {try { var $t_return = $thrower('return'); \n      var self = this;\n\n      \n      $send(self, 'each', [], function $$33($a){var $post_args, args;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        if ($eqeq($Opal.$destructure(args), obj)) {\n          $t_return.$throw(true)\n        } else {\n          return nil\n        };}, {$$arity: -1, $$ret: $t_return});\n      return false;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    });\n    \n    $def(self, '$inject', function $$inject(object, sym) {\n      var block = $$inject.$$p || nil, self = this;\n\n      $$inject.$$p = null;\n      \n      ;\n      ;\n      ;\n      \n      var result = object;\n\n      if (block !== nil && sym === undefined) {\n        self.$each.$$p = function() {\n          var value = $Opal.$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          value = $yieldX(block, [result, value]);\n\n          result = value;\n        };\n      }\n      else {\n        if (sym === undefined) {\n          if (!$$$('Symbol')['$==='](object)) {\n            $Kernel.$raise($$$('TypeError'), \"\" + (object.$inspect()) + \" is not a Symbol\");\n          }\n\n          sym    = object;\n          result = undefined;\n        }\n\n        self.$each.$$p = function() {\n          var value = $Opal.$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          result = (result).$__send__(sym, value);\n        };\n      }\n\n      self.$each();\n\n      return result == undefined ? nil : result;\n    ;\n    }, -1);\n    \n    $def(self, '$lazy', function $$lazy() {\n      var self = this;\n\n      return $send($$$($$$('Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], function $$34(enum$, $a){var $post_args, args;\n\n        \n        if (enum$ == null) enum$ = nil;\n        $post_args = $slice(arguments, 1);\n        args = $post_args;\n        return $send(enum$, 'yield', $to_a(args));}, -2)\n    });\n    \n    $def(self, '$enumerator_size', function $$enumerator_size() {\n      var self = this;\n\n      if ($truthy(self['$respond_to?'](\"size\"))) {\n        return self.$size()\n      } else {\n        return nil\n      }\n    });\n    \n    $def(self, '$max', function $$max(n) {\n      var block = $$max.$$p || nil, self = this;\n\n      $$max.$$p = null;\n      \n      ;\n      ;\n      \n      if (n === undefined || n === nil) {\n        var result, value;\n\n        self.$each.$$p = function() {\n          var item = $Opal.$destructure(arguments);\n\n          if (result === undefined) {\n            result = item;\n            return;\n          }\n\n          if (block !== nil) {\n            value = $yieldX(block, [item, result]);\n          } else {\n            value = (item)['$<=>'](result);\n          }\n\n          if (value === nil) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison failed\");\n          }\n\n          if (value > 0) {\n            result = item;\n          }\n        }\n\n        self.$each();\n\n        if (result === undefined) {\n          return nil;\n        } else {\n          return result;\n        }\n      }\n\n      n = $coerce_to(n, $$$('Integer'), 'to_int');\n    ;\n      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);\n    }, -1);\n    \n    $def(self, '$max_by', function $$max_by(n) {\n      var block = $$max_by.$$p || nil, self = this;\n\n      $$max_by.$$p = null;\n      \n      ;\n      if (n == null) n = nil;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"max_by\", n], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      if (!$truthy(n['$nil?']())) {\n        return $send(self, 'sort_by', [], block.$to_proc()).$reverse().$take(n)\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) > 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, -1);\n    \n    $def(self, '$min', function $$min(n) {\n      var block = $$min.$$p || nil, self = this;\n\n      $$min.$$p = null;\n      \n      ;\n      if (n == null) n = nil;\n      if (!$truthy(n['$nil?']())) {\n        if ((block !== nil)) {\n          return $send(self, 'sort', [], function $$36(a, b){\n            \n            if (a == null) a = nil;\n            if (b == null) b = nil;\n            return Opal.yieldX(block, [a, b]);;}).$take(n)\n        } else {\n          return self.$sort().$take(n)\n        }\n      };\n      \n      var result;\n\n      if (block !== nil) {\n        self.$each.$$p = function() {\n          var param = $Opal.$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          var value = block(param, result);\n\n          if (value === nil) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison failed\");\n          }\n\n          if (value < 0) {\n            result = param;\n          }\n        };\n      }\n      else {\n        self.$each.$$p = function() {\n          var param = $Opal.$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          if ($Opal.$compare(param, result) < 0) {\n            result = param;\n          }\n        };\n      }\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, -1);\n    \n    $def(self, '$min_by', function $$min_by(n) {\n      var block = $$min_by.$$p || nil, self = this;\n\n      $$min_by.$$p = null;\n      \n      ;\n      if (n == null) n = nil;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"min_by\", n], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      if (!$truthy(n['$nil?']())) {\n        return $send(self, 'sort_by', [], block.$to_proc()).$take(n)\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) < 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, -1);\n    \n    $def(self, '$minmax', function $$minmax() {\n      var block = $$minmax.$$p || nil, self = this, $ret_or_1 = nil;\n\n      $$minmax.$$p = null;\n      \n      ;\n      block = ($truthy(($ret_or_1 = block)) ? ($ret_or_1) : ($send($Kernel, 'proc', [], function $$38(a, b){\n        \n        if (a == null) a = nil;\n        if (b == null) b = nil;\n        return a['$<=>'](b);})));\n      \n      var min = nil, max = nil, first_time = true;\n\n      self.$each.$$p = function() {\n        var element = $Opal.$destructure(arguments);\n        if (first_time) {\n          min = max = element;\n          first_time = false;\n        } else {\n          var min_cmp = block.$call(min, element);\n\n          if (min_cmp === nil) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison failed\")\n          } else if (min_cmp > 0) {\n            min = element;\n          }\n\n          var max_cmp = block.$call(max, element);\n\n          if (max_cmp === nil) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison failed\")\n          } else if (max_cmp < 0) {\n            max = element;\n          }\n        }\n      }\n\n      self.$each();\n\n      return [min, max];\n    ;\n    });\n    \n    $def(self, '$minmax_by', function $$minmax_by() {\n      var block = $$minmax_by.$$p || nil, self = this;\n\n      $$minmax_by.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"minmax_by\"], function $$39(){var self = $$39.$$s == null ? this : $$39.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var min_result = nil,\n          max_result = nil,\n          min_by,\n          max_by;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if ((min_by === undefined) || (value)['$<=>'](min_by) < 0) {\n          min_result = param;\n          min_by     = value;\n        }\n\n        if ((max_by === undefined) || (value)['$<=>'](max_by) > 0) {\n          max_result = param;\n          max_by     = value;\n        }\n      };\n\n      self.$each();\n\n      return [min_result, max_result];\n    ;\n    });\n    \n    $def(self, '$none?', function $Enumerable_none$ques$40(pattern) {try { var $t_return = $thrower('return'); \n      var block = $Enumerable_none$ques$40.$$p || nil, self = this;\n\n      $Enumerable_none$ques$40.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], function $$41($a){var $post_args, value, comparable = nil;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat($to_a(comparable))))) {\n            $t_return.$throw(false)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], function $$42($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if ($truthy(Opal.yieldX(block, $to_a(value)))) {\n            $t_return.$throw(false)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else {\n        $send(self, 'each', [], function $$43($a){var $post_args, value, item = nil;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          item = $Opal.$destructure(value);\n          if ($truthy(item)) {\n            $t_return.$throw(false)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      };\n      return true;} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$one?', function $Enumerable_one$ques$44(pattern) {try { var $t_return = $thrower('return'); \n      var block = $Enumerable_one$ques$44.$$p || nil, self = this, count = nil;\n\n      $Enumerable_one$ques$44.$$p = null;\n      \n      ;\n      ;\n      count = 0;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], function $$45($a){var $post_args, value, comparable = nil;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat($to_a(comparable))))) {\n            \n            count = $rb_plus(count, 1);\n            if ($truthy($rb_gt(count, 1))) {\n              $t_return.$throw(false)\n            } else {\n              return nil\n            };\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], function $$46($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if (!$truthy(Opal.yieldX(block, $to_a(value)))) {\n            return nil\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            $t_return.$throw(false)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      } else {\n        $send(self, 'each', [], function $$47($a){var $post_args, value;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          if (!$truthy($Opal.$destructure(value))) {\n            return nil\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            $t_return.$throw(false)\n          } else {\n            return nil\n          };}, {$$arity: -1, $$ret: $t_return})\n      };\n      return count['$=='](1);} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    }, -1);\n    \n    $def(self, '$partition', function $$partition() {\n      var block = $$partition.$$p || nil, self = this;\n\n      $$partition.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"partition\"], function $$48(){var self = $$48.$$s == null ? this : $$48.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var truthy = [], falsy = [], result;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if ($truthy(value)) {\n          truthy.push(param);\n        }\n        else {\n          falsy.push(param);\n        }\n      };\n\n      self.$each();\n\n      return [truthy, falsy];\n    ;\n    });\n    \n    $def(self, '$reject', function $$reject() {\n      var block = $$reject.$$p || nil, self = this;\n\n      $$reject.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"reject\"], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = $yield1(block, param);\n\n        if (!$truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$reverse_each', function $$reverse_each() {\n      var block = $$reverse_each.$$p || nil, self = this;\n\n      $$reverse_each.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"reverse_each\"], function $$50(){var self = $$50.$$s == null ? this : $$50.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push(arguments);\n      };\n\n      self.$each();\n\n      for (var i = result.length - 1; i >= 0; i--) {\n        $yieldX(block, result[i]);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$slice_before', function $$slice_before(pattern) {\n      var block = $$slice_before.$$p || nil, self = this;\n\n      $$slice_before.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        $Kernel.$raise($$$('ArgumentError'), \"both pattern and block are given\")\n      };\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")\n      };\n      return $send($$$('Enumerator'), 'new', [], function $$51(e){var self = $$51.$$s == null ? this : $$51.$$s;\n\n        \n        if (e == null) e = nil;\n        \n        var slice = [];\n\n        if (block !== nil) {\n          if (pattern === undefined) {\n            self.$each.$$p = function() {\n              var param = $Opal.$destructure(arguments),\n                  value = $yield1(block, param);\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n          else {\n            self.$each.$$p = function() {\n              var param = $Opal.$destructure(arguments),\n                  value = block(param, pattern.$dup());\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n        }\n        else {\n          self.$each.$$p = function() {\n            var param = $Opal.$destructure(arguments),\n                value = pattern['$==='](param);\n\n            if ($truthy(value) && slice.length > 0) {\n              e['$<<'](slice);\n              slice = [];\n            }\n\n            slice.push(param);\n          };\n        }\n\n        self.$each();\n\n        if (slice.length > 0) {\n          e['$<<'](slice);\n        }\n      ;}, {$$s: self});\n    }, -1);\n    \n    $def(self, '$slice_after', function $$slice_after(pattern) {\n      var block = $$slice_after.$$p || nil, self = this;\n\n      $$slice_after.$$p = null;\n      \n      ;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        $Kernel.$raise($$$('ArgumentError'), \"both pattern and block are given\")\n      };\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")\n      };\n      if ($truthy(pattern !== undefined)) {\n        block = $send($Kernel, 'proc', [], function $$52(e){\n          \n          if (e == null) e = nil;\n          return pattern['$==='](e);})\n      };\n      return $send($$$('Enumerator'), 'new', [], function $$53(yielder){var self = $$53.$$s == null ? this : $$53.$$s;\n\n        \n        if (yielder == null) yielder = nil;\n        \n        var accumulate;\n\n        self.$each.$$p = function() {\n          var element = $Opal.$destructure(arguments),\n              end_chunk = $yield1(block, element);\n\n          if (accumulate == null) {\n            accumulate = [];\n          }\n\n          if ($truthy(end_chunk)) {\n            accumulate.push(element);\n            yielder.$yield(accumulate);\n            accumulate = null;\n          } else {\n            accumulate.push(element)\n          }\n        }\n\n        self.$each();\n\n        if (accumulate != null) {\n          yielder.$yield(accumulate);\n        }\n      ;}, {$$s: self});\n    }, -1);\n    \n    $def(self, '$slice_when', function $$slice_when() {\n      var block = $$slice_when.$$p || nil, self = this;\n\n      $$slice_when.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (0 for 1)\")\n      };\n      return $send($$$('Enumerator'), 'new', [], function $$54(yielder){var self = $$54.$$s == null ? this : $$54.$$s;\n\n        \n        if (yielder == null) yielder = nil;\n        \n        var slice = nil, last_after = nil;\n\n        self.$each_cons.$$p = function() {\n          var params = $Opal.$destructure(arguments),\n              before = params[0],\n              after = params[1],\n              match = $yieldX(block, [before, after]);\n\n          last_after = after;\n\n          if (slice === nil) {\n            slice = [];\n          }\n\n          if ($truthy(match)) {\n            slice.push(before);\n            yielder.$yield(slice);\n            slice = [];\n          } else {\n            slice.push(before);\n          }\n        }\n\n        self.$each_cons(2);\n\n        if (slice !== nil) {\n          slice.push(last_after);\n          yielder.$yield(slice);\n        }\n      ;}, {$$s: self});\n    });\n    \n    $def(self, '$sort', function $$sort() {\n      var block = $$sort.$$p || nil, self = this, ary = nil;\n\n      $$sort.$$p = null;\n      \n      ;\n      ary = self.$to_a();\n      if (!(block !== nil)) {\n        block = $lambda(function $$55(a, b){\n          \n          if (a == null) a = nil;\n          if (b == null) b = nil;\n          return a['$<=>'](b);})\n      };\n      return $send(ary, 'sort', [], block.$to_proc());\n    });\n    \n    $def(self, '$sort_by', function $$sort_by() {\n      var block = $$sort_by.$$p || nil, self = this, dup = nil;\n\n      $$sort_by.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"sort_by\"], function $$56(){var self = $$56.$$s == null ? this : $$56.$$s;\n\n          return self.$enumerator_size()}, {$$s: self})\n      };\n      dup = $send(self, 'map', [], function $$57(){var arg = nil;\n\n        \n        arg = $Opal.$destructure(arguments);\n        return [Opal.yield1(block, arg), arg];});\n      $send(dup, 'sort!', [], function $$58(a, b){\n        \n        if (a == null) a = nil;\n        if (b == null) b = nil;\n        return (a[0])['$<=>'](b[0]);});\n      return $send(dup, 'map!', [], function $$59(i){\n        \n        if (i == null) i = nil;\n        return i[1];;});\n    });\n    \n    $def(self, '$sum', function $$sum(initial) {\n      var $yield = $$sum.$$p || nil, self = this, result = nil, compensation = nil;\n\n      $$sum.$$p = null;\n      \n      if (initial == null) initial = 0;\n      result = initial;\n      compensation = 0;\n      $send(self, 'each', [], function $$60($a){var $post_args, args, item = nil, y = nil, t = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        item = (($yield !== nil) ? (Opal.yieldX($yield, $to_a(args))) : ($Opal.$destructure(args)));\n        if (($not([$$$($$$('Float'), 'INFINITY'), $$$($$$('Float'), 'INFINITY')['$-@']()]['$include?'](item)) && ($truthy(item['$respond_to?'](\"-\"))))) {\n          \n          y = $rb_minus(item, compensation);\n          t = $rb_plus(result, y);\n          compensation = $rb_minus($rb_minus(t, result), y);\n          return (result = t);\n        } else {\n          return (result = $rb_plus(result, item))\n        };}, -1);\n      return result;\n    }, -1);\n    \n    $def(self, '$take', function $$take(num) {\n      var self = this;\n\n      return self.$first(num)\n    });\n    \n    $def(self, '$take_while', function $$take_while() {try { var $t_return = $thrower('return'); \n      var block = $$take_while.$$p || nil, self = this, result = nil;\n\n      $$take_while.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return self.$enum_for(\"take_while\")\n      };\n      result = [];\n      return $send(self, 'each', [], function $$61($a){var $post_args, args, value = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        value = $Opal.$destructure(args);\n        if (!$truthy(Opal.yield1(block, value))) {\n          $t_return.$throw(result)\n        };\n        return result.push(value);;}, {$$arity: -1, $$ret: $t_return});} catch($e) {\n        if ($e === $t_return) return $e.$v;\n        throw $e;\n      }\n    });\n    \n    $def(self, '$uniq', function $$uniq() {\n      var block = $$uniq.$$p || nil, self = this, hash = nil;\n\n      $$uniq.$$p = null;\n      \n      ;\n      hash = $hash2([], {});\n      $send(self, 'each', [], function $$62($a){var $post_args, args, $b, value = nil, produced = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        value = $Opal.$destructure(args);\n        produced = ((block !== nil) ? (Opal.yield1(block, value)) : (value));\n        if ($truthy(hash['$key?'](produced))) {\n          return nil\n        } else {\n          return ($b = [produced, value], $send(hash, '[]=', $b), $b[$b.length - 1])\n        };}, -1);\n      return hash.$values();\n    });\n    \n    $def(self, '$tally', function $$tally(hash) {\n      var self = this, out = nil;\n\n      \n      ;\n      if (hash && hash !== nil) { $deny_frozen_access(hash); };\n      out = $send($send(self, 'group_by', [], \"itself\".$to_proc()), 'transform_values', [], \"count\".$to_proc());\n      if ($truthy(hash)) {\n        \n        $send(out, 'each', [], function $$63(k, v){var $a;\n\n          \n          if (k == null) k = nil;\n          if (v == null) v = nil;\n          return ($a = [k, $rb_plus(hash.$fetch(k, 0), v)], $send(hash, '[]=', $a), $a[$a.length - 1]);});\n        return hash;\n      } else {\n        return out\n      };\n    }, -1);\n    \n    $def(self, '$to_h', function $$to_h($a) {\n      var block = $$to_h.$$p || nil, $post_args, args, self = this;\n\n      $$to_h.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if ((block !== nil)) {\n        return $send($send(self, 'map', [], block.$to_proc()), 'to_h', $to_a(args))\n      };\n      \n      var hash = $hash2([], {});\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments);\n        var ary = $Opal['$coerce_to?'](param, $$$('Array'), \"to_ary\"), key, val;\n        if (!ary.$$is_array) {\n          $Kernel.$raise($$$('TypeError'), \"wrong element type \" + ((ary).$class()) + \" (expected array)\")\n        }\n        if (ary.length !== 2) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong array length (expected 2, was \" + ((ary).$length()) + \")\")\n        }\n        key = ary[0];\n        val = ary[1];\n\n        Opal.hash_put(hash, key, val);\n      };\n\n      self.$each.apply(self, args);\n\n      return hash;\n    ;\n    }, -1);\n    \n    $def(self, '$to_set', function $$to_set($a, $b) {\n      var block = $$to_set.$$p || nil, $post_args, klass, args, self = this;\n\n      $$to_set.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      \n      if ($post_args.length > 0) klass = $post_args.shift();if (klass == null) klass = $$('Set');\n      args = $post_args;\n      return $send(klass, 'new', [self].concat($to_a(args)), block.$to_proc());\n    }, -1);\n    \n    $def(self, '$zip', function $$zip($a) {\n      var block = $$zip.$$p || nil, $post_args, others, self = this;\n\n      $$zip.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      others = $post_args;\n      return $send(self.$to_a(), 'zip', $to_a(others));\n    }, -1);\n    $alias(self, \"find\", \"detect\");\n    $alias(self, \"filter\", \"find_all\");\n    $alias(self, \"flat_map\", \"collect_concat\");\n    $alias(self, \"map\", \"collect\");\n    $alias(self, \"member?\", \"include?\");\n    $alias(self, \"reduce\", \"inject\");\n    $alias(self, \"select\", \"find_all\");\n    return $alias(self, \"to_a\", \"entries\");\n  })('::', $nesting)\n};\n\nOpal.modules[\"corelib/enumerator/arithmetic_sequence\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $truthy = Opal.truthy, $to_a = Opal.to_a, $eqeq = Opal.eqeq, $Kernel = Opal.Kernel, $def = Opal.def, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $not = Opal.not, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('is_a?,==,raise,respond_to?,class,attr_reader,begin,end,exclude_end?,>,step,<,<=,>=,-@,_lesser_than_end?,<<,+,-,===,%,_greater_than_begin?,reverse,!,include?,*,to_i,abs,/,hash,inspect');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ArithmeticSequence');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.step_arg2 = $proto.receiver_num = $proto.step_arg1 = $proto.step = $proto.range = $proto.topfx = $proto.bypfx = $proto.creation_method = $proto.skipped_arg = nil;\n      \n      Opal.prop(self.$$prototype, '$$is_arithmetic_seq', true);\n      var inf = Infinity;\n      \n      $def(self, '$initialize', function $$initialize(range, step, creation_method) {\n        var $a, self = this, $ret_or_1 = nil;\n\n        \n        ;\n        if (creation_method == null) creation_method = \"step\";\n        self.creation_method = creation_method;\n        if ($truthy(range['$is_a?']($$$('Array')))) {\n          \n          $a = [].concat($to_a(range)), (self.step_arg1 = ($a[0] == null ? nil : $a[0])), (self.step_arg2 = ($a[1] == null ? nil : $a[1])), (self.topfx = ($a[2] == null ? nil : $a[2])), (self.bypfx = ($a[3] == null ? nil : $a[3])), $a;\n          self.receiver_num = step;\n          self.step = 1;\n          self.range = ($truthy(self.step_arg2) ? (((self.step = self.step_arg2), Opal.Range.$new(self.receiver_num, self.step_arg1, false))) : ($truthy(self.step_arg1) ? (Opal.Range.$new(self.receiver_num, self.step_arg1, false)) : (Opal.Range.$new(self.receiver_num, nil, false))));\n        } else {\n          \n          if (!$truthy(step)) {\n            self.skipped_arg = true\n          };\n          $a = [range, ($truthy(($ret_or_1 = step)) ? ($ret_or_1) : (1))], (self.range = $a[0]), (self.step = $a[1]), $a;\n        };\n        self.object = self;\n        if ($eqeq(self.step, 0)) {\n          $Kernel.$raise($$('ArgumentError'), \"step can't be 0\")\n        };\n        if ($truthy(self.step['$respond_to?'](\"to_int\"))) {\n          return nil\n        } else {\n          return $Kernel.$raise($$('ArgumentError'), \"\" + (\"no implicit conversion of \" + (self.step.$class()) + \" \") + \"into Integer\")\n        };\n      }, -2);\n      self.$attr_reader(\"step\");\n      \n      $def(self, '$begin', function $$begin() {\n        var self = this;\n\n        return self.range.$begin()\n      });\n      \n      $def(self, '$end', function $$end() {\n        var self = this;\n\n        return self.range.$end()\n      });\n      \n      $def(self, '$exclude_end?', function $ArithmeticSequence_exclude_end$ques$1() {\n        var self = this;\n\n        return self.range['$exclude_end?']()\n      });\n      \n      $def(self, '$_lesser_than_end?', function $ArithmeticSequence__lesser_than_end$ques$2(val) {\n        var self = this, end_ = nil, $ret_or_1 = nil;\n\n        \n        end_ = ($truthy(($ret_or_1 = self.$end())) ? ($ret_or_1) : (inf));\n        if ($truthy($rb_gt(self.$step(), 0))) {\n          if ($truthy(self['$exclude_end?']())) {\n            return $rb_lt(val, end_)\n          } else {\n            return $rb_le(val, end_)\n          }\n        } else if ($truthy(self['$exclude_end?']())) {\n          return $rb_gt(val, end_)\n        } else {\n          return $rb_ge(val, end_)\n        };\n      });\n      \n      $def(self, '$_greater_than_begin?', function $ArithmeticSequence__greater_than_begin$ques$3(val) {\n        var self = this, begin_ = nil, $ret_or_1 = nil;\n\n        \n        begin_ = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));\n        if ($truthy($rb_gt(self.$step(), 0))) {\n          return $rb_gt(val, begin_)\n        } else {\n          return $rb_lt(val, begin_)\n        };\n      });\n      \n      $def(self, '$first', function $$first(count) {\n        var self = this, iter = nil, $ret_or_1 = nil, out = nil;\n\n        \n        ;\n        iter = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));\n        if (!$truthy(count)) {\n          return ($truthy(self['$_lesser_than_end?'](iter)) ? (iter) : (nil))\n        };\n        out = [];\n        while ($truthy(($truthy(($ret_or_1 = self['$_lesser_than_end?'](iter))) ? ($rb_gt(count, 0)) : ($ret_or_1)))) {\n        \n          out['$<<'](iter);\n          iter = $rb_plus(iter, self.$step());\n          count = $rb_minus(count, 1);\n        };\n        return out;\n      }, -1);\n      \n      $def(self, '$each', function $$each() {\n        var block = $$each.$$p || nil, self = this, $ret_or_1 = nil, iter = nil;\n\n        $$each.$$p = null;\n        \n        ;\n        if (!(block !== nil)) {\n          return self\n        };\n        if ($eqeqeq(nil, ($ret_or_1 = self.$begin()))) {\n          $Kernel.$raise($$('TypeError'), \"nil can't be coerced into Integer\")\n        } else {\n          nil\n        };\n        iter = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));\n        while ($truthy(self['$_lesser_than_end?'](iter))) {\n        \n          Opal.yield1(block, iter);\n          iter = $rb_plus(iter, self.$step());\n        };\n        return self;\n      });\n      \n      $def(self, '$last', function $$last(count) {\n        var self = this, $ret_or_1 = nil, iter = nil, out = nil;\n\n        \n        ;\n        if (($eqeqeq(inf, ($ret_or_1 = self.$end())) || ($eqeqeq((inf)['$-@'](), $ret_or_1)))) {\n          $Kernel.$raise($$$('FloatDomainError'), self.$end())\n        } else if ($eqeqeq(nil, $ret_or_1)) {\n          $Kernel.$raise($$$('RangeError'), \"cannot get the last element of endless arithmetic sequence\")\n        } else {\n          nil\n        };\n        iter = $rb_minus(self.$end(), $rb_minus(self.$end(), self.$begin())['$%'](self.$step()));\n        if (!$truthy(self['$_lesser_than_end?'](iter))) {\n          iter = $rb_minus(iter, self.$step())\n        };\n        if (!$truthy(count)) {\n          return ($truthy(self['$_greater_than_begin?'](iter)) ? (iter) : (nil))\n        };\n        out = [];\n        while ($truthy(($truthy(($ret_or_1 = self['$_greater_than_begin?'](iter))) ? ($rb_gt(count, 0)) : ($ret_or_1)))) {\n        \n          out['$<<'](iter);\n          iter = $rb_minus(iter, self.$step());\n          count = $rb_minus(count, 1);\n        };\n        return out.$reverse();\n      }, -1);\n      \n      $def(self, '$size', function $$size() {\n        var self = this, step_sign = nil, iter = nil;\n\n        \n        step_sign = ($truthy($rb_gt(self.$step(), 0)) ? (1) : (-1));\n        if ($not(self['$_lesser_than_end?'](self.$begin()))) {\n          return 0\n        } else if ($truthy([(inf)['$-@'](), inf]['$include?'](self.$step()))) {\n          return 1\n        } else if (($truthy([$rb_times((inf)['$-@'](), step_sign), nil]['$include?'](self.$begin())) || ($truthy([$rb_times(inf, step_sign), nil]['$include?'](self.$end()))))) {\n          return inf;\n        } else {\n          \n          iter = $rb_minus(self.$end(), $rb_minus(self.$end(), self.$begin())['$%'](self.$step()));\n          if (!$truthy(self['$_lesser_than_end?'](iter))) {\n            iter = $rb_minus(iter, self.$step())\n          };\n          return $rb_plus($rb_divide($rb_minus(iter, self.$begin()), self.$step()).$abs().$to_i(), 1);\n        };\n      });\n      \n      $def(self, '$==', function $ArithmeticSequence_$eq_eq$4(other) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;\n\n        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = self.$class()['$=='](other.$class()))) ? (self.$begin()['$=='](other.$begin())) : ($ret_or_4)))) ? (self.$end()['$=='](other.$end())) : ($ret_or_3)))) ? (self.$step()['$=='](other.$step())) : ($ret_or_2))))) {\n          return self['$exclude_end?']()['$=='](other['$exclude_end?']())\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$hash', function $$hash() {\n        var self = this;\n\n        return [self.$begin(), self.$end(), self.$step(), self['$exclude_end?']()].$hash()\n      });\n      \n      $def(self, '$inspect', function $$inspect() {\n        var self = this, args = nil;\n\n        if ($truthy(self.receiver_num)) {\n          \n          args = ($truthy(self.step_arg2) ? (\"(\" + (self.topfx) + (self.step_arg1.$inspect()) + \", \" + (self.bypfx) + (self.step_arg2.$inspect()) + \")\") : ($truthy(self.step_arg1) ? (\"(\" + (self.topfx) + (self.step_arg1.$inspect()) + \")\") : nil));\n          return \"(\" + (self.receiver_num.$inspect()) + \".\" + (self.creation_method) + (args) + \")\";\n        } else {\n          \n          args = ($truthy(self.skipped_arg) ? (nil) : (\"(\" + (self.step) + \")\"));\n          return \"((\" + (self.range.$inspect()) + \").\" + (self.creation_method) + (args) + \")\";\n        }\n      });\n      $alias(self, \"===\", \"==\");\n      return $alias(self, \"eql?\", \"==\");\n    })(self, self, $nesting)\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/enumerator/chain\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $slice = Opal.slice, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $thrower = Opal.thrower, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('to_enum,size,each,<<,to_proc,include?,+,reverse_each,respond_to?,rewind,inspect');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    \n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Chain');\n\n      var $proto = self.$$prototype;\n\n      $proto.enums = $proto.iterated = nil;\n      \n      \n      $def(self, '$initialize', function $$initialize($a) {\n        var $post_args, enums, self = this;\n\n        \n        $post_args = $slice(arguments);\n        enums = $post_args;\n        $deny_frozen_access(self);\n        self.enums = enums;\n        self.iterated = [];\n        return (self.object = self);\n      }, -1);\n      \n      $def(self, '$each', function $$each($a) {\n        var block = $$each.$$p || nil, $post_args, args, self = this;\n\n        $$each.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        args = $post_args;\n        if (!(block !== nil)) {\n          return $send(self, 'to_enum', [\"each\"].concat($to_a(args)), function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;\n\n            return self.$size()}, {$$s: self})\n        };\n        $send(self.enums, 'each', [], function $$2(enum$){var self = $$2.$$s == null ? this : $$2.$$s;\n          if (self.iterated == null) self.iterated = nil;\n\n          \n          if (enum$ == null) enum$ = nil;\n          self.iterated['$<<'](enum$);\n          return $send(enum$, 'each', $to_a(args), block.$to_proc());}, {$$s: self});\n        return self;\n      }, -1);\n      \n      $def(self, '$size', function $$size($a) {try { var $t_return = $thrower('return'); \n        var $post_args, args, self = this, accum = nil;\n\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        accum = 0;\n        $send(self.enums, 'each', [], function $$3(enum$){var size = nil;\n\n          \n          if (enum$ == null) enum$ = nil;\n          size = $send(enum$, 'size', $to_a(args));\n          if ($truthy([nil, $$$($$$('Float'), 'INFINITY')]['$include?'](size))) {\n            $t_return.$throw(size)\n          };\n          return (accum = $rb_plus(accum, size));}, {$$ret: $t_return});\n        return accum;} catch($e) {\n          if ($e === $t_return) return $e.$v;\n          throw $e;\n        }\n      }, -1);\n      \n      $def(self, '$rewind', function $$rewind() {\n        var self = this;\n\n        \n        $send(self.iterated, 'reverse_each', [], function $$4(enum$){\n          \n          if (enum$ == null) enum$ = nil;\n          if ($truthy(enum$['$respond_to?'](\"rewind\"))) {\n            return enum$.$rewind()\n          } else {\n            return nil\n          };});\n        self.iterated = [];\n        return self;\n      });\n      return $def(self, '$inspect', function $$inspect() {\n        var self = this;\n\n        return \"#<Enumerator::Chain: \" + (self.enums.$inspect()) + \">\"\n      });\n    })(self, self)\n  })('::', null)\n};\n\nOpal.modules[\"corelib/enumerator/generator\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $slice = Opal.slice, $send = Opal.send, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,raise,new,to_proc');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Generator');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.block = nil;\n      \n      self.$include($$$('Enumerable'));\n      \n      $def(self, '$initialize', function $$initialize() {\n        var block = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        ;\n        $deny_frozen_access(self);\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('LocalJumpError'), \"no block given\")\n        };\n        return (self.block = block);\n      });\n      return $def(self, '$each', function $$each($a) {\n        var block = $$each.$$p || nil, $post_args, args, self = this, yielder = nil;\n\n        $$each.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        args = $post_args;\n        yielder = $send($$('Yielder'), 'new', [], block.$to_proc());\n        \n        try {\n          args.unshift(yielder);\n\n          Opal.yieldX(self.block, args);\n        }\n        catch (e) {\n          if (e && e.$thrower_type == \"breaker\") {\n            return e.$v;\n          }\n          else {\n            throw e;\n          }\n        }\n      ;\n        return self;\n      }, -1);\n    })($nesting[0], null, $nesting)\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"corelib/enumerator/lazy\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $yield1 = Opal.yield1, $yieldX = Opal.yieldX, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $defs = Opal.defs, $Kernel = Opal.Kernel, $send = Opal.send, $def = Opal.def, $return_self = Opal.return_self, $Opal = Opal.Opal, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('raise,each,new,enumerator_size,yield,respond_to?,try_convert,<,===,+,for,class,to_proc,destructure,inspect,to_a,find_all,collect_concat,collect,enum_for');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Lazy');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.enumerator = nil;\n      \n      $klass(self, $$$('Exception'), 'StopLazyError');\n      $defs(self, '$for', function $Lazy_for$1(object, $a) {\n        var $post_args, $fwd_rest, $yield = $Lazy_for$1.$$p || nil, self = this, lazy = nil;\n\n        $Lazy_for$1.$$p = null;\n        \n        $post_args = $slice(arguments, 1);\n        $fwd_rest = $post_args;\n        lazy = $send2(self, $find_super(self, 'for', $Lazy_for$1, false, true), 'for', [object].concat($to_a($fwd_rest)), $yield);\n        lazy.enumerator = object;\n        return lazy;\n      }, -2);\n      \n      $def(self, '$initialize', function $$initialize(object, size) {\n        var block = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        ;\n        if (size == null) size = nil;\n        $deny_frozen_access(self);\n        if (!(block !== nil)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy new without a block\")\n        };\n        self.enumerator = object;\n        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [size], function $$2(yielder, $a){var $post_args, each_args;\n\n          \n          if (yielder == null) yielder = nil;\n          $post_args = $slice(arguments, 1);\n          each_args = $post_args;\n          try {\n            return $send(object, 'each', $to_a(each_args), function $$3($b){var $post_args, args;\n\n              \n              $post_args = $slice(arguments);\n              args = $post_args;\n              \n            args.unshift(yielder);\n\n            $yieldX(block, args);\n          ;}, -1)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$('StopLazyError')])) {\n              try {\n                return nil\n              } finally { Opal.pop_exception(); }\n            } else { throw $err; }\n          };}, -2);\n      }, -2);\n      \n      $def(self, '$lazy', $return_self);\n      \n      $def(self, '$collect', function $$collect() {\n        var block = $$collect.$$p || nil, self = this;\n\n        $$collect.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$('Lazy'), 'new', [self, self.$enumerator_size()], function $$4(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          \n          var value = $yieldX(block, args);\n\n          enum$.$yield(value);\n        ;}, -2);\n      });\n      \n      $def(self, '$collect_concat', function $$collect_concat() {\n        var block = $$collect_concat.$$p || nil, self = this;\n\n        $$collect_concat.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$('Lazy'), 'new', [self, nil], function $$5(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          \n          var value = $yieldX(block, args);\n\n          if ((value)['$respond_to?'](\"force\") && (value)['$respond_to?'](\"each\")) {\n            $send((value), 'each', [], function $$6(v){\n            \n            if (v == null) v = nil;\n            return enum$.$yield(v);})\n          }\n          else {\n            var array = $Opal.$try_convert(value, $$$('Array'), \"to_ary\");\n\n            if (array === nil) {\n              enum$.$yield(value);\n            }\n            else {\n              $send((value), 'each', [], function $$7(v){\n            \n            if (v == null) v = nil;\n            return enum$.$yield(v);});\n            }\n          }\n        ;}, -2);\n      });\n      \n      $def(self, '$drop', function $$drop(n) {\n        var self = this, current_size = nil, set_size = nil, dropped = nil;\n\n        \n        n = $coerce_to(n, $$$('Integer'), 'to_int');\n        if ($truthy($rb_lt(n, 0))) {\n          $Kernel.$raise($$$('ArgumentError'), \"attempt to drop negative size\")\n        };\n        current_size = self.$enumerator_size();\n        set_size = ($eqeqeq($$$('Integer'), current_size) ? (($truthy($rb_lt(n, current_size)) ? (n) : (current_size))) : (current_size));\n        dropped = 0;\n        return $send($$('Lazy'), 'new', [self, set_size], function $$8(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          if ($truthy($rb_lt(dropped, n))) {\n            return (dropped = $rb_plus(dropped, 1))\n          } else {\n            return $send(enum$, 'yield', $to_a(args))\n          };}, -2);\n      });\n      \n      $def(self, '$drop_while', function $$drop_while() {\n        var block = $$drop_while.$$p || nil, self = this, succeeding = nil;\n\n        $$drop_while.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy drop_while without a block\")\n        };\n        succeeding = true;\n        return $send($$('Lazy'), 'new', [self, nil], function $$9(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          if ($truthy(succeeding)) {\n            \n            var value = $yieldX(block, args);\n\n            if (!$truthy(value)) {\n              succeeding = false;\n\n              $send(enum$, 'yield', $to_a(args));\n            }\n          \n          } else {\n            return $send(enum$, 'yield', $to_a(args))\n          };}, -2);\n      });\n      \n      $def(self, '$enum_for', function $$enum_for($a, $b) {\n        var block = $$enum_for.$$p || nil, $post_args, method, args, self = this;\n\n        $$enum_for.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        \n        if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = \"each\";\n        args = $post_args;\n        return $send(self.$class(), 'for', [self, method].concat($to_a(args)), block.$to_proc());\n      }, -1);\n      \n      $def(self, '$find_all', function $$find_all() {\n        var block = $$find_all.$$p || nil, self = this;\n\n        $$find_all.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy select without a block\")\n        };\n        return $send($$('Lazy'), 'new', [self, nil], function $$10(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          \n          var value = $yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', $to_a(args));\n          }\n        ;}, -2);\n      });\n      \n      $def(self, '$grep', function $$grep(pattern) {\n        var block = $$grep.$$p || nil, self = this;\n\n        $$grep.$$p = null;\n        \n        ;\n        if ($truthy(block)) {\n          return $send($$('Lazy'), 'new', [self, nil], function $$11(enum$, $a){var $post_args, args;\n\n            \n            if (enum$ == null) enum$ = nil;\n            $post_args = $slice(arguments, 1);\n            args = $post_args;\n            \n            var param = $Opal.$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              value = $yield1(block, param);\n\n              enum$.$yield($yield1(block, param));\n            }\n          ;}, -2)\n        } else {\n          return $send($$('Lazy'), 'new', [self, nil], function $$12(enum$, $a){var $post_args, args;\n\n            \n            if (enum$ == null) enum$ = nil;\n            $post_args = $slice(arguments, 1);\n            args = $post_args;\n            \n            var param = $Opal.$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              enum$.$yield(param);\n            }\n          ;}, -2)\n        };\n      });\n      \n      $def(self, '$reject', function $$reject() {\n        var block = $$reject.$$p || nil, self = this;\n\n        $$reject.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy reject without a block\")\n        };\n        return $send($$('Lazy'), 'new', [self, nil], function $$13(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          \n          var value = $yieldX(block, args);\n\n          if (!$truthy(value)) {\n            $send(enum$, 'yield', $to_a(args));\n          }\n        ;}, -2);\n      });\n      \n      $def(self, '$take', function $$take(n) {\n        var self = this, current_size = nil, set_size = nil, taken = nil;\n\n        \n        n = $coerce_to(n, $$$('Integer'), 'to_int');\n        if ($truthy($rb_lt(n, 0))) {\n          $Kernel.$raise($$$('ArgumentError'), \"attempt to take negative size\")\n        };\n        current_size = self.$enumerator_size();\n        set_size = ($eqeqeq($$$('Integer'), current_size) ? (($truthy($rb_lt(n, current_size)) ? (n) : (current_size))) : (current_size));\n        taken = 0;\n        return $send($$('Lazy'), 'new', [self, set_size], function $$14(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          if ($truthy($rb_lt(taken, n))) {\n            \n            $send(enum$, 'yield', $to_a(args));\n            return (taken = $rb_plus(taken, 1));\n          } else {\n            return $Kernel.$raise($$('StopLazyError'))\n          };}, -2);\n      });\n      \n      $def(self, '$take_while', function $$take_while() {\n        var block = $$take_while.$$p || nil, self = this;\n\n        $$take_while.$$p = null;\n        \n        ;\n        if (!$truthy(block)) {\n          $Kernel.$raise($$$('ArgumentError'), \"tried to call lazy take_while without a block\")\n        };\n        return $send($$('Lazy'), 'new', [self, nil], function $$15(enum$, $a){var $post_args, args;\n\n          \n          if (enum$ == null) enum$ = nil;\n          $post_args = $slice(arguments, 1);\n          args = $post_args;\n          \n          var value = $yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', $to_a(args));\n          }\n          else {\n            $Kernel.$raise($$('StopLazyError'));\n          }\n        ;}, -2);\n      });\n      \n      $def(self, '$inspect', function $$inspect() {\n        var self = this;\n\n        return \"#<\" + (self.$class()) + \": \" + (self.enumerator.$inspect()) + \">\"\n      });\n      $alias(self, \"force\", \"to_a\");\n      $alias(self, \"filter\", \"find_all\");\n      $alias(self, \"flat_map\", \"collect_concat\");\n      $alias(self, \"map\", \"collect\");\n      $alias(self, \"select\", \"find_all\");\n      return $alias(self, \"to_enum\", \"enum_for\");\n    })(self, self, $nesting)\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/enumerator/yielder\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $def = Opal.def, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('yield,proc');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Yielder');\n\n      var $proto = self.$$prototype;\n\n      $proto.block = nil;\n      \n      \n      $def(self, '$initialize', function $$initialize() {\n        var block = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        ;\n        self.block = block;\n        return self;\n      });\n      \n      $def(self, '$yield', function $Yielder_yield$1($a) {\n        var $post_args, values, self = this;\n\n        \n        $post_args = $slice(arguments);\n        values = $post_args;\n        \n        var value = Opal.yieldX(self.block, values);\n\n        if (value && value.$thrower_type == \"break\") {\n          throw value;\n        }\n\n        return value;\n      ;\n      }, -1);\n      \n      $def(self, '$<<', function $Yielder_$lt$lt$2(value) {\n        var self = this;\n\n        \n        self.$yield(value);\n        return self;\n      });\n      return $def(self, '$to_proc', function $$to_proc() {\n        var self = this;\n\n        return $send(self, 'proc', [], function $$3($a){var $post_args, values, self = $$3.$$s == null ? this : $$3.$$s;\n\n          \n          $post_args = $slice(arguments);\n          values = $post_args;\n          return $send(self, 'yield', $to_a(values));}, {$$arity: -1, $$s: self})\n      });\n    })($nesting[0], null)\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"corelib/enumerator\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $slice = Opal.slice, $coerce_to = Opal.coerce_to, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $not = Opal.not, $def = Opal.def, $rb_plus = Opal.rb_plus, $to_a = Opal.to_a, $Opal = Opal.Opal, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_ge = Opal.rb_ge, $Kernel = Opal.Kernel, $rb_le = Opal.rb_le, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,allocate,new,to_proc,!,respond_to?,empty?,nil?,+,class,__send__,call,enum_for,size,destructure,map,>=,length,raise,[],peek_values,<=,next_values,inspect,any?,each_with_object,autoload');\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.size = $proto.args = $proto.object = $proto.method = $proto.values = $proto.cursor = nil;\n    \n    self.$include($$$('Enumerable'));\n    self.$$prototype.$$is_enumerator = true;\n    $defs(self, '$for', function $Enumerator_for$1(object, $a, $b) {\n      var block = $Enumerator_for$1.$$p || nil, $post_args, method, args, self = this;\n\n      $Enumerator_for$1.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      \n      if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = \"each\";\n      args = $post_args;\n      \n      var obj = self.$allocate();\n\n      obj.object = object;\n      obj.size   = block;\n      obj.method = method;\n      obj.args   = args;\n      obj.cursor = 0;\n\n      return obj;\n    ;\n    }, -2);\n    \n    $def(self, '$initialize', function $$initialize($a) {\n      var block = $$initialize.$$p || nil, $post_args, $fwd_rest, self = this;\n\n      $$initialize.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      $deny_frozen_access(self);\n      self.cursor = 0;\n      if ($truthy(block)) {\n        \n        self.object = $send($$('Generator'), 'new', [], block.$to_proc());\n        self.method = \"each\";\n        self.args = [];\n        self.size = arguments[0] || nil;\n        if (($truthy(self.size) && ($not(self.size['$respond_to?'](\"call\"))))) {\n          return (self.size = $coerce_to(self.size, $$$('Integer'), 'to_int'))\n        } else {\n          return nil\n        };\n      } else {\n        \n        self.object = arguments[0];\n        self.method = arguments[1] || \"each\";\n        self.args = $slice(arguments, 2);\n        return (self.size = nil);\n      };\n    }, -1);\n    \n    $def(self, '$each', function $$each($a) {\n      var block = $$each.$$p || nil, $post_args, args, self = this;\n\n      $$each.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      if (($truthy(block['$nil?']()) && ($truthy(args['$empty?']())))) {\n        return self\n      };\n      args = $rb_plus(self.args, args);\n      if ($truthy(block['$nil?']())) {\n        return $send(self.$class(), 'new', [self.object, self.method].concat($to_a(args)))\n      };\n      return $send(self.object, '__send__', [self.method].concat($to_a(args)), block.$to_proc());\n    }, -1);\n    \n    $def(self, '$size', function $$size() {\n      var self = this;\n\n      if ($truthy(self.size['$respond_to?'](\"call\"))) {\n        return $send(self.size, 'call', $to_a(self.args))\n      } else {\n        return self.size\n      }\n    });\n    \n    $def(self, '$with_index', function $$with_index(offset) {\n      var block = $$with_index.$$p || nil, self = this;\n\n      $$with_index.$$p = null;\n      \n      ;\n      if (offset == null) offset = 0;\n      offset = ($truthy(offset) ? ($coerce_to(offset, $$$('Integer'), 'to_int')) : (0));\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"with_index\", offset], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result, index = offset;\n\n      self.$each.$$p = function() {\n        var param = $Opal.$destructure(arguments),\n            value = block(param, index);\n\n        index++;\n\n        return value;\n      }\n\n      return self.$each();\n    ;\n    }, -1);\n    \n    $def(self, '$each_with_index', function $$each_with_index() {\n      var block = $$each_with_index.$$p || nil, self = this;\n\n      $$each_with_index.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_with_index\"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $send2(self, $find_super(self, 'each_with_index', $$each_with_index, false, true), 'each_with_index', [], block);\n      return self.object;\n    });\n    \n    $def(self, '$rewind', function $$rewind() {\n      var self = this;\n\n      \n      self.cursor = 0;\n      return self;\n    });\n    \n    $def(self, '$peek_values', function $$peek_values() {\n      var self = this, $ret_or_1 = nil;\n\n      \n      self.values = ($truthy(($ret_or_1 = self.values)) ? ($ret_or_1) : ($send(self, 'map', [], function $$4($a){var $post_args, i;\n\n        \n        $post_args = $slice(arguments);\n        i = $post_args;\n        return i;}, -1)));\n      if ($truthy($rb_ge(self.cursor, self.values.$length()))) {\n        $Kernel.$raise($$$('StopIteration'), \"iteration reached an end\")\n      };\n      return self.values['$[]'](self.cursor);\n    });\n    \n    $def(self, '$peek', function $$peek() {\n      var self = this, values = nil;\n\n      \n      values = self.$peek_values();\n      if ($truthy($rb_le(values.$length(), 1))) {\n        return values['$[]'](0)\n      } else {\n        return values\n      };\n    });\n    \n    $def(self, '$next_values', function $$next_values() {\n      var self = this, out = nil;\n\n      \n      out = self.$peek_values();\n      self.cursor = $rb_plus(self.cursor, 1);\n      return out;\n    });\n    \n    $def(self, '$next', function $$next() {\n      var self = this, values = nil;\n\n      \n      values = self.$next_values();\n      if ($truthy($rb_le(values.$length(), 1))) {\n        return values['$[]'](0)\n      } else {\n        return values\n      };\n    });\n    \n    $def(self, '$feed', function $$feed(arg) {\n      var self = this;\n\n      return self.$raise($$('NotImplementedError'), \"Opal doesn't support Enumerator#feed\")\n    });\n    \n    $def(self, '$+', function $Enumerator_$plus$5(other) {\n      var self = this;\n\n      return $$$($$$('Enumerator'), 'Chain').$new(self, other)\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this, result = nil;\n\n      \n      result = \"#<\" + (self.$class()) + \": \" + (self.object.$inspect()) + \":\" + (self.method);\n      if ($truthy(self.args['$any?']())) {\n        result = $rb_plus(result, \"(\" + (self.args.$inspect()['$[]']($$$('Range').$new(1, -2))) + \")\")\n      };\n      return $rb_plus(result, \">\");\n    });\n    $alias(self, \"with_object\", \"each_with_object\");\n    self.$autoload(\"ArithmeticSequence\", \"corelib/enumerator/arithmetic_sequence\");\n    self.$autoload(\"Chain\", \"corelib/enumerator/chain\");\n    self.$autoload(\"Generator\", \"corelib/enumerator/generator\");\n    self.$autoload(\"Lazy\", \"corelib/enumerator/lazy\");\n    return self.$autoload(\"Yielder\", \"corelib/enumerator/yielder\");\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/numeric\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $to_ary = Opal.to_ary, $return_self = Opal.return_self, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $return_val = Opal.return_val, $Opal = Opal.Opal, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $not = Opal.not, $send = Opal.send, $rb_ge = Opal.rb_ge, $rb_le = Opal.rb_le, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $alias = Opal.alias, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,instance_of?,class,Float,respond_to?,coerce,__send__,raise,equal?,-,*,div,<,-@,ceil,to_f,denominator,to_r,==,floor,/,%,Complex,zero?,numerator,abs,arg,coerce_to!,round,<=>,compare,is_a?,!,new,enum_for,to_proc,negative?,>=,<=,+,to_i,truncate,>,angle,conj,imag,rect');\n  \n  self.$require(\"corelib/comparable\");\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Numeric');\n\n    \n    \n    self.$include($$$('Comparable'));\n    \n    $def(self, '$coerce', function $$coerce(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n        return [other, self]\n      };\n      return [$Kernel.$Float(other), $Kernel.$Float(self)];\n    });\n    \n    $def(self, '$__coerced__', function $$__coerced__(method, other) {\n      var $a, $b, self = this, a = nil, b = nil;\n\n      if ($truthy(other['$respond_to?'](\"coerce\"))) {\n        \n        $b = other.$coerce(self), $a = $to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;\n        return a.$__send__(method, b);\n      } else \n      switch (method) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \"%\":\n        case \"&\":\n        case \"|\":\n        case \"^\":\n        case \"**\":\n          return $Kernel.$raise($$$('TypeError'), \"\" + (other.$class()) + \" can't be coerced into Numeric\")\n        case \">\":\n        case \">=\":\n        case \"<\":\n        case \"<=\":\n        case \"<=>\":\n          return $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n        default:\n          return nil\n      }\n    });\n    \n    $def(self, '$<=>', function $Numeric_$lt_eq_gt$1(other) {\n      var self = this;\n\n      \n      if ($truthy(self['$equal?'](other))) {\n        return 0\n      };\n      return nil;\n    });\n    \n    $def(self, '$+@', $return_self);\n    \n    $def(self, '$-@', function $Numeric_$minus$$2() {\n      var self = this;\n\n      return $rb_minus(0, self)\n    });\n    \n    $def(self, '$%', function $Numeric_$percent$3(other) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(other, self.$div(other)))\n    });\n    \n    $def(self, '$abs', function $$abs() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return self['$-@']()\n      } else {\n        return self\n      }\n    });\n    \n    $def(self, '$abs2', function $$abs2() {\n      var self = this;\n\n      return $rb_times(self, self)\n    });\n    \n    $def(self, '$angle', function $$angle() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return $$$($$$('Math'), 'PI')\n      } else {\n        return 0\n      }\n    });\n    \n    $def(self, '$ceil', function $$ceil(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      return self.$to_f().$ceil(ndigits);\n    }, -1);\n    \n    $def(self, '$conj', $return_self);\n    \n    $def(self, '$denominator', function $$denominator() {\n      var self = this;\n\n      return self.$to_r().$denominator()\n    });\n    \n    $def(self, '$div', function $$div(other) {\n      var self = this;\n\n      \n      if ($eqeq(other, 0)) {\n        $Kernel.$raise($$$('ZeroDivisionError'), \"divided by o\")\n      };\n      return $rb_divide(self, other).$floor();\n    });\n    \n    $def(self, '$divmod', function $$divmod(other) {\n      var self = this;\n\n      return [self.$div(other), self['$%'](other)]\n    });\n    \n    $def(self, '$fdiv', function $$fdiv(other) {\n      var self = this;\n\n      return $rb_divide(self.$to_f(), other)\n    });\n    \n    $def(self, '$floor', function $$floor(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      return self.$to_f().$floor(ndigits);\n    }, -1);\n    \n    $def(self, '$i', function $$i() {\n      var self = this;\n\n      return $Kernel.$Complex(0, self)\n    });\n    \n    $def(self, '$imag', $return_val(0));\n    \n    $def(self, '$integer?', $return_val(false));\n    \n    $def(self, '$nonzero?', function $Numeric_nonzero$ques$4() {\n      var self = this;\n\n      if ($truthy(self['$zero?']())) {\n        return nil\n      } else {\n        return self\n      }\n    });\n    \n    $def(self, '$numerator', function $$numerator() {\n      var self = this;\n\n      return self.$to_r().$numerator()\n    });\n    \n    $def(self, '$polar', function $$polar() {\n      var self = this;\n\n      return [self.$abs(), self.$arg()]\n    });\n    \n    $def(self, '$quo', function $$quo(other) {\n      var self = this;\n\n      return $rb_divide($Opal['$coerce_to!'](self, $$$('Rational'), \"to_r\"), other)\n    });\n    \n    $def(self, '$real', $return_self);\n    \n    $def(self, '$real?', $return_val(true));\n    \n    $def(self, '$rect', function $$rect() {\n      var self = this;\n\n      return [self, 0]\n    });\n    \n    $def(self, '$round', function $$round(digits) {\n      var self = this;\n\n      \n      ;\n      return self.$to_f().$round(digits);\n    }, -1);\n    \n    $def(self, '$step', function $$step($a, $b, $c) {\n      var block = $$step.$$p || nil, $post_args, $kwargs, limit, step, to, by, self = this, counter = nil;\n\n      $$step.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      \n      if ($post_args.length > 0) limit = $post_args.shift();;\n      \n      if ($post_args.length > 0) step = $post_args.shift();;\n      \n      to = $kwargs.$$smap[\"to\"];;\n      \n      by = $kwargs.$$smap[\"by\"];;\n      \n      if (limit !== undefined && to !== undefined) {\n        $Kernel.$raise($$$('ArgumentError'), \"to is given twice\")\n      }\n\n      if (step !== undefined && by !== undefined) {\n        $Kernel.$raise($$$('ArgumentError'), \"step is given twice\")\n      }\n\n      if (to !== undefined) {\n        limit = to;\n      }\n\n      if (by !== undefined) {\n        step = by;\n      }\n\n      if (limit === undefined) {\n        limit = nil;\n      }\n\n      function validateParameters() {\n        if (step === nil) {\n          $Kernel.$raise($$$('TypeError'), \"step must be numeric\")\n        }\n\n        if (step != null && step['$=='](0)) {\n          $Kernel.$raise($$$('ArgumentError'), \"step can't be 0\")\n        }\n\n        if (step === nil || step == null) {\n          step = 1;\n        }\n\n        var sign = step['$<=>'](0);\n\n        if (sign === nil) {\n          $Kernel.$raise($$$('ArgumentError'), \"0 can't be coerced into \" + (step.$class()))\n        }\n\n        if (limit === nil || limit == null) {\n          limit = sign > 0 ? $$$($$$('Float'), 'INFINITY') : $$$($$$('Float'), 'INFINITY')['$-@']();\n        }\n\n        $Opal.$compare(self, limit)\n      }\n\n      function stepFloatSize() {\n        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else if (step === Infinity || step === -Infinity) {\n          return 1;\n        } else {\n          var abs = Math.abs, floor = Math.floor,\n              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$$('Float'), 'EPSILON');\n\n          if (err === Infinity || err === -Infinity) {\n            return 0;\n          } else {\n            if (err > 0.5) {\n              err = 0.5;\n            }\n\n            return floor((limit - self) / step + err) + 1\n          }\n        }\n      }\n\n      function stepSize() {\n        validateParameters();\n\n        if (step === 0) {\n          return Infinity;\n        }\n\n        if (step % 1 !== 0) {\n          return stepFloatSize();\n        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else {\n          var ceil = Math.ceil, abs = Math.abs,\n              lhs = abs(self - limit) + 1,\n              rhs = abs(step);\n\n          return ceil(lhs / rhs);\n        }\n      }\n\n    ;\n      if (!(block !== nil)) {\n        if ((($not(limit) || ($truthy(limit['$is_a?']($$$('Numeric'))))) && (($not(step) || ($truthy(step['$is_a?']($$$('Numeric')))))))) {\n          return $$$($$$('Enumerator'), 'ArithmeticSequence').$new([limit, step, ($truthy(to) ? (\"to: \") : nil), ($truthy(by) ? (\"by: \") : nil)], self)\n        } else {\n          return $send(self, 'enum_for', [\"step\", limit, step], (stepSize).$to_proc())\n        }\n      };\n      \n      validateParameters();\n\n      var isDesc = step['$negative?'](),\n          isInf = step['$=='](0) ||\n                  (limit === Infinity && !isDesc) ||\n                  (limit === -Infinity && isDesc);\n\n      if (self.$$is_number && step.$$is_number && limit.$$is_number) {\n        if (self % 1 === 0 && (isInf || limit % 1 === 0) && step % 1 === 0) {\n          var value = self;\n\n          if (isInf) {\n            for (;; value += step) {\n              block(value);\n            }\n          } else if (isDesc) {\n            for (; value >= limit; value += step) {\n              block(value);\n            }\n          } else {\n            for (; value <= limit; value += step) {\n              block(value);\n            }\n          }\n\n          return self;\n        } else {\n          var begin = self.$to_f().valueOf();\n          step = step.$to_f().valueOf();\n          limit = limit.$to_f().valueOf();\n\n          var n = stepFloatSize();\n\n          if (!isFinite(step)) {\n            if (n !== 0) block(begin);\n          } else if (step === 0) {\n            while (true) {\n              block(begin);\n            }\n          } else {\n            for (var i = 0; i < n; i++) {\n              var d = i * step + self;\n              if (step >= 0 ? limit < d : limit > d) {\n                d = limit;\n              }\n              block(d);\n            }\n          }\n\n          return self;\n        }\n      }\n    ;\n      counter = self;\n      while ($truthy(isDesc ? $rb_ge(counter, limit) : $rb_le(counter, limit))) {\n      \n        Opal.yield1(block, counter);\n        counter = $rb_plus(counter, step);\n      };\n    }, -1);\n    \n    $def(self, '$to_c', function $$to_c() {\n      var self = this;\n\n      return $Kernel.$Complex(self, 0)\n    });\n    \n    $def(self, '$to_int', function $$to_int() {\n      var self = this;\n\n      return self.$to_i()\n    });\n    \n    $def(self, '$truncate', function $$truncate(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      return self.$to_f().$truncate(ndigits);\n    }, -1);\n    \n    $def(self, '$zero?', function $Numeric_zero$ques$5() {\n      var self = this;\n\n      return self['$=='](0)\n    });\n    \n    $def(self, '$positive?', function $Numeric_positive$ques$6() {\n      var self = this;\n\n      return $rb_gt(self, 0)\n    });\n    \n    $def(self, '$negative?', function $Numeric_negative$ques$7() {\n      var self = this;\n\n      return $rb_lt(self, 0)\n    });\n    \n    $def(self, '$dup', $return_self);\n    \n    $def(self, '$clone', function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      freeze = $kwargs.$$smap[\"freeze\"];if (freeze == null) freeze = true;\n      return self;\n    }, -1);\n    \n    $def(self, '$finite?', $return_val(true));\n    \n    $def(self, '$infinite?', $return_val(nil));\n    $alias(self, \"arg\", \"angle\");\n    $alias(self, \"conjugate\", \"conj\");\n    $alias(self, \"imaginary\", \"imag\");\n    $alias(self, \"magnitude\", \"abs\");\n    $alias(self, \"modulo\", \"%\");\n    $alias(self, \"phase\", \"arg\");\n    return $alias(self, \"rectangular\", \"rect\");\n  })('::', null);\n};\n\nOpal.modules[\"corelib/array\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $falsy = Opal.falsy, $hash_ids = Opal.hash_ids, $yield1 = Opal.yield1, $hash_get = Opal.hash_get, $hash_put = Opal.hash_put, $hash_delete = Opal.hash_delete, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $Kernel = Opal.Kernel, $def = Opal.def, $Opal = Opal.Opal, $eqeqeq = Opal.eqeqeq, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $to_a = Opal.to_a, $to_ary = Opal.to_ary, $gvars = Opal.gvars, $rb_ge = Opal.rb_ge, $assign_ivar = Opal.assign_ivar, $rb_lt = Opal.rb_lt, $return_self = Opal.return_self, $neqeq = Opal.neqeq, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,to_a,warn,raise,replace,respond_to?,to_ary,coerce_to?,===,join,to_str,hash,<=>,==,object_id,inspect,enum_for,class,bsearch_index,to_proc,nil?,coerce_to!,>,*,enumerator_size,empty?,size,map,equal?,dup,each,reduce,-,[],dig,eql?,length,exclude_end?,flatten,frozen?,__id__,&,!,intersection,to_s,new,item,max,min,>=,**,delete_if,reverse,rotate,rand,at,keep_if,shuffle!,<,sort,sort_by,!=,times,[]=,<<,uniq,|,values,is_a?,end,begin,upto,reject,push,select,select!,collect,collect!,unshift,pristine,singleton_class');\n  \n  self.$require(\"corelib/enumerable\");\n  self.$require(\"corelib/numeric\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Array');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    self.$include($$$('Enumerable'));\n    Opal.prop(self.$$prototype, '$$is_array', true);\n    \n    // Recent versions of V8 (> 7.1) only use an optimized implementation when Array.prototype is unmodified.\n    // For instance, \"array-splice.tq\" has a \"fast path\" (ExtractFastJSArray, defined in \"src/codegen/code-stub-assembler.cc\")\n    // but it's only enabled when \"IsPrototypeInitialArrayPrototype()\" is true.\n    //\n    // Older versions of V8 were using relatively fast JS-with-extensions code even when Array.prototype is modified:\n    // https://github.com/v8/v8/blob/7.0.1/src/js/array.js#L599-L642\n    //\n    // In short, Array operations are slow in recent versions of V8 when the Array.prototype has been tampered.\n    // So, when possible, we are using faster open-coded version to boost the performance.\n\n    // As of V8 8.4, depending on the size of the array, this is up to ~25x times faster than Array#shift()\n    // Implementation is heavily inspired by: https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L341-L347\n    function shiftNoArg(list) {\n      var r = list[0];\n      var index = 1;\n      var length = list.length;\n      for (; index < length; index++) {\n        list[index - 1] = list[index];\n      }\n      list.pop();\n      return r;\n    }\n\n    function toArraySubclass(obj, klass) {\n      if (klass.$$name === Opal.Array) {\n        return obj;\n      } else {\n        return klass.$allocate().$replace((obj).$to_a());\n      }\n    }\n\n    // A helper for keep_if and delete_if, filter is either Opal.truthy\n    // or Opal.falsy.\n    function filterIf(self, filter, block) {\n      var value, raised = null, updated = new Array(self.length);\n\n      for (var i = 0, i2 = 0, length = self.length; i < length; i++) {\n        if (!raised) {\n          try {\n            value = $yield1(block, self[i])\n          } catch(error) {\n            raised = error;\n          }\n        }\n\n        if (raised || filter(value)) {\n          updated[i2] = self[i]\n          i2 += 1;\n        }\n      }\n\n      if (i2 !== i) {\n        self.splice.apply(self, [0, updated.length].concat(updated));\n        self.splice(i2, updated.length);\n      }\n\n      if (raised) throw raised;\n    }\n  ;\n    $defs(self, '$[]', function $Array_$$$1($a) {\n      var $post_args, objects, self = this;\n\n      \n      $post_args = $slice(arguments);\n      objects = $post_args;\n      return toArraySubclass(objects, self);;\n    }, -1);\n    \n    $def(self, '$initialize', function $$initialize(size, obj) {\n      var block = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      ;\n      if (size == null) size = nil;\n      if (obj == null) obj = nil;\n      \n      $deny_frozen_access(self);\n\n      if (obj !== nil && block !== nil) {\n        $Kernel.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (size > $$$($$$('Integer'), 'MAX')) {\n        $Kernel.$raise($$$('ArgumentError'), \"array size too big\")\n      }\n\n      if (arguments.length > 2) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" for 0..2)\")\n      }\n\n      if (arguments.length === 0) {\n        self.splice(0, self.length);\n        return self;\n      }\n\n      if (arguments.length === 1) {\n        if (size.$$is_array) {\n          self.$replace(size.$to_a())\n          return self;\n        } else if (size['$respond_to?'](\"to_ary\")) {\n          self.$replace(size.$to_ary())\n          return self;\n        }\n      }\n\n      size = $coerce_to(size, $$$('Integer'), 'to_int');\n\n      if (size < 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative array size\")\n      }\n\n      self.splice(0, self.length);\n      var i, value;\n\n      if (block === nil) {\n        for (i = 0; i < size; i++) {\n          self.push(obj);\n        }\n      }\n      else {\n        for (i = 0, value; i < size; i++) {\n          value = block(i);\n          self[i] = value;\n        }\n      }\n\n      return self;\n    ;\n    }, -1);\n    $defs(self, '$try_convert', function $$try_convert(obj) {\n      \n      return $Opal['$coerce_to?'](obj, $$$('Array'), \"to_ary\")\n    });\n    \n    $def(self, '$&', function $Array_$$2(other) {\n      var self = this;\n\n      \n      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if ($hash_delete(hash, item) !== undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$|', function $Array_$$3(other) {\n      var self = this;\n\n      \n      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n      \n      var hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        $hash_put(hash, self[i], true);\n      }\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      return hash.$keys();\n    ;\n    });\n    \n    $def(self, '$*', function $Array_$$4(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        return self.$join(other.$to_str())\n      };\n      other = $coerce_to(other, $$$('Integer'), 'to_int');\n      if ($truthy(other < 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative argument\")\n      };\n      \n      var result = [],\n          converted = self.$to_a();\n\n      for (var i = 0; i < other; i++) {\n        result = result.concat(converted);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$+', function $Array_$plus$5(other) {\n      var self = this;\n\n      \n      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n      return self.concat(other);;\n    });\n    \n    $def(self, '$-', function $Array_$minus$6(other) {\n      var self = this;\n\n      \n      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n      if ($truthy(self.length === 0)) {\n        return []\n      };\n      if ($truthy(other.length === 0)) {\n        return self.slice()\n      };\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if ($hash_get(hash, item) === undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$<<', function $Array_$lt$lt$7(object) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      self.push(object);\n      return self;\n    });\n    \n    $def(self, '$<=>', function $Array_$lt_eq_gt$8(other) {\n      var self = this;\n\n      \n      if ($eqeqeq($$$('Array'), other)) {\n        other = other.$to_a()\n      } else if ($truthy(other['$respond_to?'](\"to_ary\"))) {\n        other = other.$to_ary().$to_a()\n      } else {\n        return nil\n      };\n      \n      if (self.$hash() === other.$hash()) {\n        return 0;\n      }\n\n      var count = Math.min(self.length, other.length);\n\n      for (var i = 0; i < count; i++) {\n        var tmp = (self[i])['$<=>'](other[i]);\n\n        if (tmp !== 0) {\n          return tmp;\n        }\n      }\n\n      return (self.length)['$<=>'](other.length);\n    ;\n    });\n    \n    $def(self, '$==', function $Array_$eq_eq$9(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eqeq(array, other) {\n        var i, length, a, b;\n\n        if (array === other)\n          return true;\n\n        if (!other.$$is_array) {\n          if ($respond_to(other, '$to_ary')) {\n            return (other)['$=='](array);\n          } else {\n            return false;\n          }\n        }\n\n        if (array.$$constructor !== Array)\n          array = (array).$to_a();\n        if (other.$$constructor !== Array)\n          other = (other).$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    \n    });\n    \n    function $array_slice_range(self, index) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      exclude = index.excl;\n      from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int');\n      to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');\n\n      if (from < 0) {\n        from += size;\n\n        if (from < 0) {\n          return nil;\n        }\n      }\n\n      if (index.excl_rev && index.begin !== nil) {\n        from += 1;\n      }\n\n      if (from > size) {\n        return nil;\n      }\n\n      if (to < 0) {\n        to += size;\n\n        if (to < 0) {\n          return [];\n        }\n      }\n\n      if (!exclude || index.end === nil) {\n        to += 1;\n      }\n\n      result = self.slice(from, to);\n      return result;\n    }\n\n    function $array_slice_arithmetic_seq(self, index) {\n      var array, out = [], i = 0, pseudorange;\n\n      if (index.step < 0) {\n        pseudorange = {\n          begin: index.range.end,\n          end: index.range.begin,\n          excl: false,\n          excl_rev: index.range.excl\n        };\n        array = $array_slice_range(self, pseudorange).$reverse();\n      }\n      else {\n        array = $array_slice_range(self, index.range);\n      }\n\n      while (i < array.length) {\n        out.push(array[i]);\n        i += Math.abs(index.step);\n      }\n\n      return out;\n    }\n\n    function $array_slice_index_length(self, index, length) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      index = $coerce_to(index, Opal.Integer, 'to_int');\n\n      if (index < 0) {\n        index += size;\n\n        if (index < 0) {\n          return nil;\n        }\n      }\n\n      if (length === undefined) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n\n        return self[index];\n      }\n      else {\n        length = $coerce_to(length, Opal.Integer, 'to_int');\n\n        if (length < 0 || index > size || index < 0) {\n          return nil;\n        }\n\n        result = self.slice(index, index + length);\n      }\n      return result;\n    }\n  ;\n    \n    $def(self, '$[]', function $Array_$$$10(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      if (index.$$is_range) {\n        return $array_slice_range(self, index);\n      }\n      else if (index.$$is_arithmetic_seq) {\n        return $array_slice_arithmetic_seq(self, index);\n      }\n      else {\n        return $array_slice_index_length(self, index, length);\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$[]=', function $Array_$$$eq$11(index, value, extra) {\n      var self = this, data = nil, length = nil;\n\n      \n      ;\n      $deny_frozen_access(self);\n      data = nil;\n      \n      var i, size = self.length;\n\n      if (index.$$is_range) {\n        if (value.$$is_array)\n          data = value.$to_a();\n        else if (value['$respond_to?'](\"to_ary\"))\n          data = value.$to_ary().$to_a();\n        else\n          data = [value];\n\n        var exclude = index.excl,\n            from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int'),\n            to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');\n\n        if (from < 0) {\n          from += size;\n\n          if (from < 0) {\n            $Kernel.$raise($$$('RangeError'), \"\" + (index.$inspect()) + \" out of range\");\n          }\n        }\n\n        if (to < 0) {\n          to += size;\n        }\n\n        if (!exclude || index.end === nil) {\n          to += 1;\n        }\n\n        if (from > size) {\n          for (i = size; i < from; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (to < 0) {\n          self.splice.apply(self, [from, 0].concat(data));\n        }\n        else {\n          self.splice.apply(self, [from, to - from].concat(data));\n        }\n\n        return value;\n      } else {\n        if (extra === undefined) {\n          (length = 1)\n        } else {\n          length = value;\n          value  = extra;\n\n          if (value.$$is_array)\n            data = value.$to_a();\n          else if (value['$respond_to?'](\"to_ary\"))\n            data = value.$to_ary().$to_a();\n          else\n            data = [value];\n        }\n\n        var old;\n\n        index  = $coerce_to(index, $$$('Integer'), 'to_int');\n        length = $coerce_to(length, $$$('Integer'), 'to_int');\n\n        if (index < 0) {\n          old    = index;\n          index += size;\n\n          if (index < 0) {\n            $Kernel.$raise($$$('IndexError'), \"index \" + (old) + \" too small for array; minimum \" + (-self.length));\n          }\n        }\n\n        if (length < 0) {\n          $Kernel.$raise($$$('IndexError'), \"negative length (\" + (length) + \")\")\n        }\n\n        if (index > size) {\n          for (i = size; i < index; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (extra === undefined) {\n          self[index] = value;\n        }\n        else {\n          self.splice.apply(self, [index, length].concat(data));\n        }\n\n        return value;\n      }\n    ;\n    }, -3);\n    \n    $def(self, '$any?', function $Array_any$ques$12(pattern) {\n      var block = $Array_any$ques$12.$$p || nil, self = this;\n\n      $Array_any$ques$12.$$p = null;\n      \n      ;\n      ;\n      if (self.length === 0) return false;\n      return $send2(self, $find_super(self, 'any?', $Array_any$ques$12, false, true), 'any?', [pattern], block);\n    }, -1);\n    \n    $def(self, '$assoc', function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if (item = self[i], item.length && (item[0])['$=='](object)) {\n          return item;\n        }\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$at', function $$at(index) {\n      var self = this;\n\n      \n      index = $coerce_to(index, $$$('Integer'), 'to_int')\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      return self[index];\n    \n    });\n    \n    $def(self, '$bsearch_index', function $$bsearch_index() {\n      var block = $$bsearch_index.$$p || nil, self = this;\n\n      $$bsearch_index.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"bsearch_index\")\n      };\n      \n      var min = 0,\n          max = self.length,\n          mid,\n          val,\n          ret,\n          smaller = false,\n          satisfied = nil;\n\n      while (min < max) {\n        mid = min + Math.floor((max - min) / 2);\n        val = self[mid];\n        ret = $yield1(block, val);\n\n        if (ret === true) {\n          satisfied = mid;\n          smaller = true;\n        }\n        else if (ret === false || ret === nil) {\n          smaller = false;\n        }\n        else if (ret.$$is_number) {\n          if (ret === 0) { return mid; }\n          smaller = (ret < 0);\n        }\n        else {\n          $Kernel.$raise($$$('TypeError'), \"wrong argument type \" + ((ret).$class()) + \" (must be numeric, true, false or nil)\")\n        }\n\n        if (smaller) { max = mid; } else { min = mid + 1; }\n      }\n\n      return satisfied;\n    ;\n    });\n    \n    $def(self, '$bsearch', function $$bsearch() {\n      var block = $$bsearch.$$p || nil, self = this, index = nil;\n\n      $$bsearch.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"bsearch\")\n      };\n      index = $send(self, 'bsearch_index', [], block.$to_proc());\n      \n      if (index != null && index.$$is_number) {\n        return self[index];\n      } else {\n        return index;\n      }\n    ;\n    });\n    \n    $def(self, '$cycle', function $$cycle(n) {\n      var block = $$cycle.$$p || nil, self = this;\n\n      $$cycle.$$p = null;\n      \n      ;\n      if (n == null) n = nil;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"cycle\", n], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;\n\n          if ($truthy(n['$nil?']())) {\n            return $$$($$$('Float'), 'INFINITY')\n          } else {\n            \n            n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, {$$s: self})\n      };\n      if (($truthy(self['$empty?']()) || ($eqeq(n, 0)))) {\n        return nil\n      };\n      \n      var i, length, value;\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = $yield1(block, self[i]);\n          }\n        }\n      }\n      else {\n        n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n        if (n <= 0) {\n          return self;\n        }\n\n        while (n > 0) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = $yield1(block, self[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$clear', function $$clear() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      self.splice(0, self.length);\n      return self;\n    });\n    \n    $def(self, '$count', function $$count(object) {\n      var block = $$count.$$p || nil, self = this;\n\n      $$count.$$p = null;\n      \n      ;\n      ;\n      if (($truthy(object !== undefined) || ($truthy(block)))) {\n        return $send2(self, $find_super(self, 'count', $$count, false, true), 'count', [object], block)\n      } else {\n        return self.$size()\n      };\n    }, -1);\n    \n    $def(self, '$initialize_copy', function $$initialize_copy(other) {\n      var self = this;\n\n      return self.$replace(other)\n    });\n    \n    $def(self, '$collect', function $$collect() {\n      var block = $$collect.$$p || nil, self = this;\n\n      $$collect.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"collect\"], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n        result.push(value);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$collect!', function $Array_collect$excl$15() {\n      var block = $Array_collect$excl$15.$$p || nil, self = this;\n\n      $Array_collect$excl$15.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"collect!\"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n        self[i] = value;\n      }\n    ;\n      return self;\n    });\n    \n    function binomial_coefficient(n, k) {\n      if (n === k || k === 0) {\n        return 1;\n      }\n\n      if (k > 0 && n > k) {\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);\n      }\n\n      return 0;\n    }\n  ;\n    \n    $def(self, '$combination', function $$combination(n) {\n      var $yield = $$combination.$$p || nil, self = this, num = nil;\n\n      $$combination.$$p = null;\n      \n      num = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"combination\", num], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s;\n\n          return binomial_coefficient(self.length, num)}, {$$s: self})\n      };\n      \n      var i, length, stack, chosen, lev, done, next;\n\n      if (num === 0) {\n        Opal.yield1($yield, [])\n      } else if (num === 1) {\n        for (i = 0, length = self.length; i < length; i++) {\n          Opal.yield1($yield, [self[i]])\n        }\n      }\n      else if (num === self.length) {\n        Opal.yield1($yield, self.slice())\n      }\n      else if (num >= 0 && num < self.length) {\n        stack = [];\n        for (i = 0; i <= num + 1; i++) {\n          stack.push(0);\n        }\n\n        chosen = [];\n        lev = 0;\n        done = false;\n        stack[0] = -1;\n\n        while (!done) {\n          chosen[lev] = self[stack[lev+1]];\n          while (lev < num - 1) {\n            lev++;\n            next = stack[lev+1] = stack[lev] + 1;\n            chosen[lev] = self[next];\n          }\n          Opal.yield1($yield, chosen.slice())\n          lev++;\n          do {\n            done = (lev === 0);\n            stack[lev]++;\n            lev--;\n          } while ( stack[lev+1] + num === self.length + lev + 1 );\n        }\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$repeated_combination', function $$repeated_combination(n) {\n      var $yield = $$repeated_combination.$$p || nil, self = this, num = nil;\n\n      $$repeated_combination.$$p = null;\n      \n      num = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"repeated_combination\", num], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;\n\n          return binomial_coefficient(self.length + num - 1, num);}, {$$s: self})\n      };\n      \n      function iterate(max, from, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = from; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, i, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      if (num >= 0) {\n        iterate(num, 0, [], self);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$compact', function $$compact() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if ((item = self[i]) !== nil) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$compact!', function $Array_compact$excl$19() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      var original = self.length;\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        if (self[i] === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      return self.length === original ? nil : self;\n    \n    });\n    \n    $def(self, '$concat', function $$concat($a) {\n      var $post_args, others, self = this;\n\n      \n      $post_args = $slice(arguments);\n      others = $post_args;\n      $deny_frozen_access(self);\n      others = $send(others, 'map', [], function $$20(other){var self = $$20.$$s == null ? this : $$20.$$s;\n\n        \n        if (other == null) other = nil;\n        other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n        if ($truthy(other['$equal?'](self))) {\n          other = other.$dup()\n        };\n        return other;}, {$$s: self});\n      $send(others, 'each', [], function $$21(other){var self = $$21.$$s == null ? this : $$21.$$s;\n\n        \n        if (other == null) other = nil;\n        \n        for (var i = 0, length = other.length; i < length; i++) {\n          self.push(other[i]);\n        }\n      ;}, {$$s: self});\n      return self;\n    }, -1);\n    \n    $def(self, '$delete', function $Array_delete$22(object) {\n      var $yield = $Array_delete$22.$$p || nil, self = this;\n\n      $Array_delete$22.$$p = null;\n      \n      var original = self.length;\n\n      for (var i = 0, length = original; i < length; i++) {\n        if ((self[i])['$=='](object)) {\n          $deny_frozen_access(self);\n\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      if (self.length === original) {\n        if (($yield !== nil)) {\n          return Opal.yieldX($yield, []);\n        }\n        return nil;\n      }\n      return object;\n    \n    });\n    \n    $def(self, '$delete_at', function $$delete_at(index) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      index = $coerce_to(index, $$$('Integer'), 'to_int');\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      var result = self[index];\n\n      self.splice(index, 1);\n\n      return result;\n    \n    });\n    \n    $def(self, '$delete_if', function $$delete_if() {\n      var block = $$delete_if.$$p || nil, self = this;\n\n      $$delete_if.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"delete_if\"], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      filterIf(self, $falsy, block)\n    ;\n      return self;\n    });\n    \n    $def(self, '$difference', function $$difference($a) {\n      var $post_args, arrays, self = this;\n\n      \n      $post_args = $slice(arguments);\n      arrays = $post_args;\n      return $send(arrays, 'reduce', [self.$to_a().$dup()], function $$24(a, b){\n        \n        if (a == null) a = nil;\n        if (b == null) b = nil;\n        return $rb_minus(a, b);});\n    }, -1);\n    \n    $def(self, '$dig', function $$dig(idx, $a) {\n      var $post_args, idxs, self = this, item = nil;\n\n      \n      $post_args = $slice(arguments, 1);\n      idxs = $post_args;\n      item = self['$[]'](idx);\n      \n      if (item === nil || idxs.length === 0) {\n        return item;\n      }\n    ;\n      if (!$truthy(item['$respond_to?'](\"dig\"))) {\n        $Kernel.$raise($$$('TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', $to_a(idxs));\n    }, -2);\n    \n    $def(self, '$drop', function $$drop(number) {\n      var self = this;\n\n      \n      number = $coerce_to(number, $$$('Integer'), 'to_int');\n\n      if (number < 0) {\n        $Kernel.$raise($$$('ArgumentError'))\n      }\n\n      return self.slice(number);\n    \n    });\n    \n    $def(self, '$dup', function $$dup() {\n      var $yield = $$dup.$$p || nil, self = this;\n\n      $$dup.$$p = null;\n      \n      \n      if (self.$$class === Opal.Array &&\n          self.$$class.$allocate.$$pristine &&\n          self.$copy_instance_variables.$$pristine &&\n          self.$initialize_dup.$$pristine) {\n        return self.slice(0);\n      }\n    ;\n      return $send2(self, $find_super(self, 'dup', $$dup, false, true), 'dup', [], $yield);\n    });\n    \n    $def(self, '$each', function $$each() {\n      var block = $$each.$$p || nil, self = this;\n\n      $$each.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each\"], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$each_index', function $$each_index() {\n      var block = $$each_index.$$p || nil, self = this;\n\n      $$each_index.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_index\"], function $$26(){var self = $$26.$$s == null ? this : $$26.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, i);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$empty?', function $Array_empty$ques$27() {\n      var self = this;\n\n      return self.length === 0;\n    });\n    \n    $def(self, '$eql?', function $Array_eql$ques$28(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eql(array, other) {\n        var i, length, a, b;\n\n        if (!other.$$is_array) {\n          return false;\n        }\n\n        other = other.$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eql(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eql(self, other);\n    \n    });\n    \n    $def(self, '$fetch', function $$fetch(index, defaults) {\n      var block = $$fetch.$$p || nil, self = this;\n\n      $$fetch.$$p = null;\n      \n      ;\n      ;\n      \n      var original = index;\n\n      index = $coerce_to(index, $$$('Integer'), 'to_int');\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index >= 0 && index < self.length) {\n        return self[index];\n      }\n\n      if (block !== nil && defaults != null) {\n        self.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (block !== nil) {\n        return block(original);\n      }\n\n      if (defaults != null) {\n        return defaults;\n      }\n\n      if (self.length === 0) {\n        $Kernel.$raise($$$('IndexError'), \"index \" + (original) + \" outside of array bounds: 0...0\")\n      }\n      else {\n        $Kernel.$raise($$$('IndexError'), \"index \" + (original) + \" outside of array bounds: -\" + (self.length) + \"...\" + (self.length));\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$fill', function $$fill($a) {\n      var block = $$fill.$$p || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;\n\n      $$fill.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      $deny_frozen_access(self);\n\n      var i, length, value;\n    ;\n      if ($truthy(block)) {\n        \n        if ($truthy(args.length > 2)) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (args.$length()) + \" for 0..2)\")\n        };\n        $c = args, $b = $to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;\n      } else {\n        \n        if ($truthy(args.length == 0)) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        } else if ($truthy(args.length > 3)) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (args.$length()) + \" for 1..3)\")\n        };\n        $c = args, $b = $to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;\n      };\n      if ($eqeqeq($$$('Range'), one)) {\n        \n        if ($truthy(two)) {\n          $Kernel.$raise($$$('TypeError'), \"length invalid with range\")\n        };\n        left = one.begin === nil ? 0 : $coerce_to(one.begin, $$$('Integer'), 'to_int');\n        if ($truthy(left < 0)) {\n          left += this.length\n        };\n        if ($truthy(left < 0)) {\n          $Kernel.$raise($$$('RangeError'), \"\" + (one.$inspect()) + \" out of range\")\n        };\n        right = one.end === nil ? -1 : $coerce_to(one.end, $$$('Integer'), 'to_int');\n        if ($truthy(right < 0)) {\n          right += this.length\n        };\n        if (!$truthy(one['$exclude_end?']())) {\n          right += 1\n        };\n        if ($truthy(right <= left)) {\n          return self\n        };\n      } else if ($truthy(one)) {\n        \n        left = $coerce_to(one, $$$('Integer'), 'to_int');\n        if ($truthy(left < 0)) {\n          left += this.length\n        };\n        if ($truthy(left < 0)) {\n          left = 0\n        };\n        if ($truthy(two)) {\n          \n          right = $coerce_to(two, $$$('Integer'), 'to_int');\n          if ($truthy(right == 0)) {\n            return self\n          };\n          right += left;\n        } else {\n          right = this.length\n        };\n      } else {\n        \n        left = 0;\n        right = this.length;\n      };\n      if ($truthy(left > this.length)) {\n        \n        for (i = this.length; i < right; i++) {\n          self[i] = nil;\n        }\n      \n      };\n      if ($truthy(right > this.length)) {\n        this.length = right\n      };\n      if ($truthy(block)) {\n        \n        for (length = this.length; left < right; left++) {\n          value = block(left);\n          self[left] = value;\n        }\n      \n      } else {\n        \n        for (length = this.length; left < right; left++) {\n          self[left] = obj;\n        }\n      \n      };\n      return self;\n    }, -1);\n    \n    $def(self, '$first', function $$first(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[0];\n      }\n\n      count = $coerce_to(count, $$$('Integer'), 'to_int');\n\n      if (count < 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative array size\");\n      }\n\n      return self.slice(0, count);\n    ;\n    }, -1);\n    \n    $def(self, '$flatten', function $$flatten(level) {\n      var self = this;\n\n      \n      ;\n      \n      function _flatten(array, level) {\n        var result = [],\n            i, length,\n            item, ary;\n\n        array = (array).$to_a();\n\n        for (i = 0, length = array.length; i < length; i++) {\n          item = array[i];\n\n          if (!$respond_to(item, '$to_ary', true)) {\n            result.push(item);\n            continue;\n          }\n\n          ary = (item).$to_ary();\n\n          if (ary === nil) {\n            result.push(item);\n            continue;\n          }\n\n          if (!ary.$$is_array) {\n            $Kernel.$raise($$$('TypeError'));\n          }\n\n          if (ary === self) {\n            $Kernel.$raise($$$('ArgumentError'));\n          }\n\n          switch (level) {\n          case undefined:\n            result = result.concat(_flatten(ary));\n            break;\n          case 0:\n            result.push(ary);\n            break;\n          default:\n            result.push.apply(result, _flatten(ary, level - 1));\n          }\n        }\n        return result;\n      }\n\n      if (level !== undefined) {\n        level = $coerce_to(level, $$$('Integer'), 'to_int');\n      }\n\n      return _flatten(self, level);\n    ;\n    }, -1);\n    \n    $def(self, '$flatten!', function $Array_flatten$excl$29(level) {\n      var self = this;\n\n      \n      ;\n      \n      $deny_frozen_access(self);\n\n      var flattened = self.$flatten(level);\n\n      if (self.length == flattened.length) {\n        for (var i = 0, length = self.length; i < length; i++) {\n          if (self[i] !== flattened[i]) {\n            break;\n          }\n        }\n\n        if (i == length) {\n          return nil;\n        }\n      }\n\n      self.$replace(flattened);\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      return $freeze(self);;\n    });\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      \n      var top = ($hash_ids === undefined),\n          result = ['A'],\n          hash_id = self.$object_id(),\n          item, i, key;\n\n      try {\n        if (top) {\n          $hash_ids = Object.create(null);\n        }\n\n        // return early for recursive structures\n        if ($hash_ids[hash_id]) {\n          return 'self';\n        }\n\n        for (key in $hash_ids) {\n          item = $hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        $hash_ids[hash_id] = self;\n\n        for (i = 0; i < self.length; i++) {\n          item = self[i];\n          result.push(item.$hash());\n        }\n\n        return result.join(',');\n      } finally {\n        if (top) {\n          $hash_ids = undefined;\n        }\n      }\n    \n    });\n    \n    $def(self, '$include?', function $Array_include$ques$30(member) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        if ((self[i])['$=='](member)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    });\n    \n    $def(self, '$index', function $$index(object) {\n      var block = $$index.$$p || nil, self = this;\n\n      $$index.$$p = null;\n      \n      ;\n      ;\n      \n      var i, length, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = 0, length = self.length; i < length; i++) {\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else {\n        return self.$enum_for(\"index\");\n      }\n\n      return nil;\n    ;\n    }, -1);\n    \n    $def(self, '$insert', function $$insert(index, $a) {\n      var $post_args, objects, self = this;\n\n      \n      $post_args = $slice(arguments, 1);\n      objects = $post_args;\n      \n      $deny_frozen_access(self);\n\n      index = $coerce_to(index, $$$('Integer'), 'to_int');\n\n      if (objects.length > 0) {\n        if (index < 0) {\n          index += self.length + 1;\n\n          if (index < 0) {\n            $Kernel.$raise($$$('IndexError'), \"\" + (index) + \" is out of bounds\");\n          }\n        }\n        if (index > self.length) {\n          for (var i = self.length; i < index; i++) {\n            self.push(nil);\n          }\n        }\n\n        self.splice.apply(self, [index, 0].concat(objects));\n      }\n    ;\n      return self;\n    }, -2);\n    var inspect_stack = [];\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      \n      \n      var result = [],\n      id = self.$__id__(),\n      pushed = true;\n    ;\n      \n      return (function() { try {\n      \n      \n        if (inspect_stack.indexOf(id) !== -1) {\n          pushed = false;\n          return '[...]';\n        }\n        inspect_stack.push(id)\n\n        for (var i = 0, length = self.length; i < length; i++) {\n          var item = self['$[]'](i);\n\n          result.push($$('Opal').$inspect(item));\n        }\n\n        return '[' + result.join(', ') + ']';\n      ;\n      return nil;\n      } finally {\n        if (pushed) inspect_stack.pop()\n      }; })();;\n    });\n    \n    $def(self, '$intersection', function $$intersection($a) {\n      var $post_args, arrays, self = this;\n\n      \n      $post_args = $slice(arguments);\n      arrays = $post_args;\n      return $send(arrays, 'reduce', [self.$to_a().$dup()], function $$31(a, b){\n        \n        if (a == null) a = nil;\n        if (b == null) b = nil;\n        return a['$&'](b);});\n    }, -1);\n    \n    $def(self, '$intersect?', function $Array_intersect$ques$32(other) {\n      var self = this;\n\n      return self.$intersection(other)['$empty?']()['$!']()\n    });\n    \n    $def(self, '$join', function $$join(sep) {\n      var self = this;\n      if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n      \n      if (sep == null) sep = nil;\n      if ($truthy(self.length === 0)) {\n        return \"\"\n      };\n      if ($truthy(sep === nil)) {\n        sep = $gvars[\",\"]\n      };\n      \n      var result = [];\n      var i, length, item, tmp;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n\n        if ($respond_to(item, '$to_str')) {\n          tmp = (item).$to_str();\n\n          if (tmp !== nil) {\n            result.push((tmp).$to_s());\n\n            continue;\n          }\n        }\n\n        if ($respond_to(item, '$to_ary')) {\n          tmp = (item).$to_ary();\n\n          if (tmp === self) {\n            $Kernel.$raise($$$('ArgumentError'));\n          }\n\n          if (tmp !== nil) {\n            result.push((tmp).$join(sep));\n\n            continue;\n          }\n        }\n\n        if ($respond_to(item, '$to_s')) {\n          tmp = (item).$to_s();\n\n          if (tmp !== nil) {\n            result.push(tmp);\n\n            continue;\n          }\n        }\n\n        $Kernel.$raise($$$('NoMethodError').$new(\"\" + ($$('Opal').$inspect(self.$item())) + \" doesn't respond to #to_str, #to_ary or #to_s\", \"to_str\"));\n      }\n\n      if (sep === nil) {\n        return result.join('');\n      }\n      else {\n        return result.join($Opal['$coerce_to!'](sep, $$$('String'), \"to_str\").$to_s());\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$keep_if', function $$keep_if() {\n      var block = $$keep_if.$$p || nil, self = this;\n\n      $$keep_if.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"keep_if\"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      filterIf(self, $truthy, block)\n    ;\n      return self;\n    });\n    \n    $def(self, '$last', function $$last(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[self.length - 1];\n      }\n\n      count = $coerce_to(count, $$$('Integer'), 'to_int');\n\n      if (count < 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative array size\");\n      }\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      return self.slice(self.length - count, self.length);\n    ;\n    }, -1);\n    \n    $def(self, '$length', function $$length() {\n      var self = this;\n\n      return self.length;\n    });\n    \n    $def(self, '$max', function $$max(n) {\n      var block = $$max.$$p || nil, self = this;\n\n      $$max.$$p = null;\n      \n      ;\n      ;\n      return $send(self.$each(), 'max', [n], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$min', function $$min() {\n      var block = $$min.$$p || nil, self = this;\n\n      $$min.$$p = null;\n      \n      ;\n      return $send(self.$each(), 'min', [], block.$to_proc());\n    });\n    \n    // Returns the product of from, from-1, ..., from - how_many + 1.\n    function descending_factorial(from, how_many) {\n      var count = how_many >= 0 ? 1 : 0;\n      while (how_many) {\n        count *= from;\n        from--;\n        how_many--;\n      }\n      return count;\n    }\n  ;\n    \n    $def(self, '$permutation', function $$permutation(num) {\n      var block = $$permutation.$$p || nil, self = this, perm = nil, used = nil;\n\n      $$permutation.$$p = null;\n      \n      ;\n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"permutation\", num], function $$34(){var self = $$34.$$s == null ? this : $$34.$$s;\n\n          return descending_factorial(self.length, num === undefined ? self.length : num);}, {$$s: self})\n      };\n      \n      var permute, offensive, output;\n\n      if (num === undefined) {\n        num = self.length;\n      }\n      else {\n        num = $coerce_to(num, $$$('Integer'), 'to_int');\n      }\n\n      if (num < 0 || self.length < num) {\n        // no permutations, yield nothing\n      }\n      else if (num === 0) {\n        // exactly one permutation: the zero-length array\n        Opal.yield1(block, [])\n      }\n      else if (num === 1) {\n        // this is a special, easy case\n        for (var i = 0; i < self.length; i++) {\n          Opal.yield1(block, [self[i]])\n        }\n      }\n      else {\n        // this is the general case\n        (perm = $$('Array').$new(num));\n        (used = $$('Array').$new(self.length, false));\n\n        permute = function(num, perm, index, used, blk) {\n          self = this;\n          for(var i = 0; i < self.length; i++){\n            if(used['$[]'](i)['$!']()) {\n              perm[index] = i;\n              if(index < num - 1) {\n                used[i] = true;\n                permute.call(self, num, perm, index + 1, used, blk);\n                used[i] = false;\n              }\n              else {\n                output = [];\n                for (var j = 0; j < perm.length; j++) {\n                  output.push(self[perm[j]]);\n                }\n                $yield1(blk, output);\n              }\n            }\n          }\n        }\n\n        if ((block !== nil)) {\n          // offensive (both definitions) copy.\n          offensive = self.slice();\n          permute.call(offensive, num, perm, 0, used, block);\n        }\n        else {\n          permute.call(self, num, perm, 0, used, block);\n        }\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$repeated_permutation', function $$repeated_permutation(n) {\n      var $yield = $$repeated_permutation.$$p || nil, self = this, num = nil;\n\n      $$repeated_permutation.$$p = null;\n      \n      num = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"repeated_permutation\", num], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;\n\n          if ($truthy($rb_ge(num, 0))) {\n            return self.$size()['$**'](num)\n          } else {\n            return 0\n          }}, {$$s: self})\n      };\n      \n      function iterate(max, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = 0; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      iterate(num, [], self.slice());\n    ;\n      return self;\n    });\n    \n    $def(self, '$pop', function $$pop(count) {\n      var self = this;\n\n      \n      ;\n      $deny_frozen_access(self);\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil\n        };\n        return self.pop();\n      };\n      count = $coerce_to(count, $$$('Integer'), 'to_int');\n      if ($truthy(count < 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative array size\")\n      };\n      if ($truthy(self.length === 0)) {\n        return []\n      };\n      if ($truthy(count === 1)) {\n        return [self.pop()];\n      } else if ($truthy(count > self.length)) {\n        return self.splice(0, self.length);\n      } else {\n        return self.splice(self.length - count, self.length);\n      };\n    }, -1);\n    \n    $def(self, '$product', function $$product($a) {\n      var block = $$product.$$p || nil, $post_args, args, self = this;\n\n      $$product.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var result = (block !== nil) ? null : [],\n          n = args.length + 1,\n          counters = new Array(n),\n          lengths  = new Array(n),\n          arrays   = new Array(n),\n          i, m, subarray, len, resultlen = 1;\n\n      arrays[0] = self;\n      for (i = 1; i < n; i++) {\n        arrays[i] = $coerce_to(args[i - 1], $$$('Array'), 'to_ary');\n      }\n\n      for (i = 0; i < n; i++) {\n        len = arrays[i].length;\n        if (len === 0) {\n          return result || self;\n        }\n        resultlen *= len;\n        if (resultlen > 2147483647) {\n          $Kernel.$raise($$$('RangeError'), \"too big to product\")\n        }\n        lengths[i] = len;\n        counters[i] = 0;\n      }\n\n      outer_loop: for (;;) {\n        subarray = [];\n        for (i = 0; i < n; i++) {\n          subarray.push(arrays[i][counters[i]]);\n        }\n        if (result) {\n          result.push(subarray);\n        } else {\n          Opal.yield1(block, subarray)\n        }\n        m = n - 1;\n        counters[m]++;\n        while (counters[m] === lengths[m]) {\n          counters[m] = 0;\n          if (--m < 0) break outer_loop;\n          counters[m]++;\n        }\n      }\n\n      return result || self;\n    ;\n    }, -1);\n    \n    $def(self, '$push', function $$push($a) {\n      var $post_args, objects, self = this;\n\n      \n      $post_args = $slice(arguments);\n      objects = $post_args;\n      \n      $deny_frozen_access(self);\n\n      for (var i = 0, length = objects.length; i < length; i++) {\n        self.push(objects[i]);\n      }\n    ;\n      return self;\n    }, -1);\n    \n    $def(self, '$rassoc', function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        item = self[i];\n\n        if (item.length && item[1] !== undefined) {\n          if ((item[1])['$=='](object)) {\n            return item;\n          }\n        }\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$reject', function $$reject() {\n      var block = $$reject.$$p || nil, self = this;\n\n      $$reject.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"reject\"], function $$36(){var self = $$36.$$s == null ? this : $$36.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          result.push(self[i]);\n        }\n      }\n      return result;\n    ;\n    });\n    \n    $def(self, '$reject!', function $Array_reject$excl$37() {\n      var block = $Array_reject$excl$37.$$p || nil, self = this, original = nil;\n\n      $Array_reject$excl$37.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"reject!\"], function $$38(){var self = $$38.$$s == null ? this : $$38.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $deny_frozen_access(self);\n      original = self.$length();\n      $send(self, 'delete_if', [], block.$to_proc());\n      if ($eqeq(self.$length(), original)) {\n        return nil\n      } else {\n        return self\n      };\n    });\n    \n    $def(self, '$replace', function $$replace(other) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));\n      \n      self.splice(0, self.length);\n      self.push.apply(self, other);\n    ;\n      return self;\n    });\n    \n    $def(self, '$reverse', function $$reverse() {\n      var self = this;\n\n      return self.slice(0).reverse();\n    });\n    \n    $def(self, '$reverse!', function $Array_reverse$excl$39() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      return self.reverse();;\n    });\n    \n    $def(self, '$reverse_each', function $$reverse_each() {\n      var block = $$reverse_each.$$p || nil, self = this;\n\n      $$reverse_each.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"reverse_each\"], function $$40(){var self = $$40.$$s == null ? this : $$40.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $send(self.$reverse(), 'each', [], block.$to_proc());\n      return self;\n    });\n    \n    $def(self, '$rindex', function $$rindex(object) {\n      var block = $$rindex.$$p || nil, self = this;\n\n      $$rindex.$$p = null;\n      \n      ;\n      ;\n      \n      var i, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else if (object == null) {\n        return self.$enum_for(\"rindex\");\n      }\n\n      return nil;\n    ;\n    }, -1);\n    \n    $def(self, '$rotate', function $$rotate(n) {\n      var self = this;\n\n      \n      if (n == null) n = 1;\n      \n      var ary, idx, firstPart, lastPart;\n\n      n = $coerce_to(n, $$$('Integer'), 'to_int')\n\n      if (self.length === 1) {\n        return self.slice();\n      }\n      if (self.length === 0) {\n        return [];\n      }\n\n      ary = self.slice();\n      idx = n % ary.length;\n\n      firstPart = ary.slice(idx);\n      lastPart = ary.slice(0, idx);\n      return firstPart.concat(lastPart);\n    ;\n    }, -1);\n    \n    $def(self, '$rotate!', function $Array_rotate$excl$41(cnt) {\n      var self = this, ary = nil;\n\n      \n      if (cnt == null) cnt = 1;\n      \n      $deny_frozen_access(self);\n\n      if (self.length === 0 || self.length === 1) {\n        return self;\n      }\n      cnt = $coerce_to(cnt, $$$('Integer'), 'to_int');\n    ;\n      ary = self.$rotate(cnt);\n      return self.$replace(ary);\n    }, -1);\n    (function($base, $super) {\n      var self = $klass($base, $super, 'SampleRandom');\n\n      var $proto = self.$$prototype;\n\n      $proto.rng = nil;\n      \n      \n      $def(self, '$initialize', $assign_ivar(\"rng\"));\n      return $def(self, '$rand', function $$rand(size) {\n        var self = this, random = nil;\n\n        \n        random = $coerce_to(self.rng.$rand(size), $$$('Integer'), 'to_int');\n        if ($truthy(random < 0)) {\n          $Kernel.$raise($$$('RangeError'), \"random value must be >= 0\")\n        };\n        if (!$truthy(random < size)) {\n          $Kernel.$raise($$$('RangeError'), \"random value must be less than Array size\")\n        };\n        return random;\n      });\n    })(self, null);\n    \n    $def(self, '$sample', function $$sample(count, options) {\n      var self = this, o = nil, rng = nil;\n\n      \n      ;\n      ;\n      if ($truthy(count === undefined)) {\n        return self.$at($Kernel.$rand(self.length))\n      };\n      if ($truthy(options === undefined)) {\n        if ($truthy((o = $Opal['$coerce_to?'](count, $$$('Hash'), \"to_hash\")))) {\n          \n          options = o;\n          count = nil;\n        } else {\n          \n          options = nil;\n          count = $coerce_to(count, $$$('Integer'), 'to_int');\n        }\n      } else {\n        \n        count = $coerce_to(count, $$$('Integer'), 'to_int');\n        options = $coerce_to(options, $$$('Hash'), 'to_hash');\n      };\n      if (($truthy(count) && ($truthy(count < 0)))) {\n        $Kernel.$raise($$$('ArgumentError'), \"count must be greater than 0\")\n      };\n      if ($truthy(options)) {\n        rng = options['$[]'](\"random\")\n      };\n      rng = (($truthy(rng) && ($truthy(rng['$respond_to?'](\"rand\")))) ? ($$('SampleRandom').$new(rng)) : ($Kernel));\n      if (!$truthy(count)) {\n        return self[rng.$rand(self.length)]\n      };\n      \n\n      var abandon, spin, result, i, j, k, targetIndex, oldValue;\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      switch (count) {\n        case 0:\n          return [];\n          break;\n        case 1:\n          return [self[rng.$rand(self.length)]];\n          break;\n        case 2:\n          i = rng.$rand(self.length);\n          j = rng.$rand(self.length - 1);\n          if (i <= j) {\n            j++;\n          }\n          return [self[i], self[j]];\n          break;\n        default:\n          if (self.length / count > 3) {\n            abandon = false;\n            spin = 0;\n\n            result = $$('Array').$new(count);\n            i = 1;\n\n            result[0] = rng.$rand(self.length);\n            while (i < count) {\n              k = rng.$rand(self.length);\n              j = 0;\n\n              while (j < i) {\n                while (k === result[j]) {\n                  spin++;\n                  if (spin > 100) {\n                    abandon = true;\n                    break;\n                  }\n                  k = rng.$rand(self.length);\n                }\n                if (abandon) { break; }\n\n                j++;\n              }\n\n              if (abandon) { break; }\n\n              result[i] = k;\n\n              i++;\n            }\n\n            if (!abandon) {\n              i = 0;\n              while (i < count) {\n                result[i] = self[result[i]];\n                i++;\n              }\n\n              return result;\n            }\n          }\n\n          result = self.slice();\n\n          for (var c = 0; c < count; c++) {\n            targetIndex = rng.$rand(self.length - c) + c;\n            oldValue = result[c];\n            result[c] = result[targetIndex];\n            result[targetIndex] = oldValue;\n          }\n\n          return count === self.length ? result : (result)['$[]'](0, count);\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$select', function $$select() {\n      var block = $$select.$$p || nil, self = this;\n\n      $$select.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"select\"], function $$42(){var self = $$42.$$s == null ? this : $$42.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = $yield1(block, item);\n\n        if ($truthy(value)) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$select!', function $Array_select$excl$43() {\n      var block = $Array_select$excl$43.$$p || nil, self = this;\n\n      $Array_select$excl$43.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"select!\"], function $$44(){var self = $$44.$$s == null ? this : $$44.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self)\n\n      var original = self.length;\n      $send(self, 'keep_if', [], block.$to_proc());\n      return self.length === original ? nil : self;\n    ;\n    });\n    \n    $def(self, '$shift', function $$shift(count) {\n      var self = this;\n\n      \n      ;\n      $deny_frozen_access(self);\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil\n        };\n        return shiftNoArg(self);\n      };\n      count = $coerce_to(count, $$$('Integer'), 'to_int');\n      if ($truthy(count < 0)) {\n        $Kernel.$raise($$$('ArgumentError'), \"negative array size\")\n      };\n      if ($truthy(self.length === 0)) {\n        return []\n      };\n      return self.splice(0, count);;\n    }, -1);\n    \n    $def(self, '$shuffle', function $$shuffle(rng) {\n      var self = this;\n\n      \n      ;\n      return self.$dup().$to_a()['$shuffle!'](rng);\n    }, -1);\n    \n    $def(self, '$shuffle!', function $Array_shuffle$excl$45(rng) {\n      var self = this;\n\n      \n      ;\n      \n      $deny_frozen_access(self);\n\n      var randgen, i = self.length, j, tmp;\n\n      if (rng !== undefined) {\n        rng = $Opal['$coerce_to?'](rng, $$$('Hash'), \"to_hash\");\n\n        if (rng !== nil) {\n          rng = rng['$[]'](\"random\");\n\n          if (rng !== nil && rng['$respond_to?'](\"rand\")) {\n            randgen = rng;\n          }\n        }\n      }\n\n      while (i) {\n        if (randgen) {\n          j = randgen.$rand(i).$to_int();\n\n          if (j < 0) {\n            $Kernel.$raise($$$('RangeError'), \"random number too small \" + (j))\n          }\n\n          if (j >= i) {\n            $Kernel.$raise($$$('RangeError'), \"random number too big \" + (j))\n          }\n        }\n        else {\n          j = self.$rand(i);\n        }\n\n        tmp = self[--i];\n        self[i] = self[j];\n        self[j] = tmp;\n      }\n\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$slice!', function $Array_slice$excl$46(index, length) {\n      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;\n\n      \n      ;\n      $deny_frozen_access(self);\n      result = nil;\n      if ($truthy(length === undefined)) {\n        if ($eqeqeq($$$('Range'), index)) {\n          \n          range = index;\n          result = self['$[]'](range);\n          range_start = range.begin === nil ? 0 : $coerce_to(range.begin, $$$('Integer'), 'to_int');\n          range_end = range.end === nil ? -1 : $coerce_to(range.end, $$$('Integer'), 'to_int');\n          \n          if (range_start < 0) {\n            range_start += self.length;\n          }\n\n          if (range_end < 0) {\n            range_end += self.length;\n          } else if (range_end >= self.length) {\n            range_end = self.length - 1;\n            if (range.excl) {\n              range_end += 1;\n            }\n          }\n\n          var range_length = range_end - range_start;\n          if (range.excl && range.end !== nil) {\n            range_end -= 1;\n          } else {\n            range_length += 1;\n          }\n\n          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {\n            self.splice(range_start, range_length);\n          }\n        ;\n        } else {\n          \n          start = $coerce_to(index, $$$('Integer'), 'to_int');\n          \n          if (start < 0) {\n            start += self.length;\n          }\n\n          if (start < 0 || start >= self.length) {\n            return nil;\n          }\n\n          result = self[start];\n\n          if (start === 0) {\n            self.shift();\n          } else {\n            self.splice(start, 1);\n          }\n        ;\n        }\n      } else {\n        \n        start = $coerce_to(index, $$$('Integer'), 'to_int');\n        length = $coerce_to(length, $$$('Integer'), 'to_int');\n        \n        if (length < 0) {\n          return nil;\n        }\n\n        var end = start + length;\n\n        result = self['$[]'](start, length);\n\n        if (start < 0) {\n          start += self.length;\n        }\n\n        if (start + length > self.length) {\n          length = self.length - start;\n        }\n\n        if (start < self.length && start >= 0) {\n          self.splice(start, length);\n        }\n      ;\n      };\n      return result;\n    }, -2);\n    \n    $def(self, '$sort', function $$sort() {\n      var block = $$sort.$$p || nil, self = this;\n\n      $$sort.$$p = null;\n      \n      ;\n      if (!$truthy(self.length > 1)) {\n        return self\n      };\n      \n      if (block === nil) {\n        block = function(a, b) {\n          return (a)['$<=>'](b);\n        };\n      }\n\n      return self.slice().sort(function(x, y) {\n        var ret = block(x, y);\n\n        if (ret === nil) {\n          $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + ((x).$inspect()) + \" with \" + ((y).$inspect()) + \" failed\");\n        }\n\n        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);\n      });\n    ;\n    });\n    \n    $def(self, '$sort!', function $Array_sort$excl$47() {\n      var block = $Array_sort$excl$47.$$p || nil, self = this;\n\n      $Array_sort$excl$47.$$p = null;\n      \n      ;\n      \n      $deny_frozen_access(self)\n\n      var result;\n\n      if ((block !== nil)) {\n        result = $send((self.slice()), 'sort', [], block.$to_proc());\n      }\n      else {\n        result = (self.slice()).$sort();\n      }\n\n      self.length = 0;\n      for(var i = 0, length = result.length; i < length; i++) {\n        self.push(result[i]);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$sort_by!', function $Array_sort_by$excl$48() {\n      var block = $Array_sort_by$excl$48.$$p || nil, self = this;\n\n      $Array_sort_by$excl$48.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"sort_by!\"], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $deny_frozen_access(self);\n      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));\n    });\n    \n    $def(self, '$take', function $$take(count) {\n      var self = this;\n\n      \n      if (count < 0) {\n        $Kernel.$raise($$$('ArgumentError'));\n      }\n\n      return self.slice(0, count);\n    \n    });\n    \n    $def(self, '$take_while', function $$take_while() {\n      var block = $$take_while.$$p || nil, self = this;\n\n      $$take_while.$$p = null;\n      \n      ;\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = block(item);\n\n        if (value === false || value === nil) {\n          return result;\n        }\n\n        result.push(item);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      var self = this;\n\n      \n      if (self.$$class === Opal.Array) {\n        return self;\n      }\n      else {\n        return Opal.Array.$new(self);\n      }\n    \n    });\n    \n    $def(self, '$to_ary', $return_self);\n    \n    $def(self, '$to_h', function $$to_h() {\n      var block = $$to_h.$$p || nil, self = this, array = nil;\n\n      $$to_h.$$p = null;\n      \n      ;\n      array = self;\n      if ((block !== nil)) {\n        array = $send(array, 'map', [], block.$to_proc())\n      };\n      \n      var i, len = array.length, ary, key, val, hash = $hash2([], {});\n\n      for (i = 0; i < len; i++) {\n        ary = $Opal['$coerce_to?'](array[i], $$$('Array'), \"to_ary\");\n        if (!ary.$$is_array) {\n          $Kernel.$raise($$$('TypeError'), \"wrong element type \" + ((ary).$class()) + \" at \" + (i) + \" (expected array)\")\n        }\n        if (ary.length !== 2) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong array length at \" + (i) + \" (expected 2, was \" + ((ary).$length()) + \")\")\n        }\n        key = ary[0];\n        val = ary[1];\n        $hash_put(hash, key, val);\n      }\n\n      return hash;\n    ;\n    });\n    \n    $def(self, '$transpose', function $$transpose() {\n      var self = this, result = nil, max = nil;\n\n      \n      if ($truthy(self['$empty?']())) {\n        return []\n      };\n      result = [];\n      max = nil;\n      $send(self, 'each', [], function $$50(row){var $ret_or_1 = nil;\n\n        \n        if (row == null) row = nil;\n        row = ($eqeqeq($$$('Array'), row) ? (row.$to_a()) : (($coerce_to(row, $$$('Array'), 'to_ary')).$to_a()));\n        max = ($truthy(($ret_or_1 = max)) ? ($ret_or_1) : (row.length));\n        if ($neqeq(row.length, max)) {\n          $Kernel.$raise($$$('IndexError'), \"element size differs (\" + (row.length) + \" should be \" + (max) + \")\")\n        };\n        return $send((row.length), 'times', [], function $$51(i){var $a, entry = nil;\n\n          \n          if (i == null) i = nil;\n          entry = ($truthy(($ret_or_1 = result['$[]'](i))) ? ($ret_or_1) : (($a = [i, []], $send(result, '[]=', $a), $a[$a.length - 1])));\n          return entry['$<<'](row.$at(i));});});\n      return result;\n    });\n    \n    $def(self, '$union', function $$union($a) {\n      var $post_args, arrays, self = this;\n\n      \n      $post_args = $slice(arguments);\n      arrays = $post_args;\n      return $send(arrays, 'reduce', [self.$uniq()], function $$52(a, b){\n        \n        if (a == null) a = nil;\n        if (b == null) b = nil;\n        return a['$|'](b);});\n    }, -1);\n    \n    $def(self, '$uniq', function $$uniq() {\n      var block = $$uniq.$$p || nil, self = this;\n\n      $$uniq.$$p = null;\n      \n      ;\n      \n      var hash = $hash2([], {}), i, length, item, key;\n\n      if (block === nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          if ($hash_get(hash, item) === undefined) {\n            $hash_put(hash, item, item);\n          }\n        }\n      }\n      else {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          key = $yield1(block, item);\n          if ($hash_get(hash, key) === undefined) {\n            $hash_put(hash, key, item);\n          }\n        }\n      }\n\n      return (hash).$values();\n    ;\n    });\n    \n    $def(self, '$uniq!', function $Array_uniq$excl$53() {\n      var block = $Array_uniq$excl$53.$$p || nil, self = this;\n\n      $Array_uniq$excl$53.$$p = null;\n      \n      ;\n      \n      $deny_frozen_access(self);\n\n      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;\n\n      for (i = 0, length = original_length; i < length; i++) {\n        item = self[i];\n        key = (block === nil ? item : $yield1(block, item));\n\n        if ($hash_get(hash, key) === undefined) {\n          $hash_put(hash, key, item);\n          continue;\n        }\n\n        self.splice(i, 1);\n        length--;\n        i--;\n      }\n\n      return self.length === original_length ? nil : self;\n    ;\n    });\n    \n    $def(self, '$unshift', function $$unshift($a) {\n      var $post_args, objects, self = this;\n\n      \n      $post_args = $slice(arguments);\n      objects = $post_args;\n      \n      $deny_frozen_access(self);\n\n      var selfLength = self.length\n      var objectsLength = objects.length\n      if (objectsLength == 0) return self;\n      var index = selfLength - objectsLength\n      for (var i = 0; i < objectsLength; i++) {\n        self.push(self[index + i])\n      }\n      var len = selfLength - 1\n      while (len - objectsLength >= 0) {\n        self[len] = self[len - objectsLength]\n        len--\n      }\n      for (var j = 0; j < objectsLength; j++) {\n        self[j] = objects[j]\n      }\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$values_at', function $$values_at($a) {\n      var $post_args, args, self = this, out = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      out = [];\n      $send(args, 'each', [], function $$54(elem){var self = $$54.$$s == null ? this : $$54.$$s, finish = nil, start = nil, i = nil;\n\n        \n        if (elem == null) elem = nil;\n        if ($truthy(elem['$is_a?']($$$('Range')))) {\n          \n          finish = elem.$end() === nil ? -1 : $coerce_to(elem.$end(), $$$('Integer'), 'to_int');\n          start = elem.$begin() === nil ? 0 : $coerce_to(elem.$begin(), $$$('Integer'), 'to_int');\n          \n          if (start < 0) {\n            start = start + self.length;\n            return nil;\n          }\n        ;\n          \n          if (finish < 0) {\n            finish = finish + self.length;\n          }\n          if (elem['$exclude_end?']() && elem.$end() !== nil) {\n            finish--;\n          }\n          if (finish < start) {\n            return nil;\n          }\n        ;\n          return $send(start, 'upto', [finish], function $$55(i){var self = $$55.$$s == null ? this : $$55.$$s;\n\n            \n            if (i == null) i = nil;\n            return out['$<<'](self.$at(i));}, {$$s: self});\n        } else {\n          \n          i = $coerce_to(elem, $$$('Integer'), 'to_int');\n          return out['$<<'](self.$at(i));\n        };}, {$$s: self});\n      return out;\n    }, -1);\n    \n    $def(self, '$zip', function $$zip($a) {\n      var block = $$zip.$$p || nil, $post_args, others, self = this, $ret_or_1 = nil;\n\n      $$zip.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      others = $post_args;\n      \n      var result = [], size = self.length, part, o, i, j, jj;\n\n      for (j = 0, jj = others.length; j < jj; j++) {\n        o = others[j];\n        if (o.$$is_array) {\n          continue;\n        }\n        if (o.$$is_range || o.$$is_enumerator) {\n          others[j] = o.$take(size);\n          continue;\n        }\n        others[j] = ($truthy(($ret_or_1 = $Opal['$coerce_to?'](o, $$$('Array'), \"to_ary\"))) ? ($ret_or_1) : ($Opal['$coerce_to!'](o, $$$('Enumerator'), \"to_enum\", \"each\"))).$to_a();\n      }\n\n      for (i = 0; i < size; i++) {\n        part = [self[i]];\n\n        for (j = 0, jj = others.length; j < jj; j++) {\n          o = others[j][i];\n\n          if (o == null) {\n            o = nil;\n          }\n\n          part[j + 1] = o;\n        }\n\n        result[i] = part;\n      }\n\n      if (block !== nil) {\n        for (i = 0; i < size; i++) {\n          Opal.yield1(block, result[i]);\n        }\n\n        return nil;\n      }\n\n      return result;\n    ;\n    }, -1);\n    $defs(self, '$inherited', function $$inherited(klass) {\n      \n      \n      klass.$$prototype.$to_a = function() {\n        return this.slice(0, this.length);\n      }\n    \n    });\n    \n    $def(self, '$instance_variables', function $$instance_variables() {\n      var $yield = $$instance_variables.$$p || nil, self = this;\n\n      $$instance_variables.$$p = null;\n      return $send($send2(self, $find_super(self, 'instance_variables', $$instance_variables, false, true), 'instance_variables', [], $yield), 'reject', [], function $$56(ivar){var $ret_or_1 = nil;\n\n        \n        if (ivar == null) ivar = nil;\n        if ($truthy(($ret_or_1 = /^@\\d+$/.test(ivar)))) {\n          return $ret_or_1\n        } else {\n          return ivar['$=='](\"@length\")\n        };})\n    });\n    \n    $def(self, '$pack', function $$pack($a) {\n      var $post_args, args;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      return $Kernel.$raise(\"To use Array#pack, you must first require 'corelib/array/pack'.\");\n    }, -1);\n    $alias(self, \"append\", \"push\");\n    $alias(self, \"filter\", \"select\");\n    $alias(self, \"filter!\", \"select!\");\n    $alias(self, \"map\", \"collect\");\n    $alias(self, \"map!\", \"collect!\");\n    $alias(self, \"prepend\", \"unshift\");\n    $alias(self, \"size\", \"length\");\n    $alias(self, \"slice\", \"[]\");\n    $alias(self, \"to_s\", \"inspect\");\n    $Opal.$pristine(self.$singleton_class(), \"allocate\");\n    return $Opal.$pristine(self, \"copy_instance_variables\", \"initialize_dup\");\n  })('::', Array, $nesting);\n};\n\nOpal.modules[\"corelib/hash\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $yield1 = Opal.yield1, $hash = Opal.hash, $hash_init = Opal.hash_init, $hash_get = Opal.hash_get, $hash_put = Opal.hash_put, $hash_delete = Opal.hash_delete, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $klass = Opal.klass, $slice = Opal.slice, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $defs = Opal.defs, $def = Opal.def, $send = Opal.send, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $hash2 = Opal.hash2, $truthy = Opal.truthy, $to_a = Opal.to_a, $return_self = Opal.return_self, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,coerce_to?,[],merge!,allocate,raise,coerce_to!,each,fetch,>=,>,==,compare_by_identity,lambda?,abs,arity,enum_for,size,respond_to?,class,dig,except!,dup,delete,new,inspect,map,to_proc,flatten,frozen?,eql?,default,default_proc,default_proc=,default=,to_h,proc,clone,select,select!,has_key?,indexes,index,length,[]=,has_value?');\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Hash');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    self.$include($$$('Enumerable'));\n    self.$$prototype.$$is_hash = true;\n    $defs(self, '$[]', function $Hash_$$$1($a) {\n      var $post_args, argv, self = this;\n\n      \n      $post_args = $slice(arguments);\n      argv = $post_args;\n      \n      var hash, argc = argv.length, i;\n\n      if (argc === 1) {\n        hash = $Opal['$coerce_to?'](argv['$[]'](0), $$$('Hash'), \"to_hash\");\n        if (hash !== nil) {\n          return self.$allocate()['$merge!'](hash);\n        }\n\n        argv = $Opal['$coerce_to?'](argv['$[]'](0), $$$('Array'), \"to_ary\");\n        if (argv === nil) {\n          $Kernel.$raise($$$('ArgumentError'), \"odd number of arguments for Hash\")\n        }\n\n        argc = argv.length;\n        hash = self.$allocate();\n\n        for (i = 0; i < argc; i++) {\n          if (!argv[i].$$is_array) continue;\n          switch(argv[i].length) {\n          case 1:\n            hash.$store(argv[i][0], nil);\n            break;\n          case 2:\n            hash.$store(argv[i][0], argv[i][1]);\n            break;\n          default:\n            $Kernel.$raise($$$('ArgumentError'), \"invalid number of elements (\" + (argv[i].length) + \" for 1..2)\")\n          }\n        }\n\n        return hash;\n      }\n\n      if (argc % 2 !== 0) {\n        $Kernel.$raise($$$('ArgumentError'), \"odd number of arguments for Hash\")\n      }\n\n      hash = self.$allocate();\n\n      for (i = 0; i < argc; i += 2) {\n        hash.$store(argv[i], argv[i + 1]);\n      }\n\n      return hash;\n    ;\n    }, -1);\n    $defs(self, '$allocate', function $$allocate() {\n      var self = this;\n\n      \n      var hash = new self.$$constructor();\n\n      $hash_init(hash);\n\n      hash.$$none = nil;\n      hash.$$proc = nil;\n\n      return hash;\n    \n    });\n    $defs(self, '$try_convert', function $$try_convert(obj) {\n      \n      return $Opal['$coerce_to?'](obj, $$$('Hash'), \"to_hash\")\n    });\n    \n    $def(self, '$initialize', function $$initialize(defaults) {\n      var block = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      ;\n      ;\n      \n      $deny_frozen_access(self);\n\n      if (defaults !== undefined && block !== nil) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (1 for 0)\")\n      }\n      self.$$none = (defaults === undefined ? nil : defaults);\n      self.$$proc = block;\n\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$==', function $Hash_$eq_eq$2(other) {\n      var self = this;\n\n      \n      if (self === other) {\n        return true;\n      }\n\n      if (!other.$$is_hash) {\n        return false;\n      }\n\n      if (self.$$keys.length !== other.$$keys.length) {\n        return false;\n      }\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n          other_value = other.$$smap[key];\n        } else {\n          value = key.value;\n          other_value = $hash_get(other, key.key);\n        }\n\n        if (other_value === undefined || !value['$eql?'](other_value)) {\n          return false;\n        }\n      }\n\n      return true;\n    \n    });\n    \n    $def(self, '$>=', function $Hash_$gt_eq$3(other) {\n      var self = this, result = nil;\n\n      \n      other = $Opal['$coerce_to!'](other, $$$('Hash'), \"to_hash\");\n      \n      if (self.$$keys.length < other.$$keys.length) {\n        return false\n      }\n    ;\n      result = true;\n      $send(other, 'each', [], function $$4(other_key, other_val){var self = $$4.$$s == null ? this : $$4.$$s, val = nil;\n\n        \n        if (other_key == null) other_key = nil;\n        if (other_val == null) other_val = nil;\n        val = self.$fetch(other_key, null);\n        \n        if (val == null || val !== other_val) {\n          result = false;\n          return;\n        }\n      ;}, {$$s: self});\n      return result;\n    });\n    \n    $def(self, '$>', function $Hash_$gt$5(other) {\n      var self = this;\n\n      \n      other = $Opal['$coerce_to!'](other, $$$('Hash'), \"to_hash\");\n      \n      if (self.$$keys.length <= other.$$keys.length) {\n        return false\n      }\n    ;\n      return $rb_ge(self, other);\n    });\n    \n    $def(self, '$<', function $Hash_$lt$6(other) {\n      var self = this;\n\n      \n      other = $Opal['$coerce_to!'](other, $$$('Hash'), \"to_hash\");\n      return $rb_gt(other, self);\n    });\n    \n    $def(self, '$<=', function $Hash_$lt_eq$7(other) {\n      var self = this;\n\n      \n      other = $Opal['$coerce_to!'](other, $$$('Hash'), \"to_hash\");\n      return $rb_ge(other, self);\n    });\n    \n    $def(self, '$[]', function $Hash_$$$8(key) {\n      var self = this;\n\n      \n      var value = $hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      return self.$default(key);\n    \n    });\n    \n    $def(self, '$[]=', function $Hash_$$$eq$9(key, value) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      $hash_put(self, key, value);\n      return value;\n    \n    });\n    \n    $def(self, '$assoc', function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          if ((key)['$=='](object)) {\n            return [key, self.$$smap[key]];\n          }\n        } else {\n          if ((key.key)['$=='](object)) {\n            return [key.key, key.value];\n          }\n        }\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$clear', function $$clear() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      $hash_init(self);\n      return self;\n    \n    });\n    \n    $def(self, '$clone', function $$clone() {\n      var self = this;\n\n      \n      var hash = new self.$$class();\n\n      $hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    \n    });\n    \n    $def(self, '$compact', function $$compact() {\n      var self = this;\n\n      \n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value !== nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    \n    });\n    \n    $def(self, '$compact!', function $Hash_compact$excl$10() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    \n    });\n    \n    $def(self, '$compare_by_identity', function $$compare_by_identity() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      var i, ii, key, keys = self.$$keys, identity_hash;\n\n      if (self.$$by_identity) return self;\n      if (self.$$keys.length === 0) {\n        self.$$by_identity = true\n        return self;\n      }\n\n      identity_hash = $hash2([], {}).$compare_by_identity();\n      for(i = 0, ii = keys.length; i < ii; i++) {\n        key = keys[i];\n        if (!key.$$is_string) key = key.key;\n        $hash_put(identity_hash, key, $hash_get(self, key));\n      }\n\n      self.$$by_identity = true;\n      self.$$map = identity_hash.$$map;\n      self.$$smap = identity_hash.$$smap;\n      return self;\n    \n    });\n    \n    $def(self, '$compare_by_identity?', function $Hash_compare_by_identity$ques$11() {\n      var self = this;\n\n      return self.$$by_identity === true;\n    });\n    \n    $def(self, '$default', function $Hash_default$12(key) {\n      var self = this;\n\n      \n      ;\n      \n      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {\n        return self.$$proc.$call(self, key);\n      }\n      if (self.$$none === undefined) {\n        return nil;\n      }\n      return self.$$none;\n    ;\n    }, -1);\n    \n    $def(self, '$default=', function $Hash_default$eq$13(object) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      self.$$proc = nil;\n      self.$$none = object;\n\n      return object;\n    \n    });\n    \n    $def(self, '$default_proc', function $$default_proc() {\n      var self = this;\n\n      \n      if (self.$$proc !== undefined) {\n        return self.$$proc;\n      }\n      return nil;\n    \n    });\n    \n    $def(self, '$default_proc=', function $Hash_default_proc$eq$14(default_proc) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n\n      var proc = default_proc;\n\n      if (proc !== nil) {\n        proc = $Opal['$coerce_to!'](proc, $$$('Proc'), \"to_proc\");\n\n        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {\n          $Kernel.$raise($$$('TypeError'), \"default_proc takes two arguments\");\n        }\n      }\n\n      self.$$none = nil;\n      self.$$proc = proc;\n\n      return default_proc;\n    \n    });\n    \n    $def(self, '$delete', function $Hash_delete$15(key) {\n      var block = $Hash_delete$15.$$p || nil, self = this;\n\n      $Hash_delete$15.$$p = null;\n      \n      ;\n      \n      $deny_frozen_access(self);\n      var value = $hash_delete(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return Opal.yield1(block, key);\n      }\n\n      return nil;\n    ;\n    });\n    \n    $def(self, '$delete_if', function $$delete_if() {\n      var block = $$delete_if.$$p || nil, self = this;\n\n      $$delete_if.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"delete_if\"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$dig', function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      $post_args = $slice(arguments, 1);\n      keys = $post_args;\n      item = self['$[]'](key);\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if (!$truthy(item['$respond_to?'](\"dig\"))) {\n        $Kernel.$raise($$$('TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', $to_a(keys));\n    }, -2);\n    \n    $def(self, '$each', function $$each() {\n      var block = $$each.$$p || nil, self = this;\n\n      $$each.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"each\"], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        $yield1(block, [key, value]);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$each_key', function $$each_key() {\n      var block = $$each_key.$$p || nil, self = this;\n\n      $$each_key.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"each_key\"], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? key : key.key);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$each_value', function $$each_value() {\n      var block = $$each_value.$$p || nil, self = this;\n\n      $$each_value.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"each_value\"], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? self.$$smap[key] : key.value);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$empty?', function $Hash_empty$ques$20() {\n      var self = this;\n\n      return self.$$keys.length === 0;\n    });\n    \n    $def(self, '$except', function $$except($a) {\n      var $post_args, keys, self = this;\n\n      \n      $post_args = $slice(arguments);\n      keys = $post_args;\n      return $send(self.$dup(), 'except!', $to_a(keys));\n    }, -1);\n    \n    $def(self, '$except!', function $Hash_except$excl$21($a) {\n      var $post_args, keys, self = this;\n\n      \n      $post_args = $slice(arguments);\n      keys = $post_args;\n      $send(keys, 'each', [], function $$22(key){var self = $$22.$$s == null ? this : $$22.$$s;\n\n        \n        if (key == null) key = nil;\n        return self.$delete(key);}, {$$s: self});\n      return self;\n    }, -1);\n    \n    $def(self, '$fetch', function $$fetch(key, defaults) {\n      var block = $$fetch.$$p || nil, self = this;\n\n      $$fetch.$$p = null;\n      \n      ;\n      ;\n      \n      var value = $hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return block(key);\n      }\n\n      if (defaults !== undefined) {\n        return defaults;\n      }\n    ;\n      return $Kernel.$raise($$$('KeyError').$new(\"key not found: \" + (key.$inspect()), $hash2([\"key\", \"receiver\"], {\"key\": key, \"receiver\": self})));\n    }, -2);\n    \n    $def(self, '$fetch_values', function $$fetch_values($a) {\n      var block = $$fetch_values.$$p || nil, $post_args, keys, self = this;\n\n      $$fetch_values.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      keys = $post_args;\n      return $send(keys, 'map', [], function $$23(key){var self = $$23.$$s == null ? this : $$23.$$s;\n\n        \n        if (key == null) key = nil;\n        return $send(self, 'fetch', [key], block.$to_proc());}, {$$s: self});\n    }, -1);\n    \n    $def(self, '$flatten', function $$flatten(level) {\n      var self = this;\n\n      \n      if (level == null) level = 1;\n      level = $Opal['$coerce_to!'](level, $$$('Integer'), \"to_int\");\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push(key);\n\n        if (value.$$is_array) {\n          if (level === 1) {\n            result.push(value);\n            continue;\n          }\n\n          result = result.concat((value).$flatten(level - 2));\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      return $freeze(self);;\n    });\n    \n    $def(self, '$has_key?', function $Hash_has_key$ques$24(key) {\n      var self = this;\n\n      return $hash_get(self, key) !== undefined;\n    });\n    \n    $def(self, '$has_value?', function $Hash_has_value$ques$25(value) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    });\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      \n      var top = (Opal.hash_ids === undefined),\n          hash_id = self.$object_id(),\n          result = ['Hash'],\n          key, item;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        if (Opal[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            result.push([key, self.$$smap[key].$hash()]);\n          } else {\n            result.push([key.key_hash, key.value.$hash()]);\n          }\n        }\n\n        return result.sort().join();\n\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    \n    });\n    \n    $def(self, '$index', function $$index(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return key;\n        }\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$indexes', function $$indexes($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var result = [];\n\n      for (var i = 0, length = args.length, key, value; i < length; i++) {\n        key = args[i];\n        value = $hash_get(self, key);\n\n        if (value === undefined) {\n          result.push(self.$default());\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, -1);\n    var inspect_ids;\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      \n      \n      var top = (inspect_ids === undefined),\n          hash_id = self.$object_id(),\n          result = [];\n    ;\n      \n      return (function() { try {\n      \n      \n        if (top) {\n          inspect_ids = {};\n        }\n\n        if (inspect_ids.hasOwnProperty(hash_id)) {\n          return '{...}';\n        }\n\n        inspect_ids[hash_id] = true;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            value = self.$$smap[key];\n          } else {\n            value = key.value;\n            key = key.key;\n          }\n\n          key = $$('Opal').$inspect(key)\n          value = $$('Opal').$inspect(value)\n\n          result.push(key + '=>' + value);\n        }\n\n        return '{' + result.join(', ') + '}';\n      ;\n      return nil;\n      } finally {\n        if (top) inspect_ids = undefined\n      }; })();;\n    });\n    \n    $def(self, '$invert', function $$invert() {\n      var self = this;\n\n      \n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        $hash_put(hash, value, key);\n      }\n\n      return hash;\n    \n    });\n    \n    $def(self, '$keep_if', function $$keep_if() {\n      var block = $$keep_if.$$p || nil, self = this;\n\n      $$keep_if.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"keep_if\"], function $$26(){var self = $$26.$$s == null ? this : $$26.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$keys', function $$keys() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(key);\n        } else {\n          result.push(key.key);\n        }\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$length', function $$length() {\n      var self = this;\n\n      return self.$$keys.length;\n    });\n    \n    $def(self, '$merge', function $$merge($a) {\n      var block = $$merge.$$p || nil, $post_args, others, self = this;\n\n      $$merge.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      others = $post_args;\n      return $send(self.$dup(), 'merge!', $to_a(others), block.$to_proc());\n    }, -1);\n    \n    $def(self, '$merge!', function $Hash_merge$excl$27($a) {\n      var block = $Hash_merge$excl$27.$$p || nil, $post_args, others, self = this;\n\n      $Hash_merge$excl$27.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      others = $post_args;\n      \n      $deny_frozen_access(self);\n      var i, j, other, other_keys, length, key, value, other_value;\n      for (i = 0; i < others.length; ++i) {\n        other = $Opal['$coerce_to!'](others[i], $$$('Hash'), \"to_hash\");\n        other_keys = other.$$keys, length = other_keys.length;\n\n        if (block === nil) {\n          for (j = 0; j < length; j++) {\n            key = other_keys[j];\n\n            if (key.$$is_string) {\n              other_value = other.$$smap[key];\n            } else {\n              other_value = key.value;\n              key = key.key;\n            }\n\n            $hash_put(self, key, other_value);\n          }\n        } else {\n          for (j = 0; j < length; j++) {\n            key = other_keys[j];\n\n            if (key.$$is_string) {\n              other_value = other.$$smap[key];\n            } else {\n              other_value = key.value;\n              key = key.key;\n            }\n\n            value = $hash_get(self, key);\n\n            if (value === undefined) {\n              $hash_put(self, key, other_value);\n              continue;\n            }\n\n            $hash_put(self, key, block(key, value, other_value));\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, -1);\n    \n    $def(self, '$rassoc', function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return [key, value];\n        }\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$rehash', function $$rehash() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      Opal.hash_rehash(self);\n      return self;\n    \n    });\n    \n    $def(self, '$reject', function $$reject() {\n      var block = $$reject.$$p || nil, self = this;\n\n      $$reject.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"reject\"], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    });\n    \n    $def(self, '$reject!', function $Hash_reject$excl$29() {\n      var block = $Hash_reject$excl$29.$$p || nil, self = this;\n\n      $Hash_reject$excl$29.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"reject!\"], function $$30(){var self = $$30.$$s == null ? this : $$30.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    ;\n    });\n    \n    $def(self, '$replace', function $$replace(other) {\n      var self = this;\n\n      \n      $deny_frozen_access(self);;\n      other = $Opal['$coerce_to!'](other, $$$('Hash'), \"to_hash\");\n      \n      $hash_init(self);\n\n      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        $hash_put(self, key, other_value);\n      }\n    ;\n      if ($truthy(other.$default_proc())) {\n        self['$default_proc='](other.$default_proc())\n      } else {\n        self['$default='](other.$default())\n      };\n      return self;\n    });\n    \n    $def(self, '$select', function $$select() {\n      var block = $$select.$$p || nil, self = this;\n\n      $$select.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"select\"], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    });\n    \n    $def(self, '$select!', function $Hash_select$excl$32() {\n      var block = $Hash_select$excl$32.$$p || nil, self = this;\n\n      $Hash_select$excl$32.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"select!\"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      var result = nil;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n          result = self;\n        }\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$shift', function $$shift() {\n      var self = this;\n\n      \n      $deny_frozen_access(self);\n      var keys = self.$$keys,\n          key;\n\n      if (keys.length > 0) {\n        key = keys[0];\n\n        key = key.$$is_string ? key : key.key;\n\n        return [key, $hash_delete(self, key)];\n      }\n\n      return nil;\n    \n    });\n    \n    $def(self, '$slice', function $$slice($a) {\n      var $post_args, keys, self = this;\n\n      \n      $post_args = $slice(arguments);\n      keys = $post_args;\n      \n      var result = $hash();\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i], value = $hash_get(self, key);\n\n        if (value !== undefined) {\n          $hash_put(result, key, value);\n        }\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$to_a', function $$to_a() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push([key, value]);\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$to_h', function $$to_h() {\n      var block = $$to_h.$$p || nil, self = this;\n\n      $$to_h.$$p = null;\n      \n      ;\n      if ((block !== nil)) {\n        return $send(self, 'map', [], block.$to_proc()).$to_h()\n      };\n      \n      if (self.$$class === Opal.Hash) {\n        return self;\n      }\n\n      var hash = new Opal.Hash();\n\n      $hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    ;\n    });\n    \n    $def(self, '$to_hash', $return_self);\n    \n    $def(self, '$to_proc', function $$to_proc() {\n      var self = this;\n\n      return $send(self, 'proc', [], function $$34(key){var self = $$34.$$s == null ? this : $$34.$$s;\n\n        \n        ;\n        \n        if (key == null) {\n          $Kernel.$raise($$$('ArgumentError'), \"no key given\")\n        }\n      ;\n        return self['$[]'](key);}, {$$arity: -1, $$s: self})\n    });\n    \n    $def(self, '$transform_keys', function $$transform_keys() {\n      var block = $$transform_keys.$$p || nil, self = this;\n\n      $$transform_keys.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"transform_keys\"], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        key = $yield1(block, key);\n\n        $hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$transform_keys!', function $Hash_transform_keys$excl$36() {\n      var block = $Hash_transform_keys$excl$36.$$p || nil, self = this;\n\n      $Hash_transform_keys$excl$36.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"transform_keys!\"], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      var keys = Opal.slice(self.$$keys),\n          i, length = keys.length, key, value, new_key;\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        new_key = $yield1(block, key);\n\n        $hash_delete(self, key);\n        $hash_put(self, new_key, value);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$transform_values', function $$transform_values() {\n      var block = $$transform_values.$$p || nil, self = this;\n\n      $$transform_values.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"transform_values\"], function $$38(){var self = $$38.$$s == null ? this : $$38.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var result = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = $yield1(block, value);\n\n        $hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$transform_values!', function $Hash_transform_values$excl$39() {\n      var block = $Hash_transform_values$excl$39.$$p || nil, self = this;\n\n      $Hash_transform_values$excl$39.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"transform_values!\"], function $$40(){var self = $$40.$$s == null ? this : $$40.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      $deny_frozen_access(self);\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = $yield1(block, value);\n\n        $hash_put(self, key, value);\n      }\n\n      return self;\n    ;\n    });\n    \n    $def(self, '$values', function $$values() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(self.$$smap[key]);\n        } else {\n          result.push(key.value);\n        }\n      }\n\n      return result;\n    \n    });\n    $alias(self, \"dup\", \"clone\");\n    $alias(self, \"each_pair\", \"each\");\n    $alias(self, \"eql?\", \"==\");\n    $alias(self, \"filter\", \"select\");\n    $alias(self, \"filter!\", \"select!\");\n    $alias(self, \"include?\", \"has_key?\");\n    $alias(self, \"indices\", \"indexes\");\n    $alias(self, \"key\", \"index\");\n    $alias(self, \"key?\", \"has_key?\");\n    $alias(self, \"member?\", \"has_key?\");\n    $alias(self, \"size\", \"length\");\n    $alias(self, \"store\", \"[]=\");\n    $alias(self, \"to_s\", \"inspect\");\n    $alias(self, \"update\", \"merge!\");\n    $alias(self, \"value?\", \"has_value?\");\n    return $alias(self, \"values_at\", \"indexes\");\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/number\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $not = Opal.not, $rb_lt = Opal.rb_lt, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $return_self = Opal.return_self, $rb_divide = Opal.rb_divide, $to_ary = Opal.to_ary, $rb_times = Opal.rb_times, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $return_val = Opal.return_val, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,bridge,raise,name,class,Float,respond_to?,coerce_to!,__coerced__,===,>,!,**,new,<,to_f,==,nan?,infinite?,enum_for,+,-,gcd,lcm,%,/,frexp,to_i,ldexp,rationalize,*,<<,to_r,truncate,-@,size,<=,>=,inspect,angle,to_s,is_a?,abs,__id__,next,coerce_to?');\n  \n  self.$require(\"corelib/numeric\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    $Opal.$bridge(Number, self);\n    Opal.prop(self.$$prototype, '$$is_number', true);\n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      \n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var self = this;\n\n        return $Kernel.$raise($$$('TypeError'), \"allocator undefined for \" + (self.$name()))\n      });\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    $def(self, '$coerce', function $$coerce(other) {\n      var self = this;\n\n      \n      if (other === nil) {\n        $Kernel.$raise($$$('TypeError'), \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n      else if (other.$$is_string) {\n        return [$Kernel.$Float(other), self];\n      }\n      else if (other['$respond_to?'](\"to_f\")) {\n        return [$Opal['$coerce_to!'](other, $$$('Float'), \"to_f\"), self];\n      }\n      else if (other.$$is_number) {\n        return [other, self];\n      }\n      else {\n        $Kernel.$raise($$$('TypeError'), \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n    \n    });\n    \n    $def(self, '$__id__', function $$__id__() {\n      var self = this;\n\n      return (self * 2) + 1;\n    });\n    \n    $def(self, '$+', function $Number_$plus$1(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self + other;\n      }\n      else {\n        return self.$__coerced__(\"+\", other);\n      }\n    \n    });\n    \n    $def(self, '$-', function $Number_$minus$2(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self - other;\n      }\n      else {\n        return self.$__coerced__(\"-\", other);\n      }\n    \n    });\n    \n    $def(self, '$*', function $Number_$$3(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self * other;\n      }\n      else {\n        return self.$__coerced__(\"*\", other);\n      }\n    \n    });\n    \n    $def(self, '$/', function $Number_$slash$4(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self / other;\n      }\n      else {\n        return self.$__coerced__(\"/\", other);\n      }\n    \n    });\n    \n    $def(self, '$%', function $Number_$percent$5(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        if (other == -Infinity) {\n          return other;\n        }\n        else if (other == 0) {\n          $Kernel.$raise($$$('ZeroDivisionError'), \"divided by 0\");\n        }\n        else if (other < 0 || self < 0) {\n          return (self % other + other) % other;\n        }\n        else {\n          return self % other;\n        }\n      }\n      else {\n        return self.$__coerced__(\"%\", other);\n      }\n    \n    });\n    \n    $def(self, '$&', function $Number_$$6(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self & other;\n      }\n      else {\n        return self.$__coerced__(\"&\", other);\n      }\n    \n    });\n    \n    $def(self, '$|', function $Number_$$7(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self | other;\n      }\n      else {\n        return self.$__coerced__(\"|\", other);\n      }\n    \n    });\n    \n    $def(self, '$^', function $Number_$$8(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self ^ other;\n      }\n      else {\n        return self.$__coerced__(\"^\", other);\n      }\n    \n    });\n    \n    $def(self, '$<', function $Number_$lt$9(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self < other;\n      }\n      else {\n        return self.$__coerced__(\"<\", other);\n      }\n    \n    });\n    \n    $def(self, '$<=', function $Number_$lt_eq$10(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self <= other;\n      }\n      else {\n        return self.$__coerced__(\"<=\", other);\n      }\n    \n    });\n    \n    $def(self, '$>', function $Number_$gt$11(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self > other;\n      }\n      else {\n        return self.$__coerced__(\">\", other);\n      }\n    \n    });\n    \n    $def(self, '$>=', function $Number_$gt_eq$12(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self >= other;\n      }\n      else {\n        return self.$__coerced__(\">=\", other);\n      }\n    \n    });\n    \n    var spaceship_operator = function(self, other) {\n      if (other.$$is_number) {\n        if (isNaN(self) || isNaN(other)) {\n          return nil;\n        }\n\n        if (self > other) {\n          return 1;\n        } else if (self < other) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n      else {\n        return self.$__coerced__(\"<=>\", other);\n      }\n    }\n  ;\n    \n    $def(self, '$<=>', function $Number_$lt_eq_gt$13(other) {\n      var self = this;\n\n      try {\n        return spaceship_operator(self, other);\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('ArgumentError')])) {\n          try {\n            return nil\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n    });\n    \n    $def(self, '$<<', function $Number_$lt$lt$14(count) {\n      var self = this;\n\n      \n      count = $Opal['$coerce_to!'](count, $$$('Integer'), \"to_int\");\n      return count > 0 ? self << count : self >> -count;\n    });\n    \n    $def(self, '$>>', function $Number_$gt$gt$15(count) {\n      var self = this;\n\n      \n      count = $Opal['$coerce_to!'](count, $$$('Integer'), \"to_int\");\n      return count > 0 ? self >> count : self << -count;\n    });\n    \n    $def(self, '$[]', function $Number_$$$16(bit) {\n      var self = this;\n\n      \n      bit = $Opal['$coerce_to!'](bit, $$$('Integer'), \"to_int\");\n      \n      if (bit < 0) {\n        return 0;\n      }\n      if (bit >= 32) {\n        return self < 0 ? 1 : 0;\n      }\n      return (self >> bit) & 1;\n    ;\n    });\n    \n    $def(self, '$+@', function $Number_$plus$$17() {\n      var self = this;\n\n      return +self;\n    });\n    \n    $def(self, '$-@', function $Number_$minus$$18() {\n      var self = this;\n\n      return -self;\n    });\n    \n    $def(self, '$~', function $Number_$$19() {\n      var self = this;\n\n      return ~self;\n    });\n    \n    $def(self, '$**', function $Number_$$$20(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Integer'), other)) {\n        if (($not($$$('Integer')['$==='](self)) || ($truthy($rb_gt(other, 0))))) {\n          return Math.pow(self, other);\n        } else {\n          return $$$('Rational').$new(self, 1)['$**'](other)\n        }\n      } else if (($rb_lt(self, 0) && (($eqeqeq($$$('Float'), other) || ($eqeqeq($$$('Rational'), other)))))) {\n        return $$$('Complex').$new(self, 0)['$**'](other.$to_f())\n      } else if ($truthy(other.$$is_number != null)) {\n        return Math.pow(self, other);\n      } else {\n        return self.$__coerced__(\"**\", other)\n      }\n    });\n    \n    $def(self, '$==', function $Number_$eq_eq$21(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (other['$respond_to?'](\"==\")) {\n        return other['$=='](self);\n      }\n      else {\n        return false;\n      }\n    \n    });\n    $alias(self, \"===\", \"==\");\n    \n    $def(self, '$abs', function $$abs() {\n      var self = this;\n\n      return Math.abs(self);\n    });\n    \n    $def(self, '$abs2', function $$abs2() {\n      var self = this;\n\n      return Math.abs(self * self);\n    });\n    \n    $def(self, '$allbits?', function $Number_allbits$ques$22(mask) {\n      var self = this;\n\n      \n      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), \"to_int\");\n      return (self & mask) == mask;;\n    });\n    \n    $def(self, '$anybits?', function $Number_anybits$ques$23(mask) {\n      var self = this;\n\n      \n      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), \"to_int\");\n      return (self & mask) !== 0;;\n    });\n    \n    $def(self, '$angle', function $$angle() {\n      var self = this;\n\n      \n      if ($truthy(self['$nan?']())) {\n        return self\n      };\n      \n      if (self == 0) {\n        if (1 / self > 0) {\n          return 0;\n        }\n        else {\n          return Math.PI;\n        }\n      }\n      else if (self < 0) {\n        return Math.PI;\n      }\n      else {\n        return 0;\n      }\n    ;\n    });\n    \n    $def(self, '$bit_length', function $$bit_length() {\n      var self = this;\n\n      \n      if (!$eqeqeq($$$('Integer'), self)) {\n        $Kernel.$raise($$$('NoMethodError').$new(\"undefined method `bit_length` for \" + (self) + \":Float\", \"bit_length\"))\n      };\n      \n      if (self === 0 || self === -1) {\n        return 0;\n      }\n\n      var result = 0,\n          value  = self < 0 ? ~self : self;\n\n      while (value != 0) {\n        result   += 1;\n        value  >>>= 1;\n      }\n\n      return result;\n    ;\n    });\n    \n    $def(self, '$ceil', function $$ceil(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.ceil(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$chr', function $$chr(encoding) {\n      var self = this;\n\n      \n      ;\n      return Opal.enc(String.fromCharCode(self), encoding || \"BINARY\");;\n    }, -1);\n    \n    $def(self, '$denominator', function $$denominator() {\n      var $yield = $$denominator.$$p || nil, self = this;\n\n      $$denominator.$$p = null;\n      if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {\n        return 1\n      } else {\n        return $send2(self, $find_super(self, 'denominator', $$denominator, false, true), 'denominator', [], $yield)\n      }\n    });\n    \n    $def(self, '$downto', function $$downto(stop) {\n      var block = $$downto.$$p || nil, self = this;\n\n      $$downto.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"downto\", stop], function $$24(){var self = $$24.$$s == null ? this : $$24.$$s;\n\n          \n          if (!$eqeqeq($$$('Numeric'), stop)) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_gt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(self, stop), 1)\n          };}, {$$s: self})\n      };\n      \n      if (!stop.$$is_number) {\n        $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i >= stop; i--) {\n        block(i);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$equal?', function $Number_equal$ques$25(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self['$=='](other)))) {\n        return $ret_or_1\n      } else {\n        return isNaN(self) && isNaN(other);\n      }\n    });\n    \n    $def(self, '$even?', function $Number_even$ques$26() {\n      var self = this;\n\n      return self % 2 === 0;\n    });\n    \n    $def(self, '$floor', function $$floor(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.floor(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$gcd', function $$gcd(other) {\n      var self = this;\n\n      \n      if (!$eqeqeq($$$('Integer'), other)) {\n        $Kernel.$raise($$$('TypeError'), \"not an integer\")\n      };\n      \n      var min = Math.abs(self),\n          max = Math.abs(other);\n\n      while (min > 0) {\n        var tmp = min;\n\n        min = max % min;\n        max = tmp;\n      }\n\n      return max;\n    ;\n    });\n    \n    $def(self, '$gcdlcm', function $$gcdlcm(other) {\n      var self = this;\n\n      return [self.$gcd(other), self.$lcm(other)]\n    });\n    \n    $def(self, '$integer?', function $Number_integer$ques$27() {\n      var self = this;\n\n      return self % 1 === 0;\n    });\n    \n    $def(self, '$is_a?', function $Number_is_a$ques$28(klass) {\n      var $yield = $Number_is_a$ques$28.$$p || nil, self = this;\n\n      $Number_is_a$ques$28.$$p = null;\n      \n      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {\n        return true\n      };\n      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {\n        return true\n      };\n      if (($eqeq(klass, $$$('Float')) && ($eqeqeq($$$('Float'), self)))) {\n        return true\n      };\n      return $send2(self, $find_super(self, 'is_a?', $Number_is_a$ques$28, false, true), 'is_a?', [klass], $yield);\n    });\n    \n    $def(self, '$instance_of?', function $Number_instance_of$ques$29(klass) {\n      var $yield = $Number_instance_of$ques$29.$$p || nil, self = this;\n\n      $Number_instance_of$ques$29.$$p = null;\n      \n      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {\n        return true\n      };\n      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {\n        return true\n      };\n      if (($eqeq(klass, $$$('Float')) && ($eqeqeq($$$('Float'), self)))) {\n        return true\n      };\n      return $send2(self, $find_super(self, 'instance_of?', $Number_instance_of$ques$29, false, true), 'instance_of?', [klass], $yield);\n    });\n    \n    $def(self, '$lcm', function $$lcm(other) {\n      var self = this;\n\n      \n      if (!$eqeqeq($$$('Integer'), other)) {\n        $Kernel.$raise($$$('TypeError'), \"not an integer\")\n      };\n      \n      if (self == 0 || other == 0) {\n        return 0;\n      }\n      else {\n        return Math.abs(self * other / self.$gcd(other));\n      }\n    ;\n    });\n    \n    $def(self, '$next', function $$next() {\n      var self = this;\n\n      return self + 1;\n    });\n    \n    $def(self, '$nobits?', function $Number_nobits$ques$30(mask) {\n      var self = this;\n\n      \n      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), \"to_int\");\n      return (self & mask) == 0;;\n    });\n    \n    $def(self, '$nonzero?', function $Number_nonzero$ques$31() {\n      var self = this;\n\n      return self == 0 ? nil : self;\n    });\n    \n    $def(self, '$numerator', function $$numerator() {\n      var $yield = $$numerator.$$p || nil, self = this;\n\n      $$numerator.$$p = null;\n      if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {\n        return self\n      } else {\n        return $send2(self, $find_super(self, 'numerator', $$numerator, false, true), 'numerator', [], $yield)\n      }\n    });\n    \n    $def(self, '$odd?', function $Number_odd$ques$32() {\n      var self = this;\n\n      return self % 2 !== 0;\n    });\n    \n    $def(self, '$ord', $return_self);\n    \n    $def(self, '$pow', function $$pow(b, m) {\n      var self = this;\n\n      \n      ;\n      \n      if (self == 0) {\n        $Kernel.$raise($$$('ZeroDivisionError'), \"divided by 0\")\n      }\n\n      if (m === undefined) {\n        return self['$**'](b);\n      } else {\n        if (!($$$('Integer')['$==='](b))) {\n          $Kernel.$raise($$$('TypeError'), \"Integer#pow() 2nd argument not allowed unless a 1st argument is integer\")\n        }\n\n        if (b < 0) {\n          $Kernel.$raise($$$('TypeError'), \"Integer#pow() 1st argument cannot be negative when 2nd argument specified\")\n        }\n\n        if (!($$$('Integer')['$==='](m))) {\n          $Kernel.$raise($$$('TypeError'), \"Integer#pow() 2nd argument not allowed unless all arguments are integers\")\n        }\n\n        if (m === 0) {\n          $Kernel.$raise($$$('ZeroDivisionError'), \"divided by 0\")\n        }\n\n        return self['$**'](b)['$%'](m)\n      }\n    ;\n    }, -2);\n    \n    $def(self, '$pred', function $$pred() {\n      var self = this;\n\n      return self - 1;\n    });\n    \n    $def(self, '$quo', function $$quo(other) {\n      var $yield = $$quo.$$p || nil, self = this;\n\n      $$quo.$$p = null;\n      if ($eqeqeq($$$('Integer'), self)) {\n        return $send2(self, $find_super(self, 'quo', $$quo, false, true), 'quo', [other], $yield)\n      } else {\n        return $rb_divide(self, other)\n      }\n    });\n    \n    $def(self, '$rationalize', function $$rationalize(eps) {\n      var $a, $b, self = this, f = nil, n = nil;\n\n      \n      ;\n      \n      if (arguments.length > 1) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" for 0..1)\");\n      }\n    ;\n      if ($eqeqeq($$$('Integer'), self)) {\n        return $$$('Rational').$new(self, 1)\n      } else if ($truthy(self['$infinite?']())) {\n        return $Kernel.$raise($$$('FloatDomainError'), \"Infinity\")\n      } else if ($truthy(self['$nan?']())) {\n        return $Kernel.$raise($$$('FloatDomainError'), \"NaN\")\n      } else if ($truthy(eps == null)) {\n        \n        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$$('Math').$ldexp(f, $$$($$$('Float'), 'MANT_DIG')).$to_i();\n        n = $rb_minus(n, $$$($$$('Float'), 'MANT_DIG'));\n        return $$$('Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$$('Rational').$new(1, (1)['$<<']($rb_minus(1, n))));\n      } else {\n        return self.$to_r().$rationalize(eps)\n      };\n    }, -1);\n    \n    $def(self, '$remainder', function $$remainder(y) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))\n    });\n    \n    $def(self, '$round', function $$round(ndigits) {\n      var $a, $b, self = this, _ = nil, exp = nil;\n\n      \n      ;\n      if ($eqeqeq($$$('Integer'), self)) {\n        \n        if ($truthy(ndigits == null)) {\n          return self\n        };\n        if (($eqeqeq($$$('Float'), ndigits) && ($truthy(ndigits['$infinite?']())))) {\n          $Kernel.$raise($$$('RangeError'), \"Infinity\")\n        };\n        ndigits = $Opal['$coerce_to!'](ndigits, $$$('Integer'), \"to_int\");\n        if ($truthy($rb_lt(ndigits, $$$($$$('Integer'), 'MIN')))) {\n          $Kernel.$raise($$$('RangeError'), \"out of bounds\")\n        };\n        if ($truthy(ndigits >= 0)) {\n          return self\n        };\n        ndigits = ndigits['$-@']();\n        \n        if (0.415241 * ndigits - 0.125 > self.$size()) {\n          return 0;\n        }\n\n        var f = Math.pow(10, ndigits),\n            x = Math.floor((Math.abs(self) + f / 2) / f) * f;\n\n        return self < 0 ? -x : x;\n      ;\n      } else {\n        \n        if (($truthy(self['$nan?']()) && ($truthy(ndigits == null)))) {\n          $Kernel.$raise($$$('FloatDomainError'), \"NaN\")\n        };\n        ndigits = $Opal['$coerce_to!'](ndigits || 0, $$$('Integer'), \"to_int\");\n        if ($truthy($rb_le(ndigits, 0))) {\n          if ($truthy(self['$nan?']())) {\n            $Kernel.$raise($$$('RangeError'), \"NaN\")\n          } else if ($truthy(self['$infinite?']())) {\n            $Kernel.$raise($$$('FloatDomainError'), \"Infinity\")\n          }\n        } else if ($eqeq(ndigits, 0)) {\n          return Math.round(self)\n        } else if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {\n          return self\n        };\n        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$$('Float'), 'DIG'), 2), ($truthy($rb_gt(exp, 0)) ? ($rb_divide(exp, 4)) : ($rb_minus($rb_divide(exp, 3), 1))))))) {\n          return self\n        };\n        if ($truthy($rb_lt(ndigits, ($truthy($rb_gt(exp, 0)) ? ($rb_plus($rb_divide(exp, 3), 1)) : ($rb_divide(exp, 4)))['$-@']()))) {\n          return 0\n        };\n        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;\n      };\n    }, -1);\n    \n    $def(self, '$times', function $$times() {\n      var block = $$times.$$p || nil, self = this;\n\n      $$times.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return $send(self, 'enum_for', [\"times\"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;\n\n          return self}, {$$s: self})\n      };\n      \n      for (var i = 0; i < self; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$to_f', $return_self);\n    \n    $def(self, '$to_i', function $$to_i() {\n      var self = this;\n\n      return self < 0 ? Math.ceil(self) : Math.floor(self);\n    });\n    \n    $def(self, '$to_r', function $$to_r() {\n      var $a, $b, self = this, f = nil, e = nil;\n\n      if ($eqeqeq($$$('Integer'), self)) {\n        return $$$('Rational').$new(self, 1)\n      } else {\n        \n        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$$('Math').$ldexp(f, $$$($$$('Float'), 'MANT_DIG')).$to_i();\n        e = $rb_minus(e, $$$($$$('Float'), 'MANT_DIG'));\n        return $rb_times(f, $$$($$$('Float'), 'RADIX')['$**'](e)).$to_r();\n      }\n    });\n    \n    $def(self, '$to_s', function $$to_s(base) {\n      var self = this;\n\n      \n      if (base == null) base = 10;\n      base = $Opal['$coerce_to!'](base, $$$('Integer'), \"to_int\");\n      if (($truthy($rb_lt(base, 2)) || ($truthy($rb_gt(base, 36))))) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid radix \" + (base))\n      };\n      if (($eqeq(self, 0) && ($truthy(1/self === -Infinity)))) {\n        return \"-0.0\"\n      };\n      return self.toString(base);;\n    }, -1);\n    \n    $def(self, '$truncate', function $$truncate(ndigits) {\n      var self = this;\n\n      \n      if (ndigits == null) ndigits = 0;\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = parseInt(f * factor, 10) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$digits', function $$digits(base) {\n      var self = this;\n\n      \n      if (base == null) base = 10;\n      if ($rb_lt(self, 0)) {\n        $Kernel.$raise($$$($$$('Math'), 'DomainError'), \"out of domain\")\n      };\n      base = $Opal['$coerce_to!'](base, $$$('Integer'), \"to_int\");\n      if ($truthy($rb_lt(base, 2))) {\n        $Kernel.$raise($$$('ArgumentError'), \"invalid radix \" + (base))\n      };\n      \n      if (self != parseInt(self)) $Kernel.$raise($$$('NoMethodError'), \"undefined method `digits' for \" + (self.$inspect()))\n\n      var value = self, result = [];\n\n      if (self == 0) {\n        return [0];\n      }\n\n      while (value != 0) {\n        result.push(value % base);\n        value = parseInt(value / base, 10);\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$divmod', function $$divmod(other) {\n      var $yield = $$divmod.$$p || nil, self = this;\n\n      $$divmod.$$p = null;\n      if (($truthy(self['$nan?']()) || ($truthy(other['$nan?']())))) {\n        return $Kernel.$raise($$$('FloatDomainError'), \"NaN\")\n      } else if ($truthy(self['$infinite?']())) {\n        return $Kernel.$raise($$$('FloatDomainError'), \"Infinity\")\n      } else {\n        return $send2(self, $find_super(self, 'divmod', $$divmod, false, true), 'divmod', [other], $yield)\n      }\n    });\n    \n    $def(self, '$upto', function $$upto(stop) {\n      var block = $$upto.$$p || nil, self = this;\n\n      $$upto.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"upto\", stop], function $$34(){var self = $$34.$$s == null ? this : $$34.$$s;\n\n          \n          if (!$eqeqeq($$$('Numeric'), stop)) {\n            $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_lt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(stop, self), 1)\n          };}, {$$s: self})\n      };\n      \n      if (!stop.$$is_number) {\n        $Kernel.$raise($$$('ArgumentError'), \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i <= stop; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$zero?', function $Number_zero$ques$35() {\n      var self = this;\n\n      return self == 0;\n    });\n    \n    $def(self, '$size', $return_val(4));\n    \n    $def(self, '$nan?', function $Number_nan$ques$36() {\n      var self = this;\n\n      return isNaN(self);\n    });\n    \n    $def(self, '$finite?', function $Number_finite$ques$37() {\n      var self = this;\n\n      return self != Infinity && self != -Infinity && !isNaN(self);\n    });\n    \n    $def(self, '$infinite?', function $Number_infinite$ques$38() {\n      var self = this;\n\n      \n      if (self == Infinity) {\n        return +1;\n      }\n      else if (self == -Infinity) {\n        return -1;\n      }\n      else {\n        return nil;\n      }\n    \n    });\n    \n    $def(self, '$positive?', function $Number_positive$ques$39() {\n      var self = this;\n\n      return self != 0 && (self == Infinity || 1 / self > 0);\n    });\n    \n    $def(self, '$negative?', function $Number_negative$ques$40() {\n      var self = this;\n\n      return self == -Infinity || 1 / self < 0;\n    });\n    \n    function numberToUint8Array(num) {\n      var uint8array = new Uint8Array(8);\n      new DataView(uint8array.buffer).setFloat64(0, num, true);\n      return uint8array;\n    }\n\n    function uint8ArrayToNumber(arr) {\n      return new DataView(arr.buffer).getFloat64(0, true);\n    }\n\n    function incrementNumberBit(num) {\n      var arr = numberToUint8Array(num);\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === 0xff) {\n          arr[i] = 0;\n        } else {\n          arr[i]++;\n          break;\n        }\n      }\n      return uint8ArrayToNumber(arr);\n    }\n\n    function decrementNumberBit(num) {\n      var arr = numberToUint8Array(num);\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n          arr[i] = 0xff;\n        } else {\n          arr[i]--;\n          break;\n        }\n      }\n      return uint8ArrayToNumber(arr);\n    }\n  ;\n    \n    $def(self, '$next_float', function $$next_float() {\n      var self = this;\n\n      \n      if ($eqeq(self, $$$($$$('Float'), 'INFINITY'))) {\n        return $$$($$$('Float'), 'INFINITY')\n      };\n      if ($truthy(self['$nan?']())) {\n        return $$$($$$('Float'), 'NAN')\n      };\n      if ($rb_ge(self, 0)) {\n        return incrementNumberBit(Math.abs(self));\n      } else {\n        return decrementNumberBit(self);\n      };\n    });\n    \n    $def(self, '$prev_float', function $$prev_float() {\n      var self = this;\n\n      \n      if ($eqeq(self, $$$($$$('Float'), 'INFINITY')['$-@']())) {\n        return $$$($$$('Float'), 'INFINITY')['$-@']()\n      };\n      if ($truthy(self['$nan?']())) {\n        return $$$($$$('Float'), 'NAN')\n      };\n      if ($rb_gt(self, 0)) {\n        return decrementNumberBit(self);\n      } else {\n        return -incrementNumberBit(Math.abs(self));\n      };\n    });\n    $alias(self, \"arg\", \"angle\");\n    $alias(self, \"eql?\", \"==\");\n    $alias(self, \"fdiv\", \"/\");\n    $alias(self, \"inspect\", \"to_s\");\n    $alias(self, \"kind_of?\", \"is_a?\");\n    $alias(self, \"magnitude\", \"abs\");\n    $alias(self, \"modulo\", \"%\");\n    $alias(self, \"object_id\", \"__id__\");\n    $alias(self, \"phase\", \"angle\");\n    $alias(self, \"succ\", \"next\");\n    return $alias(self, \"to_int\", \"to_i\");\n  })('::', $$$('Numeric'), $nesting);\n  $const_set('::', 'Fixnum', $$$('Number'));\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Integer');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    self.$$is_integer_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var self = this;\n\n        return $Kernel.$raise($$$('TypeError'), \"allocator undefined for \" + (self.$name()))\n      });\n      \n      Opal.udef(self, '$' + \"new\");;\n      \n      $def(self, '$sqrt', function $$sqrt(n) {\n        \n        \n        n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n        \n        if (n < 0) {\n          $Kernel.$raise($$$($$$('Math'), 'DomainError'), \"Numerical argument is out of domain - \\\"isqrt\\\"\")\n        }\n\n        return parseInt(Math.sqrt(n), 10);\n      ;\n      });\n      return $def(self, '$try_convert', function $$try_convert(object) {\n        var self = this;\n\n        return $$('Opal')['$coerce_to?'](object, self, \"to_int\")\n      });\n    })(Opal.get_singleton_class(self), $nesting);\n    $const_set(self, 'MAX', Math.pow(2, 30) - 1);\n    return $const_set(self, 'MIN', -Math.pow(2, 30));\n  })('::', $$$('Numeric'), $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Float');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      \n      \n      \n      $def(self, '$allocate', function $$allocate() {\n        var self = this;\n\n        return $Kernel.$raise($$$('TypeError'), \"allocator undefined for \" + (self.$name()))\n      });\n      \n      Opal.udef(self, '$' + \"new\");;\n      return $def(self, '$===', function $eq_eq_eq$41(other) {\n        \n        return !!other.$$is_number;\n      });\n    })(Opal.get_singleton_class(self), $nesting);\n    $const_set(self, 'INFINITY', Infinity);\n    $const_set(self, 'MAX', Number.MAX_VALUE);\n    $const_set(self, 'MIN', Number.MIN_VALUE);\n    $const_set(self, 'NAN', NaN);\n    $const_set(self, 'DIG', 15);\n    $const_set(self, 'MANT_DIG', 53);\n    $const_set(self, 'RADIX', 2);\n    return $const_set(self, 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);\n  })('::', $$$('Numeric'), $nesting);\n};\n\nOpal.modules[\"corelib/range\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $not = Opal.not, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $send = Opal.send, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq, $return_ivar = Opal.return_ivar, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $Opal = Opal.Opal, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_ge = Opal.rb_ge, $thrower = Opal.thrower, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,attr_reader,raise,nil?,<=>,include?,!,<,<=,enum_for,size,upto,to_proc,respond_to?,class,succ,==,===,exclude_end?,eql?,begin,end,last,to_a,>,-@,-,to_i,coerce_to!,ceil,/,is_a?,new,loop,+,*,>=,each_with_index,%,step,bsearch,inspect,[],hash,cover?');\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Range');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.begin = $proto.end = $proto.excl = nil;\n    \n    self.$include($$$('Enumerable'));\n    self.$$prototype.$$is_range = true;\n    self.$attr_reader(\"begin\", \"end\");\n    \n    $def(self, '$initialize', function $$initialize(first, last, exclude) {\n      var self = this;\n\n      \n      if (exclude == null) exclude = false;\n      if ($truthy(self.begin)) {\n        $Kernel.$raise($$$('NameError'), \"'initialize' called twice\")\n      };\n      if (!(($truthy(first['$<=>'](last)) || ($truthy(first['$nil?']()))) || ($truthy(last['$nil?']())))) {\n        $Kernel.$raise($$$('ArgumentError'), \"bad value for range\")\n      };\n      self.begin = first;\n      self.end = last;\n      return (self.excl = exclude);\n    }, -3);\n    \n    $def(self, '$===', function $Range_$eq_eq_eq$1(value) {\n      var self = this;\n\n      return self['$include?'](value)\n    });\n    \n    function is_infinite(self) {\n      if (self.begin === nil || self.end === nil ||\n          self.begin === -Infinity || self.end === Infinity ||\n          self.begin === Infinity || self.end === -Infinity) return true;\n      return false;\n    }\n  ;\n    \n    $def(self, '$count', function $$count() {\n      var block = $$count.$$p || nil, self = this;\n\n      $$count.$$p = null;\n      \n      ;\n      if (($not((block !== nil)) && ($truthy(is_infinite(self))))) {\n        return $$$($$$('Float'), 'INFINITY')\n      };\n      return $send2(self, $find_super(self, 'count', $$count, false, true), 'count', [], block);\n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      var $yield = $$to_a.$$p || nil, self = this;\n\n      $$to_a.$$p = null;\n      \n      if ($truthy(is_infinite(self))) {\n        $Kernel.$raise($$$('TypeError'), \"cannot convert endless range to an array\")\n      };\n      return $send2(self, $find_super(self, 'to_a', $$to_a, false, true), 'to_a', [], $yield);\n    });\n    \n    $def(self, '$cover?', function $Range_cover$ques$2(value) {\n      var self = this, beg_cmp = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, end_cmp = nil;\n\n      \n      beg_cmp = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.begin['$nil?']())) ? (-1) : ($ret_or_3)))) ? ($ret_or_2) : (self.begin['$<=>'](value))))) && ($ret_or_1));\n      end_cmp = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.end['$nil?']())) ? (-1) : ($ret_or_3)))) ? ($ret_or_2) : (value['$<=>'](self.end))))) && ($ret_or_1));\n      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(self.excl) ? (($truthy(($ret_or_3 = end_cmp)) ? ($rb_lt(end_cmp, 0)) : ($ret_or_3))) : ($truthy(($ret_or_3 = end_cmp)) ? ($rb_le(end_cmp, 0)) : ($ret_or_3))))) ? (beg_cmp) : ($ret_or_2))))) {\n        return $rb_le(beg_cmp, 0)\n      } else {\n        return $ret_or_1\n      };\n    });\n    \n    $def(self, '$each', function $$each() {\n      var block = $$each.$$p || nil, self = this, current = nil, last = nil, $ret_or_1 = nil;\n\n      $$each.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each\"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      \n      var i, limit;\n\n      if (self.begin.$$is_number && self.end.$$is_number) {\n        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {\n          $Kernel.$raise($$$('TypeError'), \"can't iterate from Float\")\n        }\n\n        for (i = self.begin, limit = self.end + ($truthy(self.excl) ? (0) : (1)); i < limit; i++) {\n          block(i);\n        }\n\n        return self;\n      }\n\n      if (self.begin.$$is_string && self.end.$$is_string) {\n        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())\n        return self;\n      }\n    ;\n      current = self.begin;\n      last = self.end;\n      if (!$truthy(current['$respond_to?'](\"succ\"))) {\n        $Kernel.$raise($$$('TypeError'), \"can't iterate from \" + (current.$class()))\n      };\n      while ($truthy(($truthy(($ret_or_1 = self.end['$nil?']())) ? ($ret_or_1) : ($rb_lt(current['$<=>'](last), 0))))) {\n      \n        Opal.yield1(block, current);\n        current = current.$succ();\n      };\n      if (($not(self.excl) && ($eqeq(current, last)))) {\n        Opal.yield1(block, current)\n      };\n      return self;\n    });\n    \n    $def(self, '$eql?', function $Range_eql$ques$4(other) {\n      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n      \n      if (!$eqeqeq($$$('Range'), other)) {\n        return false\n      };\n      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.excl['$==='](other['$exclude_end?']()))) ? (self.begin['$eql?'](other.$begin())) : ($ret_or_2))))) {\n        return self.end['$eql?'](other.$end())\n      } else {\n        return $ret_or_1\n      };\n    });\n    \n    $def(self, '$exclude_end?', $return_ivar(\"excl\"));\n    \n    $def(self, '$first', function $$first(n) {\n      var $yield = $$first.$$p || nil, self = this;\n\n      $$first.$$p = null;\n      \n      ;\n      if ($truthy(self.begin['$nil?']())) {\n        $Kernel.$raise($$$('RangeError'), \"cannot get the minimum of beginless range\")\n      };\n      if ($truthy(n == null)) {\n        return self.begin\n      };\n      return $send2(self, $find_super(self, 'first', $$first, false, true), 'first', [n], $yield);\n    }, -1);\n    \n    $def(self, '$last', function $$last(n) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(self.end['$nil?']())) {\n        $Kernel.$raise($$$('RangeError'), \"cannot get the maximum of endless range\")\n      };\n      if ($truthy(n == null)) {\n        return self.end\n      };\n      return self.$to_a().$last(n);\n    }, -1);\n    \n    $def(self, '$max', function $$max() {\n      var $yield = $$max.$$p || nil, self = this;\n\n      $$max.$$p = null;\n      if ($truthy(self.end['$nil?']())) {\n        return $Kernel.$raise($$$('RangeError'), \"cannot get the maximum of endless range\")\n      } else if (($yield !== nil)) {\n        return $send2(self, $find_super(self, 'max', $$max, false, true), 'max', [], $yield)\n      } else if (($not(self.begin['$nil?']()) && (($truthy($rb_gt(self.begin, self.end)) || (($truthy(self.excl) && ($eqeq(self.begin, self.end)))))))) {\n        return nil\n      } else {\n        return self.excl ? self.end - 1 : self.end\n      }\n    });\n    \n    $def(self, '$min', function $$min() {\n      var $yield = $$min.$$p || nil, self = this;\n\n      $$min.$$p = null;\n      if ($truthy(self.begin['$nil?']())) {\n        return $Kernel.$raise($$$('RangeError'), \"cannot get the minimum of beginless range\")\n      } else if (($yield !== nil)) {\n        return $send2(self, $find_super(self, 'min', $$min, false, true), 'min', [], $yield)\n      } else if (($not(self.end['$nil?']()) && (($truthy($rb_gt(self.begin, self.end)) || (($truthy(self.excl) && ($eqeq(self.begin, self.end)))))))) {\n        return nil\n      } else {\n        return self.begin\n      }\n    });\n    \n    $def(self, '$size', function $$size() {\n      var self = this, infinity = nil, range_begin = nil, range_end = nil;\n\n      \n      infinity = $$$($$$('Float'), 'INFINITY');\n      if ((($eqeq(self.begin, infinity) && ($not(self.end['$nil?']()))) || (($eqeq(self.end, infinity['$-@']()) && ($not(self.begin['$nil?']())))))) {\n        return 0\n      };\n      if ($truthy(is_infinite(self))) {\n        return infinity\n      };\n      if (!($eqeqeq($$$('Numeric'), self.begin) && ($eqeqeq($$$('Numeric'), self.end)))) {\n        return nil\n      };\n      range_begin = self.begin;\n      range_end = self.end;\n      if ($truthy(self.excl)) {\n        range_end = $rb_minus(range_end, 1)\n      };\n      if ($truthy($rb_lt(range_end, range_begin))) {\n        return 0\n      };\n      return (Math.abs(range_end - range_begin) + 1).$to_i();\n    });\n    \n    $def(self, '$step', function $$step(n) {\n      var $yield = $$step.$$p || nil, self = this, $ret_or_1 = nil, i = nil;\n\n      $$step.$$p = null;\n      \n      ;\n      \n      function coerceStepSize() {\n        if (n == null) {\n          n = 1;\n        }\n        else if (!n.$$is_number) {\n          n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\")\n        }\n\n        if (n < 0) {\n          $Kernel.$raise($$$('ArgumentError'), \"step can't be negative\")\n        } else if (n === 0) {\n          $Kernel.$raise($$$('ArgumentError'), \"step can't be 0\")\n        }\n      }\n\n      function enumeratorSize() {\n        if (!self.begin['$respond_to?'](\"succ\")) {\n          return nil;\n        }\n\n        if (self.begin.$$is_string && self.end.$$is_string) {\n          return nil;\n        }\n\n        if (n % 1 === 0) {\n          return $rb_divide(self.$size(), n).$ceil();\n        } else {\n          // n is a float\n          var begin = self.begin, end = self.end,\n              abs = Math.abs, floor = Math.floor,\n              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$$('Float'), 'EPSILON'),\n              size;\n\n          if (err > 0.5) {\n            err = 0.5;\n          }\n\n          if (self.excl) {\n            size = floor((end - begin) / n - err);\n            if (size * n + begin < end) {\n              size++;\n            }\n          } else {\n            size = floor((end - begin) / n + err) + 1\n          }\n\n          return size;\n        }\n      }\n    ;\n      if (!($yield !== nil)) {\n        if (((($truthy(self.begin['$is_a?']($$('Numeric'))) || ($truthy(self.begin['$nil?']()))) && (($truthy(self.end['$is_a?']($$('Numeric'))) || ($truthy(self.end['$nil?']()))))) && ($not(($truthy(($ret_or_1 = self.begin['$nil?']())) ? (self.end['$nil?']()) : ($ret_or_1)))))) {\n          return $$$($$$('Enumerator'), 'ArithmeticSequence').$new(self, n, \"step\")\n        } else {\n          return $send(self, 'enum_for', [\"step\", n], function $$5(){\n            \n            coerceStepSize();\n            return enumeratorSize();\n          })\n        }\n      };\n      coerceStepSize();\n      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {\n        \n        i = 0;\n        (function(){try { var $t_break = $thrower('break'); return $send(self, 'loop', [], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s, current = nil;\n          if (self.begin == null) self.begin = nil;\n          if (self.excl == null) self.excl = nil;\n          if (self.end == null) self.end = nil;\n\n          \n          current = $rb_plus(self.begin, $rb_times(i, n));\n          if ($truthy(self.excl)) {\n            if ($truthy($rb_ge(current, self.end))) {\n              $t_break.$throw()\n            }\n          } else if ($truthy($rb_gt(current, self.end))) {\n            $t_break.$throw()\n          };\n          Opal.yield1($yield, current);\n          return (i = $rb_plus(i, 1));}, {$$s: self})} catch($e) {\n          if ($e === $t_break) return $e.$v;\n          throw $e;\n        }})();\n      } else {\n        \n        \n        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {\n          $Kernel.$raise($$$('TypeError'), \"no implicit conversion to float from string\")\n        }\n      ;\n        $send(self, 'each_with_index', [], function $$7(value, idx){\n          \n          if (value == null) value = nil;\n          if (idx == null) idx = nil;\n          if ($eqeq(idx['$%'](n), 0)) {\n            return Opal.yield1($yield, value);\n          } else {\n            return nil\n          };});\n      };\n      return self;\n    }, -1);\n    \n    $def(self, '$%', function $Range_$percent$8(n) {\n      var self = this;\n\n      if (($truthy(self.begin['$is_a?']($$('Numeric'))) && ($truthy(self.end['$is_a?']($$('Numeric')))))) {\n        return $$$($$$('Enumerator'), 'ArithmeticSequence').$new(self, n, \"%\")\n      } else {\n        return self.$step(n)\n      }\n    });\n    \n    $def(self, '$bsearch', function $$bsearch() {\n      var block = $$bsearch.$$p || nil, self = this;\n\n      $$bsearch.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"bsearch\")\n      };\n      if ($truthy(is_infinite(self) && (self.begin.$$is_number || self.end.$$is_number))) {\n        $Kernel.$raise($$$('NotImplementedError'), \"Can't #bsearch an infinite range\")\n      };\n      if (!$truthy(self.begin.$$is_number && self.end.$$is_number)) {\n        $Kernel.$raise($$$('TypeError'), \"can't do binary search for \" + (self.begin.$class()))\n      };\n      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this, $ret_or_1 = nil;\n\n      return \"\" + (($truthy(($ret_or_1 = self.begin)) ? ($ret_or_1) : (\"\"))) + (($truthy(self.excl) ? (\"...\") : (\"..\"))) + (($truthy(($ret_or_1 = self.end)) ? ($ret_or_1) : (\"\")))\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this, $ret_or_1 = nil;\n\n      return \"\" + (($truthy(($ret_or_1 = self.begin)) ? (self.begin.$inspect()) : ($ret_or_1))) + (($truthy(self.excl) ? (\"...\") : (\"..\"))) + (($truthy(($ret_or_1 = self.end)) ? (self.end.$inspect()) : ($ret_or_1)))\n    });\n    \n    $def(self, '$marshal_load', function $$marshal_load(args) {\n      var self = this;\n\n      \n      self.begin = args['$[]'](\"begin\");\n      self.end = args['$[]'](\"end\");\n      return (self.excl = args['$[]'](\"excl\"));\n    });\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return [self.begin, self.end, self.excl].$hash()\n    });\n    $alias(self, \"==\", \"eql?\");\n    $alias(self, \"include?\", \"cover?\");\n    return $alias(self, \"member?\", \"cover?\");\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/proc\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $defs = Opal.defs, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $return_self = Opal.return_self, $ensure_kwargs = Opal.ensure_kwargs, $Opal = Opal.Opal, $alias = Opal.alias, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('raise,proc,call,to_proc,new,source_location,coerce_to!,dup');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Proc');\n\n    \n    \n    Opal.prop(self.$$prototype, '$$is_proc', true);\n    Opal.prop(self.$$prototype, '$$is_lambda', false);\n    $defs(self, '$new', function $Proc_new$1() {\n      var block = $Proc_new$1.$$p || nil;\n\n      $Proc_new$1.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        $Kernel.$raise($$$('ArgumentError'), \"tried to create a Proc object without a block\")\n      };\n      return block;\n    });\n    \n    $def(self, '$call', function $$call($a) {\n      var block = $$call.$$p || nil, $post_args, args, self = this;\n\n      $$call.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      if (block !== nil) {\n        self.$$p = block;\n      }\n\n      var result, $brk = self.$$brk, $ret = self.$$ret;\n\n      if ($brk || ($ret && self.$$is_lambda)) {\n        try {\n          if (self.$$is_lambda) {\n            result = self.apply(null, args);\n          }\n          else {\n            result = Opal.yieldX(self, args);\n          }\n        } catch (err) {\n          if (err === $brk) {\n            return err.$v;\n          }\n          else if (self.$$is_lambda && err === $ret) {\n            return err.$v;\n          }\n          else {\n            throw err;\n          }\n        }\n      }\n      else {\n        if (self.$$is_lambda) {\n          result = self.apply(null, args);\n        }\n        else {\n          result = Opal.yieldX(self, args);\n        }\n      }\n\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$>>', function $Proc_$gt$gt$2(other) {\n      var $yield = $Proc_$gt$gt$2.$$p || nil, self = this;\n\n      $Proc_$gt$gt$2.$$p = null;\n      return $send($Kernel, 'proc', [], function $$3($a){var block = $$3.$$p || nil, $post_args, args, self = $$3.$$s == null ? this : $$3.$$s, out = nil;\n\n        $$3.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        args = $post_args;\n        out = $send(self, 'call', $to_a(args), block.$to_proc());\n        return other.$call(out);}, {$$arity: -1, $$s: self})\n    });\n    \n    $def(self, '$<<', function $Proc_$lt$lt$4(other) {\n      var $yield = $Proc_$lt$lt$4.$$p || nil, self = this;\n\n      $Proc_$lt$lt$4.$$p = null;\n      return $send($Kernel, 'proc', [], function $$5($a){var block = $$5.$$p || nil, $post_args, args, self = $$5.$$s == null ? this : $$5.$$s, out = nil;\n\n        $$5.$$p = null;\n        \n        ;\n        $post_args = $slice(arguments);\n        args = $post_args;\n        out = $send(other, 'call', $to_a(args), block.$to_proc());\n        return self.$call(out);}, {$$arity: -1, $$s: self})\n    });\n    \n    $def(self, '$to_proc', $return_self);\n    \n    $def(self, '$lambda?', function $Proc_lambda$ques$6() {\n      var self = this;\n\n      return !!self.$$is_lambda;\n    });\n    \n    $def(self, '$arity', function $$arity() {\n      var self = this;\n\n      \n      if (self.$$is_curried) {\n        return -1;\n      } else if (self.$$arity != null) {\n        return self.$$arity;\n      } else {\n        return self.length;\n      }\n    \n    });\n    \n    $def(self, '$source_location', function $$source_location() {\n      var self = this, $ret_or_1 = nil;\n\n      \n      if (self.$$is_curried) { return nil; };\n      if ($truthy(($ret_or_1 = self.$$source_location))) {\n        return $ret_or_1\n      } else {\n        return nil\n      };\n    });\n    \n    $def(self, '$binding', function $$binding() {\n      var $a, self = this;\n\n      \n      if (self.$$is_curried) { $Kernel.$raise($$$('ArgumentError'), \"Can't create Binding\") };\n      if ($truthy((($a = $$$('::', 'Binding', 'skip_raise')) ? 'constant' : nil))) {\n        return $$$('Binding').$new(nil, [], self.$$s, self.$source_location())\n      } else {\n        return nil\n      };\n    });\n    \n    $def(self, '$parameters', function $$parameters($kwargs) {\n      var lambda, self = this;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      lambda = $kwargs.$$smap[\"lambda\"];;\n      \n      if (self.$$is_curried) {\n        return [[\"rest\"]];\n      } else if (self.$$parameters) {\n        if (lambda == null ? self.$$is_lambda : lambda) {\n          return self.$$parameters;\n        } else {\n          var result = [], i, length;\n\n          for (i = 0, length = self.$$parameters.length; i < length; i++) {\n            var parameter = self.$$parameters[i];\n\n            if (parameter[0] === 'req') {\n              // required arguments always have name\n              parameter = ['opt', parameter[1]];\n            }\n\n            result.push(parameter);\n          }\n\n          return result;\n        }\n      } else {\n        return [];\n      }\n    ;\n    }, -1);\n    \n    $def(self, '$curry', function $$curry(arity) {\n      var self = this;\n\n      \n      ;\n      \n      if (arity === undefined) {\n        arity = self.length;\n      }\n      else {\n        arity = $Opal['$coerce_to!'](arity, $$$('Integer'), \"to_int\");\n        if (self.$$is_lambda && arity !== self.length) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arity) + \" for \" + (self.length) + \")\")\n        }\n      }\n\n      function curried () {\n        var args = $slice(arguments),\n            length = args.length,\n            result;\n\n        if (length > arity && self.$$is_lambda && !self.$$is_curried) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (length) + \" for \" + (arity) + \")\")\n        }\n\n        if (length >= arity) {\n          return self.$call.apply(self, args);\n        }\n\n        result = function () {\n          return curried.apply(null,\n            args.concat($slice(arguments)));\n        }\n        result.$$is_lambda = self.$$is_lambda;\n        result.$$is_curried = true;\n\n        return result;\n      };\n\n      curried.$$is_lambda = self.$$is_lambda;\n      curried.$$is_curried = true;\n      return curried;\n    ;\n    }, -1);\n    \n    $def(self, '$dup', function $$dup() {\n      var self = this;\n\n      \n      var original_proc = self.$$original_proc || self,\n          proc = function () {\n            return original_proc.apply(this, arguments);\n          };\n\n      for (var prop in self) {\n        if (self.hasOwnProperty(prop)) {\n          proc[prop] = self[prop];\n        }\n      }\n\n      return proc;\n    \n    });\n    $alias(self, \"===\", \"call\");\n    $alias(self, \"clone\", \"dup\");\n    $alias(self, \"yield\", \"call\");\n    return $alias(self, \"[]\", \"call\");\n  })('::', Function)\n};\n\nOpal.modules[\"corelib/method\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $slice = Opal.slice, $alias = Opal.alias, $Kernel = Opal.Kernel, $send = Opal.send, $to_a = Opal.to_a, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_reader,arity,curry,>>,<<,new,class,join,source_location,call,raise,bind,to_proc');\n  \n  (function($base, $super) {\n    var self = $klass($base, $super, 'Method');\n\n    var $proto = self.$$prototype;\n\n    $proto.method = $proto.receiver = $proto.owner = $proto.name = nil;\n    \n    self.$attr_reader(\"owner\", \"receiver\", \"name\");\n    \n    $def(self, '$initialize', function $$initialize(receiver, owner, method, name) {\n      var self = this;\n\n      \n      self.receiver = receiver;\n      self.owner = owner;\n      self.name = name;\n      return (self.method = method);\n    });\n    \n    $def(self, '$arity', function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    });\n    \n    $def(self, '$parameters', function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    });\n    \n    $def(self, '$source_location', function $$source_location() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.method.$$source_location))) {\n        return $ret_or_1\n      } else {\n        return [\"(eval)\", 0]\n      }\n    });\n    \n    $def(self, '$comments', function $$comments() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.method.$$comments))) {\n        return $ret_or_1\n      } else {\n        return []\n      }\n    });\n    \n    $def(self, '$call', function $$call($a) {\n      var block = $$call.$$p || nil, $post_args, args, self = this;\n\n      $$call.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      self.method.$$p = block;\n\n      return self.method.apply(self.receiver, args);\n    ;\n    }, -1);\n    \n    $def(self, '$curry', function $$curry(arity) {\n      var self = this;\n\n      \n      ;\n      return self.method.$curry(arity);\n    }, -1);\n    \n    $def(self, '$>>', function $Method_$gt$gt$1(other) {\n      var self = this;\n\n      return self.method['$>>'](other)\n    });\n    \n    $def(self, '$<<', function $Method_$lt$lt$2(other) {\n      var self = this;\n\n      return self.method['$<<'](other)\n    });\n    \n    $def(self, '$unbind', function $$unbind() {\n      var self = this;\n\n      return $$$('UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)\n    });\n    \n    $def(self, '$to_proc', function $$to_proc() {\n      var self = this;\n\n      \n      var proc = self.$call.bind(self);\n      proc.$$unbound = self.method;\n      proc.$$is_lambda = true;\n      proc.$$arity = self.method.$$arity == null ? self.method.length : self.method.$$arity;\n      proc.$$parameters = self.method.$$parameters;\n      return proc;\n    \n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"#<\" + (self.$class()) + \": \" + (self.receiver.$class()) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    });\n    $alias(self, \"[]\", \"call\");\n    return $alias(self, \"===\", \"call\");\n  })('::', null);\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'UnboundMethod');\n\n    var $proto = self.$$prototype;\n\n    $proto.method = $proto.owner = $proto.name = $proto.source = nil;\n    \n    self.$attr_reader(\"source\", \"owner\", \"name\");\n    \n    $def(self, '$initialize', function $$initialize(source, owner, method, name) {\n      var self = this;\n\n      \n      self.source = source;\n      self.owner = owner;\n      self.method = method;\n      return (self.name = name);\n    });\n    \n    $def(self, '$arity', function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    });\n    \n    $def(self, '$parameters', function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    });\n    \n    $def(self, '$source_location', function $$source_location() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.method.$$source_location))) {\n        return $ret_or_1\n      } else {\n        return [\"(eval)\", 0]\n      }\n    });\n    \n    $def(self, '$comments', function $$comments() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.method.$$comments))) {\n        return $ret_or_1\n      } else {\n        return []\n      }\n    });\n    \n    $def(self, '$bind', function $$bind(object) {\n      var self = this;\n\n      \n      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {\n        return $$$('Method').$new(object, self.owner, self.method, self.name);\n      }\n      else {\n        $Kernel.$raise($$$('TypeError'), \"can't bind singleton method to a different class (expected \" + (object) + \".kind_of?(\" + (self.owner) + \" to be true)\");\n      }\n    \n    });\n    \n    $def(self, '$bind_call', function $$bind_call(object, $a) {\n      var block = $$bind_call.$$p || nil, $post_args, args, self = this;\n\n      $$bind_call.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      return $send(self.$bind(object), 'call', $to_a(args), block.$to_proc());\n    }, -2);\n    return $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"#<\" + (self.$class()) + \": \" + (self.source) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    });\n  })('::', null);\n};\n\nOpal.modules[\"corelib/variables\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $gvars = Opal.gvars, $const_set = Opal.const_set, $Object = Opal.Object, $hash2 = Opal.hash2, nil = Opal.nil;\n\n  Opal.add_stubs('new');\n  \n  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars[\"'\"] = nil;\n  $gvars.LOADED_FEATURES = ($gvars[\"\\\"\"] = Opal.loaded_features);\n  $gvars.LOAD_PATH = ($gvars[\":\"] = []);\n  $gvars[\"/\"] = \"\\n\";\n  $gvars[\",\"] = nil;\n  $const_set('::', 'ARGV', []);\n  $const_set('::', 'ARGF', $Object.$new());\n  $const_set('::', 'ENV', $hash2([], {}));\n  $gvars.VERBOSE = false;\n  $gvars.DEBUG = false;\n  return ($gvars.SAFE = 0);\n};\n\nOpal.modules[\"corelib/io\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $const_set = Opal.const_set, $not = Opal.not, $truthy = Opal.truthy, $def = Opal.def, $return_ivar = Opal.return_ivar, $return_val = Opal.return_val, $slice = Opal.slice, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $send = Opal.send, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $neqeq = Opal.neqeq, $range = Opal.range, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $assign_ivar_val = Opal.assign_ivar_val, $alias = Opal.alias, $a, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_reader,attr_accessor,!,match?,include?,size,write,String,flatten,puts,sysread_noraise,+,!=,[],ord,getc,readchar,raise,gets,==,to_str,length,split,sub,sysread,>,to_a,each_line,enum_for,getbyte,closed_write?,closed_read?,each,eof,new,write_proc=,read_proc=');\n  \n  (function($base, $super) {\n    var self = $klass($base, $super, 'IO');\n\n    var $proto = self.$$prototype;\n\n    $proto.read_buffer = $proto.closed = nil;\n    \n    $const_set(self, 'SEEK_SET', 0);\n    $const_set(self, 'SEEK_CUR', 1);\n    $const_set(self, 'SEEK_END', 2);\n    $const_set(self, 'SEEK_DATA', 3);\n    $const_set(self, 'SEEK_HOLE', 4);\n    $const_set(self, 'READABLE', 1);\n    $const_set(self, 'WRITABLE', 4);\n    self.$attr_reader(\"eof\");\n    self.$attr_accessor(\"read_proc\", \"sync\", \"tty\", \"write_proc\");\n    \n    $def(self, '$initialize', function $$initialize(fd, flags) {\n      var self = this;\n\n      \n      if (flags == null) flags = \"r\";\n      self.fd = fd;\n      self.flags = flags;\n      self.eof = false;\n      if (($truthy(flags['$include?'](\"r\")) && ($not(flags['$match?'](/[wa+]/))))) {\n        return (self.closed = \"write\")\n      } else if (($truthy(flags['$match?'](/[wa]/)) && ($not(flags['$match?'](/[r+]/))))) {\n        return (self.closed = \"read\")\n      } else {\n        return nil\n      };\n    }, -2);\n    \n    $def(self, '$fileno', $return_ivar(\"fd\"));\n    \n    $def(self, '$tty?', function $IO_tty$ques$1() {\n      var self = this;\n\n      return self.tty == true;\n    });\n    \n    $def(self, '$write', function $$write(string) {\n      var self = this;\n\n      \n      self.write_proc(string);\n      return string.$size();\n    });\n    \n    $def(self, '$flush', $return_val(nil));\n    \n    $def(self, '$<<', function $IO_$lt$lt$2(string) {\n      var self = this;\n\n      \n      self.$write(string);\n      return self;\n    });\n    \n    $def(self, '$print', function $$print($a) {\n      var $post_args, args, self = this;\n      if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      for (var i = 0, ii = args.length; i < ii; i++) {\n        args[i] = $Kernel.$String(args[i])\n      }\n      self.$write(args.join($gvars[\",\"]));\n    ;\n      return nil;\n    }, -1);\n    \n    $def(self, '$puts', function $$puts($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      \n      var line\n      if (args.length === 0) {\n        self.$write(\"\\n\");\n        return nil;\n      } else {\n        for (var i = 0, ii = args.length; i < ii; i++) {\n          if (args[i].$$is_array){\n            var ary = (args[i]).$flatten()\n            if (ary.length > 0) $send(self, 'puts', $to_a((ary)))\n          } else {\n            if (args[i].$$is_string) {\n              line = args[i].valueOf();\n            } else {\n              line = $Kernel.$String(args[i]);\n            }\n            if (!line.endsWith(\"\\n\")) line += \"\\n\"\n            self.$write(line)\n          }\n        }\n      }\n    ;\n      return nil;\n    }, -1);\n    \n    $def(self, '$getc', function $$getc() {\n      var self = this, $ret_or_1 = nil, parts = nil, ret = nil;\n\n      \n      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (\"\"));\n      parts = \"\";\n      do {\n      \n        self.read_buffer = $rb_plus(self.read_buffer, parts);\n        if ($neqeq(self.read_buffer, \"\")) {\n          \n          ret = self.read_buffer['$[]'](0);\n          self.read_buffer = self.read_buffer['$[]']($range(1, -1, false));\n          return ret;\n        };\n      } while ($truthy((parts = self.$sysread_noraise(1))));;\n      return nil;\n    });\n    \n    $def(self, '$getbyte', function $$getbyte() {\n      var $a, self = this;\n\n      return ($a = self.$getc(), ($a === nil || $a == null) ? nil : $a.$ord())\n    });\n    \n    $def(self, '$readbyte', function $$readbyte() {\n      var self = this;\n\n      return self.$readchar().$ord()\n    });\n    \n    $def(self, '$readchar', function $$readchar() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.$getc()))) {\n        return $ret_or_1\n      } else {\n        return $Kernel.$raise($$$('EOFError'), \"end of file reached\")\n      }\n    });\n    \n    $def(self, '$readline', function $$readline($a) {\n      var $post_args, args, self = this, $ret_or_1 = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      if ($truthy(($ret_or_1 = $send(self, 'gets', $to_a(args))))) {\n        return $ret_or_1\n      } else {\n        return $Kernel.$raise($$$('EOFError'), \"end of file reached\")\n      };\n    }, -1);\n    \n    $def(self, '$gets', function $$gets(sep, limit, opts) {\n      var $a, $b, self = this, orig_sep = nil, $ret_or_1 = nil, seplen = nil, data = nil, ret = nil, orig_buffer = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      \n      if (sep == null) sep = false;\n      if (limit == null) limit = nil;\n      if (opts == null) opts = $hash2([], {});\n      if (($truthy(sep.$$is_number) && ($not(limit)))) {\n        $a = [false, sep, limit], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a\n      };\n      if ((($truthy(sep.$$is_hash) && ($not(limit))) && ($eqeq(opts, $hash2([], {}))))) {\n        $a = [false, nil, sep], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a\n      } else if (($truthy(limit.$$is_hash) && ($eqeq(opts, $hash2([], {}))))) {\n        $a = [sep, nil, limit], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a\n      };\n      orig_sep = sep;\n      if ($eqeq(sep, false)) {\n        sep = $gvars[\"/\"]\n      };\n      if ($eqeq(sep, \"\")) {\n        sep = /\\r?\\n\\r?\\n/\n      };\n      sep = ($truthy(($ret_or_1 = sep)) ? ($ret_or_1) : (\"\"));\n      if (!$eqeq(orig_sep, \"\")) {\n        sep = sep.$to_str()\n      };\n      seplen = ($eqeq(orig_sep, \"\") ? (2) : (sep.$length()));\n      if ($eqeq(sep, \" \")) {\n        sep = / /\n      };\n      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (\"\"));\n      data = \"\";\n      ret = nil;\n      do {\n      \n        self.read_buffer = $rb_plus(self.read_buffer, data);\n        if (($neqeq(sep, \"\") && ($truthy(($truthy(sep.$$is_regexp) ? (self.read_buffer['$match?'](sep)) : (self.read_buffer['$include?'](sep))))))) {\n          \n          orig_buffer = self.read_buffer;\n          $b = self.read_buffer.$split(sep, 2), $a = $to_ary($b), (ret = ($a[0] == null ? nil : $a[0])), (self.read_buffer = ($a[1] == null ? nil : $a[1])), $b;\n          if ($neqeq(ret, orig_buffer)) {\n            ret = $rb_plus(ret, orig_buffer['$[]'](ret.$length(), seplen))\n          };\n          break;\n        };\n      } while ($truthy((data = self.$sysread_noraise(($eqeq(sep, \"\") ? (65536) : (1))))));;\n      if (!$truthy(ret)) {\n        \n        $a = [($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (\"\")), \"\"], (ret = $a[0]), (self.read_buffer = $a[1]), $a;\n        if ($eqeq(ret, \"\")) {\n          ret = nil\n        };\n      };\n      if ($truthy(ret)) {\n        \n        if ($truthy(limit)) {\n          \n          ret = ret['$[]'](Opal.Range.$new(0,limit, true));\n          self.read_buffer = $rb_plus(ret['$[]'](Opal.Range.$new(limit, -1, false)), self.read_buffer);\n        };\n        if ($truthy(opts['$[]'](\"chomp\"))) {\n          ret = ret.$sub(/\\r?\\n$/, \"\")\n        };\n        if ($eqeq(orig_sep, \"\")) {\n          ret = ret.$sub(/^[\\r\\n]+/, \"\")\n        };\n      };\n      if ($eqeq(orig_sep, false)) {\n        $gvars._ = ret\n      };\n      return ret;\n    }, -1);\n    \n    $def(self, '$sysread', function $$sysread(integer) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.read_proc(integer)))) {\n        return $ret_or_1\n      } else {\n        \n        self.eof = true;\n        return $Kernel.$raise($$$('EOFError'), \"end of file reached\");\n      }\n    });\n    \n    $def(self, '$sysread_noraise', function $$sysread_noraise(integer) {\n      var self = this;\n\n      try {\n        return self.$sysread(integer)\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('EOFError')])) {\n          try {\n            return nil\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n    });\n    \n    $def(self, '$readpartial', function $$readpartial(integer) {\n      var $a, self = this, $ret_or_1 = nil, part = nil, ret = nil;\n\n      \n      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (\"\"));\n      part = self.$sysread(integer);\n      $a = [$rb_plus(self.read_buffer, ($truthy(($ret_or_1 = part)) ? ($ret_or_1) : (\"\"))), \"\"], (ret = $a[0]), (self.read_buffer = $a[1]), $a;\n      if ($eqeq(ret, \"\")) {\n        ret = nil\n      };\n      return ret;\n    });\n    \n    $def(self, '$read', function $$read(integer) {\n      var $a, self = this, $ret_or_1 = nil, parts = nil, ret = nil;\n\n      \n      if (integer == null) integer = nil;\n      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (\"\"));\n      parts = \"\";\n      ret = nil;\n      do {\n      \n        self.read_buffer = $rb_plus(self.read_buffer, parts);\n        if (($truthy(integer) && ($truthy($rb_gt(self.read_buffer.$length(), integer))))) {\n          \n          $a = [self.read_buffer['$[]'](Opal.Range.$new(0,integer, true)), self.read_buffer['$[]'](Opal.Range.$new(integer, -1, false))], (ret = $a[0]), (self.read_buffer = $a[1]), $a;\n          return ret;\n        };\n      } while ($truthy((parts = self.$sysread_noraise(($truthy(($ret_or_1 = integer)) ? ($ret_or_1) : (65536))))));;\n      $a = [self.read_buffer, \"\"], (ret = $a[0]), (self.read_buffer = $a[1]), $a;\n      return ret;\n    }, -1);\n    \n    $def(self, '$readlines', function $$readlines(separator) {\n      var self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      \n      if (separator == null) separator = $gvars[\"/\"];\n      return self.$each_line(separator).$to_a();\n    }, -1);\n    \n    $def(self, '$each', function $$each($a, $b) {\n      var block = $$each.$$p || nil, $post_args, sep, args, self = this, s = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      $$each.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments);\n      \n      if ($post_args.length > 0) sep = $post_args.shift();if (sep == null) sep = $gvars[\"/\"];\n      args = $post_args;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each\", sep].concat($to_a(args)))\n      };\n      while ($truthy((s = $send(self, 'gets', [sep].concat($to_a(args)))))) {\n      Opal.yield1(block, s)\n      };\n      return self;\n    }, -1);\n    \n    $def(self, '$each_byte', function $$each_byte() {\n      var block = $$each_byte.$$p || nil, self = this, s = nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"each_byte\")\n      };\n      while ($truthy((s = self.$getbyte()))) {\n      Opal.yield1(block, s)\n      };\n      return self;\n    });\n    \n    $def(self, '$each_char', function $$each_char() {\n      var block = $$each_char.$$p || nil, self = this, s = nil;\n\n      $$each_char.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"each_char\")\n      };\n      while ($truthy((s = self.$getc()))) {\n      Opal.yield1(block, s)\n      };\n      return self;\n    });\n    \n    $def(self, '$close', $assign_ivar_val(\"closed\", \"both\"));\n    \n    $def(self, '$close_read', function $$close_read() {\n      var self = this;\n\n      if ($eqeq(self.closed, \"write\")) {\n        return (self.closed = \"both\")\n      } else {\n        return (self.closed = \"read\")\n      }\n    });\n    \n    $def(self, '$close_write', function $$close_write() {\n      var self = this;\n\n      if ($eqeq(self.closed, \"read\")) {\n        return (self.closed = \"both\")\n      } else {\n        return (self.closed = \"write\")\n      }\n    });\n    \n    $def(self, '$closed?', function $IO_closed$ques$3() {\n      var self = this;\n\n      return self.closed['$=='](\"both\")\n    });\n    \n    $def(self, '$closed_read?', function $IO_closed_read$ques$4() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.closed['$=='](\"read\")))) {\n        return $ret_or_1\n      } else {\n        return self.closed['$=='](\"both\")\n      }\n    });\n    \n    $def(self, '$closed_write?', function $IO_closed_write$ques$5() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.closed['$=='](\"write\")))) {\n        return $ret_or_1\n      } else {\n        return self.closed['$=='](\"both\")\n      }\n    });\n    \n    $def(self, '$check_writable', function $$check_writable() {\n      var self = this;\n\n      if ($truthy(self['$closed_write?']())) {\n        return $Kernel.$raise($$$('IOError'), \"not opened for writing\")\n      } else {\n        return nil\n      }\n    });\n    \n    $def(self, '$check_readable', function $$check_readable() {\n      var self = this;\n\n      if ($truthy(self['$closed_read?']())) {\n        return $Kernel.$raise($$$('IOError'), \"not opened for reading\")\n      } else {\n        return nil\n      }\n    });\n    $alias(self, \"each_line\", \"each\");\n    return $alias(self, \"eof?\", \"eof\");\n  })('::', null);\n  $const_set('::', 'STDIN', ($gvars.stdin = $$$('IO').$new(0, \"r\")));\n  $const_set('::', 'STDOUT', ($gvars.stdout = $$$('IO').$new(1, \"w\")));\n  $const_set('::', 'STDERR', ($gvars.stderr = $$$('IO').$new(2, \"w\")));\n  var console = Opal.global.console;\n  $$$('STDOUT')['$write_proc='](typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)});\n  $$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)});\n  return ($a = [function(s) { var p = prompt(); if (p !== null) return p + \"\\n\"; return nil; }], $send($$$('STDIN'), 'read_proc=', $a), $a[$a.length - 1]);\n};\n\nOpal.modules[\"opal/regexp_anchors\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('new');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Opal');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $const_set(self, 'REGEXP_START', \"^\");\n    $const_set(self, 'REGEXP_END', \"$\");\n    $const_set(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    $const_set(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u0020\\\\u0022-\\\\u002F\\\\u003A-\\\\u003E\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    $const_set(self, 'INLINE_IDENTIFIER_REGEXP', $$('Regexp').$new(\"[^\" + ($$$(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + \"]*[^\" + ($$$(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + \"]\"));\n    $const_set(self, 'FORBIDDEN_CONST_NAME_CHARS', \"\\\\u0001-\\\\u0020\\\\u0021-\\\\u002F\\\\u003B-\\\\u003F\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    return $const_set(self, 'CONST_NAME_REGEXP', $$('Regexp').$new(\"\" + ($$$(self, 'REGEXP_START')) + \"(::)?[A-Z][^\" + ($$$(self, 'FORBIDDEN_CONST_NAME_CHARS')) + \"]*\" + ($$$(self, 'REGEXP_END'))));\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"opal/mini\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $Object = Opal.Object, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  $Object.$require(\"opal/base\");\n  $Object.$require(\"corelib/nil\");\n  $Object.$require(\"corelib/boolean\");\n  $Object.$require(\"corelib/string\");\n  $Object.$require(\"corelib/comparable\");\n  $Object.$require(\"corelib/enumerable\");\n  $Object.$require(\"corelib/enumerator\");\n  $Object.$require(\"corelib/array\");\n  $Object.$require(\"corelib/hash\");\n  $Object.$require(\"corelib/number\");\n  $Object.$require(\"corelib/range\");\n  $Object.$require(\"corelib/proc\");\n  $Object.$require(\"corelib/method\");\n  $Object.$require(\"corelib/regexp\");\n  $Object.$require(\"corelib/variables\");\n  $Object.$require(\"corelib/io\");\n  return $Object.$require(\"opal/regexp_anchors\");\n};\n\nOpal.modules[\"corelib/kernel/format\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $coerce_to = Opal.coerce_to, $module = Opal.module, $slice = Opal.slice, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $def = Opal.def, $alias = Opal.alias, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('respond_to?,[],==,length,coerce_to?,nil?,to_a,raise,to_int,fetch,Integer,Float,to_ary,to_str,inspect,to_s,format');\n  return (function($base) {\n    var self = $module($base, 'Kernel');\n\n    \n    \n    \n    $def(self, '$format', function $$format(format_string, $a) {\n      var $post_args, args, ary = nil;\n      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;\n\n      \n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      if (($eqeq(args.$length(), 1) && ($truthy(args['$[]'](0)['$respond_to?'](\"to_ary\"))))) {\n        \n        ary = $Opal['$coerce_to?'](args['$[]'](0), $$$('Array'), \"to_ary\");\n        if (!$truthy(ary['$nil?']())) {\n          args = ary.$to_a()\n        };\n      };\n      \n      var result = '',\n          //used for slicing:\n          begin_slice = 0,\n          end_slice,\n          //used for iterating over the format string:\n          i,\n          len = format_string.length,\n          //used for processing field values:\n          arg,\n          str,\n          //used for processing %g and %G fields:\n          exponent,\n          //used for keeping track of width and precision:\n          width,\n          precision,\n          //used for holding temporary values:\n          tmp_num,\n          //used for processing %{} and %<> fileds:\n          hash_parameter_key,\n          closing_brace_char,\n          //used for processing %b, %B, %o, %x, and %X fields:\n          base_number,\n          base_prefix,\n          base_neg_zero_regex,\n          base_neg_zero_digit,\n          //used for processing arguments:\n          next_arg,\n          seq_arg_num = 1,\n          pos_arg_num = 0,\n          //used for keeping track of flags:\n          flags,\n          FNONE  = 0,\n          FSHARP = 1,\n          FMINUS = 2,\n          FPLUS  = 4,\n          FZERO  = 8,\n          FSPACE = 16,\n          FWIDTH = 32,\n          FPREC  = 64,\n          FPREC0 = 128;\n\n      function CHECK_FOR_FLAGS() {\n        if (flags&FWIDTH) { $Kernel.$raise($$$('ArgumentError'), \"flag after width\") }\n        if (flags&FPREC0) { $Kernel.$raise($$$('ArgumentError'), \"flag after precision\") }\n      }\n\n      function CHECK_FOR_WIDTH() {\n        if (flags&FWIDTH) { $Kernel.$raise($$$('ArgumentError'), \"width given twice\") }\n        if (flags&FPREC0) { $Kernel.$raise($$$('ArgumentError'), \"width after precision\") }\n      }\n\n      function GET_NTH_ARG(num) {\n        if (num >= args.length) { $Kernel.$raise($$$('ArgumentError'), \"too few arguments\") }\n        return args[num];\n      }\n\n      function GET_NEXT_ARG() {\n        switch (pos_arg_num) {\n        case -1: $Kernel.$raise($$$('ArgumentError'), \"unnumbered(\" + (seq_arg_num) + \") mixed with numbered\") // raise\n        case -2: $Kernel.$raise($$$('ArgumentError'), \"unnumbered(\" + (seq_arg_num) + \") mixed with named\") // raise\n        }\n        pos_arg_num = seq_arg_num++;\n        return GET_NTH_ARG(pos_arg_num - 1);\n      }\n\n      function GET_POS_ARG(num) {\n        if (pos_arg_num > 0) {\n          $Kernel.$raise($$$('ArgumentError'), \"numbered(\" + (num) + \") after unnumbered(\" + (pos_arg_num) + \")\")\n        }\n        if (pos_arg_num === -2) {\n          $Kernel.$raise($$$('ArgumentError'), \"numbered(\" + (num) + \") after named\")\n        }\n        if (num < 1) {\n          $Kernel.$raise($$$('ArgumentError'), \"invalid index - \" + (num) + \"$\")\n        }\n        pos_arg_num = -1;\n        return GET_NTH_ARG(num - 1);\n      }\n\n      function GET_ARG() {\n        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);\n      }\n\n      function READ_NUM(label) {\n        var num, str = '';\n        for (;; i++) {\n          if (i === len) {\n            $Kernel.$raise($$$('ArgumentError'), \"malformed format string - %*[0-9]\")\n          }\n          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {\n            i--;\n            num = parseInt(str, 10) || 0;\n            if (num > 2147483647) {\n              $Kernel.$raise($$$('ArgumentError'), \"\" + (label) + \" too big\")\n            }\n            return num;\n          }\n          str += format_string.charAt(i);\n        }\n      }\n\n      function READ_NUM_AFTER_ASTER(label) {\n        var arg, num = READ_NUM(label);\n        if (format_string.charAt(i + 1) === '$') {\n          i++;\n          arg = GET_POS_ARG(num);\n        } else {\n          arg = GET_NEXT_ARG();\n        }\n        return (arg).$to_int();\n      }\n\n      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {\n        str = undefined;\n\n        flags = FNONE;\n        width = -1;\n        precision = -1;\n        next_arg = undefined;\n\n        end_slice = i;\n\n        i++;\n\n        switch (format_string.charAt(i)) {\n        case '%':\n          begin_slice = i;\n          // no-break\n        case '':\n        case '\\n':\n        case '\\0':\n          i++;\n          continue;\n        }\n\n        format_sequence: for (; i < len; i++) {\n          switch (format_string.charAt(i)) {\n\n          case ' ':\n            CHECK_FOR_FLAGS();\n            flags |= FSPACE;\n            continue format_sequence;\n\n          case '#':\n            CHECK_FOR_FLAGS();\n            flags |= FSHARP;\n            continue format_sequence;\n\n          case '+':\n            CHECK_FOR_FLAGS();\n            flags |= FPLUS;\n            continue format_sequence;\n\n          case '-':\n            CHECK_FOR_FLAGS();\n            flags |= FMINUS;\n            continue format_sequence;\n\n          case '0':\n            CHECK_FOR_FLAGS();\n            flags |= FZERO;\n            continue format_sequence;\n\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            tmp_num = READ_NUM('width');\n            if (format_string.charAt(i + 1) === '$') {\n              if (i + 2 === len) {\n                str = '%';\n                i++;\n                break format_sequence;\n              }\n              if (next_arg !== undefined) {\n                $Kernel.$raise($$$('ArgumentError'), \"value given twice - %\" + (tmp_num) + \"$\")\n              }\n              next_arg = GET_POS_ARG(tmp_num);\n              i++;\n            } else {\n              CHECK_FOR_WIDTH();\n              flags |= FWIDTH;\n              width = tmp_num;\n            }\n            continue format_sequence;\n\n          case '<':\n          case '\\{':\n            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\\}');\n            hash_parameter_key = '';\n\n            i++;\n\n            for (;; i++) {\n              if (i === len) {\n                $Kernel.$raise($$$('ArgumentError'), \"malformed name - unmatched parenthesis\")\n              }\n              if (format_string.charAt(i) === closing_brace_char) {\n\n                if (pos_arg_num > 0) {\n                  $Kernel.$raise($$$('ArgumentError'), \"named \" + (hash_parameter_key) + \" after unnumbered(\" + (pos_arg_num) + \")\")\n                }\n                if (pos_arg_num === -1) {\n                  $Kernel.$raise($$$('ArgumentError'), \"named \" + (hash_parameter_key) + \" after numbered\")\n                }\n                pos_arg_num = -2;\n\n                if (args[0] === undefined || !args[0].$$is_hash) {\n                  $Kernel.$raise($$$('ArgumentError'), \"one hash required\")\n                }\n\n                next_arg = (args[0]).$fetch(hash_parameter_key);\n\n                if (closing_brace_char === '>') {\n                  continue format_sequence;\n                } else {\n                  str = next_arg.toString();\n                  if (precision !== -1) { str = str.slice(0, precision); }\n                  if (flags&FMINUS) {\n                    while (str.length < width) { str = str + ' '; }\n                  } else {\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                  break format_sequence;\n                }\n              }\n              hash_parameter_key += format_string.charAt(i);\n            }\n            // raise\n\n          case '*':\n            i++;\n            CHECK_FOR_WIDTH();\n            flags |= FWIDTH;\n            width = READ_NUM_AFTER_ASTER('width');\n            if (width < 0) {\n              flags |= FMINUS;\n              width = -width;\n            }\n            continue format_sequence;\n\n          case '.':\n            if (flags&FPREC0) {\n              $Kernel.$raise($$$('ArgumentError'), \"precision given twice\")\n            }\n            flags |= FPREC|FPREC0;\n            precision = 0;\n            i++;\n            if (format_string.charAt(i) === '*') {\n              i++;\n              precision = READ_NUM_AFTER_ASTER('precision');\n              if (precision < 0) {\n                flags &= ~FPREC;\n              }\n              continue format_sequence;\n            }\n            precision = READ_NUM('precision');\n            continue format_sequence;\n\n          case 'd':\n          case 'i':\n          case 'u':\n            arg = $Kernel.$Integer(GET_ARG());\n            if (arg >= 0) {\n              str = arg.toString();\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              str = (-arg).toString();\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                str = '-' + str;\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - 1) { str = '0' + str; }\n                  str = '-' + str;\n                } else {\n                  str = '-' + str;\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            }\n            break format_sequence;\n\n          case 'b':\n          case 'B':\n          case 'o':\n          case 'x':\n          case 'X':\n            switch (format_string.charAt(i)) {\n            case 'b':\n            case 'B':\n              base_number = 2;\n              base_prefix = '0b';\n              base_neg_zero_regex = /^1+/;\n              base_neg_zero_digit = '1';\n              break;\n            case 'o':\n              base_number = 8;\n              base_prefix = '0';\n              base_neg_zero_regex = /^3?7+/;\n              base_neg_zero_digit = '7';\n              break;\n            case 'x':\n            case 'X':\n              base_number = 16;\n              base_prefix = '0x';\n              base_neg_zero_regex = /^f+/;\n              base_neg_zero_digit = 'f';\n              break;\n            }\n            arg = $Kernel.$Integer(GET_ARG());\n            if (arg >= 0) {\n              str = arg.toString(base_number);\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }\n                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              if (flags&FPLUS || flags&FSPACE) {\n                str = (-arg).toString(base_number);\n                while (str.length < precision) { str = '0' + str; }\n                if (flags&FMINUS) {\n                  if (flags&FSHARP) { str = base_prefix + str; }\n                  str = '-' + str;\n                  while (str.length < width) { str = str + ' '; }\n                } else {\n                  if (flags&FZERO && precision === -1) {\n                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    str = '-' + str;\n                  } else {\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    str = '-' + str;\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                }\n              } else {\n                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);\n                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }\n                if (flags&FMINUS) {\n                  str = '..' + str;\n                  if (flags&FSHARP) { str = base_prefix + str; }\n                  while (str.length < width) { str = str + ' '; }\n                } else {\n                  if (flags&FZERO && precision === -1) {\n                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }\n                    str = '..' + str;\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                  } else {\n                    str = '..' + str;\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                }\n              }\n            }\n            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {\n              str = str.toUpperCase();\n            }\n            break format_sequence;\n\n          case 'f':\n          case 'e':\n          case 'E':\n          case 'g':\n          case 'G':\n            arg = $Kernel.$Float(GET_ARG());\n            if (arg >= 0 || isNaN(arg)) {\n              if (arg === Infinity) {\n                str = 'Inf';\n              } else {\n                switch (format_string.charAt(i)) {\n                case 'f':\n                  str = arg.toFixed(precision === -1 ? 6 : precision);\n                  break;\n                case 'e':\n                case 'E':\n                  str = arg.toExponential(precision === -1 ? 6 : precision);\n                  break;\n                case 'g':\n                case 'G':\n                  str = arg.toExponential();\n                  exponent = parseInt(str.split('e')[1], 10);\n                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {\n                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);\n                  }\n                  break;\n                }\n              }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              if (arg === -Infinity) {\n                str = 'Inf';\n              } else {\n                switch (format_string.charAt(i)) {\n                case 'f':\n                  str = (-arg).toFixed(precision === -1 ? 6 : precision);\n                  break;\n                case 'e':\n                case 'E':\n                  str = (-arg).toExponential(precision === -1 ? 6 : precision);\n                  break;\n                case 'g':\n                case 'G':\n                  str = (-arg).toExponential();\n                  exponent = parseInt(str.split('e')[1], 10);\n                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {\n                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);\n                  }\n                  break;\n                }\n              }\n              if (flags&FMINUS) {\n                str = '-' + str;\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && arg !== -Infinity) {\n                  while (str.length < width - 1) { str = '0' + str; }\n                  str = '-' + str;\n                } else {\n                  str = '-' + str;\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            }\n            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {\n              str = str.toUpperCase();\n            }\n            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');\n            break format_sequence;\n\n          case 'a':\n          case 'A':\n            // Not implemented because there are no specs for this field type.\n            $Kernel.$raise($$$('NotImplementedError'), \"`A` and `a` format field types are not implemented in Opal yet\")\n            // raise\n\n          case 'c':\n            arg = GET_ARG();\n            if ((arg)['$respond_to?'](\"to_ary\")) { arg = (arg).$to_ary()[0]; }\n            if ((arg)['$respond_to?'](\"to_str\")) {\n              str = (arg).$to_str();\n            } else {\n              str = String.fromCharCode($coerce_to(arg, $$$('Integer'), 'to_int'));\n            }\n            if (str.length !== 1) {\n              $Kernel.$raise($$$('ArgumentError'), \"%c requires a character\")\n            }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          case 'p':\n            str = (GET_ARG()).$inspect();\n            if (precision !== -1) { str = str.slice(0, precision); }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          case 's':\n            str = (GET_ARG()).$to_s();\n            if (precision !== -1) { str = str.slice(0, precision); }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          default:\n            $Kernel.$raise($$$('ArgumentError'), \"malformed format string - %\" + (format_string.charAt(i)))\n          }\n        }\n\n        if (str === undefined) {\n          $Kernel.$raise($$$('ArgumentError'), \"malformed format string - %\")\n        }\n\n        result += format_string.slice(begin_slice, end_slice) + str;\n        begin_slice = i + 1;\n      }\n\n      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {\n        $Kernel.$raise($$$('ArgumentError'), \"too many arguments for format string\")\n      }\n\n      return result + format_string.slice(begin_slice);\n    ;\n    }, -2);\n    return $alias(self, \"sprintf\", \"format\");\n  })('::')\n};\n\nOpal.modules[\"corelib/string/encoding\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $send = Opal.send, $defs = Opal.defs, $eqeq = Opal.eqeq, $def = Opal.def, $return_ivar = Opal.return_ivar, $return_val = Opal.return_val, $slice = Opal.slice, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $rb_lt = Opal.rb_lt, $a, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,+,[],clone,initialize,new,instance_eval,to_proc,each,const_set,tr,==,default_external,attr_accessor,singleton_class,attr_reader,raise,register,length,bytes,force_encoding,dup,bytesize,enum_for,each_byte,to_a,each_char,each_codepoint,coerce_to!,find,<,default_external=');\n  \n  self.$require(\"corelib/string\");\n  (function($base, $super) {\n    var self = $klass($base, $super, 'Encoding');\n\n    var $proto = self.$$prototype;\n\n    $proto.name = $proto.dummy = nil;\n    \n    $defs(self, '$register', function $$register(name, options) {\n      var block = $$register.$$p || nil, self = this, names = nil, $ret_or_1 = nil, ascii = nil, dummy = nil, encoding = nil, register = nil;\n\n      $$register.$$p = null;\n      \n      ;\n      if (options == null) options = $hash2([], {});\n      names = $rb_plus([name], ($truthy(($ret_or_1 = options['$[]'](\"aliases\"))) ? ($ret_or_1) : ([])));\n      ascii = ($truthy(($ret_or_1 = options['$[]'](\"ascii\"))) && ($ret_or_1));\n      dummy = ($truthy(($ret_or_1 = options['$[]'](\"dummy\"))) && ($ret_or_1));\n      if ($truthy(options['$[]'](\"inherits\"))) {\n        \n        encoding = options['$[]'](\"inherits\").$clone();\n        encoding.$initialize(name, names, ascii, dummy);\n      } else {\n        encoding = self.$new(name, names, ascii, dummy)\n      };\n      if ((block !== nil)) {\n        $send(encoding, 'instance_eval', [], block.$to_proc())\n      };\n      register = Opal.encodings;\n      return $send(names, 'each', [], function $$1(encoding_name){var self = $$1.$$s == null ? this : $$1.$$s;\n\n        \n        if (encoding_name == null) encoding_name = nil;\n        self.$const_set(encoding_name.$tr(\"-\", \"_\"), encoding);\n        return register[encoding_name] = encoding;}, {$$s: self});\n    }, -2);\n    $defs(self, '$find', function $$find(name) {\n      var self = this;\n\n      \n      if ($eqeq(name, \"default_external\")) {\n        return self.$default_external()\n      };\n      return Opal.find_encoding(name);;\n    });\n    self.$singleton_class().$attr_accessor(\"default_external\");\n    self.$attr_reader(\"name\", \"names\");\n    \n    $def(self, '$initialize', function $$initialize(name, names, ascii, dummy) {\n      var self = this;\n\n      \n      self.name = name;\n      self.names = names;\n      self.ascii = ascii;\n      return (self.dummy = dummy);\n    });\n    \n    $def(self, '$ascii_compatible?', $return_ivar(\"ascii\"));\n    \n    $def(self, '$dummy?', $return_ivar(\"dummy\"));\n    \n    $def(self, '$binary?', $return_val(false));\n    \n    $def(self, '$to_s', $return_ivar(\"name\"));\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"#<Encoding:\" + (self.name) + (($truthy(self.dummy) ? (\" (dummy)\") : nil)) + \">\"\n    });\n    \n    $def(self, '$charsize', function $$charsize(string) {\n      \n      \n      var len = 0;\n      for (var i = 0, length = string.length; i < length; i++) {\n        var charcode = string.charCodeAt(i);\n        if (!(charcode >= 0xD800 && charcode <= 0xDBFF)) {\n          len++;\n        }\n      }\n      return len;\n    \n    });\n    \n    $def(self, '$each_char', function $$each_char(string) {\n      var block = $$each_char.$$p || nil;\n\n      $$each_char.$$p = null;\n      \n      ;\n      \n      var low_surrogate = \"\";\n      for (var i = 0, length = string.length; i < length; i++) {\n        var charcode = string.charCodeAt(i);\n        var chr = string.charAt(i);\n        if (charcode >= 0xDC00 && charcode <= 0xDFFF) {\n          low_surrogate = chr;\n          continue;\n        }\n        else if (charcode >= 0xD800 && charcode <= 0xDBFF) {\n          chr = low_surrogate + chr;\n        }\n        if (string.encoding.name != \"UTF-8\") {\n          chr = new String(chr);\n          chr.encoding = string.encoding;\n        }\n        Opal.yield1(block, chr);\n      }\n    ;\n    });\n    \n    $def(self, '$each_byte', function $$each_byte($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return $Kernel.$raise($$$('NotImplementedError'));\n    }, -1);\n    \n    $def(self, '$bytesize', function $$bytesize($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return $Kernel.$raise($$$('NotImplementedError'));\n    }, -1);\n    $klass('::', $$$('StandardError'), 'EncodingError');\n    return ($klass('::', $$$('EncodingError'), 'CompatibilityError'), nil);\n  })('::', null);\n  $send($$$('Encoding'), 'register', [\"UTF-8\", $hash2([\"aliases\", \"ascii\"], {\"aliases\": [\"CP65001\"], \"ascii\": true})], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;\n\n    \n    \n    $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      // Taken from: https://github.com/feross/buffer/blob/f52dffd9df0445b93c0c9065c2f8f0f46b2c729a/index.js#L1954-L2032\n      var units = Infinity;\n      var codePoint;\n      var length = string.length;\n      var leadSurrogate = null;\n\n      for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n          // last char was a lead\n          if (!leadSurrogate) {\n            // no lead yet\n            if (codePoint > 0xDBFF) {\n              // unexpected trail\n              if ((units -= 3) > -1) {\n                Opal.yield1(block, 0xEF);\n                Opal.yield1(block, 0xBF);\n                Opal.yield1(block, 0xBD);\n              }\n              continue;\n            } else if (i + 1 === length) {\n              // unpaired lead\n              if ((units -= 3) > -1) {\n                Opal.yield1(block, 0xEF);\n                Opal.yield1(block, 0xBF);\n                Opal.yield1(block, 0xBD);\n              }\n              continue;\n            }\n\n            // valid lead\n            leadSurrogate = codePoint;\n\n            continue;\n          }\n\n          // 2 leads in a row\n          if (codePoint < 0xDC00) {\n            if ((units -= 3) > -1) {\n              Opal.yield1(block, 0xEF);\n              Opal.yield1(block, 0xBF);\n              Opal.yield1(block, 0xBD);\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n\n          // valid surrogate pair\n          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) {\n          // valid bmp char, but last char was a lead\n          if ((units -= 3) > -1) {\n            Opal.yield1(block, 0xEF);\n            Opal.yield1(block, 0xBF);\n            Opal.yield1(block, 0xBD);\n          }\n        }\n\n        leadSurrogate = null;\n\n        // encode utf8\n        if (codePoint < 0x80) {\n          if ((units -= 1) < 0) break;\n          Opal.yield1(block, codePoint);\n        } else if (codePoint < 0x800) {\n          if ((units -= 2) < 0) break;\n          Opal.yield1(block, codePoint >> 0x6 | 0xC0);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n          if ((units -= 3) < 0) break;\n          Opal.yield1(block, codePoint >> 0xC | 0xE0);\n          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n          if ((units -= 4) < 0) break;\n          Opal.yield1(block, codePoint >> 0x12 | 0xF0);\n          Opal.yield1(block, codePoint >> 0xC & 0x3F | 0x80);\n          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else {\n          // Invalid code point\n        }\n      }\n    ;\n    });\n    return $def(self, '$bytesize', function $$bytesize(string) {\n      \n      return string.$bytes().$length()\n    });}, {$$s: self});\n  $send($$$('Encoding'), 'register', [\"UTF-16LE\"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;\n\n    \n    \n    $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    });\n    return $def(self, '$bytesize', function $$bytesize(string) {\n      \n      return string.length * 2;\n    });}, {$$s: self});\n  $send($$$('Encoding'), 'register', [\"UTF-16BE\", $hash2([\"inherits\"], {\"inherits\": $$$($$$('Encoding'), 'UTF_16LE')})], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;\n\n    return $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code >> 8);\n        Opal.yield1(block, code & 0xff);\n      }\n    ;\n    })}, {$$s: self});\n  $send($$$('Encoding'), 'register', [\"UTF-32LE\"], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;\n\n    \n    \n    $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n        Opal.yield1(block, 0);\n        Opal.yield1(block, 0);\n      }\n    ;\n    });\n    return $def(self, '$bytesize', function $$bytesize(string) {\n      \n      return string.length * 4;\n    });}, {$$s: self});\n  $send($$$('Encoding'), 'register', [\"UTF-32BE\", $hash2([\"inherits\"], {\"inherits\": $$$($$$('Encoding'), 'UTF_32LE')})], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;\n\n    return $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, 0);\n        Opal.yield1(block, 0);\n        Opal.yield1(block, code >> 8);\n        Opal.yield1(block, code & 0xff);\n      }\n    ;\n    })}, {$$s: self});\n  $send($$$('Encoding'), 'register', [\"ASCII-8BIT\", $hash2([\"aliases\", \"ascii\"], {\"aliases\": [\"BINARY\"], \"ascii\": true})], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;\n\n    \n    \n    $def(self, '$each_char', function $$each_char(string) {\n      var block = $$each_char.$$p || nil;\n\n      $$each_char.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var chr = new String(string.charAt(i));\n        chr.encoding = string.encoding;\n        Opal.yield1(block, chr);\n      }\n    ;\n    });\n    \n    $def(self, '$charsize', function $$charsize(string) {\n      \n      return string.length;\n    });\n    \n    $def(self, '$each_byte', function $$each_byte(string) {\n      var block = $$each_byte.$$p || nil;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n        Opal.yield1(block, code & 0xff);\n      }\n    ;\n    });\n    \n    $def(self, '$bytesize', function $$bytesize(string) {\n      \n      return string.length;\n    });\n    return $def(self, '$binary?', $return_val(true));}, {$$s: self});\n  $$$('Encoding').$register(\"ISO-8859-1\", $hash2([\"aliases\", \"ascii\", \"inherits\"], {\"aliases\": [\"ISO8859-1\"], \"ascii\": true, \"inherits\": $$$($$$('Encoding'), 'ASCII_8BIT')}));\n  $$$('Encoding').$register(\"US-ASCII\", $hash2([\"aliases\", \"ascii\", \"inherits\"], {\"aliases\": [\"ASCII\"], \"ascii\": true, \"inherits\": $$$($$$('Encoding'), 'ASCII_8BIT')}));\n  (function($base, $super) {\n    var self = $klass($base, $super, 'String');\n\n    var $proto = self.$$prototype;\n\n    $proto.internal_encoding = $proto.bytes = $proto.encoding = nil;\n    \n    self.$attr_reader(\"encoding\");\n    self.$attr_reader(\"internal_encoding\");\n    Opal.prop(String.prototype, 'bytes', nil);\n    Opal.prop(String.prototype, 'encoding', $$$($$$('Encoding'), 'UTF_8'));\n    Opal.prop(String.prototype, 'internal_encoding', $$$($$$('Encoding'), 'UTF_8'));\n    \n    $def(self, '$b', function $$b() {\n      var self = this;\n\n      return self.$dup().$force_encoding(\"binary\")\n    });\n    \n    $def(self, '$bytesize', function $$bytesize() {\n      var self = this;\n\n      return self.internal_encoding.$bytesize(self)\n    });\n    \n    $def(self, '$each_byte', function $$each_byte() {\n      var block = $$each_byte.$$p || nil, self = this;\n\n      $$each_byte.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_byte\"], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;\n\n          return self.$bytesize()}, {$$s: self})\n      };\n      $send(self.internal_encoding, 'each_byte', [self], block.$to_proc());\n      return self;\n    });\n    \n    $def(self, '$bytes', function $$bytes() {\n      var self = this, $ret_or_1 = nil;\n\n      \n      \n      if (typeof self === 'string') {\n        return (new String(self)).$each_byte().$to_a();\n      }\n    ;\n      self.bytes = ($truthy(($ret_or_1 = self.bytes)) ? ($ret_or_1) : (self.$each_byte().$to_a()));\n      return self.bytes.$dup();\n    });\n    \n    $def(self, '$each_char', function $$each_char() {\n      var block = $$each_char.$$p || nil, self = this;\n\n      $$each_char.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return $send(self, 'enum_for', [\"each_char\"], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;\n\n          return self.$length()}, {$$s: self})\n      };\n      $send(self.encoding, 'each_char', [self], block.$to_proc());\n      return self;\n    });\n    \n    $def(self, '$chars', function $$chars() {\n      var block = $$chars.$$p || nil, self = this;\n\n      $$chars.$$p = null;\n      \n      ;\n      if (!$truthy(block)) {\n        return self.$each_char().$to_a()\n      };\n      return $send(self, 'each_char', [], block.$to_proc());\n    });\n    \n    $def(self, '$each_codepoint', function $$each_codepoint() {\n      var block = $$each_codepoint.$$p || nil, self = this;\n\n      $$each_codepoint.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"each_codepoint\")\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        Opal.yield1(block, self.codePointAt(i));\n      }\n    ;\n      return self;\n    });\n    \n    $def(self, '$codepoints', function $$codepoints() {\n      var block = $$codepoints.$$p || nil, self = this;\n\n      $$codepoints.$$p = null;\n      \n      ;\n      if ((block !== nil)) {\n        return $send(self, 'each_codepoint', [], block.$to_proc())\n      };\n      return self.$each_codepoint().$to_a();\n    });\n    \n    $def(self, '$encode', function $$encode(encoding) {\n      var self = this;\n\n      return Opal.enc(self, encoding);\n    });\n    \n    $def(self, '$force_encoding', function $$force_encoding(encoding) {\n      var self = this;\n\n      \n      var str = self;\n\n      if (encoding === str.encoding) { return str; }\n\n      encoding = $Opal['$coerce_to!'](encoding, $$$('String'), \"to_s\");\n      encoding = $$$('Encoding').$find(encoding);\n\n      if (encoding === str.encoding) { return str; }\n\n      str = Opal.set_encoding(str, encoding);\n\n      return str;\n    \n    });\n    \n    $def(self, '$getbyte', function $$getbyte(idx) {\n      var self = this, string_bytes = nil;\n\n      \n      string_bytes = self.$bytes();\n      idx = $Opal['$coerce_to!'](idx, $$$('Integer'), \"to_int\");\n      if ($truthy($rb_lt(string_bytes.$length(), idx))) {\n        return nil\n      };\n      return string_bytes['$[]'](idx);\n    });\n    \n    $def(self, '$initialize_copy', function $$initialize_copy(other) {\n      \n      return \"\\n\" + \"      self.encoding = other.encoding;\\n\" + \"      self.internal_encoding = other.internal_encoding;\\n\" + \"    \"\n    });\n    return $def(self, '$valid_encoding?', $return_val(true));\n  })('::', null);\n  return ($a = [$$$($$('Encoding'), 'UTF_8')], $send($$$('Encoding'), 'default_external=', $a), $a[$a.length - 1]);\n};\n\nOpal.modules[\"corelib/math\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $type_error = Opal.type_error, $module = Opal.module, $const_set = Opal.const_set, $Class = Opal.Class, $slice = Opal.slice, $Kernel = Opal.Kernel, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $rb_divide = Opal.rb_divide, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('new,raise,Float,Integer,module_function,each,define_method,checked,float!,===,gamma,-,integer!,/,infinite?');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Math');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $const_set(self, 'E', Math.E);\n    $const_set(self, 'PI', Math.PI);\n    $const_set(self, 'DomainError', $Class.$new($$$('StandardError')));\n    $defs(self, '$checked', function $$checked(method, $a) {\n      var $post_args, args;\n\n      \n      $post_args = $slice(arguments, 1);\n      args = $post_args;\n      \n      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {\n        return NaN;\n      }\n\n      var result = Math[method].apply(null, args);\n\n      if (isNaN(result)) {\n        $Kernel.$raise($$('DomainError'), \"Numerical argument is out of domain - \\\"\" + (method) + \"\\\"\");\n      }\n\n      return result;\n    ;\n    }, -2);\n    $defs(self, '$float!', function $Math_float$excl$1(value) {\n      \n      try {\n        return $Kernel.$Float(value)\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('ArgumentError')])) {\n          try {\n            return $Kernel.$raise($type_error(value, $$$('Float')))\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n    });\n    $defs(self, '$integer!', function $Math_integer$excl$2(value) {\n      \n      try {\n        return $Kernel.$Integer(value)\n      } catch ($err) {\n        if (Opal.rescue($err, [$$$('ArgumentError')])) {\n          try {\n            return $Kernel.$raise($type_error(value, $$$('Integer')))\n          } finally { Opal.pop_exception(); }\n        } else { throw $err; }\n      }\n    });\n    self.$module_function();\n    if (!$truthy((typeof(Math.erf) !== \"undefined\"))) {\n      \n      Opal.prop(Math, 'erf', function(x) {\n        var A1 =  0.254829592,\n            A2 = -0.284496736,\n            A3 =  1.421413741,\n            A4 = -1.453152027,\n            A5 =  1.061405429,\n            P  =  0.3275911;\n\n        var sign = 1;\n\n        if (x < 0) {\n            sign = -1;\n        }\n\n        x = Math.abs(x);\n\n        var t = 1.0 / (1.0 + P * x);\n        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);\n\n        return sign * y;\n      });\n    \n    };\n    if (!$truthy((typeof(Math.erfc) !== \"undefined\"))) {\n      \n      Opal.prop(Math, 'erfc', function(x) {\n        var z = Math.abs(x),\n            t = 1.0 / (0.5 * z + 1.0);\n\n        var A1 = t * 0.17087277 + -0.82215223,\n            A2 = t * A1 + 1.48851587,\n            A3 = t * A2 + -1.13520398,\n            A4 = t * A3 + 0.27886807,\n            A5 = t * A4 + -0.18628806,\n            A6 = t * A5 + 0.09678418,\n            A7 = t * A6 + 0.37409196,\n            A8 = t * A7 + 1.00002368,\n            A9 = t * A8,\n            A10 = -z * z - 1.26551223 + A9;\n\n        var a = t * Math.exp(A10);\n\n        if (x < 0.0) {\n          return 2.0 - a;\n        }\n        else {\n          return a;\n        }\n      });\n    \n    };\n    $send([\"acos\", \"acosh\", \"asin\", \"asinh\", \"atan\", \"atanh\", \"cbrt\", \"cos\", \"cosh\", \"erf\", \"erfc\", \"exp\", \"sin\", \"sinh\", \"sqrt\", \"tanh\"], 'each', [], function $Math$3(method){var self = $Math$3.$$s == null ? this : $Math$3.$$s;\n\n      \n      if (method == null) method = nil;\n      return $send(self, 'define_method', [method], function $$4(x){\n        \n        if (x == null) x = nil;\n        return $$$('Math').$checked(method, $$$('Math')['$float!'](x));});}, {$$s: self});\n    \n    $def(self, '$atan2', function $$atan2(y, x) {\n      \n      return $$$('Math').$checked(\"atan2\", $$$('Math')['$float!'](y), $$$('Math')['$float!'](x))\n    });\n    \n    $def(self, '$hypot', function $$hypot(x, y) {\n      \n      return $$$('Math').$checked(\"hypot\", $$$('Math')['$float!'](x), $$$('Math')['$float!'](y))\n    });\n    \n    $def(self, '$frexp', function $$frexp(x) {\n      \n      \n      x = $$('Math')['$float!'](x);\n      \n      if (isNaN(x)) {\n        return [NaN, 0];\n      }\n\n      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,\n          frac = x / Math.pow(2, ex);\n\n      return [frac, ex];\n    ;\n    });\n    \n    $def(self, '$gamma', function $$gamma(n) {\n      \n      \n      n = $$('Math')['$float!'](n);\n      \n      var i, t, x, value, result, twoN, threeN, fourN, fiveN;\n\n      var G = 4.7421875;\n\n      var P = [\n         0.99999999999999709182,\n         57.156235665862923517,\n        -59.597960355475491248,\n         14.136097974741747174,\n        -0.49191381609762019978,\n         0.33994649984811888699e-4,\n         0.46523628927048575665e-4,\n        -0.98374475304879564677e-4,\n         0.15808870322491248884e-3,\n        -0.21026444172410488319e-3,\n         0.21743961811521264320e-3,\n        -0.16431810653676389022e-3,\n         0.84418223983852743293e-4,\n        -0.26190838401581408670e-4,\n         0.36899182659531622704e-5\n      ];\n\n\n      if (isNaN(n)) {\n        return NaN;\n      }\n\n      if (n === 0 && 1 / n < 0) {\n        return -Infinity;\n      }\n\n      if (n === -1 || n === -Infinity) {\n        $Kernel.$raise($$('DomainError'), \"Numerical argument is out of domain - \\\"gamma\\\"\");\n      }\n\n      if ($$('Integer')['$==='](n)) {\n        if (n <= 0) {\n          return isFinite(n) ? Infinity : NaN;\n        }\n\n        if (n > 171) {\n          return Infinity;\n        }\n\n        value  = n - 2;\n        result = n - 1;\n\n        while (value > 1) {\n          result *= value;\n          value--;\n        }\n\n        if (result == 0) {\n          result = 1;\n        }\n\n        return result;\n      }\n\n      if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * $$$('Math').$gamma($rb_minus(1, n)));\n      }\n\n      if (n >= 171.35) {\n        return Infinity;\n      }\n\n      if (n > 85.0) {\n        twoN   = n * n;\n        threeN = twoN * n;\n        fourN  = threeN * n;\n        fiveN  = fourN * n;\n\n        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *\n          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -\n          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +\n          5246819 / (75246796800 * fiveN * n));\n      }\n\n      n -= 1;\n      x  = P[0];\n\n      for (i = 1; i < P.length; ++i) {\n        x += P[i] / (n + i);\n      }\n\n      t = n + G + 0.5;\n\n      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n    ;\n    });\n    \n    $def(self, '$ldexp', function $$ldexp(mantissa, exponent) {\n      \n      \n      mantissa = $$('Math')['$float!'](mantissa);\n      exponent = $$('Math')['$integer!'](exponent);\n      \n      if (isNaN(exponent)) {\n        $Kernel.$raise($$$('RangeError'), \"float NaN out of range of integer\");\n      }\n\n      return mantissa * Math.pow(2, exponent);\n    ;\n    });\n    \n    $def(self, '$lgamma', function $$lgamma(n) {\n      \n      \n      if (n == -1) {\n        return [Infinity, 1];\n      }\n      else {\n        return [Math.log(Math.abs($$$('Math').$gamma(n))), $$$('Math').$gamma(n) < 0 ? -1 : 1];\n      }\n    \n    });\n    \n    $def(self, '$log', function $$log(x, base) {\n      \n      \n      ;\n      if ($eqeqeq($$$('String'), x)) {\n        $Kernel.$raise($type_error(x, $$$('Float')))\n      };\n      if ($truthy(base == null)) {\n        return $$$('Math').$checked(\"log\", $$$('Math')['$float!'](x))\n      } else {\n        \n        if ($eqeqeq($$$('String'), base)) {\n          $Kernel.$raise($type_error(base, $$$('Float')))\n        };\n        return $rb_divide($$$('Math').$checked(\"log\", $$$('Math')['$float!'](x)), $$$('Math').$checked(\"log\", $$$('Math')['$float!'](base)));\n      };\n    }, -2);\n    \n    $def(self, '$log10', function $$log10(x) {\n      \n      \n      if ($eqeqeq($$$('String'), x)) {\n        $Kernel.$raise($type_error(x, $$$('Float')))\n      };\n      return $$$('Math').$checked(\"log10\", $$$('Math')['$float!'](x));\n    });\n    \n    $def(self, '$log2', function $$log2(x) {\n      \n      \n      if ($eqeqeq($$$('String'), x)) {\n        $Kernel.$raise($type_error(x, $$$('Float')))\n      };\n      return $$$('Math').$checked(\"log2\", $$$('Math')['$float!'](x));\n    });\n    return $def(self, '$tan', function $$tan(x) {\n      \n      \n      x = $$$('Math')['$float!'](x);\n      if ($truthy(x['$infinite?']())) {\n        return $$$($$$('Float'), 'NAN')\n      };\n      return $$$('Math').$checked(\"tan\", $$$('Math')['$float!'](x));\n    });\n  })('::', $nesting)\n};\n\nOpal.modules[\"corelib/complex/base\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def, $klass = Opal.klass, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('new,from_string');\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $def(self, '$Complex', function $$Complex(real, imag) {\n      \n      \n      if (imag == null) imag = nil;\n      if ($truthy(imag)) {\n        return $$('Complex').$new(real, imag)\n      } else {\n        return $$('Complex').$new(real, 0)\n      };\n    }, -2)\n  })('::', $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $def(self, '$to_c', function $$to_c() {\n      var self = this;\n\n      return $$('Complex').$from_string(self)\n    })\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/complex\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $defs = Opal.defs, $rb_times = Opal.rb_times, $def = Opal.def, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $neqeq = Opal.neqeq, $return_val = Opal.return_val, $const_set = Opal.const_set, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,real?,===,raise,new,*,cos,sin,attr_reader,freeze,class,==,real,imag,Complex,-@,+,__coerced__,-,nan?,/,conj,abs2,quo,polar,exp,log,>,!=,divmod,**,hypot,atan2,lcm,denominator,finite?,infinite?,numerator,abs,arg,rationalize,to_f,to_i,to_r,inspect,zero?,positive?,Rational,rect,angle');\n  \n  self.$require(\"corelib/numeric\");\n  self.$require(\"corelib/complex/base\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Complex');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.real = $proto.imag = nil;\n    \n    $defs(self, '$rect', function $$rect(real, imag) {\n      var self = this;\n\n      \n      if (imag == null) imag = 0;\n      if (!((($eqeqeq($$$('Numeric'), real) && ($truthy(real['$real?']()))) && ($eqeqeq($$$('Numeric'), imag))) && ($truthy(imag['$real?']())))) {\n        $Kernel.$raise($$$('TypeError'), \"not a real\")\n      };\n      return self.$new(real, imag);\n    }, -2);\n    $defs(self, '$polar', function $$polar(r, theta) {\n      var self = this;\n\n      \n      if (theta == null) theta = 0;\n      if (!((($eqeqeq($$$('Numeric'), r) && ($truthy(r['$real?']()))) && ($eqeqeq($$$('Numeric'), theta))) && ($truthy(theta['$real?']())))) {\n        $Kernel.$raise($$$('TypeError'), \"not a real\")\n      };\n      return self.$new($rb_times(r, $$$('Math').$cos(theta)), $rb_times(r, $$$('Math').$sin(theta)));\n    }, -2);\n    self.$attr_reader(\"real\", \"imag\");\n    \n    $def(self, '$initialize', function $$initialize(real, imag) {\n      var self = this;\n\n      \n      if (imag == null) imag = 0;\n      self.real = real;\n      self.imag = imag;\n      return self.$freeze();\n    }, -2);\n    \n    $def(self, '$coerce', function $$coerce(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        return [other, self]\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        return [$$$('Complex').$new(other, 0), self]\n      } else {\n        return $Kernel.$raise($$$('TypeError'), \"\" + (other.$class()) + \" can't be coerced into Complex\")\n      }\n    });\n    \n    $def(self, '$==', function $Complex_$eq_eq$1(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        if ($truthy(($ret_or_1 = self.real['$=='](other.$real())))) {\n          return self.imag['$=='](other.$imag())\n        } else {\n          return $ret_or_1\n        }\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        if ($truthy(($ret_or_1 = self.real['$=='](other)))) {\n          return self.imag['$=='](0)\n        } else {\n          return $ret_or_1\n        }\n      } else {\n        return other['$=='](self)\n      }\n    });\n    \n    $def(self, '$-@', function $Complex_$minus$$2() {\n      var self = this;\n\n      return $Kernel.$Complex(self.real['$-@'](), self.imag['$-@']())\n    });\n    \n    $def(self, '$+', function $Complex_$plus$3(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        return $Kernel.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        return $Kernel.$Complex($rb_plus(self.real, other), self.imag)\n      } else {\n        return self.$__coerced__(\"+\", other)\n      }\n    });\n    \n    $def(self, '$-', function $Complex_$minus$4(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        return $Kernel.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        return $Kernel.$Complex($rb_minus(self.real, other), self.imag)\n      } else {\n        return self.$__coerced__(\"-\", other)\n      }\n    });\n    \n    $def(self, '$*', function $Complex_$$5(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        return $Kernel.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        return $Kernel.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))\n      } else {\n        return self.$__coerced__(\"*\", other)\n      }\n    });\n    \n    $def(self, '$/', function $Complex_$slash$6(other) {\n      var self = this;\n\n      if ($eqeqeq($$$('Complex'), other)) {\n        if ((((($eqeqeq($$$('Number'), self.real) && ($truthy(self.real['$nan?']()))) || (($eqeqeq($$$('Number'), self.imag) && ($truthy(self.imag['$nan?']()))))) || (($eqeqeq($$$('Number'), other.$real()) && ($truthy(other.$real()['$nan?']()))))) || (($eqeqeq($$$('Number'), other.$imag()) && ($truthy(other.$imag()['$nan?']())))))) {\n          return $$$('Complex').$new($$$($$$('Float'), 'NAN'), $$$($$$('Float'), 'NAN'))\n        } else {\n          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())\n        }\n      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {\n        return $Kernel.$Complex(self.real.$quo(other), self.imag.$quo(other))\n      } else {\n        return self.$__coerced__(\"/\", other)\n      }\n    });\n    \n    $def(self, '$**', function $Complex_$$$7(other) {\n      var $a, $b, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;\n\n      \n      if ($eqeq(other, 0)) {\n        return $$$('Complex').$new(1, 0)\n      };\n      if ($eqeqeq($$$('Complex'), other)) {\n        \n        $b = self.$polar(), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;\n        ore = other.$real();\n        oim = other.$imag();\n        nr = $$$('Math').$exp($rb_minus($rb_times(ore, $$$('Math').$log(r)), $rb_times(oim, theta)));\n        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $$$('Math').$log(r)));\n        return $$$('Complex').$polar(nr, ntheta);\n      } else if ($eqeqeq($$$('Integer'), other)) {\n        if ($truthy($rb_gt(other, 0))) {\n          \n          x = self;\n          z = x;\n          n = $rb_minus(other, 1);\n          while ($neqeq(n, 0)) {\n          \n            $b = n.$divmod(2), $a = $to_ary($b), (div = ($a[0] == null ? nil : $a[0])), (mod = ($a[1] == null ? nil : $a[1])), $b;\n            while ($eqeq(mod, 0)) {\n            \n              x = $Kernel.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));\n              n = div;\n              $b = n.$divmod(2), $a = $to_ary($b), (div = ($a[0] == null ? nil : $a[0])), (mod = ($a[1] == null ? nil : $a[1])), $b;\n            };\n            z = $rb_times(z, x);\n            n = $rb_minus(n, 1);\n          };\n          return z;\n        } else {\n          return $rb_divide($$$('Rational').$new(1, 1), self)['$**'](other['$-@']())\n        }\n      } else if (($eqeqeq($$$('Float'), other) || ($eqeqeq($$$('Rational'), other)))) {\n        \n        $b = self.$polar(), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;\n        return $$$('Complex').$polar(r['$**'](other), $rb_times(theta, other));\n      } else {\n        return self.$__coerced__(\"**\", other)\n      };\n    });\n    \n    $def(self, '$abs', function $$abs() {\n      var self = this;\n\n      return $$$('Math').$hypot(self.real, self.imag)\n    });\n    \n    $def(self, '$abs2', function $$abs2() {\n      var self = this;\n\n      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))\n    });\n    \n    $def(self, '$angle', function $$angle() {\n      var self = this;\n\n      return $$$('Math').$atan2(self.imag, self.real)\n    });\n    \n    $def(self, '$conj', function $$conj() {\n      var self = this;\n\n      return $Kernel.$Complex(self.real, self.imag['$-@']())\n    });\n    \n    $def(self, '$denominator', function $$denominator() {\n      var self = this;\n\n      return self.real.$denominator().$lcm(self.imag.$denominator())\n    });\n    \n    $def(self, '$eql?', function $Complex_eql$ques$8(other) {\n      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = $$('Complex')['$==='](other))) ? (self.real.$class()['$=='](self.imag.$class())) : ($ret_or_2))))) {\n        return self['$=='](other)\n      } else {\n        return $ret_or_1\n      }\n    });\n    \n    $def(self, '$fdiv', function $$fdiv(other) {\n      var self = this;\n\n      \n      if (!$eqeqeq($$$('Numeric'), other)) {\n        $Kernel.$raise($$$('TypeError'), \"\" + (other.$class()) + \" can't be coerced into Complex\")\n      };\n      return $rb_divide(self, other);\n    });\n    \n    $def(self, '$finite?', function $Complex_finite$ques$9() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.real['$finite?']()))) {\n        return self.imag['$finite?']()\n      } else {\n        return $ret_or_1\n      }\n    });\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return \"Complex:\" + (self.real) + \":\" + (self.imag)\n    });\n    \n    $def(self, '$infinite?', function $Complex_infinite$ques$10() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.real['$infinite?']()))) {\n        return $ret_or_1\n      } else {\n        return self.imag['$infinite?']()\n      }\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"(\" + (self) + \")\"\n    });\n    \n    $def(self, '$numerator', function $$numerator() {\n      var self = this, d = nil;\n\n      \n      d = self.$denominator();\n      return $Kernel.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));\n    });\n    \n    $def(self, '$polar', function $$polar() {\n      var self = this;\n\n      return [self.$abs(), self.$arg()]\n    });\n    \n    $def(self, '$rationalize', function $$rationalize(eps) {\n      var self = this;\n\n      \n      ;\n      \n      if (arguments.length > 1) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" for 0..1)\");\n      }\n    ;\n      if ($neqeq(self.imag, 0)) {\n        $Kernel.$raise($$$('RangeError'), \"can't convert \" + (self) + \" into Rational\")\n      };\n      return self.$real().$rationalize(eps);\n    }, -1);\n    \n    $def(self, '$real?', $return_val(false));\n    \n    $def(self, '$rect', function $$rect() {\n      var self = this;\n\n      return [self.real, self.imag]\n    });\n    \n    $def(self, '$to_f', function $$to_f() {\n      var self = this;\n\n      \n      if (!$eqeq(self.imag, 0)) {\n        $Kernel.$raise($$$('RangeError'), \"can't convert \" + (self) + \" into Float\")\n      };\n      return self.real.$to_f();\n    });\n    \n    $def(self, '$to_i', function $$to_i() {\n      var self = this;\n\n      \n      if (!$eqeq(self.imag, 0)) {\n        $Kernel.$raise($$$('RangeError'), \"can't convert \" + (self) + \" into Integer\")\n      };\n      return self.real.$to_i();\n    });\n    \n    $def(self, '$to_r', function $$to_r() {\n      var self = this;\n\n      \n      if (!$eqeq(self.imag, 0)) {\n        $Kernel.$raise($$$('RangeError'), \"can't convert \" + (self) + \" into Rational\")\n      };\n      return self.real.$to_r();\n    });\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this, result = nil;\n\n      \n      result = self.real.$inspect();\n      result = $rb_plus(result, (((($eqeqeq($$$('Number'), self.imag) && ($truthy(self.imag['$nan?']()))) || ($truthy(self.imag['$positive?']()))) || ($truthy(self.imag['$zero?']()))) ? (\"+\") : (\"-\")));\n      result = $rb_plus(result, self.imag.$abs().$inspect());\n      if (($eqeqeq($$$('Number'), self.imag) && (($truthy(self.imag['$nan?']()) || ($truthy(self.imag['$infinite?']())))))) {\n        result = $rb_plus(result, \"*\")\n      };\n      return $rb_plus(result, \"i\");\n    });\n    $const_set($nesting[0], 'I', self.$new(0, 1));\n    $defs(self, '$from_string', function $$from_string(str) {\n      \n      \n      var re = /[+-]?[\\d_]+(\\.[\\d_]+)?(e\\d+)?/,\n          match = str.match(re),\n          real, imag, denominator;\n\n      function isFloat() {\n        return re.test(str);\n      }\n\n      function cutFloat() {\n        var match = str.match(re);\n        var number = match[0];\n        str = str.slice(number.length);\n        return number.replace(/_/g, '');\n      }\n\n      // handles both floats and rationals\n      function cutNumber() {\n        if (isFloat()) {\n          var numerator = parseFloat(cutFloat());\n\n          if (str[0] === '/') {\n            // rational real part\n            str = str.slice(1);\n\n            if (isFloat()) {\n              var denominator = parseFloat(cutFloat());\n              return $Kernel.$Rational(numerator, denominator);\n            } else {\n              // reverting '/'\n              str = '/' + str;\n              return numerator;\n            }\n          } else {\n            // float real part, no denominator\n            return numerator;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      real = cutNumber();\n\n      if (!real) {\n        if (str[0] === 'i') {\n          // i => Complex(0, 1)\n          return $Kernel.$Complex(0, 1);\n        }\n        if (str[0] === '-' && str[1] === 'i') {\n          // -i => Complex(0, -1)\n          return $Kernel.$Complex(0, -1);\n        }\n        if (str[0] === '+' && str[1] === 'i') {\n          // +i => Complex(0, 1)\n          return $Kernel.$Complex(0, 1);\n        }\n        // anything => Complex(0, 0)\n        return $Kernel.$Complex(0, 0);\n      }\n\n      imag = cutNumber();\n      if (!imag) {\n        if (str[0] === 'i') {\n          // 3i => Complex(0, 3)\n          return $Kernel.$Complex(0, real);\n        } else {\n          // 3 => Complex(3, 0)\n          return $Kernel.$Complex(real, 0);\n        }\n      } else {\n        // 3+2i => Complex(3, 2)\n        return $Kernel.$Complex(real, imag);\n      }\n    \n    });\n    (function(self, $parent_nesting) {\n      \n      return $alias(self, \"rectangular\", \"rect\")\n    })(Opal.get_singleton_class(self), $nesting);\n    $alias(self, \"arg\", \"angle\");\n    $alias(self, \"conjugate\", \"conj\");\n    $alias(self, \"divide\", \"/\");\n    $alias(self, \"imaginary\", \"imag\");\n    $alias(self, \"magnitude\", \"abs\");\n    $alias(self, \"phase\", \"arg\");\n    $alias(self, \"quo\", \"/\");\n    $alias(self, \"rectangular\", \"rect\");\n    \n    Opal.udef(self, '$' + \"negative?\");;\n    \n    Opal.udef(self, '$' + \"positive?\");;\n    \n    \n    Opal.udef(self, '$' + \"step\");;\n    return nil;;\n  })('::', $$$('Numeric'), $nesting);\n};\n\nOpal.modules[\"corelib/rational/base\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $def = Opal.def, $klass = Opal.klass, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('convert,from_string');\n  \n  (function($base) {\n    var self = $module($base, 'Kernel');\n\n    \n    return $def(self, '$Rational', function $$Rational(numerator, denominator) {\n      \n      \n      if (denominator == null) denominator = 1;\n      return $$$('Rational').$convert(numerator, denominator);\n    }, -2)\n  })('::');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'String');\n\n    \n    return $def(self, '$to_r', function $$to_r() {\n      var self = this;\n\n      return $$$('Rational').$from_string(self)\n    })\n  })('::', null);\n};\n\nOpal.modules[\"corelib/rational\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $eqeq = Opal.eqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_divide = Opal.rb_divide, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $not = Opal.not, $Opal = Opal.Opal, $def = Opal.def, $return_ivar = Opal.return_ivar, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $rb_le = Opal.rb_le, $return_self = Opal.return_self, $alias = Opal.alias, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,to_i,==,raise,<,-@,new,gcd,/,nil?,===,reduce,to_r,!,equal?,coerce_to!,freeze,to_f,numerator,denominator,<=>,-,*,__coerced__,+,Rational,>,**,abs,ceil,with_precision,floor,<=,truncate,send');\n  \n  self.$require(\"corelib/numeric\");\n  self.$require(\"corelib/rational/base\");\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Rational');\n\n    var $proto = self.$$prototype;\n\n    $proto.num = $proto.den = nil;\n    \n    $defs(self, '$reduce', function $$reduce(num, den) {\n      var self = this, gcd = nil;\n\n      \n      num = num.$to_i();\n      den = den.$to_i();\n      if ($eqeq(den, 0)) {\n        $Kernel.$raise($$$('ZeroDivisionError'), \"divided by 0\")\n      } else if ($truthy($rb_lt(den, 0))) {\n        \n        num = num['$-@']();\n        den = den['$-@']();\n      } else if ($eqeq(den, 1)) {\n        return self.$new(num, den)\n      };\n      gcd = num.$gcd(den);\n      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));\n    });\n    $defs(self, '$convert', function $$convert(num, den) {\n      var self = this;\n\n      \n      if (($truthy(num['$nil?']()) || ($truthy(den['$nil?']())))) {\n        $Kernel.$raise($$$('TypeError'), \"cannot convert nil into Rational\")\n      };\n      if (($eqeqeq($$$('Integer'), num) && ($eqeqeq($$$('Integer'), den)))) {\n        return self.$reduce(num, den)\n      };\n      if ((($eqeqeq($$$('Float'), num) || ($eqeqeq($$$('String'), num))) || ($eqeqeq($$$('Complex'), num)))) {\n        num = num.$to_r()\n      };\n      if ((($eqeqeq($$$('Float'), den) || ($eqeqeq($$$('String'), den))) || ($eqeqeq($$$('Complex'), den)))) {\n        den = den.$to_r()\n      };\n      if (($truthy(den['$equal?'](1)) && ($not($$$('Integer')['$==='](num))))) {\n        return $Opal['$coerce_to!'](num, $$$('Rational'), \"to_r\")\n      } else if (($eqeqeq($$$('Numeric'), num) && ($eqeqeq($$$('Numeric'), den)))) {\n        return $rb_divide(num, den)\n      } else {\n        return self.$reduce(num, den)\n      };\n    });\n    \n    $def(self, '$initialize', function $$initialize(num, den) {\n      var self = this;\n\n      \n      self.num = num;\n      self.den = den;\n      return self.$freeze();\n    });\n    \n    $def(self, '$numerator', $return_ivar(\"num\"));\n    \n    $def(self, '$denominator', $return_ivar(\"den\"));\n    \n    $def(self, '$coerce', function $$coerce(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        return [other, self]\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        return [other.$to_r(), self]\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return [other, self.$to_f()]\n      } else {\n        return nil\n      }\n    });\n    \n    $def(self, '$==', function $Rational_$eq_eq$1(other) {\n      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        if ($truthy(($ret_or_2 = self.num['$=='](other.$numerator())))) {\n          return self.den['$=='](other.$denominator())\n        } else {\n          return $ret_or_2\n        }\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        if ($truthy(($ret_or_2 = self.num['$=='](other)))) {\n          return self.den['$=='](1)\n        } else {\n          return $ret_or_2\n        }\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return self.$to_f()['$=='](other)\n      } else {\n        return other['$=='](self)\n      }\n    });\n    \n    $def(self, '$<=>', function $Rational_$lt_eq_gt$2(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return self.$to_f()['$<=>'](other)\n      } else {\n        return self.$__coerced__(\"<=>\", other)\n      }\n    });\n    \n    $def(self, '$+', function $Rational_$plus$3(other) {\n      var self = this, $ret_or_1 = nil, num = nil, den = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        \n        num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));\n        den = $rb_times(self.den, other.$denominator());\n        return $Kernel.$Rational(num, den);\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        return $Kernel.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return $rb_plus(self.$to_f(), other)\n      } else {\n        return self.$__coerced__(\"+\", other)\n      }\n    });\n    \n    $def(self, '$-', function $Rational_$minus$4(other) {\n      var self = this, $ret_or_1 = nil, num = nil, den = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        \n        num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));\n        den = $rb_times(self.den, other.$denominator());\n        return $Kernel.$Rational(num, den);\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        return $Kernel.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return $rb_minus(self.$to_f(), other)\n      } else {\n        return self.$__coerced__(\"-\", other)\n      }\n    });\n    \n    $def(self, '$*', function $Rational_$$5(other) {\n      var self = this, $ret_or_1 = nil, num = nil, den = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        \n        num = $rb_times(self.num, other.$numerator());\n        den = $rb_times(self.den, other.$denominator());\n        return $Kernel.$Rational(num, den);\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        return $Kernel.$Rational($rb_times(self.num, other), self.den)\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return $rb_times(self.$to_f(), other)\n      } else {\n        return self.$__coerced__(\"*\", other)\n      }\n    });\n    \n    $def(self, '$/', function $Rational_$slash$6(other) {\n      var self = this, $ret_or_1 = nil, num = nil, den = nil;\n\n      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {\n        \n        num = $rb_times(self.num, other.$denominator());\n        den = $rb_times(self.den, other.$numerator());\n        return $Kernel.$Rational(num, den);\n      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {\n        if ($eqeq(other, 0)) {\n          return $rb_divide(self.$to_f(), 0.0)\n        } else {\n          return $Kernel.$Rational(self.num, $rb_times(self.den, other))\n        }\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return $rb_divide(self.$to_f(), other)\n      } else {\n        return self.$__coerced__(\"/\", other)\n      }\n    });\n    \n    $def(self, '$**', function $Rational_$$$7(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($eqeqeq($$$('Integer'), ($ret_or_1 = other))) {\n        if (($eqeq(self, 0) && ($truthy($rb_lt(other, 0))))) {\n          return $$$($$$('Float'), 'INFINITY')\n        } else if ($truthy($rb_gt(other, 0))) {\n          return $Kernel.$Rational(self.num['$**'](other), self.den['$**'](other))\n        } else if ($truthy($rb_lt(other, 0))) {\n          return $Kernel.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))\n        } else {\n          return $Kernel.$Rational(1, 1)\n        }\n      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {\n        return self.$to_f()['$**'](other)\n      } else if ($eqeqeq($$$('Rational'), $ret_or_1)) {\n        if ($eqeq(other, 0)) {\n          return $Kernel.$Rational(1, 1)\n        } else if ($eqeq(other.$denominator(), 1)) {\n          if ($truthy($rb_lt(other, 0))) {\n            return $Kernel.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))\n          } else {\n            return $Kernel.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))\n          }\n        } else if (($eqeq(self, 0) && ($truthy($rb_lt(other, 0))))) {\n          return $Kernel.$raise($$$('ZeroDivisionError'), \"divided by 0\")\n        } else {\n          return self.$to_f()['$**'](other)\n        }\n      } else {\n        return self.$__coerced__(\"**\", other)\n      }\n    });\n    \n    $def(self, '$abs', function $$abs() {\n      var self = this;\n\n      return $Kernel.$Rational(self.num.$abs(), self.den.$abs())\n    });\n    \n    $def(self, '$ceil', function $$ceil(precision) {\n      var self = this;\n\n      \n      if (precision == null) precision = 0;\n      if ($eqeq(precision, 0)) {\n        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()\n      } else {\n        return self.$with_precision(\"ceil\", precision)\n      };\n    }, -1);\n    \n    $def(self, '$floor', function $$floor(precision) {\n      var self = this;\n\n      \n      if (precision == null) precision = 0;\n      if ($eqeq(precision, 0)) {\n        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()\n      } else {\n        return self.$with_precision(\"floor\", precision)\n      };\n    }, -1);\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return \"Rational:\" + (self.num) + \":\" + (self.den)\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"(\" + (self) + \")\"\n    });\n    \n    $def(self, '$rationalize', function $$rationalize(eps) {\n      var self = this;\n\n      \n      ;\n      \n      if (arguments.length > 1) {\n        $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (\" + (arguments.length) + \" for 0..1)\");\n      }\n\n      if (eps == null) {\n        return self;\n      }\n\n      var e = eps.$abs(),\n          a = $rb_minus(self, e),\n          b = $rb_plus(self, e);\n\n      var p0 = 0,\n          p1 = 1,\n          q0 = 1,\n          q1 = 0,\n          p2, q2;\n\n      var c, k, t;\n\n      while (true) {\n        c = (a).$ceil();\n\n        if ($rb_le(c, b)) {\n          break;\n        }\n\n        k  = c - 1;\n        p2 = k * p1 + p0;\n        q2 = k * q1 + q0;\n        t  = $rb_divide(1, $rb_minus(b, k));\n        b  = $rb_divide(1, $rb_minus(a, k));\n        a  = t;\n\n        p0 = p1;\n        q0 = q1;\n        p1 = p2;\n        q1 = q2;\n      }\n\n      return $Kernel.$Rational(c * p1 + p0, c * q1 + q0);\n    ;\n    }, -1);\n    \n    $def(self, '$round', function $$round(precision) {\n      var self = this, num = nil, den = nil, approx = nil;\n\n      \n      if (precision == null) precision = 0;\n      if (!$eqeq(precision, 0)) {\n        return self.$with_precision(\"round\", precision)\n      };\n      if ($eqeq(self.num, 0)) {\n        return 0\n      };\n      if ($eqeq(self.den, 1)) {\n        return self.num\n      };\n      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);\n      den = $rb_times(self.den, 2);\n      approx = $rb_divide(num, den).$truncate();\n      if ($truthy($rb_lt(self.num, 0))) {\n        return approx['$-@']()\n      } else {\n        return approx\n      };\n    }, -1);\n    \n    $def(self, '$to_f', function $$to_f() {\n      var self = this;\n\n      return $rb_divide(self.num, self.den)\n    });\n    \n    $def(self, '$to_i', function $$to_i() {\n      var self = this;\n\n      return self.$truncate()\n    });\n    \n    $def(self, '$to_r', $return_self);\n    \n    $def(self, '$to_s', function $$to_s() {\n      var self = this;\n\n      return \"\" + (self.num) + \"/\" + (self.den)\n    });\n    \n    $def(self, '$truncate', function $$truncate(precision) {\n      var self = this;\n\n      \n      if (precision == null) precision = 0;\n      if ($eqeq(precision, 0)) {\n        if ($truthy($rb_lt(self.num, 0))) {\n          return self.$ceil()\n        } else {\n          return self.$floor()\n        }\n      } else {\n        return self.$with_precision(\"truncate\", precision)\n      };\n    }, -1);\n    \n    $def(self, '$with_precision', function $$with_precision(method, precision) {\n      var self = this, p = nil, s = nil;\n\n      \n      if (!$eqeqeq($$$('Integer'), precision)) {\n        $Kernel.$raise($$$('TypeError'), \"not an Integer\")\n      };\n      p = (10)['$**'](precision);\n      s = $rb_times(self, p);\n      if ($truthy($rb_lt(precision, 1))) {\n        return $rb_divide(s.$send(method), p).$to_i()\n      } else {\n        return $Kernel.$Rational(s.$send(method), p)\n      };\n    });\n    $defs(self, '$from_string', function $$from_string(string) {\n      \n      \n      var str = string.trimLeft(),\n          re = /^[+-]?[\\d_]+(\\.[\\d_]+)?/,\n          match = str.match(re),\n          numerator, denominator;\n\n      function isFloat() {\n        return re.test(str);\n      }\n\n      function cutFloat() {\n        var match = str.match(re);\n        var number = match[0];\n        str = str.slice(number.length);\n        return number.replace(/_/g, '');\n      }\n\n      if (isFloat()) {\n        numerator = parseFloat(cutFloat());\n\n        if (str[0] === '/') {\n          // rational real part\n          str = str.slice(1);\n\n          if (isFloat()) {\n            denominator = parseFloat(cutFloat());\n            return $Kernel.$Rational(numerator, denominator);\n          } else {\n            return $Kernel.$Rational(numerator, 1);\n          }\n        } else {\n          return $Kernel.$Rational(numerator, 1);\n        }\n      } else {\n        return $Kernel.$Rational(0, 1);\n      }\n    \n    });\n    $alias(self, \"divide\", \"/\");\n    return $alias(self, \"quo\", \"/\");\n  })('::', $$$('Numeric'));\n};\n\nOpal.modules[\"corelib/time\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $slice = Opal.slice, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $rb_minus = Opal.rb_minus, $range = Opal.range, $neqeq = Opal.neqeq, $rb_le = Opal.rb_le, $eqeq = Opal.eqeq, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,===,raise,coerce_to!,respond_to?,to_str,to_i,_parse_offset,new,<=>,to_f,nil?,>,<,strftime,each,define_method,year,month,day,+,round,/,-,copy_instance_variables,initialize_dup,is_a?,zero?,wday,utc?,mon,yday,hour,min,sec,rjust,ljust,zone,to_s,[],cweek_cyear,jd,to_date,format,isdst,!=,<=,==,ceil,local,gm,asctime,getgm,gmt_offset,inspect,usec,gmtime,gmt?');\n  \n  self.$require(\"corelib/comparable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Time');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    self.$include($$$('Comparable'));\n    \n    var days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n        short_days   = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        short_months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        long_months  = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  ;\n    $defs(self, '$at', function $$at(seconds, frac) {\n      \n      \n      ;\n      \n      var result;\n\n      if ($$$('Time')['$==='](seconds)) {\n        if (frac !== undefined) {\n          $Kernel.$raise($$$('TypeError'), \"can't convert Time into an exact number\")\n        }\n        result = new Date(seconds.getTime());\n        result.timezone = seconds.timezone;\n        return result;\n      }\n\n      if (!seconds.$$is_number) {\n        seconds = $Opal['$coerce_to!'](seconds, $$$('Integer'), \"to_int\");\n      }\n\n      if (frac === undefined) {\n        return new Date(seconds * 1000);\n      }\n\n      if (!frac.$$is_number) {\n        frac = $Opal['$coerce_to!'](frac, $$$('Integer'), \"to_int\");\n      }\n\n      return new Date(seconds * 1000 + (frac / 1000));\n    ;\n    }, -2);\n    \n    function time_params(year, month, day, hour, min, sec) {\n      if (year.$$is_string) {\n        year = parseInt(year, 10);\n      } else {\n        year = $Opal['$coerce_to!'](year, $$$('Integer'), \"to_int\");\n      }\n\n      if (month === nil) {\n        month = 1;\n      } else if (!month.$$is_number) {\n        if ((month)['$respond_to?'](\"to_str\")) {\n          month = (month).$to_str();\n          switch (month.toLowerCase()) {\n          case 'jan': month =  1; break;\n          case 'feb': month =  2; break;\n          case 'mar': month =  3; break;\n          case 'apr': month =  4; break;\n          case 'may': month =  5; break;\n          case 'jun': month =  6; break;\n          case 'jul': month =  7; break;\n          case 'aug': month =  8; break;\n          case 'sep': month =  9; break;\n          case 'oct': month = 10; break;\n          case 'nov': month = 11; break;\n          case 'dec': month = 12; break;\n          default: month = (month).$to_i();\n          }\n        } else {\n          month = $Opal['$coerce_to!'](month, $$$('Integer'), \"to_int\");\n        }\n      }\n\n      if (month < 1 || month > 12) {\n        $Kernel.$raise($$$('ArgumentError'), \"month out of range: \" + (month))\n      }\n      month = month - 1;\n\n      if (day === nil) {\n        day = 1;\n      } else if (day.$$is_string) {\n        day = parseInt(day, 10);\n      } else {\n        day = $Opal['$coerce_to!'](day, $$$('Integer'), \"to_int\");\n      }\n\n      if (day < 1 || day > 31) {\n        $Kernel.$raise($$$('ArgumentError'), \"day out of range: \" + (day))\n      }\n\n      if (hour === nil) {\n        hour = 0;\n      } else if (hour.$$is_string) {\n        hour = parseInt(hour, 10);\n      } else {\n        hour = $Opal['$coerce_to!'](hour, $$$('Integer'), \"to_int\");\n      }\n\n      if (hour < 0 || hour > 24) {\n        $Kernel.$raise($$$('ArgumentError'), \"hour out of range: \" + (hour))\n      }\n\n      if (min === nil) {\n        min = 0;\n      } else if (min.$$is_string) {\n        min = parseInt(min, 10);\n      } else {\n        min = $Opal['$coerce_to!'](min, $$$('Integer'), \"to_int\");\n      }\n\n      if (min < 0 || min > 59) {\n        $Kernel.$raise($$$('ArgumentError'), \"min out of range: \" + (min))\n      }\n\n      if (sec === nil) {\n        sec = 0;\n      } else if (!sec.$$is_number) {\n        if (sec.$$is_string) {\n          sec = parseInt(sec, 10);\n        } else {\n          sec = $Opal['$coerce_to!'](sec, $$$('Integer'), \"to_int\");\n        }\n      }\n\n      if (sec < 0 || sec > 60) {\n        $Kernel.$raise($$$('ArgumentError'), \"sec out of range: \" + (sec))\n      }\n\n      return [year, month, day, hour, min, sec];\n    }\n  ;\n    $defs(self, '$new', function $Time_new$1(year, month, day, hour, min, sec, utc_offset) {\n      var self = this;\n\n      \n      ;\n      if (month == null) month = nil;\n      if (day == null) day = nil;\n      if (hour == null) hour = nil;\n      if (min == null) min = nil;\n      if (sec == null) sec = nil;\n      if (utc_offset == null) utc_offset = nil;\n      \n      var args, result, timezone, utc_date;\n\n      if (year === undefined) {\n        return new Date();\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      if (utc_offset === nil) {\n        result = new Date(year, month, day, hour, min, 0, sec * 1000);\n        if (year < 100) {\n          result.setFullYear(year);\n        }\n        return result;\n      }\n\n      timezone = self.$_parse_offset(utc_offset);\n      utc_date = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));\n      if (year < 100) {\n        utc_date.setUTCFullYear(year);\n      }\n\n      result = new Date(utc_date.getTime() - timezone * 3600000);\n      result.timezone = timezone;\n\n      return result;\n    ;\n    }, -1);\n    $defs(self, '$_parse_offset', function $$_parse_offset(utc_offset) {\n      \n      \n      var timezone;\n      if (utc_offset.$$is_string) {\n        if (utc_offset == 'UTC') {\n          timezone = 0;\n        }\n        else if(/^[+-]\\d\\d:[0-5]\\d$/.test(utc_offset)) {\n          var sign, hours, minutes;\n          sign = utc_offset[0];\n          hours = +(utc_offset[1] + utc_offset[2]);\n          minutes = +(utc_offset[4] + utc_offset[5]);\n\n          timezone = (sign == '-' ? -1 : 1) * (hours + minutes / 60);\n        }\n        else {\n          // Unsupported: \"A\"..\"I\",\"K\"..\"Z\"\n          $Kernel.$raise($$$('ArgumentError'), \"\\\"+HH:MM\\\", \\\"-HH:MM\\\", \\\"UTC\\\" expected for utc_offset: \" + (utc_offset))\n        }\n      }\n      else if (utc_offset.$$is_number) {\n        timezone = utc_offset / 3600;\n      }\n      else {\n        $Kernel.$raise($$$('ArgumentError'), \"Opal doesn't support other types for a timezone argument than Integer and String\")\n      }\n      return timezone;\n    \n    });\n    $defs(self, '$local', function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {\n      \n      \n      if (month == null) month = nil;\n      if (day == null) day = nil;\n      if (hour == null) hour = nil;\n      if (min == null) min = nil;\n      if (sec == null) sec = nil;\n      if (millisecond == null) millisecond = nil;\n      if (_dummy1 == null) _dummy1 = nil;\n      if (_dummy2 == null) _dummy2 = nil;\n      if (_dummy3 == null) _dummy3 = nil;\n      \n      var args, result;\n\n      if (arguments.length === 10) {\n        args  = $slice(arguments);\n        year  = args[5];\n        month = args[4];\n        day   = args[3];\n        hour  = args[2];\n        min   = args[1];\n        sec   = args[0];\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      result = new Date(year, month, day, hour, min, 0, sec * 1000);\n      if (year < 100) {\n        result.setFullYear(year);\n      }\n      return result;\n    ;\n    }, -2);\n    $defs(self, '$gm', function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {\n      \n      \n      if (month == null) month = nil;\n      if (day == null) day = nil;\n      if (hour == null) hour = nil;\n      if (min == null) min = nil;\n      if (sec == null) sec = nil;\n      if (millisecond == null) millisecond = nil;\n      if (_dummy1 == null) _dummy1 = nil;\n      if (_dummy2 == null) _dummy2 = nil;\n      if (_dummy3 == null) _dummy3 = nil;\n      \n      var args, result;\n\n      if (arguments.length === 10) {\n        args  = $slice(arguments);\n        year  = args[5];\n        month = args[4];\n        day   = args[3];\n        hour  = args[2];\n        min   = args[1];\n        sec   = args[0];\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));\n      if (year < 100) {\n        result.setUTCFullYear(year);\n      }\n      result.timezone = 0;\n      return result;\n    ;\n    }, -2);\n    $defs(self, '$now', function $$now() {\n      var self = this;\n\n      return self.$new()\n    });\n    \n    $def(self, '$+', function $Time_$plus$2(other) {\n      var self = this;\n\n      \n      if ($eqeqeq($$$('Time'), other)) {\n        $Kernel.$raise($$$('TypeError'), \"time + time?\")\n      };\n      \n      if (!other.$$is_number) {\n        other = $Opal['$coerce_to!'](other, $$$('Integer'), \"to_int\");\n      }\n      var result = new Date(self.getTime() + (other * 1000));\n      result.timezone = self.timezone;\n      return result;\n    ;\n    });\n    \n    $def(self, '$-', function $Time_$minus$3(other) {\n      var self = this;\n\n      \n      if ($eqeqeq($$$('Time'), other)) {\n        return (self.getTime() - other.getTime()) / 1000\n      };\n      \n      if (!other.$$is_number) {\n        other = $Opal['$coerce_to!'](other, $$$('Integer'), \"to_int\");\n      }\n      var result = new Date(self.getTime() - (other * 1000));\n      result.timezone = self.timezone;\n      return result;\n    ;\n    });\n    \n    $def(self, '$<=>', function $Time_$lt_eq_gt$4(other) {\n      var self = this, r = nil;\n\n      if ($eqeqeq($$$('Time'), other)) {\n        return self.$to_f()['$<=>'](other.$to_f())\n      } else {\n        \n        r = other['$<=>'](self);\n        if ($truthy(r['$nil?']())) {\n          return nil\n        } else if ($truthy($rb_gt(r, 0))) {\n          return -1\n        } else if ($truthy($rb_lt(r, 0))) {\n          return 1\n        } else {\n          return 0\n        };\n      }\n    });\n    \n    $def(self, '$==', function $Time_$eq_eq$5(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = $$$('Time')['$==='](other)))) {\n        return self.$to_f() === other.$to_f()\n      } else {\n        return $ret_or_1\n      }\n    });\n    \n    $def(self, '$asctime', function $$asctime() {\n      var self = this;\n\n      return self.$strftime(\"%a %b %e %H:%M:%S %Y\")\n    });\n    $send([[\"year\", \"getFullYear\", \"getUTCFullYear\"], [\"mon\", \"getMonth\", \"getUTCMonth\", 1], [\"wday\", \"getDay\", \"getUTCDay\"], [\"day\", \"getDate\", \"getUTCDate\"], [\"hour\", \"getHours\", \"getUTCHours\"], [\"min\", \"getMinutes\", \"getUTCMinutes\"], [\"sec\", \"getSeconds\", \"getUTCSeconds\"]], 'each', [], function $Time$6(method, getter, utcgetter, difference){var self = $Time$6.$$s == null ? this : $Time$6.$$s;\n\n      \n      if (method == null) method = nil;\n      if (getter == null) getter = nil;\n      if (utcgetter == null) utcgetter = nil;\n      if (difference == null) difference = 0;\n      return $send(self, 'define_method', [method], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;\n\n        \n        return difference + ((self.timezone != null) ?\n          (new Date(self.getTime() + self.timezone * 3600000))[utcgetter]() :\n          self[getter]())\n      }, {$$s: self});}, {$$arity: -4, $$s: self});\n    \n    $def(self, '$yday', function $$yday() {\n      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;\n\n      \n      start_of_year = $$('Time').$new(self.$year()).$to_i();\n      start_of_day = $$('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();\n      one_day = 86400;\n      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);\n    });\n    \n    $def(self, '$isdst', function $$isdst() {\n      var self = this;\n\n      \n      var jan = new Date(self.getFullYear(), 0, 1),\n          jul = new Date(self.getFullYear(), 6, 1);\n      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n    \n    });\n    \n    $def(self, '$dup', function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = new Date(self.getTime());\n      copy.$copy_instance_variables(self);\n      copy.$initialize_dup(self);\n      return copy;\n    });\n    \n    $def(self, '$eql?', function $Time_eql$ques$8(other) {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = other['$is_a?']($$$('Time'))))) {\n        return self['$<=>'](other)['$zero?']()\n      } else {\n        return $ret_or_1\n      }\n    });\n    $send([[\"sunday?\", 0], [\"monday?\", 1], [\"tuesday?\", 2], [\"wednesday?\", 3], [\"thursday?\", 4], [\"friday?\", 5], [\"saturday?\", 6]], 'each', [], function $Time$9(method, weekday){var self = $Time$9.$$s == null ? this : $Time$9.$$s;\n\n      \n      if (method == null) method = nil;\n      if (weekday == null) weekday = nil;\n      return $send(self, 'define_method', [method], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;\n\n        return self.$wday() === weekday}, {$$s: self});}, {$$s: self});\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return 'Time:' + self.getTime();\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      if ($truthy(self['$utc?']())) {\n        return self.$strftime(\"%Y-%m-%d %H:%M:%S UTC\")\n      } else {\n        return self.$strftime(\"%Y-%m-%d %H:%M:%S %z\")\n      }\n    });\n    \n    $def(self, '$succ', function $$succ() {\n      var self = this;\n\n      \n      var result = new Date(self.getTime() + 1000);\n      result.timezone = self.timezone;\n      return result;\n    \n    });\n    \n    $def(self, '$usec', function $$usec() {\n      var self = this;\n\n      return self.getMilliseconds() * 1000;\n    });\n    \n    $def(self, '$zone', function $$zone() {\n      var self = this;\n\n      \n      if (self.timezone === 0) return \"UTC\";\n      else if (self.timezone != null) return nil;\n\n      var string = self.toString(),\n          result;\n\n      if (string.indexOf('(') == -1) {\n        result = string.match(/[A-Z]{3,4}/)[0];\n      }\n      else {\n        result = string.match(/\\((.+)\\)(?:\\s|$)/)[1]\n      }\n\n      if (result == \"GMT\" && /(GMT\\W*\\d{4})/.test(string)) {\n        return RegExp.$1;\n      }\n      else {\n        return result;\n      }\n    \n    });\n    \n    $def(self, '$getgm', function $$getgm() {\n      var self = this;\n\n      \n      var result = new Date(self.getTime());\n      result.timezone = 0;\n      return result;\n    \n    });\n    \n    $def(self, '$gmtime', function $$gmtime() {\n      var self = this;\n\n      \n      if (self.timezone !== 0) {\n        $deny_frozen_access(self);\n        self.timezone = 0;\n      }\n      return self;\n    \n    });\n    \n    $def(self, '$gmt?', function $Time_gmt$ques$11() {\n      var self = this;\n\n      return self.timezone === 0;\n    });\n    \n    $def(self, '$gmt_offset', function $$gmt_offset() {\n      var self = this;\n\n      return (self.timezone != null) ? self.timezone * 60 : -self.getTimezoneOffset() * 60;\n    });\n    \n    $def(self, '$strftime', function $$strftime(format) {\n      var self = this;\n\n      \n      return format.replace(/%([\\-_#^0]*:{0,2})(\\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {\n        var result = \"\", jd, c, s,\n            zero   = flags.indexOf('0') !== -1,\n            pad    = flags.indexOf('-') === -1,\n            blank  = flags.indexOf('_') !== -1,\n            upcase = flags.indexOf('^') !== -1,\n            invert = flags.indexOf('#') !== -1,\n            colons = (flags.match(':') || []).length;\n\n        width = parseInt(width, 10);\n\n        if (zero && blank) {\n          if (flags.indexOf('0') < flags.indexOf('_')) {\n            zero = false;\n          }\n          else {\n            blank = false;\n          }\n        }\n\n        switch (conv) {\n          case 'Y':\n            result += self.$year();\n            break;\n\n          case 'C':\n            zero    = !blank;\n            result += Math.round(self.$year() / 100);\n            break;\n\n          case 'y':\n            zero    = !blank;\n            result += (self.$year() % 100);\n            break;\n\n          case 'm':\n            zero    = !blank;\n            result += self.$mon();\n            break;\n\n          case 'B':\n            result += long_months[self.$mon() - 1];\n            break;\n\n          case 'b':\n          case 'h':\n            blank   = !zero;\n            result += short_months[self.$mon() - 1];\n            break;\n\n          case 'd':\n            zero    = !blank\n            result += self.$day();\n            break;\n\n          case 'e':\n            blank   = !zero\n            result += self.$day();\n            break;\n\n          case 'j':\n            zero    = !blank;\n            width   = isNaN(width) ? 3 : width;\n            result += self.$yday();\n            break;\n\n          case 'H':\n            zero    = !blank;\n            result += self.$hour();\n            break;\n\n          case 'k':\n            blank   = !zero;\n            result += self.$hour();\n            break;\n\n          case 'I':\n            zero    = !blank;\n            result += (self.$hour() % 12 || 12);\n            break;\n\n          case 'l':\n            blank   = !zero;\n            result += (self.$hour() % 12 || 12);\n            break;\n\n          case 'P':\n            result += (self.$hour() >= 12 ? \"pm\" : \"am\");\n            break;\n\n          case 'p':\n            result += (self.$hour() >= 12 ? \"PM\" : \"AM\");\n            break;\n\n          case 'M':\n            zero    = !blank;\n            result += self.$min();\n            break;\n\n          case 'S':\n            zero    = !blank;\n            result += self.$sec()\n            break;\n\n          case 'L':\n            zero    = !blank;\n            width   = isNaN(width) ? 3 : width;\n            result += self.getMilliseconds();\n            break;\n\n          case 'N':\n            width   = isNaN(width) ? 9 : width;\n            result += (self.getMilliseconds().toString()).$rjust(3, \"0\");\n            result  = (result).$ljust(width, \"0\");\n            break;\n\n          case 'z':\n            var offset  = (self.timezone == null) ? self.getTimezoneOffset() : (-self.timezone * 60),\n                hours   = Math.floor(Math.abs(offset) / 60),\n                minutes = Math.abs(offset) % 60;\n\n            result += offset < 0 ? \"+\" : \"-\";\n            result += hours < 10 ? \"0\" : \"\";\n            result += hours;\n\n            if (colons > 0) {\n              result += \":\";\n            }\n\n            result += minutes < 10 ? \"0\" : \"\";\n            result += minutes;\n\n            if (colons > 1) {\n              result += \":00\";\n            }\n\n            break;\n\n          case 'Z':\n            result += self.$zone();\n            break;\n\n          case 'A':\n            result += days_of_week[self.$wday()];\n            break;\n\n          case 'a':\n            result += short_days[self.$wday()];\n            break;\n\n          case 'u':\n            result += (self.$wday() + 1);\n            break;\n\n          case 'w':\n            result += self.$wday();\n            break;\n\n          case 'V':\n            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, \"0\");\n            break;\n\n          case 'G':\n            result += self.$cweek_cyear()['$[]'](1);\n            break;\n\n          case 'g':\n            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));\n            break;\n\n          case 's':\n            result += self.$to_i();\n            break;\n\n          case 'n':\n            result += \"\\n\";\n            break;\n\n          case 't':\n            result += \"\\t\";\n            break;\n\n          case '%':\n            result += \"%\";\n            break;\n\n          case 'c':\n            result += self.$strftime(\"%a %b %e %T %Y\");\n            break;\n\n          case 'D':\n          case 'x':\n            result += self.$strftime(\"%m/%d/%y\");\n            break;\n\n          case 'F':\n            result += self.$strftime(\"%Y-%m-%d\");\n            break;\n\n          case 'v':\n            result += self.$strftime(\"%e-%^b-%4Y\");\n            break;\n\n          case 'r':\n            result += self.$strftime(\"%I:%M:%S %p\");\n            break;\n\n          case 'R':\n            result += self.$strftime(\"%H:%M\");\n            break;\n\n          case 'T':\n          case 'X':\n            result += self.$strftime(\"%H:%M:%S\");\n            break;\n\n          // Non-standard: JIS X 0301 date format\n          case 'J':\n            jd = self.$to_date().$jd();\n            if (jd < 2405160) {\n              result += self.$strftime(\"%Y-%m-%d\");\n              break;\n            }\n            else if (jd < 2419614)\n              c = 'M', s = 1867;\n            else if (jd < 2424875)\n              c = 'T', s = 1911;\n            else if (jd < 2447535)\n              c = 'S', s = 1925;\n            else if (jd < 2458605)\n              c = 'H', s = 1988;\n            else\n              c = 'R', s = 2018;\n\n            result += self.$format(\"%c%02d\", c, $rb_minus(self.$year(), s));\n            result += self.$strftime(\"-%m-%d\");\n            break;\n\n          default:\n            return full;\n        }\n\n        if (upcase) {\n          result = result.toUpperCase();\n        }\n\n        if (invert) {\n          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).\n                          replace(/[a-z]/, function(c) { c.toUpperCase() });\n        }\n\n        if (pad && (zero || blank)) {\n          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? \" \" : \"0\");\n        }\n\n        return result;\n      });\n    \n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      var self = this;\n\n      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]\n    });\n    \n    $def(self, '$to_f', function $$to_f() {\n      var self = this;\n\n      return self.getTime() / 1000;\n    });\n    \n    $def(self, '$to_i', function $$to_i() {\n      var self = this;\n\n      return parseInt(self.getTime() / 1000, 10);\n    });\n    \n    $def(self, '$cweek_cyear', function $$cweek_cyear() {\n      var self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;\n\n      \n      jan01 = $$$('Time').$new(self.$year(), 1, 1);\n      jan01_wday = jan01.$wday();\n      first_monday = 0;\n      year = self.$year();\n      if (($truthy($rb_le(jan01_wday, 4)) && ($neqeq(jan01_wday, 0)))) {\n        offset = $rb_minus(jan01_wday, 1)\n      } else {\n        \n        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);\n        if ($eqeq(offset, -8)) {\n          offset = -1\n        };\n      };\n      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();\n      if ($truthy($rb_le(week, 0))) {\n        return $$$('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()\n      } else if ($eqeq(week, 53)) {\n        \n        dec31 = $$$('Time').$new(self.$year(), 12, 31);\n        dec31_wday = dec31.$wday();\n        if (($truthy($rb_le(dec31_wday, 3)) && ($neqeq(dec31_wday, 0)))) {\n          \n          week = 1;\n          year = $rb_plus(year, 1);\n        };\n      };\n      return [week, year];\n    });\n    (function(self, $parent_nesting) {\n      \n      \n      $alias(self, \"mktime\", \"local\");\n      return $alias(self, \"utc\", \"gm\");\n    })(Opal.get_singleton_class(self), $nesting);\n    $alias(self, \"ctime\", \"asctime\");\n    $alias(self, \"dst?\", \"isdst\");\n    $alias(self, \"getutc\", \"getgm\");\n    $alias(self, \"gmtoff\", \"gmt_offset\");\n    $alias(self, \"mday\", \"day\");\n    $alias(self, \"month\", \"mon\");\n    $alias(self, \"to_s\", \"inspect\");\n    $alias(self, \"tv_sec\", \"to_i\");\n    $alias(self, \"tv_usec\", \"usec\");\n    $alias(self, \"utc\", \"gmtime\");\n    $alias(self, \"utc?\", \"gmt?\");\n    return $alias(self, \"utc_offset\", \"gmt_offset\");\n  })('::', Date, $nesting);\n};\n\nOpal.modules[\"corelib/struct\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $truthy = Opal.truthy, $neqeq = Opal.neqeq, $eqeq = Opal.eqeq, $Opal = Opal.Opal, $send = Opal.send, $Class = Opal.Class, $to_a = Opal.to_a, $def = Opal.def, $defs = Opal.defs, $Kernel = Opal.Kernel, $hash2 = Opal.hash2, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $rb_lt = Opal.rb_lt, $rb_ge = Opal.rb_ge, $rb_plus = Opal.rb_plus, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,include,!=,upcase,[],==,class,unshift,const_name!,map,coerce_to!,new,each,define_struct_attribute,allocate,initialize,alias_method,module_eval,to_proc,const_set,raise,<<,members,define_method,instance_eval,last,>,length,-,keys,any?,join,[]=,each_with_index,hash,===,<,-@,size,>=,include?,to_sym,instance_of?,__id__,eql?,enum_for,+,name,each_pair,inspect,to_h,args,each_with_object,flatten,to_a,respond_to?,dig');\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Struct');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    self.$include($$$('Enumerable'));\n    $defs(self, '$new', function $Struct_new$1(const_name, $a, $b) {\n      var block = $Struct_new$1.$$p || nil, $post_args, $kwargs, args, keyword_init, self = this, klass = nil;\n\n      $Struct_new$1.$$p = null;\n      \n      ;\n      $post_args = $slice(arguments, 1);\n      $kwargs = $extract_kwargs($post_args);\n      $kwargs = $ensure_kwargs($kwargs);\n      args = $post_args;\n      \n      keyword_init = $kwargs.$$smap[\"keyword_init\"];if (keyword_init == null) keyword_init = false;\n      if ($truthy(const_name)) {\n        if (($eqeq(const_name.$class(), $$$('String')) && ($neqeq(const_name['$[]'](0).$upcase(), const_name['$[]'](0))))) {\n          \n          args.$unshift(const_name);\n          const_name = nil;\n        } else {\n          \n          try {\n            const_name = $Opal['$const_name!'](const_name)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$$('TypeError'), $$$('NameError')])) {\n              try {\n                \n                args.$unshift(const_name);\n                const_name = nil;\n              } finally { Opal.pop_exception(); }\n            } else { throw $err; }\n          };\n        }\n      };\n      $send(args, 'map', [], function $$2(arg){\n        \n        if (arg == null) arg = nil;\n        return $Opal['$coerce_to!'](arg, $$$('String'), \"to_str\");});\n      klass = $send($Class, 'new', [self], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;\n\n        \n        $send(args, 'each', [], function $$4(arg){var self = $$4.$$s == null ? this : $$4.$$s;\n\n          \n          if (arg == null) arg = nil;\n          return self.$define_struct_attribute(arg);}, {$$s: self});\n        return (function(self, $parent_nesting) {\n          \n          \n          \n          $def(self, '$new', function $new$5($a) {\n            var $post_args, args, self = this, instance = nil;\n\n            \n            $post_args = $slice(arguments);\n            args = $post_args;\n            instance = self.$allocate();\n            instance.$$data = {};\n            $send(instance, 'initialize', $to_a(args));\n            return instance;\n          }, -1);\n          return self.$alias_method(\"[]\", \"new\");\n        })(Opal.get_singleton_class(self), $nesting);}, {$$s: self});\n      if ($truthy(block)) {\n        $send(klass, 'module_eval', [], block.$to_proc())\n      };\n      klass.$$keyword_init = keyword_init;\n      if ($truthy(const_name)) {\n        $$$('Struct').$const_set(const_name, klass)\n      };\n      return klass;\n    }, -2);\n    $defs(self, '$define_struct_attribute', function $$define_struct_attribute(name) {\n      var self = this;\n\n      \n      if ($eqeq(self, $$$('Struct'))) {\n        $Kernel.$raise($$$('ArgumentError'), \"you cannot define attributes to the Struct class\")\n      };\n      self.$members()['$<<'](name);\n      $send(self, 'define_method', [name], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;\n\n        return self.$$data[name];}, {$$s: self});\n      return $send(self, 'define_method', [\"\" + (name) + \"=\"], function $$7(value){var self = $$7.$$s == null ? this : $$7.$$s;\n\n        \n        if (value == null) value = nil;\n        return self.$$data[name] = value;;}, {$$s: self});\n    });\n    $defs(self, '$members', function $$members() {\n      var self = this, $ret_or_1 = nil;\n      if (self.members == null) self.members = nil;\n\n      \n      if ($eqeq(self, $$$('Struct'))) {\n        $Kernel.$raise($$$('ArgumentError'), \"the Struct class has no members\")\n      };\n      return (self.members = ($truthy(($ret_or_1 = self.members)) ? ($ret_or_1) : ([])));\n    });\n    $defs(self, '$inherited', function $$inherited(klass) {\n      var self = this, members = nil;\n      if (self.members == null) self.members = nil;\n\n      \n      members = self.members;\n      return $send(klass, 'instance_eval', [], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;\n\n        return (self.members = members)}, {$$s: self});\n    });\n    \n    $def(self, '$initialize', function $$initialize($a) {\n      var $post_args, args, self = this, kwargs = nil, $ret_or_1 = nil, extra = nil;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      if ($truthy(self.$class().$$keyword_init)) {\n        \n        kwargs = ($truthy(($ret_or_1 = args.$last())) ? ($ret_or_1) : ($hash2([], {})));\n        if (($truthy($rb_gt(args.$length(), 1)) || ($truthy((args.length === 1 && !kwargs.$$is_hash))))) {\n          $Kernel.$raise($$$('ArgumentError'), \"wrong number of arguments (given \" + (args.$length()) + \", expected 0)\")\n        };\n        extra = $rb_minus(kwargs.$keys(), self.$class().$members());\n        if ($truthy(extra['$any?']())) {\n          $Kernel.$raise($$$('ArgumentError'), \"unknown keywords: \" + (extra.$join(\", \")))\n        };\n        return $send(self.$class().$members(), 'each', [], function $$9(name){var $b, self = $$9.$$s == null ? this : $$9.$$s;\n\n          \n          if (name == null) name = nil;\n          return ($b = [name, kwargs['$[]'](name)], $send(self, '[]=', $b), $b[$b.length - 1]);}, {$$s: self});\n      } else {\n        \n        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {\n          $Kernel.$raise($$$('ArgumentError'), \"struct size differs\")\n        };\n        return $send(self.$class().$members(), 'each_with_index', [], function $$10(name, index){var $b, self = $$10.$$s == null ? this : $$10.$$s;\n\n          \n          if (name == null) name = nil;\n          if (index == null) index = nil;\n          return ($b = [name, args['$[]'](index)], $send(self, '[]=', $b), $b[$b.length - 1]);}, {$$s: self});\n      };\n    }, -1);\n    \n    $def(self, '$initialize_copy', function $$initialize_copy(from) {\n      var self = this;\n\n      \n      self.$$data = {}\n      var keys = Object.keys(from.$$data), i, max, name;\n      for (i = 0, max = keys.length; i < max; i++) {\n        name = keys[i];\n        self.$$data[name] = from.$$data[name];\n      }\n    \n    });\n    $defs(self, '$keyword_init?', function $Struct_keyword_init$ques$11() {\n      var self = this;\n\n      return self.$$keyword_init;\n    });\n    \n    $def(self, '$members', function $$members() {\n      var self = this;\n\n      return self.$class().$members()\n    });\n    \n    $def(self, '$hash', function $$hash() {\n      var self = this;\n\n      return $$('Hash').$new(self.$$data).$hash()\n    });\n    \n    $def(self, '$[]', function $Struct_$$$12(name) {\n      var self = this;\n\n      \n      if ($eqeqeq($$$('Integer'), name)) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          $Kernel.$raise($$$('IndexError'), \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")\n        };\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          $Kernel.$raise($$$('IndexError'), \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")\n        };\n        name = self.$class().$members()['$[]'](name);\n      } else if ($eqeqeq($$$('String'), name)) {\n        \n        if(!self.$$data.hasOwnProperty(name)) {\n          $Kernel.$raise($$$('NameError').$new(\"no member '\" + (name) + \"' in struct\", name))\n        }\n      \n      } else {\n        $Kernel.$raise($$$('TypeError'), \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $Opal['$coerce_to!'](name, $$$('String'), \"to_str\");\n      return self.$$data[name];;\n    });\n    \n    $def(self, '$[]=', function $Struct_$$$eq$13(name, value) {\n      var self = this;\n\n      \n      if ($eqeqeq($$$('Integer'), name)) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          $Kernel.$raise($$$('IndexError'), \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")\n        };\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          $Kernel.$raise($$$('IndexError'), \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")\n        };\n        name = self.$class().$members()['$[]'](name);\n      } else if ($eqeqeq($$$('String'), name)) {\n        if (!$truthy(self.$class().$members()['$include?'](name.$to_sym()))) {\n          $Kernel.$raise($$$('NameError').$new(\"no member '\" + (name) + \"' in struct\", name))\n        }\n      } else {\n        $Kernel.$raise($$$('TypeError'), \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $Opal['$coerce_to!'](name, $$$('String'), \"to_str\");\n      return self.$$data[name] = value;;\n    });\n    \n    $def(self, '$==', function $Struct_$eq_eq$14(other) {\n      var self = this;\n\n      \n      if (!$truthy(other['$instance_of?'](self.$class()))) {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$$('Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    });\n    \n    $def(self, '$eql?', function $Struct_eql$ques$15(other) {\n      var self = this;\n\n      \n      if (!$truthy(other['$instance_of?'](self.$class()))) {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$$('Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    });\n    \n    $def(self, '$each', function $$each() {\n      var $yield = $$each.$$p || nil, self = this;\n\n      $$each.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"each\"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $send(self.$class().$members(), 'each', [], function $$17(name){var self = $$17.$$s == null ? this : $$17.$$s;\n\n        \n        if (name == null) name = nil;\n        return Opal.yield1($yield, self['$[]'](name));;}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$each_pair', function $$each_pair() {\n      var $yield = $$each_pair.$$p || nil, self = this;\n\n      $$each_pair.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return $send(self, 'enum_for', [\"each_pair\"], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;\n\n          return self.$size()}, {$$s: self})\n      };\n      $send(self.$class().$members(), 'each', [], function $$19(name){var self = $$19.$$s == null ? this : $$19.$$s;\n\n        \n        if (name == null) name = nil;\n        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$length', function $$length() {\n      var self = this;\n\n      return self.$class().$members().$length()\n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      var self = this;\n\n      return $send(self.$class().$members(), 'map', [], function $$20(name){var self = $$20.$$s == null ? this : $$20.$$s;\n\n        \n        if (name == null) name = nil;\n        return self['$[]'](name);}, {$$s: self})\n    });\n    var inspect_stack = [];\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this, result = nil, pushed = nil;\n\n      return (function() { try {\n      \n      result = \"#<struct \";\n      if ($truthy((inspect_stack)['$include?'](self.$__id__()))) {\n        return $rb_plus(result, \":...>\")\n      } else {\n        \n        (inspect_stack)['$<<'](self.$__id__());\n        pushed = true;\n        if (($eqeqeq($$$('Struct'), self) && ($truthy(self.$class().$name())))) {\n          result = $rb_plus(result, \"\" + (self.$class()) + \" \")\n        };\n        result = $rb_plus(result, $send(self.$each_pair(), 'map', [], function $$21(name, value){\n          \n          if (name == null) name = nil;\n          if (value == null) value = nil;\n          return \"\" + (name) + \"=\" + ($$('Opal').$inspect(value));}).$join(\", \"));\n        result = $rb_plus(result, \">\");\n        return result;\n      };\n      } finally {\n        ($truthy(pushed) ? (inspect_stack.pop()) : nil)\n      }; })()\n    });\n    \n    $def(self, '$to_h', function $$to_h() {\n      var block = $$to_h.$$p || nil, self = this;\n\n      $$to_h.$$p = null;\n      \n      ;\n      if ((block !== nil)) {\n        return $send($send(self, 'map', [], block.$to_proc()), 'to_h', $to_a(self.$args()))\n      };\n      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], function $$22(name, h){var $a, self = $$22.$$s == null ? this : $$22.$$s;\n\n        \n        if (name == null) name = nil;\n        if (h == null) h = nil;\n        return ($a = [name, self['$[]'](name)], $send(h, '[]=', $a), $a[$a.length - 1]);}, {$$s: self});\n    });\n    \n    $def(self, '$values_at', function $$values_at($a) {\n      var $post_args, args, self = this;\n\n      \n      $post_args = $slice(arguments);\n      args = $post_args;\n      args = $send(args, 'map', [], function $$23(arg){\n        \n        if (arg == null) arg = nil;\n        return arg.$$is_range ? arg.$to_a() : arg;}).$flatten();\n      \n      var result = [];\n      for (var i = 0, len = args.length; i < len; i++) {\n        if (!args[i].$$is_number) {\n          $Kernel.$raise($$$('TypeError'), \"no implicit conversion of \" + ((args[i]).$class()) + \" into Integer\")\n        }\n        result.push(self['$[]'](args[i]));\n      }\n      return result;\n    ;\n    }, -1);\n    \n    $def(self, '$dig', function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      $post_args = $slice(arguments, 1);\n      keys = $post_args;\n      item = ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key)) ? (self.$$data[key] || nil) : nil);\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if (!$truthy(item['$respond_to?'](\"dig\"))) {\n        $Kernel.$raise($$$('TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', $to_a(keys));\n    }, -2);\n    $alias(self, \"size\", \"length\");\n    $alias(self, \"to_s\", \"inspect\");\n    return $alias(self, \"values\", \"to_a\");\n  })('::', null, $nesting);\n};\n\nOpal.modules[\"corelib/set\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $freeze = Opal.freeze, $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,enum_for,[],<<,replace,compare_by_identity,name,compare_by_identity?,delete,select,frozen?,freeze,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys,|,proper_subset?,subset?,proper_superset?,superset?,-,select!,collect!');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Set');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $ret_or_1 = nil, $proto = self.$$prototype;\n\n    $proto.hash = nil;\n    \n    self.$include($$$('Enumerable'));\n    $defs(self, '$[]', function $Set_$$$1($a) {\n      var $post_args, ary, self = this;\n\n      \n      $post_args = $slice(arguments);\n      ary = $post_args;\n      return self.$new(ary);\n    }, -1);\n    \n    $def(self, '$initialize', function $$initialize(enum$) {\n      var block = $$initialize.$$p || nil, self = this;\n\n      $$initialize.$$p = null;\n      \n      ;\n      if (enum$ == null) enum$ = nil;\n      self.hash = $hash2([], {});\n      if ($truthy(enum$['$nil?']())) {\n        return nil\n      };\n      if (!$eqeqeq($$$('Enumerable'), enum$)) {\n        $Kernel.$raise($$$('ArgumentError'), \"value must be enumerable\")\n      };\n      if ($truthy(block)) {\n        return $send(enum$, 'each', [], function $$2(item){var self = $$2.$$s == null ? this : $$2.$$s;\n\n          \n          if (item == null) item = nil;\n          return self.$add(Opal.yield1(block, item));}, {$$s: self})\n      } else {\n        return self.$merge(enum$)\n      };\n    }, -1);\n    \n    $def(self, '$dup', function $$dup() {\n      var self = this, result = nil;\n\n      \n      result = self.$class().$new();\n      return result.$merge(self);\n    });\n    \n    $def(self, '$-', function $Set_$minus$3(enum$) {\n      var self = this;\n\n      \n      if (!$truthy(enum$['$respond_to?'](\"each\"))) {\n        $Kernel.$raise($$$('ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$subtract(enum$);\n    });\n    \n    $def(self, '$inspect', function $$inspect() {\n      var self = this;\n\n      return \"#<Set: {\" + (self.$to_a().$join(\",\")) + \"}>\"\n    });\n    \n    $def(self, '$==', function $Set_$eq_eq$4(other) {\n      var self = this;\n\n      if ($truthy(self['$equal?'](other))) {\n        return true\n      } else if ($truthy(other['$instance_of?'](self.$class()))) {\n        return self.hash['$=='](other.$instance_variable_get(\"@hash\"))\n      } else if (($truthy(other['$is_a?']($$$('Set'))) && ($eqeq(self.$size(), other.$size())))) {\n        return $send(other, 'all?', [], function $$5(o){var self = $$5.$$s == null ? this : $$5.$$s;\n          if (self.hash == null) self.hash = nil;\n\n          \n          if (o == null) o = nil;\n          return self.hash['$include?'](o);}, {$$s: self})\n      } else {\n        return false\n      }\n    });\n    \n    $def(self, '$add', function $$add(o) {\n      var self = this;\n\n      \n      self.hash['$[]='](o, true);\n      return self;\n    });\n    \n    $def(self, '$classify', function $$classify() {\n      var block = $$classify.$$p || nil, self = this, result = nil;\n\n      $$classify.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"classify\")\n      };\n      result = $send($$$('Hash'), 'new', [], function $$6(h, k){var $a, self = $$6.$$s == null ? this : $$6.$$s;\n\n        \n        if (h == null) h = nil;\n        if (k == null) k = nil;\n        return ($a = [k, self.$class().$new()], $send(h, '[]=', $a), $a[$a.length - 1]);}, {$$s: self});\n      $send(self, 'each', [], function $$7(item){\n        \n        if (item == null) item = nil;\n        return result['$[]'](Opal.yield1(block, item)).$add(item);});\n      return result;\n    });\n    \n    $def(self, '$collect!', function $Set_collect$excl$8() {\n      var block = $Set_collect$excl$8.$$p || nil, self = this, result = nil;\n\n      $Set_collect$excl$8.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"collect!\")\n      };\n      result = self.$class().$new();\n      $send(self, 'each', [], function $$9(item){\n        \n        if (item == null) item = nil;\n        return result['$<<'](Opal.yield1(block, item));});\n      return self.$replace(result);\n    });\n    \n    $def(self, '$compare_by_identity', function $$compare_by_identity() {\n      var self = this;\n\n      if ($truthy(self.hash['$respond_to?'](\"compare_by_identity\"))) {\n        \n        self.hash.$compare_by_identity();\n        return self;\n      } else {\n        return self.$raise($$('NotImplementedError'), \"\" + (self.$class().$name()) + \"#\" + (\"compare_by_identity\") + \" is not implemented\")\n      }\n    });\n    \n    $def(self, '$compare_by_identity?', function $Set_compare_by_identity$ques$10() {\n      var self = this, $ret_or_1 = nil;\n\n      if ($truthy(($ret_or_1 = self.hash['$respond_to?'](\"compare_by_identity?\")))) {\n        return self.hash['$compare_by_identity?']()\n      } else {\n        return $ret_or_1\n      }\n    });\n    \n    $def(self, '$delete', function $Set_delete$11(o) {\n      var self = this;\n\n      \n      self.hash.$delete(o);\n      return self;\n    });\n    \n    $def(self, '$delete?', function $Set_delete$ques$12(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        \n        self.$delete(o);\n        return self;\n      } else {\n        return nil\n      }\n    });\n    \n    $def(self, '$delete_if', function $$delete_if() {\n      var $yield = $$delete_if.$$p || nil, self = this;\n\n      $$delete_if.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return self.$enum_for(\"delete_if\")\n      };\n      $send($send(self, 'select', [], function $$13(o){\n        \n        if (o == null) o = nil;\n        return Opal.yield1($yield, o);;}), 'each', [], function $$14(o){var self = $$14.$$s == null ? this : $$14.$$s;\n        if (self.hash == null) self.hash = nil;\n\n        \n        if (o == null) o = nil;\n        return self.hash.$delete(o);}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$freeze', function $$freeze() {\n      var self = this;\n\n      \n      if ($truthy(self['$frozen?']())) {\n        return self\n      };\n      self.hash.$freeze();\n      return $freeze(self);;\n    });\n    \n    $def(self, '$keep_if', function $$keep_if() {\n      var $yield = $$keep_if.$$p || nil, self = this;\n\n      $$keep_if.$$p = null;\n      \n      if (!($yield !== nil)) {\n        return self.$enum_for(\"keep_if\")\n      };\n      $send($send(self, 'reject', [], function $$15(o){\n        \n        if (o == null) o = nil;\n        return Opal.yield1($yield, o);;}), 'each', [], function $$16(o){var self = $$16.$$s == null ? this : $$16.$$s;\n        if (self.hash == null) self.hash = nil;\n\n        \n        if (o == null) o = nil;\n        return self.hash.$delete(o);}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$reject!', function $Set_reject$excl$17() {\n      var block = $Set_reject$excl$17.$$p || nil, self = this, before = nil;\n\n      $Set_reject$excl$17.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"reject!\")\n      };\n      before = self.$size();\n      $send(self, 'delete_if', [], block.$to_proc());\n      if ($eqeq(self.$size(), before)) {\n        return nil\n      } else {\n        return self\n      };\n    });\n    \n    $def(self, '$select!', function $Set_select$excl$18() {\n      var block = $Set_select$excl$18.$$p || nil, self = this, before = nil;\n\n      $Set_select$excl$18.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"select!\")\n      };\n      before = self.$size();\n      $send(self, 'keep_if', [], block.$to_proc());\n      if ($eqeq(self.$size(), before)) {\n        return nil\n      } else {\n        return self\n      };\n    });\n    \n    $def(self, '$add?', function $Set_add$ques$19(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        return nil\n      } else {\n        return self.$add(o)\n      }\n    });\n    \n    $def(self, '$each', function $$each() {\n      var block = $$each.$$p || nil, self = this;\n\n      $$each.$$p = null;\n      \n      ;\n      if (!(block !== nil)) {\n        return self.$enum_for(\"each\")\n      };\n      $send(self.hash, 'each_key', [], block.$to_proc());\n      return self;\n    });\n    \n    $def(self, '$empty?', function $Set_empty$ques$20() {\n      var self = this;\n\n      return self.hash['$empty?']()\n    });\n    \n    $def(self, '$eql?', function $Set_eql$ques$21(other) {\n      var self = this;\n\n      return self.hash['$eql?']($send(other, 'instance_eval', [], function $$22(){var self = $$22.$$s == null ? this : $$22.$$s;\n        if (self.hash == null) self.hash = nil;\n\n        return self.hash}, {$$s: self}))\n    });\n    \n    $def(self, '$clear', function $$clear() {\n      var self = this;\n\n      \n      self.hash.$clear();\n      return self;\n    });\n    \n    $def(self, '$include?', function $Set_include$ques$23(o) {\n      var self = this;\n\n      return self.hash['$include?'](o)\n    });\n    \n    $def(self, '$merge', function $$merge(enum$) {\n      var self = this;\n\n      \n      $send(enum$, 'each', [], function $$24(item){var self = $$24.$$s == null ? this : $$24.$$s;\n\n        \n        if (item == null) item = nil;\n        return self.$add(item);}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$replace', function $$replace(enum$) {\n      var self = this;\n\n      \n      self.$clear();\n      self.$merge(enum$);\n      return self;\n    });\n    \n    $def(self, '$size', function $$size() {\n      var self = this;\n\n      return self.hash.$size()\n    });\n    \n    $def(self, '$subtract', function $$subtract(enum$) {\n      var self = this;\n\n      \n      $send(enum$, 'each', [], function $$25(item){var self = $$25.$$s == null ? this : $$25.$$s;\n\n        \n        if (item == null) item = nil;\n        return self.$delete(item);}, {$$s: self});\n      return self;\n    });\n    \n    $def(self, '$|', function $Set_$$26(enum$) {\n      var self = this;\n\n      \n      if (!$truthy(enum$['$respond_to?'](\"each\"))) {\n        $Kernel.$raise($$$('ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$merge(enum$);\n    });\n    \n    function is_set(set) {\n      ($truthy(($ret_or_1 = (set)['$is_a?']($$$('Set')))) ? ($ret_or_1) : ($Kernel.$raise($$$('ArgumentError'), \"value must be a set\")))\n    }\n  ;\n    \n    $def(self, '$superset?', function $Set_superset$ques$27(set) {\n      var self = this;\n\n      \n      is_set(set);\n      if ($truthy($rb_lt(self.$size(), set.$size()))) {\n        return false\n      };\n      return $send(set, 'all?', [], function $$28(o){var self = $$28.$$s == null ? this : $$28.$$s;\n\n        \n        if (o == null) o = nil;\n        return self['$include?'](o);}, {$$s: self});\n    });\n    \n    $def(self, '$proper_superset?', function $Set_proper_superset$ques$29(set) {\n      var self = this;\n\n      \n      is_set(set);\n      if ($truthy($rb_le(self.$size(), set.$size()))) {\n        return false\n      };\n      return $send(set, 'all?', [], function $$30(o){var self = $$30.$$s == null ? this : $$30.$$s;\n\n        \n        if (o == null) o = nil;\n        return self['$include?'](o);}, {$$s: self});\n    });\n    \n    $def(self, '$subset?', function $Set_subset$ques$31(set) {\n      var self = this;\n\n      \n      is_set(set);\n      if ($truthy($rb_lt(set.$size(), self.$size()))) {\n        return false\n      };\n      return $send(self, 'all?', [], function $$32(o){\n        \n        if (o == null) o = nil;\n        return set['$include?'](o);});\n    });\n    \n    $def(self, '$proper_subset?', function $Set_proper_subset$ques$33(set) {\n      var self = this;\n\n      \n      is_set(set);\n      if ($truthy($rb_le(set.$size(), self.$size()))) {\n        return false\n      };\n      return $send(self, 'all?', [], function $$34(o){\n        \n        if (o == null) o = nil;\n        return set['$include?'](o);});\n    });\n    \n    $def(self, '$intersect?', function $Set_intersect$ques$35(set) {\n      var self = this;\n\n      \n      is_set(set);\n      if ($truthy($rb_lt(self.$size(), set.$size()))) {\n        return $send(self, 'any?', [], function $$36(o){\n          \n          if (o == null) o = nil;\n          return set['$include?'](o);})\n      } else {\n        return $send(set, 'any?', [], function $$37(o){var self = $$37.$$s == null ? this : $$37.$$s;\n\n          \n          if (o == null) o = nil;\n          return self['$include?'](o);}, {$$s: self})\n      };\n    });\n    \n    $def(self, '$disjoint?', function $Set_disjoint$ques$38(set) {\n      var self = this;\n\n      return self['$intersect?'](set)['$!']()\n    });\n    \n    $def(self, '$to_a', function $$to_a() {\n      var self = this;\n\n      return self.hash.$keys()\n    });\n    $alias(self, \"+\", \"|\");\n    $alias(self, \"<\", \"proper_subset?\");\n    $alias(self, \"<<\", \"add\");\n    $alias(self, \"<=\", \"subset?\");\n    $alias(self, \">\", \"proper_superset?\");\n    $alias(self, \">=\", \"superset?\");\n    $alias(self, \"difference\", \"-\");\n    $alias(self, \"filter!\", \"select!\");\n    $alias(self, \"length\", \"size\");\n    $alias(self, \"map!\", \"collect!\");\n    $alias(self, \"member?\", \"include?\");\n    return $alias(self, \"union\", \"|\");\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/dir\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('[],pwd');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Dir');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function(self, $parent_nesting) {\n      \n      \n      \n      $def(self, '$chdir', function $$chdir(dir) {\n        var $yield = $$chdir.$$p || nil, prev_cwd = nil;\n\n        $$chdir.$$p = null;\n        return (function() { try {\n        \n        prev_cwd = Opal.current_dir;\n        Opal.current_dir = dir;\n        return Opal.yieldX($yield, []);;\n        } finally {\n          Opal.current_dir = prev_cwd\n        }; })()\n      });\n      \n      $def(self, '$pwd', function $$pwd() {\n        \n        return Opal.current_dir || '.';\n      });\n      \n      $def(self, '$home', function $$home() {\n        var $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = $$$('ENV')['$[]'](\"HOME\")))) {\n          return $ret_or_1\n        } else {\n          return \".\"\n        }\n      });\n      return $alias(self, \"getwd\", \"pwd\");\n    })(Opal.get_singleton_class(self), $nesting)\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/file\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $klass = Opal.klass, $const_set = Opal.const_set, $Opal = Opal.Opal, $regexp = Opal.regexp, $rb_plus = Opal.rb_plus, $def = Opal.def, $Kernel = Opal.Kernel, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $range = Opal.range, $send = Opal.send, $slice = Opal.slice, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('respond_to?,to_path,coerce_to!,pwd,split,sub,+,unshift,join,home,raise,start_with?,absolute_path,==,<,dirname,-,basename,empty?,rindex,[],length,nil?,gsub,find,=~,map,each_with_index,flatten,reject,to_proc,end_with?,expand_path,exist?');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;\n\n    \n    $const_set($nesting[0], 'Separator', $const_set($nesting[0], 'SEPARATOR', \"/\"));\n    $const_set($nesting[0], 'ALT_SEPARATOR', nil);\n    $const_set($nesting[0], 'PATH_SEPARATOR', \":\");\n    $const_set($nesting[0], 'FNM_SYSCASE', 0);\n    windows_root_rx = /^[a-zA-Z]:(?:\\\\|\\/)/;\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$absolute_path', function $$absolute_path(path, basedir) {\n        var sep = nil, sep_chars = nil, new_parts = nil, $ret_or_1 = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;\n\n        \n        if (basedir == null) basedir = nil;\n        sep = $$('SEPARATOR');\n        sep_chars = $sep_chars();\n        new_parts = [];\n        path = ($truthy(path['$respond_to?'](\"to_path\")) ? (path.$to_path()) : (path));\n        path = $Opal['$coerce_to!'](path, $$$('String'), \"to_str\");\n        basedir = ($truthy(($ret_or_1 = basedir)) ? ($ret_or_1) : ($$$('Dir').$pwd()));\n        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);\n        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);\n        if ($truthy(path_abs)) {\n          \n          parts = path.$split($regexp([\"[\", sep_chars, \"]\"]));\n          leading_sep = windows_root_rx.test(path) ? '' : path.$sub($regexp([\"^([\", sep_chars, \"]+).*$\"]), \"\\\\1\");\n          abs = true;\n        } else {\n          \n          parts = $rb_plus(basedir.$split($regexp([\"[\", sep_chars, \"]\"])), path.$split($regexp([\"[\", sep_chars, \"]\"])));\n          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub($regexp([\"^([\", sep_chars, \"]+).*$\"]), \"\\\\1\");\n          abs = basedir_abs;\n        };\n        \n        var part;\n        for (var i = 0, ii = parts.length; i < ii; i++) {\n          part = parts[i];\n\n          if (\n            (part === nil) ||\n            (part === ''  && ((new_parts.length === 0) || abs)) ||\n            (part === '.' && ((new_parts.length === 0) || abs))\n          ) {\n            continue;\n          }\n          if (part === '..') {\n            new_parts.pop();\n          } else {\n            new_parts.push(part);\n          }\n        }\n\n        if (!abs && parts[0] !== '.') {\n          new_parts.$unshift(\".\")\n        }\n      ;\n        new_path = new_parts.$join(sep);\n        if ($truthy(abs)) {\n          new_path = $rb_plus(leading_sep, new_path)\n        };\n        return new_path;\n      }, -2);\n      \n      $def(self, '$expand_path', function $$expand_path(path, basedir) {\n        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;\n\n        \n        if (basedir == null) basedir = nil;\n        sep = $$('SEPARATOR');\n        sep_chars = $sep_chars();\n        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {\n          \n          home = $$('Dir').$home();\n          if (!$truthy(home)) {\n            $Kernel.$raise($$$('ArgumentError'), \"couldn't find HOME environment -- expanding `~'\")\n          };\n          leading_sep = windows_root_rx.test(home) ? '' : home.$sub($regexp([\"^([\", sep_chars, \"]+).*$\"]), \"\\\\1\");\n          if (!$truthy(home['$start_with?'](leading_sep))) {\n            $Kernel.$raise($$$('ArgumentError'), \"non-absolute home\")\n          };\n          home = $rb_plus(home, sep);\n          home_path_regexp = $regexp([\"^\\\\~(?:\", sep, \"|$)\"]);\n          path = path.$sub(home_path_regexp, home);\n          if ($truthy(basedir)) {\n            basedir = basedir.$sub(home_path_regexp, home)\n          };\n        };\n        return self.$absolute_path(path, basedir);\n      }, -2);\n      \n      // Coerce a given path to a path string using #to_path and #to_str\n      function $coerce_to_path(path) {\n        if ($truthy((path)['$respond_to?'](\"to_path\"))) {\n          path = path.$to_path();\n        }\n\n        path = $Opal['$coerce_to!'](path, $$$('String'), \"to_str\");\n\n        return path;\n      }\n\n      // Return a RegExp compatible char class\n      function $sep_chars() {\n        if ($$('ALT_SEPARATOR') === nil) {\n          return Opal.escape_regexp($$('SEPARATOR'));\n        } else {\n          return Opal.escape_regexp($rb_plus($$('SEPARATOR'), $$('ALT_SEPARATOR')));\n        }\n      }\n    ;\n      \n      $def(self, '$dirname', function $$dirname(path, level) {\n        var self = this, sep_chars = nil;\n\n        \n        if (level == null) level = 1;\n        if ($eqeq(level, 0)) {\n          return path\n        };\n        if ($truthy($rb_lt(level, 0))) {\n          $Kernel.$raise($$$('ArgumentError'), \"level can't be negative\")\n        };\n        sep_chars = $sep_chars();\n        path = $coerce_to_path(path);\n        \n        var absolute = path.match(new RegExp(\"^[\" + (sep_chars) + \"]\")), out;\n\n        path = path.replace(new RegExp(\"[\" + (sep_chars) + \"]+$\"), ''); // remove trailing separators\n        path = path.replace(new RegExp(\"[^\" + (sep_chars) + \"]+$\"), ''); // remove trailing basename\n        path = path.replace(new RegExp(\"[\" + (sep_chars) + \"]+$\"), ''); // remove final trailing separators\n\n        if (path === '') {\n          out = absolute ? '/' : '.';\n        }\n        else {\n          out = path;\n        }\n\n        if (level == 1) {\n          return out;\n        }\n        else {\n          return self.$dirname(out, $rb_minus(level, 1))\n        }\n      ;\n      }, -2);\n      \n      $def(self, '$basename', function $$basename(name, suffix) {\n        var sep_chars = nil;\n\n        \n        if (suffix == null) suffix = nil;\n        sep_chars = $sep_chars();\n        name = $coerce_to_path(name);\n        \n        if (name.length == 0) {\n          return name;\n        }\n\n        if (suffix !== nil) {\n          suffix = $Opal['$coerce_to!'](suffix, $$$('String'), \"to_str\")\n        } else {\n          suffix = null;\n        }\n\n        name = name.replace(new RegExp(\"(.)[\" + (sep_chars) + \"]*$\"), '$1');\n        name = name.replace(new RegExp(\"^(?:.*[\" + (sep_chars) + \"])?([^\" + (sep_chars) + \"]+)$\"), '$1');\n\n        if (suffix === \".*\") {\n          name = name.replace(/\\.[^\\.]+$/, '');\n        } else if(suffix !== null) {\n          suffix = Opal.escape_regexp(suffix);\n          name = name.replace(new RegExp(\"\" + (suffix) + \"$\"), '');\n        }\n\n        return name;\n      ;\n      }, -2);\n      \n      $def(self, '$extname', function $$extname(path) {\n        var self = this, filename = nil, last_dot_idx = nil;\n\n        \n        path = $coerce_to_path(path);\n        filename = self.$basename(path);\n        if ($truthy(filename['$empty?']())) {\n          return \"\"\n        };\n        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(\".\");\n        if (($truthy(last_dot_idx['$nil?']()) || ($eqeq($rb_plus(last_dot_idx, 1), $rb_minus(filename.$length(), 1))))) {\n          return \"\"\n        } else {\n          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))\n        };\n      });\n      \n      $def(self, '$exist?', function $exist$ques$1(path) {\n        \n        return Opal.modules[path] != null\n      });\n      \n      $def(self, '$directory?', function $directory$ques$2(path) {\n        var files = nil;\n\n        \n        files = [];\n        \n        for (var key in Opal.modules) {\n          files.push(key)\n        }\n      ;\n        path = path.$gsub($regexp([\"(^.\", $$('SEPARATOR'), \"+|\", $$('SEPARATOR'), \"+$)\"]));\n        return $send(files, 'find', [], function $$3(f){\n          \n          if (f == null) f = nil;\n          return f['$=~']($regexp([\"^\", path]));});\n      });\n      \n      $def(self, '$join', function $$join($a) {\n        var $post_args, paths, result = nil;\n\n        \n        $post_args = $slice(arguments);\n        paths = $post_args;\n        if ($truthy(paths['$empty?']())) {\n          return \"\"\n        };\n        result = \"\";\n        paths = $send(paths.$flatten().$each_with_index(), 'map', [], function $$4(item, index){\n          \n          if (item == null) item = nil;\n          if (index == null) index = nil;\n          if (($eqeq(index, 0) && ($truthy(item['$empty?']())))) {\n            return $$('SEPARATOR')\n          } else if (($eqeq(paths.$length(), $rb_plus(index, 1)) && ($truthy(item['$empty?']())))) {\n            return $$('SEPARATOR')\n          } else {\n            return item\n          };});\n        paths = $send(paths, 'reject', [], \"empty?\".$to_proc());\n        $send(paths, 'each_with_index', [], function $$5(item, index){var next_item = nil;\n\n          \n          if (item == null) item = nil;\n          if (index == null) index = nil;\n          next_item = paths['$[]']($rb_plus(index, 1));\n          if ($truthy(next_item['$nil?']())) {\n            return (result = \"\" + (result) + (item))\n          } else {\n            \n            if (($truthy(item['$end_with?']($$('SEPARATOR'))) && ($truthy(next_item['$start_with?']($$('SEPARATOR')))))) {\n              item = item.$sub($regexp([$$('SEPARATOR'), \"+$\"]), \"\")\n            };\n            return (result = (($truthy(item['$end_with?']($$('SEPARATOR'))) || ($truthy(next_item['$start_with?']($$('SEPARATOR'))))) ? (\"\" + (result) + (item)) : (\"\" + (result) + (item) + ($$('SEPARATOR')))));\n          };});\n        return result;\n      }, -1);\n      \n      $def(self, '$split', function $$split(path) {\n        \n        return path.$split($$('SEPARATOR'))\n      });\n      $alias(self, \"realpath\", \"expand_path\");\n      return $alias(self, \"exists?\", \"exist?\");\n    })(Opal.get_singleton_class(self), $nesting);\n  })('::', $$$('IO'), $nesting)\n};\n\nOpal.modules[\"corelib/process/base\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $return_val = Opal.return_val, nil = Opal.nil;\n\n  \n  (function($base, $super) {\n    var self = $klass($base, $super, 'Signal');\n\n    \n    return $defs(self, '$trap', function $$trap($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1)\n  })('::', null);\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'GC');\n\n    \n    return $defs(self, '$start', $return_val(nil))\n  })('::', null);\n};\n\nOpal.modules[\"corelib/process\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $defs = Opal.defs, $truthy = Opal.truthy, $return_val = Opal.return_val, $Kernel = Opal.Kernel, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('const_set,size,<<,__register_clock__,to_f,now,new,[],raise');\n  return (function($base) {\n    var self = $module($base, 'Process');\n\n    var monotonic = nil;\n\n    \n    self.__clocks__ = [];\n    $defs(self, '$__register_clock__', function $$__register_clock__(name, func) {\n      var self = this;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      self.$const_set(name, self.__clocks__.$size());\n      return self.__clocks__['$<<'](func);\n    });\n    self.$__register_clock__(\"CLOCK_REALTIME\", function() { return Date.now() });\n    monotonic = false;\n    \n    if (Opal.global.performance) {\n      monotonic = function() {\n        return performance.now()\n      };\n    }\n    else if (Opal.global.process && process.hrtime) {\n      // let now be the base to get smaller numbers\n      var hrtime_base = process.hrtime();\n\n      monotonic = function() {\n        var hrtime = process.hrtime(hrtime_base);\n        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;\n        return ((hrtime[0] * 1000) + (us / 1000));\n      };\n    }\n  ;\n    if ($truthy(monotonic)) {\n      self.$__register_clock__(\"CLOCK_MONOTONIC\", monotonic)\n    };\n    $defs(self, '$pid', $return_val(0));\n    $defs(self, '$times', function $$times() {\n      var t = nil;\n\n      \n      t = $$$('Time').$now().$to_f();\n      return $$$($$$('Benchmark'), 'Tms').$new(t, t, t, t, t);\n    });\n    return $defs(self, '$clock_gettime', function $$clock_gettime(clock_id, unit) {\n      var self = this, $ret_or_1 = nil, clock = nil;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      if (unit == null) unit = \"float_second\";\n      if ($truthy(($ret_or_1 = (clock = self.__clocks__['$[]'](clock_id))))) {\n        $ret_or_1\n      } else {\n        $Kernel.$raise($$$($$$('Errno'), 'EINVAL'), \"clock_gettime(\" + (clock_id) + \") \" + (self.__clocks__['$[]'](clock_id)))\n      };\n      \n      var ms = clock();\n      switch (unit) {\n        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)\n        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float\n        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float\n        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer\n        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer\n        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer\n        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer\n        default: $Kernel.$raise($$$('ArgumentError'), \"unexpected unit: \" + (unit))\n      }\n    ;\n    }, -2);\n  })('::')\n};\n\nOpal.modules[\"corelib/random/formatter\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $range = Opal.range, $send = Opal.send, $rb_divide = Opal.rb_divide, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Random');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$hex', function $$hex(count) {\n        var self = this;\n\n        \n        if (count == null) count = nil;\n        count = $$$('Random').$_verify_count(count);\n        \n        var bytes = self.$bytes(count);\n        var out = \"\";\n        for (var i = 0; i < count; i++) {\n          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');\n        }\n        return (out).$encode(\"US-ASCII\");\n      ;\n      }, -1);\n      \n      $def(self, '$random_bytes', function $$random_bytes(count) {\n        var self = this;\n\n        \n        if (count == null) count = nil;\n        return self.$bytes(count);\n      }, -1);\n      \n      $def(self, '$base64', function $$base64(count) {\n        var self = this;\n\n        \n        if (count == null) count = nil;\n        return $$$('Base64').$strict_encode64(self.$random_bytes(count)).$encode(\"US-ASCII\");\n      }, -1);\n      \n      $def(self, '$urlsafe_base64', function $$urlsafe_base64(count, padding) {\n        var self = this;\n\n        \n        if (count == null) count = nil;\n        if (padding == null) padding = false;\n        return $$$('Base64').$urlsafe_encode64(self.$random_bytes(count), padding).$encode(\"US-ASCII\");\n      }, -1);\n      \n      $def(self, '$uuid', function $$uuid() {\n        var self = this, str = nil;\n\n        \n        str = self.$hex(16).$split(\"\");\n        str['$[]='](12, \"4\");\n        str['$[]='](16, (parseInt(str['$[]'](16), 16) & 3 | 8).toString(16));\n        str = [str['$[]']($range(0, 8, true)), str['$[]']($range(8, 12, true)), str['$[]']($range(12, 16, true)), str['$[]']($range(16, 20, true)), str['$[]']($range(20, 32, true))];\n        str = $send(str, 'map', [], \"join\".$to_proc());\n        return str.$join(\"-\");\n      });\n      \n      $def(self, '$random_float', function $$random_float() {\n        var self = this, bs = nil, num = nil;\n\n        \n        bs = self.$bytes(4);\n        num = 0;\n        $send((4), 'times', [], function $$1(i){\n          \n          if (i == null) i = nil;\n          num = num['$<<'](8);\n          return (num = num['$|'](bs['$[]'](i).$ord()));});\n        return $rb_divide(num.$abs(), 2147483647);\n      });\n      \n      $def(self, '$random_number', function $$random_number(limit) {\n        var self = this;\n\n        \n        ;\n        \n        function randomFloat() {\n          return self.$random_float();\n        }\n\n        function randomInt(max) {\n          return Math.floor(randomFloat() * max);\n        }\n\n        function randomRange() {\n          var min = limit.begin,\n              max = limit.end;\n\n          if (min === nil || max === nil) {\n            return nil;\n          }\n\n          var length = max - min;\n\n          if (length < 0) {\n            return nil;\n          }\n\n          if (length === 0) {\n            return min;\n          }\n\n          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {\n            length++;\n          }\n\n          return randomInt(length) + min;\n        }\n\n        if (limit == null) {\n          return randomFloat();\n        } else if (limit.$$is_range) {\n          return randomRange();\n        } else if (limit.$$is_number) {\n          if (limit <= 0) {\n            $Kernel.$raise($$$('ArgumentError'), \"invalid argument - \" + (limit))\n          }\n\n          if (limit % 1 === 0) {\n            // integer\n            return randomInt(limit);\n          } else {\n            return randomFloat() * limit;\n          }\n        } else {\n          limit = $Opal['$coerce_to!'](limit, $$$('Integer'), \"to_int\");\n\n          if (limit <= 0) {\n            $Kernel.$raise($$$('ArgumentError'), \"invalid argument - \" + (limit))\n          }\n\n          return randomInt(limit);\n        }\n      ;\n      }, -1);\n      return $def(self, '$alphanumeric', function $$alphanumeric(count) {\n        var self = this, map = nil;\n\n        \n        if (count == null) count = nil;\n        count = $$('Random').$_verify_count(count);\n        map = $send([$range(\"0\", \"9\", false), $range(\"a\", \"z\", false), $range(\"A\", \"Z\", false)], 'map', [], \"to_a\".$to_proc()).$flatten();\n        return $send($$$('Array'), 'new', [count], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;\n\n          \n          if (i == null) i = nil;\n          return map['$[]'](self.$random_number(map.$length()));}, {$$s: self}).$join();\n      }, -1);\n    })(self, $nesting);\n    self.$include($$$($$$('Random'), 'Formatter'));\n    return self.$extend($$$($$$('Random'), 'Formatter'));\n  })('::', null, $nesting)\n};\n\nOpal.modules[\"corelib/random/mersenne_twister\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, nil = Opal.nil, $$$ = Opal.$$$, mersenne_twister = nil;\n\n  Opal.add_stubs('generator=');\n  \n  mersenne_twister = (function() {\n  /* Period parameters */\n  var N = 624;\n  var M = 397;\n  var MATRIX_A = 0x9908b0df;      /* constant vector a */\n  var UMASK = 0x80000000;         /* most significant w-r bits */\n  var LMASK = 0x7fffffff;         /* least significant r bits */\n  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };\n  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };\n\n  function init(s) {\n    var mt = {left: 0, next: N, state: new Array(N)};\n    init_genrand(mt, s);\n    return mt;\n  }\n\n  /* initializes mt[N] with a seed */\n  function init_genrand(mt, s) {\n    var j, i;\n    mt.state[0] = s >>> 0;\n    for (j=1; j<N; j++) {\n      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array state[].                     */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */\n    }\n    mt.left = 1;\n    mt.next = N;\n  }\n\n  /* generate N words at one time */\n  function next_state(mt) {\n    var p = 0, _p = mt.state;\n    var j;\n\n    mt.left = N;\n    mt.next = 0;\n\n    for (j=N-M+1; --j; p++)\n      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);\n\n    for (j=M; --j; p++)\n      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);\n\n    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);\n  }\n\n  /* generates a random number on [0,0xffffffff]-interval */\n  function genrand_int32(mt) {\n    /* mt must be initialized */\n    var y;\n\n    if (--mt.left <= 0) next_state(mt);\n    y = mt.state[mt.next++];\n\n    /* Tempering */\n    y ^= (y >>> 11);\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= (y >>> 18);\n\n    return y >>> 0;\n  }\n\n  function int_pair_to_real_exclusive(a, b) {\n    a >>>= 5;\n    b >>>= 6;\n    return(a*67108864.0+b)*(1.0/9007199254740992.0);\n  }\n\n  // generates a random number on [0,1) with 53-bit resolution\n  function genrand_real(mt) {\n    /* mt must be initialized */\n    var a = genrand_int32(mt), b = genrand_int32(mt);\n    return int_pair_to_real_exclusive(a, b);\n  }\n\n  return { genrand_real: genrand_real, init: init };\n})();\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Random');\n\n    var $a;\n\n    \n    var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n    $const_set(self, 'MERSENNE_TWISTER_GENERATOR', {\n    new_seed: function() { return Math.round(Math.random() * MAX_INT); },\n    reseed: function(seed) { return mersenne_twister.init(seed); },\n    rand: function(mt) { return mersenne_twister.genrand_real(mt); }\n  });\n    return ($a = [$$$(self, 'MERSENNE_TWISTER_GENERATOR')], $send(self, 'generator=', $a), $a[$a.length - 1]);\n  })('::', null);\n};\n\nOpal.modules[\"corelib/random\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $truthy = Opal.truthy, $klass = Opal.klass, $Kernel = Opal.Kernel, $defs = Opal.defs, $Opal = Opal.Opal, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $send = Opal.send, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,attr_reader,to_int,raise,new_seed,coerce_to!,reseed,rand,seed,bytes,===,==,state,_verify_count,encode,join,new,chr,random_number,random_float,const_defined?,const_set');\n  \n  self.$require(\"corelib/random/formatter\");\n  (function($base, $super) {\n    var self = $klass($base, $super, 'Random');\n\n    \n    \n    self.$attr_reader(\"seed\", \"state\");\n    $defs(self, '$_verify_count', function $$_verify_count(count) {\n      \n      \n      if (!$truthy(count)) count = 16;\n      if (typeof count !== \"number\") count = (count).$to_int();\n      if (count < 0) $Kernel.$raise($$$('ArgumentError'), \"negative string size (or size too big)\");\n      count = Math.floor(count);\n      return count;\n    \n    });\n    \n    $def(self, '$initialize', function $$initialize(seed) {\n      var self = this;\n\n      \n      if (seed == null) seed = $$$('Random').$new_seed();\n      seed = $Opal['$coerce_to!'](seed, $$$('Integer'), \"to_int\");\n      self.state = seed;\n      return self.$reseed(seed);\n    }, -1);\n    \n    $def(self, '$reseed', function $$reseed(seed) {\n      var self = this;\n\n      \n      self.seed = seed;\n      return self.$rng = Opal.$$rand.reseed(seed);;\n    });\n    $defs(self, '$new_seed', function $$new_seed() {\n      \n      return Opal.$$rand.new_seed();\n    });\n    $defs(self, '$rand', function $$rand(limit) {\n      var self = this;\n\n      \n      ;\n      return $$$(self, 'DEFAULT').$rand(limit);\n    }, -1);\n    $defs(self, '$srand', function $$srand(n) {\n      var self = this, previous_seed = nil;\n\n      \n      if (n == null) n = $$$('Random').$new_seed();\n      n = $Opal['$coerce_to!'](n, $$$('Integer'), \"to_int\");\n      previous_seed = $$$(self, 'DEFAULT').$seed();\n      $$$(self, 'DEFAULT').$reseed(n);\n      return previous_seed;\n    }, -1);\n    $defs(self, '$urandom', function $$urandom(size) {\n      \n      return $$$('SecureRandom').$bytes(size)\n    });\n    \n    $def(self, '$==', function $Random_$eq_eq$1(other) {\n      var self = this, $ret_or_1 = nil;\n\n      \n      if (!$eqeqeq($$$('Random'), other)) {\n        return false\n      };\n      if ($truthy(($ret_or_1 = self.$seed()['$=='](other.$seed())))) {\n        return self.$state()['$=='](other.$state())\n      } else {\n        return $ret_or_1\n      };\n    });\n    \n    $def(self, '$bytes', function $$bytes(length) {\n      var self = this;\n\n      \n      length = $$$('Random').$_verify_count(length);\n      return $send($$$('Array'), 'new', [length], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;\n\n        return self.$rand(255).$chr()}, {$$s: self}).$join().$encode(\"ASCII-8BIT\");\n    });\n    $defs(self, '$bytes', function $$bytes(length) {\n      var self = this;\n\n      return $$$(self, 'DEFAULT').$bytes(length)\n    });\n    \n    $def(self, '$rand', function $$rand(limit) {\n      var self = this;\n\n      \n      ;\n      return self.$random_number(limit);\n    }, -1);\n    \n    $def(self, '$random_float', function $$random_float() {\n      var self = this;\n\n      \n      self.state++;\n      return Opal.$$rand.rand(self.$rng);\n    \n    });\n    $defs(self, '$random_float', function $$random_float() {\n      var self = this;\n\n      return $$$(self, 'DEFAULT').$random_float()\n    });\n    return $defs(self, '$generator=', function $Random_generator$eq$3(generator) {\n      var self = this;\n\n      \n      Opal.$$rand = generator;\n      if ($truthy(self['$const_defined?'](\"DEFAULT\"))) {\n        return $$$(self, 'DEFAULT').$reseed()\n      } else {\n        return self.$const_set(\"DEFAULT\", self.$new(self.$new_seed()))\n      };\n    });\n  })('::', null);\n  return self.$require(\"corelib/random/mersenne_twister\");\n};\n\nOpal.modules[\"corelib/unsupported\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $Kernel = Opal.Kernel, $klass = Opal.klass, $send = Opal.send, $slice = Opal.slice, $module = Opal.module, $def = Opal.def, $return_val = Opal.return_val, $alias = Opal.alias, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('raise,warn,each,define_method,%,public,private_method_defined?,private_class_method,instance_method,instance_methods,method_defined?,private_methods');\n  \n  \n  var warnings = {};\n\n  function handle_unsupported_feature(message) {\n    switch (Opal.config.unsupported_features_severity) {\n    case 'error':\n      $Kernel.$raise($$$('NotImplementedError'), message)\n      break;\n    case 'warning':\n      warn(message)\n      break;\n    default: // ignore\n      // noop\n    }\n  }\n\n  function warn(string) {\n    if (warnings[string]) {\n      return;\n    }\n\n    warnings[string] = true;\n    self.$warn(string);\n  }\n;\n  (function($base, $super) {\n    var self = $klass($base, $super, 'String');\n\n    \n    \n    var ERROR = \"String#%s not supported. Mutable String methods are not supported in Opal.\";\n    return $send([\"<<\", \"capitalize!\", \"chomp!\", \"chop!\", \"downcase!\", \"gsub!\", \"lstrip!\", \"next!\", \"reverse!\", \"slice!\", \"squeeze!\", \"strip!\", \"sub!\", \"succ!\", \"swapcase!\", \"tr!\", \"tr_s!\", \"upcase!\", \"prepend\", \"[]=\", \"clear\", \"encode!\", \"unicode_normalize!\"], 'each', [], function $String$1(method_name){var self = $String$1.$$s == null ? this : $String$1.$$s;\n\n      \n      if (method_name == null) method_name = nil;\n      return $send(self, 'define_method', [method_name], function $$2($a){var $post_args, $fwd_rest;\n\n        \n        $post_args = $slice(arguments);\n        $fwd_rest = $post_args;\n        return $Kernel.$raise($$$('NotImplementedError'), (ERROR)['$%'](method_name));}, -1);}, {$$s: self});\n  })('::', null);\n  (function($base) {\n    var self = $module($base, 'Kernel');\n\n    \n    \n    var ERROR = \"Object tainting is not supported by Opal\";\n    \n    $def(self, '$taint', function $$taint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    });\n    \n    $def(self, '$untaint', function $$untaint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    });\n    return $def(self, '$tainted?', function $Kernel_tainted$ques$3() {\n      \n      \n      handle_unsupported_feature(ERROR);\n      return false;\n    });\n  })('::');\n  (function($base, $super) {\n    var self = $klass($base, $super, 'Module');\n\n    \n    \n    \n    $def(self, '$public', function $Module_public$4($a) {\n      var $post_args, methods, self = this;\n\n      \n      $post_args = $slice(arguments);\n      methods = $post_args;\n      \n      if (methods.length === 0) {\n        self.$$module_function = false;\n        return nil;\n      }\n      return (methods.length === 1) ? methods[0] : methods;\n    ;\n    }, -1);\n    \n    $def(self, '$private_class_method', function $$private_class_method($a) {\n      var $post_args, methods;\n\n      \n      $post_args = $slice(arguments);\n      methods = $post_args;\n      return (methods.length === 1) ? methods[0] : methods;;\n    }, -1);\n    \n    $def(self, '$private_method_defined?', $return_val(false));\n    \n    $def(self, '$private_constant', function $$private_constant($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return nil;\n    }, -1);\n    $alias(self, \"nesting\", \"public\");\n    $alias(self, \"private\", \"public\");\n    $alias(self, \"protected\", \"public\");\n    $alias(self, \"protected_method_defined?\", \"private_method_defined?\");\n    $alias(self, \"public_class_method\", \"private_class_method\");\n    $alias(self, \"public_instance_method\", \"instance_method\");\n    $alias(self, \"public_instance_methods\", \"instance_methods\");\n    return $alias(self, \"public_method_defined?\", \"method_defined?\");\n  })('::', null);\n  (function($base) {\n    var self = $module($base, 'Kernel');\n\n    \n    \n    \n    $def(self, '$private_methods', function $$private_methods($a) {\n      var $post_args, methods;\n\n      \n      $post_args = $slice(arguments);\n      methods = $post_args;\n      return [];\n    }, -1);\n    $alias(self, \"protected_methods\", \"private_methods\");\n    $alias(self, \"private_instance_methods\", \"private_methods\");\n    return $alias(self, \"protected_instance_methods\", \"private_methods\");\n  })('::');\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $def(self, '$eval', function $Kernel_eval$5($a) {\n      var $post_args, $fwd_rest;\n\n      \n      $post_args = $slice(arguments);\n      $fwd_rest = $post_args;\n      return $Kernel.$raise($$$('NotImplementedError'), \"To use Kernel#eval, you must first require 'opal-parser'. \" + (\"See https://github.com/opal/opal/blob/\" + ($$('RUBY_ENGINE_VERSION')) + \"/docs/opal_parser.md for details.\"));\n    }, -1)\n  })('::', $nesting);\n  $defs(self, '$public', function $public$6($a) {\n    var $post_args, methods;\n\n    \n    $post_args = $slice(arguments);\n    methods = $post_args;\n    return (methods.length === 1) ? methods[0] : methods;;\n  }, -1);\n  return $defs(self, '$private', function $private$7($a) {\n    var $post_args, methods;\n\n    \n    $post_args = $slice(arguments);\n    methods = $post_args;\n    return (methods.length === 1) ? methods[0] : methods;;\n  }, -1);\n};\n\nOpal.queue(function(Opal) {/* Generated by Opal 1.7.3 */\n  var $Object = Opal.Object, nil = Opal.nil;\n\n  Opal.add_stubs('require,autoload');\n  \n  $Object.$require(\"opal/base\");\n  $Object.$require(\"opal/mini\");\n  $Object.$require(\"corelib/kernel/format\");\n  $Object.$require(\"corelib/string/encoding\");\n  $Object.$autoload(\"Math\", \"corelib/math\");\n  $Object.$require(\"corelib/complex/base\");\n  $Object.$autoload(\"Complex\", \"corelib/complex\");\n  $Object.$require(\"corelib/rational/base\");\n  $Object.$autoload(\"Rational\", \"corelib/rational\");\n  $Object.$require(\"corelib/time\");\n  $Object.$autoload(\"Struct\", \"corelib/struct\");\n  $Object.$autoload(\"Set\", \"corelib/set\");\n  $Object.$autoload(\"Dir\", \"corelib/dir\");\n  $Object.$autoload(\"File\", \"corelib/file\");\n  $Object.$require(\"corelib/process/base\");\n  $Object.$autoload(\"Process\", \"corelib/process\");\n  $Object.$autoload(\"Random\", \"corelib/random\");\n  return $Object.$require(\"corelib/unsupported\");\n});\n\n\n\n\n\nexport default function Asciidoctor(moduleConfig) {\nOpal.modules[\"asciidoctor/js/opal_ext/browser/file\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $klass = Opal.klass, $defs = Opal.defs, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('new');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $defs(self, '$read', function $$read(path) {\n      \n      \n      var data = '';\n      var status = -1;\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', path, false);\n        xhr.addEventListener('load', function() {\n          status = this.status;\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            data = this.responseText;\n          }\n        });\n        xhr.overrideMimeType('text/plain');\n        xhr.send();\n      }\n      catch (e) {\n        throw $$('IOError').$new('Error reading file or directory: ' + path + '; reason: ' + e.message);\n      }\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && !data)) {\n        throw $$('IOError').$new('No such file or directory: ' + path);\n      }\n      return data;\n    \n    })\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/browser\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  \n  var platform, engine, framework, ioModule;\n\n  if (typeof moduleConfig === 'object' && typeof moduleConfig.runtime === 'object') {\n    var runtime = moduleConfig.runtime;\n    platform = runtime.platform;\n    engine = runtime.engine;\n    framework = runtime.framework;\n    ioModule = runtime.ioModule;\n  }\n  ioModule = ioModule || 'xmlhttprequest';\n  platform = platform || 'browser';\n  engine = engine || '';\n  framework = framework || '';\n;\n  $const_set($nesting[0], 'JAVASCRIPT_IO_MODULE', ioModule);\n  $const_set($nesting[0], 'JAVASCRIPT_PLATFORM', platform);\n  $const_set($nesting[0], 'JAVASCRIPT_ENGINE', engine);\n  $const_set($nesting[0], 'JAVASCRIPT_FRAMEWORK', framework);\n  return self.$require(\"asciidoctor/js/opal_ext/browser/file\");\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('web_path,path_resolver,uriish?,[],attr?,start_with?,descends_from?,base_dir,join,prepare_source_string,read,fetch,warn,logger,normalize_system_path,read_asset');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.document = nil;\n      \n      \n      $def(self, '$read_contents', function $$read_contents(target, opts) {\n        var self = this, doc = nil, start = nil, $ret_or_1 = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        doc = self.document;\n        if (($truthy($$('Helpers')['$uriish?'](target)) || ((($truthy((start = opts['$[]'](\"start\"))) && ($truthy($$('Helpers')['$uriish?'](start)))) && ($truthy((target = doc.$path_resolver().$web_path(target, start)))))))) {\n          if ((($truthy(doc.$path_resolver()['$descends_from?'](target, doc.$base_dir())) || ($truthy(target['$start_with?'](\"chrome://\")))) || ($truthy(doc['$attr?'](\"allow-uri-read\"))))) {\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                return $$('Helpers').$prepare_source_string($$$('File').$read(target)).$join($$('LF'))\n              } else {\n                return $$$('File').$read(target)\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  \n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"could not retrieve contents of \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))) + \" at URI: \" + (target))\n                  };\n                  return nil;\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };\n          } else {\n            \n            if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n              self.$logger().$warn(\"cannot retrieve contents of \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")\n            };\n            return nil;\n          }\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))}));\n          return self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n      }, -2);\n      return $def(self, '$generate_data_uri_from_uri', function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var self = this;\n\n        \n        if (cache_uri == null) cache_uri = false;\n        \n      var contentType = ''\n      var b64encoded = ''\n      var status = -1\n\n      try {\n        var xhr = new XMLHttpRequest()\n        xhr.open('GET', image_uri, false)\n        // the response type cannot be changed for synchronous requests made from a document\n        // xhr.responseType = 'arraybuffer'\n        xhr.overrideMimeType('text/plain; charset=x-user-defined')\n        xhr.addEventListener('load', function() {\n          status = this.status\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            var binary = ''\n            var rawText = this.responseText\n            for (var i = 0, len = rawText.length; i < len; ++i) {\n              var c = rawText.charCodeAt(i)\n              var byteCode = c & 0xff // byte at offset i\n              binary += String.fromCharCode(byteCode)\n            }\n            b64encoded = btoa(binary)\n            contentType = this.getResponseHeader('content-type')\n          }\n        })\n        xhr.send(null)\n        // try to detect the MIME Type from the file extension\n        if (!contentType) {\n          if (image_uri.endsWith('.jpeg') || image_uri.endsWith('.jpg') || image_uri.endsWith('.jpe')) {\n            contentType = 'image/jpg'\n          } else if (image_uri.endsWith('.png')) {\n            contentType = 'image/png'\n          } else if (image_uri.endsWith('.svg')) {\n            contentType = 'image/svg+xml'\n          } else if (image_uri.endsWith('.bmp')) {\n            contentType = 'image/bmp'\n          } else if (image_uri.endsWith('.tif') || image_uri.endsWith('.tiff')) {\n            contentType = 'image/tiff'\n          }\n        }\n      }\n      catch (e) {\n        // something bad happened!\n        status = 0\n      }\n\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && (!b64encoded || !contentType))) {\n        self.$logger().$warn('could not retrieve image data from URI: ' + image_uri)\n        return image_uri\n      }\n      return 'data:' + contentType + ';base64,' + b64encoded\n    ;\n      }, -2);\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/open_uri\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $defs = Opal.defs, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('new,path');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'OpenURI');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $defs($$('OpenURI'), '$open_uri', function $$open_uri(name, $a) {\n      var $post_args, rest, $yield = $$open_uri.$$p || nil, self = this, file = nil;\n\n      $$open_uri.$$p = null;\n      \n      $post_args = $slice(arguments, 1);\n      rest = $post_args;\n      file = $send($$('File'), 'new', [self.$path()].concat($to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, -2)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('absolute_path?,start_with?');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      \n      return $def(self, '$root?', function $PathResolver_root$ques$1(path) {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self['$absolute_path?'](path)))) {\n          return $ret_or_1\n        } else {\n          \n          return path['$start_with?'](\"file://\", \"http://\", \"https://\", \"chrome://\");\n        }\n      })\n    })($nesting[0], null)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/reader\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $not = Opal.not, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('posixify,new,base_dir,start_with?,uriish?,key?,attributes,descends_from?,replace_next_line,absolute_path?,==,empty?,!,slice,length');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.path_resolver = $proto.document = $proto.include_stack = $proto.dir = nil;\n      return $def(self, '$resolve_include_path', function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, self = this, p_target = nil, $ret_or_1 = nil, target_type = nil, base_dir = nil, inc_path = nil, relpath = nil, ctx_dir = nil, top_level = nil, offset = nil;\n\n        \n        p_target = (self.path_resolver = ($truthy(($ret_or_1 = self.path_resolver)) ? ($ret_or_1) : ($$('PathResolver').$new(\"\\\\\")))).$posixify(target);\n        $a = [\"file\", self.document.$base_dir()], (target_type = $a[0]), (base_dir = $a[1]), $a;\n        if ($truthy(p_target['$start_with?'](\"file://\"))) {\n          inc_path = (relpath = p_target)\n        } else if ($truthy($$('Helpers')['$uriish?'](p_target))) {\n          \n          if (!($truthy(self.path_resolver['$descends_from?'](p_target, base_dir)) || ($truthy(self.document.$attributes()['$key?'](\"allow-uri-read\"))))) {\n            return self.$replace_next_line(\"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n          };\n          inc_path = (relpath = p_target);\n        } else if ($truthy(self.path_resolver['$absolute_path?'](p_target))) {\n          inc_path = (relpath = \"file://\" + (($truthy(p_target['$start_with?'](\"/\")) ? (\"\") : (\"/\"))) + (p_target))\n        } else if ($eqeq((ctx_dir = ($truthy((top_level = self.include_stack['$empty?']())) ? (base_dir) : (self.dir))), \".\")) {\n          inc_path = (relpath = p_target)\n        } else if (($truthy(ctx_dir['$start_with?'](\"file://\")) || ($not($$('Helpers')['$uriish?'](ctx_dir))))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          if ($truthy(top_level)) {\n            relpath = p_target\n          } else if (($eqeq(base_dir, \".\") || ($not((offset = self.path_resolver['$descends_from?'](inc_path, base_dir)))))) {\n            relpath = inc_path\n          } else {\n            relpath = inc_path.$slice(offset, inc_path.$length())\n          };\n        } else if ($truthy(top_level)) {\n          inc_path = \"\" + (ctx_dir) + \"/\" + ((relpath = p_target))\n        } else if (($truthy((offset = self.path_resolver['$descends_from?'](ctx_dir, base_dir))) || ($truthy(self.document.$attributes()['$key?'](\"allow-uri-read\"))))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          relpath = ($truthy(offset) ? (inc_path.$slice(offset, inc_path.$length())) : (p_target));\n        } else {\n          return self.$replace_next_line(\"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n        };\n        return [inc_path, \"file\", relpath];\n      })\n    })($nesting[0], $$('Reader'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  var $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;\n\n  Opal.add_stubs('==,require');\n  if ($eqeq($$('JAVASCRIPT_IO_MODULE'), \"xmlhttprequest\")) {\n    \n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/open_uri\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\");\n    return self.$require(\"asciidoctor/js/asciidoctor_ext/browser/reader\");\n  } else {\n    return nil\n  }\n};\n\nOpal.modules[\"set\"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.7.3 */\n\nOpal.modules[\"asciidoctor/js/opal_ext/kernel\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('new');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    \n    $def(self, '$open', function $$open(path, $a) {\n      var $post_args, rest, $yield = $$open.$$p || nil, file = nil;\n\n      $$open.$$p = null;\n      \n      $post_args = $slice(arguments, 1);\n      rest = $post_args;\n      file = $send($$('File'), 'new', [path].concat($to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, -2);\n    return $def(self, '$__dir__', $return_val(\"\"));\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/file\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $gvars = Opal.gvars, $return_val = Opal.return_val, $defs = Opal.defs, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('attr_reader,delete,gsub,read,size,to_enum,chomp,each_line,readlines,split');\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.eof = $proto.path = nil;\n    \n    self.$attr_reader(\"eof\");\n    self.$attr_reader(\"lineno\");\n    self.$attr_reader(\"path\");\n    \n    $def(self, '$initialize', function $$initialize(path, flags) {\n      var self = this, encoding_flag_regexp = nil;\n\n      \n      if (flags == null) flags = \"r\";\n      self.path = path;\n      self.contents = nil;\n      self.eof = false;\n      self.lineno = 0;\n      flags = flags.$delete(\"b\");\n      encoding_flag_regexp = /:(.*)/;\n      flags = flags.$gsub(encoding_flag_regexp, \"\");\n      return (self.flags = flags);\n    }, -2);\n    \n    $def(self, '$read', function $$read() {\n      var self = this, res = nil;\n\n      if ($truthy(self.eof)) {\n        return \"\"\n      } else {\n        \n        res = $$('File').$read(self.path);\n        self.eof = true;\n        self.lineno = res.$size();\n        return res;\n      }\n    });\n    \n    $def(self, '$each_line', function $$each_line(separator) {\n      var block = $$each_line.$$p || nil, self = this, lines = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      $$each_line.$$p = null;\n      \n      ;\n      if (separator == null) separator = $gvars[\"/\"];\n      if ($truthy(self.eof)) {\n        return ((block !== nil) ? (self) : ([].$to_enum()))\n      };\n      if ((block !== nil)) {\n        \n        lines = $$('File').$read(self.path);\n        \n        self.eof = false;\n        self.lineno = 0;\n        var chomped  = lines.$chomp(),\n            trailing = lines.length != chomped.length,\n            splitted = chomped.split(separator);\n        for (var i = 0, length = splitted.length; i < length; i++) {\n          self.lineno += 1;\n          if (i < length - 1 || trailing) {\n            Opal.yield1(block, splitted[i] + separator);\n          }\n          else {\n            Opal.yield1(block, splitted[i]);\n          }\n        }\n        self.eof = true;\n      ;\n        return self;\n      } else {\n        return self.$read().$each_line()\n      };\n    }, -1);\n    \n    $def(self, '$readlines', function $$readlines() {\n      var self = this;\n\n      return $$('File').$readlines(self.path)\n    });\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$readlines', function $$readlines(path, separator) {\n        var content = nil;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        if (separator == null) separator = $gvars[\"/\"];\n        content = $$('File').$read(path);\n        return content.$split(separator);\n      }, -2);\n      \n      $def(self, '$file?', $return_val(true));\n      \n      $def(self, '$readable?', $return_val(true));\n      return $def(self, '$read', $return_val(\"\"));\n    })(Opal.get_singleton_class(self), $nesting);\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IO');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $defs(self, '$read', function $$read(path) {\n      \n      return $$('File').$read(path)\n    })\n  })($nesting[0], null, $nesting);\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/match_data\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('[]=');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $proto = self.$$prototype;\n\n    $proto.matches = nil;\n    return $def(self, '$[]=', function $MatchData_$$$eq$1(idx, val) {\n      var $a, self = this;\n\n      return ($a = [idx, val], $send(self.matches, '[]=', $a), $a[$a.length - 1])\n    })\n  })($nesting[0], null)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/string\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $def = Opal.def, $alias = Opal.alias, $rb_ge = Opal.rb_ge, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('method_defined?,<,length,bytes,to_s,byteslice,limit_bytesize,>=,==,-,_original_byteslice,unpack,_original_unpack');\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'String');\n\n    \n    \n    if (!$truthy(self['$method_defined?'](\"limit_bytesize\"))) {\n      \n      $def(self, '$limit_bytesize', function $$limit_bytesize(size) {\n        var self = this, result = nil;\n\n        \n        if (!$truthy($rb_lt(size, self.$bytes().$length()))) {\n          return self.$to_s()\n        };\n        result = self.$byteslice(0, size);\n        return result.$to_s();\n      })\n    };\n    if (!$truthy(self['$method_defined?'](\"limit\"))) {\n      $alias(self, \"limit\", \"limit_bytesize\")\n    };\n    $alias(self, \"_original_byteslice\", \"byteslice\");\n    \n    $def(self, '$byteslice', function $$byteslice(index, length) {\n      var self = this;\n\n      \n      if (length == null) length = 1;\n      if ((($eqeq(index, 3) && ($truthy($rb_ge(length, index)))) && ($truthy(self.charCodeAt() === 65279)))) {\n        return (self.substr(1)).$byteslice(0, $rb_minus(length, 3))\n      } else {\n        return self.$_original_byteslice(index, length)\n      };\n    }, -2);\n    $alias(self, \"_original_unpack\", \"unpack\");\n    return $def(self, '$unpack', function $$unpack(format) {\n      var self = this;\n\n      if ($eqeq(format, \"C3\")) {\n        if ($truthy(self.charCodeAt() === 65279)) {\n          return [239, 187, 191]\n        } else {\n          \n          var bytes = []\n          for (var i=0; i < 3; i++) {\n            if (i < self.length) {\n              bytes.push(self.charCodeAt(i))\n            } else {\n              bytes.push(nil)\n            }\n          }\n          return bytes\n        \n        }\n      } else {\n        return self.$_original_unpack(format)\n      }\n    });\n  })($nesting[0], null)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/uri\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $defs = Opal.defs, $return_self = Opal.return_self, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('extend');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'URI');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $defs(self, '$parse', function $$parse(str) {\n      \n      return str.$extend($$('URI'))\n    });\n    return $def(self, '$path', $return_self);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/base64\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $defs = Opal.defs, $ensure_kwargs = Opal.ensure_kwargs, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('delete');\n  return (function($base) {\n    var self = $module($base, 'Base64');\n\n    \n    \n    \n    var encode, decode;\n    encode = Opal.global.btoa || function (input) {\n      var buffer;\n      if (input instanceof Buffer) {\n        buffer = input;\n      } else {\n        buffer = Buffer.from(input.toString(), 'binary');\n      }\n      return buffer.toString('base64');\n    };\n    decode = Opal.global.atob || function (input) {\n      return Buffer.from(input, 'base64').toString('binary');\n    };\n  ;\n    $defs(self, '$decode64', function $$decode64(string) {\n      \n      return decode(string.replace(/\\r?\\n/g, ''));\n    });\n    $defs(self, '$encode64', function $$encode64(string) {\n      \n      return encode(string).replace(/(.{60})/g, \"$1\\n\").replace(/([^\\n])$/g, \"$1\\n\");\n    });\n    $defs(self, '$strict_decode64', function $$strict_decode64(string) {\n      \n      return decode(string);\n    });\n    $defs(self, '$strict_encode64', function $$strict_encode64(string) {\n      \n      return encode(string);\n    });\n    $defs(self, '$urlsafe_decode64', function $$urlsafe_decode64(string) {\n      \n      return decode(string.replace(/\\-/g, '+').replace(/_/g, '/'));\n    });\n    return $defs(self, '$urlsafe_encode64', function $$urlsafe_encode64(string, $kwargs) {\n      var padding, str = nil;\n\n      \n      $kwargs = $ensure_kwargs($kwargs);\n      \n      padding = $kwargs.$$smap[\"padding\"];if (padding == null) padding = true;\n      str = encode(string).replace(/\\+/g, '-').replace(/\\//g, '_');\n      if (!$truthy(padding)) {\n        str = str.$delete(\"=\")\n      };\n      return str;\n    }, -2);\n  })($nesting[0])\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/number\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $def = Opal.def, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;\n\n  Opal.add_stubs('coerce_to!,>');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return $def(self, '$round', function $$round(ndigits) {\n      var self = this;\n\n      \n      ;\n      ndigits = $$('Opal')['$coerce_to!'](ndigits, $$('Integer'), \"to_int\");\n      if ($truthy($rb_gt(ndigits, 0))) {\n        return Number(self.toFixed(ndigits));\n      } else {\n        return Math.round(self);\n      };\n    }, -1)\n  })($nesting[0], $$('Numeric'), $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var self = Opal.top, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  self.$require(\"asciidoctor/js/opal_ext/kernel\");\n  self.$require(\"asciidoctor/js/opal_ext/file\");\n  self.$require(\"asciidoctor/js/opal_ext/match_data\");\n  self.$require(\"asciidoctor/js/opal_ext/string\");\n  self.$require(\"asciidoctor/js/opal_ext/uri\");\n  self.$require(\"asciidoctor/js/opal_ext/base64\");\n  self.$require(\"asciidoctor/js/opal_ext/number\");\n  \n// suppress \"not supported\" warning messages from Opal\nOpal.config.unsupported_features_severity = 'ignore'\n\n// Load specific runtime\nself.$require(\"asciidoctor/js/opal_ext/browser\");\n;\n};\n\nOpal.modules[\"asciidoctor/js/rx\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $const_set = Opal.const_set, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $defs = Opal.defs, $rb_plus = Opal.rb_plus, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('gsub,+,unpack_hex_range');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $const_set($nesting[0], 'HEX_RANGE_RX', /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/);\n    $defs(self, '$unpack_hex_range', function $$unpack_hex_range(str) {\n      \n      return $send(str, 'gsub', [$$('HEX_RANGE_RX')], function $$1(){var $a, $ret_or_1 = nil;\n\n        return \"\\\\u\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + (($truthy(($ret_or_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) ? (\"-\\\\u\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) : ($ret_or_1)))})\n    });\n    $const_set($nesting[0], 'P_L', $rb_plus(\"A-Za-z\", self.$unpack_hex_range(\"00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\")));\n    $const_set($nesting[0], 'P_Nl', self.$unpack_hex_range(\"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\"));\n    $const_set($nesting[0], 'P_Nd', $rb_plus(\"0-9\", self.$unpack_hex_range(\"0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19\")));\n    $const_set($nesting[0], 'P_Pc', self.$unpack_hex_range(\"005F203F20402054FE33FE34FE4D-FE4FFF3F\"));\n    $const_set($nesting[0], 'CC_ALPHA', \"\" + ($$('P_L')) + ($$('P_Nl')));\n    $const_set($nesting[0], 'CG_ALPHA', \"[\" + ($$('CC_ALPHA')) + \"]\");\n    $const_set($nesting[0], 'CC_ALNUM', \"\" + ($$('CC_ALPHA')) + ($$('P_Nd')));\n    $const_set($nesting[0], 'CG_ALNUM', \"[\" + ($$('CC_ALNUM')) + \"]\");\n    $const_set($nesting[0], 'CC_WORD', \"\" + ($$('CC_ALNUM')) + ($$('P_Pc')));\n    $const_set($nesting[0], 'CG_WORD', \"[\" + ($$('CC_WORD')) + \"]\");\n    $const_set($nesting[0], 'CG_BLANK', \"[ \\\\t]\");\n    $const_set($nesting[0], 'CC_EOL', \"(?=\\\\n|$)\");\n    $const_set($nesting[0], 'CG_GRAPH', \"[^\\\\s\\\\x00-\\\\x1F\\\\x7F]\");\n    $const_set($nesting[0], 'CC_ALL', \"[\\\\s\\\\S]\");\n    return $const_set($nesting[0], 'CC_ANY', \"[^\\\\n]\");\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"strscan\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Opal = Opal.Opal, $return_ivar = Opal.return_ivar, $send = Opal.send, $alias = Opal.alias, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('attr_reader,anchor,empty?,===,to_s,coerce_to!,scan_until,length,size,rest,pos=,beginning_of_line?,get_byte,private');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StringScanner');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.pos = $proto.string = $proto.working = $proto.matched = $proto.prev_pos = $proto.match = nil;\n    \n    self.$attr_reader(\"pos\", \"matched\");\n    \n    $def(self, '$initialize', function $$initialize(string) {\n      var self = this;\n\n      \n      self.string = string;\n      self.pos = 0;\n      self.matched = nil;\n      self.working = string;\n      return (self.match = []);\n    });\n    self.$attr_reader(\"string\");\n    \n    $def(self, '$beginning_of_line?', function $StringScanner_beginning_of_line$ques$1() {\n      var self = this;\n\n      return self.pos === 0 || self.string.charAt(self.pos - 1) === \"\\n\"\n    });\n    \n    $def(self, '$scan', function $$scan(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n      self.prev_pos = self.pos;\n      self.pos     += result[0].length;\n      self.working  = self.working.substring(result[0].length);\n      self.matched  = result[0];\n      self.match    = result;\n\n      return result[0];\n    ;\n    });\n    \n    $def(self, '$scan_until', function $$scan_until(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var working = self.working\n\n      for(var i = 0; working.length != i; ++i) {\n        var result  = pattern.exec(working.substr(i));\n        if (result !== null) {\n          var matched_size = i + result[0].length\n          var matched = working.substr(0, matched_size)\n\n          self.matched  = result[0]\n          self.match  = result\n          self.prev_pos = self.pos + i; // Position of first character of matched\n          self.pos += matched_size // Position one after last character of matched\n          self.working = working.substr(matched_size)\n\n          return matched\n        }\n      }\n      return self.matched = nil;\n    ;\n    });\n    \n    $def(self, '$[]', function $StringScanner_$$$2(idx) {\n      var self = this, $ret_or_1 = nil;\n\n      \n      if ($truthy(self.match['$empty?']())) {\n        return nil\n      };\n      if ($eqeqeq($$('Symbol'), ($ret_or_1 = idx))) {\n        idx = idx.$to_s()\n      } else if (!$eqeqeq($$('String'), $ret_or_1)) {\n        idx = $Opal['$coerce_to!'](idx, $$('Integer'), \"to_int\")\n      };\n      \n      var match = self.match;\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    ;\n    });\n    \n    $def(self, '$check', function $$check(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n\n      return self.matched = result[0];\n    ;\n    });\n    \n    $def(self, '$check_until', function $$check_until(pattern) {\n      var self = this;\n\n      \n      var old_prev_pos = self.prev_pos;\n      var old_pos      = self.pos;\n      var old_working  = self.working;\n\n      var result = self.$scan_until(pattern);\n\n      self.prev_pos = old_prev_pos;\n      self.pos      = old_pos;\n      self.working  = old_working;\n\n      return result;\n    \n    });\n    \n    $def(self, '$peek', function $$peek(length) {\n      var self = this;\n\n      return self.working.substring(0, length)\n    });\n    \n    $def(self, '$eos?', function $StringScanner_eos$ques$3() {\n      var self = this;\n\n      return self.working.length === 0\n    });\n    \n    $def(self, '$exist?', function $StringScanner_exist$ques$4(pattern) {\n      var self = this;\n\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    \n    });\n    \n    $def(self, '$skip', function $$skip(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        self.match = [];\n        return self.matched = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        self.matched   = match_str;\n        self.match     = result;\n        self.prev_pos  = self.pos;\n        self.pos      += match_len;\n        self.working   = self.working.substring(match_len);\n\n        return match_len;\n      }\n    ;\n    });\n    \n    $def(self, '$skip_until', function $$skip_until(pattern) {\n      var self = this;\n\n      \n      var result = self.$scan_until(pattern);\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        self.matched = result.substr(-1);\n\n        return result.length;\n      }\n    \n    });\n    \n    $def(self, '$get_byte', function $$get_byte() {\n      var self = this;\n\n      \n      var result = nil;\n\n      if (self.pos < self.string.length) {\n        self.prev_pos  = self.pos;\n        self.pos      += 1;\n        result      = self.matched = self.working.substring(0, 1);\n        self.working   = self.working.substring(1);\n      }\n      else {\n        self.matched = nil;\n      }\n\n      return result;\n    \n    });\n    \n    $def(self, '$match?', function $StringScanner_match$ques$5(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        self.prev_pos = self.pos;\n\n        return result[0].length;\n      }\n    ;\n    });\n    \n    $def(self, '$pos=', function $StringScanner_pos$eq$6(pos) {\n      var self = this;\n\n      \n      \n      if (pos < 0) {\n        pos += self.string.$length();\n      }\n    ;\n      self.pos = pos;\n      return (self.working = self.string.slice(pos));\n    });\n    \n    $def(self, '$matched_size', function $$matched_size() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.matched.length\n    \n    });\n    \n    $def(self, '$post_match', function $$post_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(self.pos);\n    \n    });\n    \n    $def(self, '$pre_match', function $$pre_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(0, self.prev_pos);\n    \n    });\n    \n    $def(self, '$reset', function $$reset() {\n      var self = this;\n\n      \n      self.working = self.string;\n      self.matched = nil;\n      return (self.pos = 0);\n    });\n    \n    $def(self, '$rest', $return_ivar(\"working\"));\n    \n    $def(self, '$rest?', function $StringScanner_rest$ques$7() {\n      var self = this;\n\n      return self.working.length !== 0\n    });\n    \n    $def(self, '$rest_size', function $$rest_size() {\n      var self = this;\n\n      return self.$rest().$size()\n    });\n    \n    $def(self, '$terminate', function $$terminate() {\n      var $a, self = this;\n\n      \n      self.match = nil;\n      return ($a = [self.string.$length()], $send(self, 'pos=', $a), $a[$a.length - 1]);\n    });\n    \n    $def(self, '$unscan', function $$unscan() {\n      var self = this;\n\n      \n      self.pos = self.prev_pos;\n      self.prev_pos = nil;\n      self.match = nil;\n      return self;\n    });\n    $alias(self, \"bol?\", \"beginning_of_line?\");\n    $alias(self, \"getch\", \"get_byte\");\n    self.$private();\n    return $def(self, '$anchor', function $$anchor(pattern) {\n      \n      \n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    \n    });\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"asciidoctor/js\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var self = Opal.top, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  self.$require(\"asciidoctor/js/opal_ext\");\n  self.$require(\"asciidoctor/js/rx\");\n  return self.$require(\"strscan\");\n};\n\nOpal.modules[\"asciidoctor/core_ext/nil_or_empty\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $truthy = Opal.truthy, $alias = Opal.alias, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('method_defined?,nil?,empty?');\n  \n  (function($base, $super) {\n    var self = $klass($base, $super, 'NilClass');\n\n    \n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return $alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'String');\n\n    \n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return $alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'Array');\n\n    \n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return $alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null);\n  (function($base, $super) {\n    var self = $klass($base, $super, 'Hash');\n\n    \n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return $alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null);\n  return (function($base, $super) {\n    var self = $klass($base, $super, 'Numeric');\n\n    \n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return $alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null);\n};\n\nOpal.modules[\"asciidoctor/core_ext/hash/merge\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $eqeq = Opal.eqeq, $send = Opal.send, $slice = Opal.slice, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;\n\n  Opal.add_stubs('==,arity,instance_method,send,new,<,length,dup,>,inject,merge,[]');\n  if ($eqeq($$('Hash').$instance_method(\"merge\").$arity(), 1)) {\n    return $$('Hash').$send(\"prepend\", $send($$('Module'), 'new', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;\n\n      return $def(self, '$merge', function $$merge($a) {\n        var $post_args, args, $yield = $$merge.$$p || nil, self = this, len = nil;\n\n        $$merge.$$p = null;\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        if ($truthy($rb_lt((len = args.$length()), 1))) {\n          return self.$dup()\n        } else {\n          \n          if ($truthy($rb_gt(len, 1))) {\n            return $send(args, 'inject', [self], function $$2(acc, arg){\n              \n              if (acc == null) acc = nil;\n              if (arg == null) arg = nil;\n              return acc.$merge(arg);})\n          } else {\n            \n            return $send2(self, $find_super(self, 'merge', $$merge, false, true), 'merge', [args['$[]'](0)], null);\n          };\n        };\n      }, -1)}, {$$s: self}))\n  } else {\n    return nil\n  }\n};\n\nOpal.modules[\"asciidoctor/core_ext/match_data/names\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $truthy = Opal.truthy, $klass = Opal.klass, $def = Opal.def, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;\n\n  Opal.add_stubs('method_defined?');\n  if ($truthy($$('MatchData')['$method_defined?'](\"names\"))) {\n    return nil\n  } else {\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'MatchData');\n\n      \n      return $def(self, '$names', function $$names() {\n        \n        return []\n      })\n    })($nesting[0], null)\n  }\n};\n\nOpal.modules[\"asciidoctor/core_ext\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var self = Opal.top, nil = Opal.nil;\n\n  \n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/nil_or_empty\");\n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/hash/merge\");\n  return self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/match_data/names\");\n};\n\nOpal.modules[\"asciidoctor/helpers\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $gvars = Opal.gvars, $def = Opal.def, $send = Opal.send, $neqeq = Opal.neqeq, $const_set = Opal.const_set, $hash2 = Opal.hash2, $to_ary = Opal.to_ary, $rb_times = Opal.rb_times, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $Class = Opal.Class, $Object = Opal.Object, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('module_function,require,include?,include,==,path,message,raise,warn,logger,chomp,empty?,slice,unpack,[],[]=,byteslice,bytesize,map,rstrip,encode,encoding,nil_or_empty?,!=,tap,each_line,<<,!,start_with?,match?,gsub,rindex,index,basename,extname,length,directory?,dirname,mkdir_p,mkdir,private_constant,join,divmod,*,===,+,to_s,to_i,succ,class_for_name,const_get');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Helpers');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$module_function();\n      \n      $def(self, '$require_library', function $$require_library(name, gem_name, on_failure) {\n        var self = this, details = nil;\n        if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n        \n        if (gem_name == null) gem_name = true;\n        if (on_failure == null) on_failure = \"abort\";\n        try {\n          return self.$require(name)\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('LoadError')])) {\n            try {\n              \n              if (!$truthy(self['$include?']($$('Logging')))) {\n                self.$include($$('Logging'))\n              };\n              if ($truthy(gem_name)) {\n                \n                if ($eqeq(gem_name, true)) {\n                  gem_name = name\n                };\n                \n                switch (on_failure) {\n                  case \"abort\":\n                    \n                    details = ($eqeq($gvars[\"!\"].$path(), gem_name) ? (\"\") : (\" (reason: \" + (($truthy($gvars[\"!\"].$path()) ? (\"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\") : ($gvars[\"!\"].$message()))) + \")\"));\n                    self.$raise($$$('LoadError'), \"asciidoctor: FAILED: required gem '\" + (gem_name) + \"' is not available\" + (details) + \". Processing aborted.\");\n                    break;\n                  case \"warn\":\n                    \n                    details = ($eqeq($gvars[\"!\"].$path(), gem_name) ? (\"\") : (\" (reason: \" + (($truthy($gvars[\"!\"].$path()) ? (\"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\") : ($gvars[\"!\"].$message()))) + \")\"));\n                    self.$logger().$warn(\"optional gem '\" + (gem_name) + \"' is not available\" + (details) + \". Functionality disabled.\");\n                    break;\n                  default:\n                    nil\n                };\n              } else \n              switch (on_failure) {\n                case \"abort\":\n                  self.$raise($$$('LoadError'), \"asciidoctor: FAILED: \" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Processing aborted.\")\n                  break;\n                case \"warn\":\n                  self.$logger().$warn(\"\" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Functionality disabled.\")\n                  break;\n                default:\n                  nil\n              };\n              return nil;\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };\n      }, -2);\n      \n      $def(self, '$prepare_source_array', function $$prepare_source_array(data, trim_end) {\n        var leading_2_bytes = nil, leading_bytes = nil, first = nil;\n\n        \n        if (trim_end == null) trim_end = true;\n        if ($truthy(data['$empty?']())) {\n          return []\n        };\n        if ($eqeq((leading_2_bytes = (leading_bytes = (first = data['$[]'](0)).$unpack(\"C3\")).$slice(0, 2)), $$('BOM_BYTES_UTF_16LE'))) {\n          \n          data['$[]='](0, first.$byteslice(2, first.$bytesize()));\n          return ($truthy(trim_end) ? ($send(data, 'map', [], function $$1(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16LE')).$rstrip();})) : ($send(data, 'map', [], function $$2(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16LE')).$chomp();})));\n        } else if ($eqeq(leading_2_bytes, $$('BOM_BYTES_UTF_16BE'))) {\n          \n          data['$[]='](0, first.$byteslice(2, first.$bytesize()));\n          return ($truthy(trim_end) ? ($send(data, 'map', [], function $$3(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16BE')).$rstrip();})) : ($send(data, 'map', [], function $$4(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16BE')).$chomp();})));\n        } else if ($eqeq(leading_bytes, $$('BOM_BYTES_UTF_8'))) {\n          data['$[]='](0, first.$byteslice(3, first.$bytesize()))\n        };\n        if ($eqeq(first.$encoding(), $$('UTF_8'))) {\n          if ($truthy(trim_end)) {\n            return $send(data, 'map', [], function $$5(line){\n              \n              if (line == null) line = nil;\n              return line.$rstrip();})\n          } else {\n            return $send(data, 'map', [], function $$6(line){\n              \n              if (line == null) line = nil;\n              return line.$chomp();})\n          }\n        } else if ($truthy(trim_end)) {\n          return $send(data, 'map', [], function $$7(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8')).$rstrip();})\n        } else {\n          return $send(data, 'map', [], function $$8(line){\n            \n            if (line == null) line = nil;\n            return line.$encode($$('UTF_8')).$chomp();})\n        };\n      }, -2);\n      \n      $def(self, '$prepare_source_string', function $$prepare_source_string(data, trim_end) {\n        var leading_2_bytes = nil, leading_bytes = nil;\n\n        \n        if (trim_end == null) trim_end = true;\n        if ($truthy(data['$nil_or_empty?']())) {\n          return []\n        };\n        if ($eqeq((leading_2_bytes = (leading_bytes = data.$unpack(\"C3\")).$slice(0, 2)), $$('BOM_BYTES_UTF_16LE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16LE'))\n        } else if ($eqeq(leading_2_bytes, $$('BOM_BYTES_UTF_16BE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$('UTF_8'), $$$($$$('Encoding'), 'UTF_16BE'))\n        } else if ($eqeq(leading_bytes, $$('BOM_BYTES_UTF_8'))) {\n          \n          data = data.$byteslice(3, data.$bytesize());\n          if (!$eqeq(data.$encoding(), $$('UTF_8'))) {\n            data = data.$encode($$('UTF_8'))\n          };\n        } else if ($neqeq(data.$encoding(), $$('UTF_8'))) {\n          data = data.$encode($$('UTF_8'))\n        };\n        if ($truthy(trim_end)) {\n          return $send([], 'tap', [], function $$9(lines){\n            \n            if (lines == null) lines = nil;\n            return $send(data, 'each_line', [], function $$10(line){\n              \n              if (line == null) line = nil;\n              return lines['$<<'](line.$rstrip());});})\n        } else {\n          return $send([], 'tap', [], function $$11(lines){\n            \n            if (lines == null) lines = nil;\n            return $send(data, 'each_line', [], function $$12(line){\n              \n              if (line == null) line = nil;\n              return lines['$<<'](line.$chomp());});})\n        };\n      }, -2);\n      if ($eqeq($$$('RUBY_ENGINE'), \"jruby\")) {\n        \n        $def(self, '$uriish?', function $Helpers_uriish$ques$13(str) {\n          var $ret_or_1 = nil, $ret_or_2 = nil;\n\n          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = str['$include?'](\":\"))) ? (str['$start_with?'](\"uri:classloader:\")['$!']()) : ($ret_or_2))))) {\n            \n            return $$('UriSniffRx')['$match?'](str);\n          } else {\n            return $ret_or_1\n          }\n        })\n      } else {\n        \n        $def(self, '$uriish?', function $Helpers_uriish$ques$14(str) {\n          var $ret_or_1 = nil;\n\n          if ($truthy(($ret_or_1 = str['$include?'](\":\")))) {\n            \n            return $$('UriSniffRx')['$match?'](str);\n          } else {\n            return $ret_or_1\n          }\n        })\n      };\n      \n      $def(self, '$encode_uri_component', function $$encode_uri_component(str) {\n        \n        \n        return encodeURIComponent(str).replace(/%20|[!'()*]/g, function (m) {\n          return m === '%20' ? '+' : '%' + m.charCodeAt(0).toString(16)\n        })\n      \n      });\n      \n      $def(self, '$encode_spaces_in_uri', function $$encode_spaces_in_uri(str) {\n        \n        if ($truthy(str['$include?'](\" \"))) {\n          \n          return str.$gsub(\" \", \"%20\");\n        } else {\n          return str\n        }\n      });\n      \n      $def(self, '$rootname', function $$rootname(filename) {\n        var last_dot_idx = nil;\n\n        if ($truthy((last_dot_idx = filename.$rindex(\".\")))) {\n          if ($truthy(filename.$index(\"/\", last_dot_idx))) {\n            return filename\n          } else {\n            \n            return filename.$slice(0, last_dot_idx);\n          }\n        } else {\n          return filename\n        }\n      });\n      \n      $def(self, '$basename', function $$basename(filename, drop_ext) {\n        var self = this;\n\n        \n        if (drop_ext == null) drop_ext = nil;\n        if ($truthy(drop_ext)) {\n          return $$$('File').$basename(filename, ($eqeq(drop_ext, true) ? (self.$extname(filename)) : (drop_ext)))\n        } else {\n          return $$$('File').$basename(filename)\n        };\n      }, -2);\n      \n      $def(self, '$extname?', function $Helpers_extname$ques$15(path) {\n        var $ret_or_1 = nil, last_dot_idx = nil;\n\n        if ($truthy(($ret_or_1 = (last_dot_idx = path.$rindex(\".\"))))) {\n          return path.$index(\"/\", last_dot_idx)['$!']()\n        } else {\n          return $ret_or_1\n        }\n      });\n      if ($truthy($$$($$$('File'), 'ALT_SEPARATOR'))) {\n        \n        $def(self, '$extname', function $$extname(path, fallback) {\n          var last_dot_idx = nil;\n\n          \n          if (fallback == null) fallback = \"\";\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if (($truthy(path.$index(\"/\", last_dot_idx)) || ($truthy(path.$index($$$($$$('File'), 'ALT_SEPARATOR'), last_dot_idx))))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, -2)\n      } else {\n        \n        $def(self, '$extname', function $$extname(path, fallback) {\n          var last_dot_idx = nil;\n\n          \n          if (fallback == null) fallback = \"\";\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if ($truthy(path.$index(\"/\", last_dot_idx))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, -2)\n      };\n      \n      $def(self, '$mkdir_p', function $$mkdir_p(dir) {\n        var self = this, parent_dir = nil;\n\n        if ($truthy($$$('File')['$directory?'](dir))) {\n          return nil\n        } else {\n          \n          if (!$eqeq((parent_dir = $$$('File').$dirname(dir)), \".\")) {\n            self.$mkdir_p(parent_dir)\n          };\n          \n          try {\n            return $$$('Dir').$mkdir(dir)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$$('SystemCallError')])) {\n              try {\n                if ($truthy($$$('File')['$directory?'](dir))) {\n                  return nil\n                } else {\n                  return self.$raise()\n                }\n              } finally { Opal.pop_exception(); }\n            } else { throw $err; }\n          };;\n        }\n      });\n      $const_set($nesting[0], 'ROMAN_NUMERALS', $hash2([\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"], {\"M\": 1000, \"CM\": 900, \"D\": 500, \"CD\": 400, \"C\": 100, \"XC\": 90, \"L\": 50, \"XL\": 40, \"X\": 10, \"IX\": 9, \"V\": 5, \"IV\": 4, \"I\": 1}));\n      self.$private_constant(\"ROMAN_NUMERALS\");\n      \n      $def(self, '$int_to_roman', function $$int_to_roman(val) {\n        \n        return $send($$('ROMAN_NUMERALS'), 'map', [], function $$16(l, i){var $a, $b, repeat = nil;\n\n          \n          if (l == null) l = nil;\n          if (i == null) i = nil;\n          $b = val.$divmod(i), $a = $to_ary($b), (repeat = ($a[0] == null ? nil : $a[0])), (val = ($a[1] == null ? nil : $a[1])), $b;\n          return $rb_times(l, repeat);}).$join()\n      });\n      \n      $def(self, '$nextval', function $$nextval(current) {\n        var intval = nil;\n\n        if ($eqeqeq($$$('Integer'), current)) {\n          return $rb_plus(current, 1)\n        } else if ($eqeq((intval = current.$to_i()).$to_s(), current.$to_s())) {\n          return $rb_plus(intval, 1)\n        } else {\n          return current.$succ()\n        }\n      });\n      \n      $def(self, '$resolve_class', function $$resolve_class(object) {\n        var self = this;\n\n        if ($eqeqeq($Class, object)) {\n          return object\n        } else {\n          \n          if ($eqeqeq($$$('String'), object)) {\n            \n            return self.$class_for_name(object);\n          } else {\n            return nil\n          };\n        }\n      });\n      return $def(self, '$class_for_name', function $$class_for_name(qualified_name) {\n        var self = this, resolved = nil;\n\n        try {\n          \n          if (!$eqeqeq($Class, (resolved = $Object.$const_get(qualified_name, false)))) {\n            self.$raise()\n          };\n          return resolved;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$('StandardError')])) {\n            try {\n              return self.$raise($$$('NameError'), \"Could not resolve class for name: \" + (qualified_name))\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        }\n      });\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"logger\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $module = Opal.module, $const_set = Opal.const_set, $send = Opal.send, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,to_h,map,constants,const_get,to_s,format,chr,strftime,message_as_string,===,+,message,class,join,backtrace,inspect,attr_reader,attr_accessor,new,key,upcase,raise,add,to_proc,<=,<,write,call,[],now');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.level = $proto.progname = $proto.pipe = $proto.formatter = nil;\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Severity');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      $const_set($nesting[0], 'DEBUG', 0);\n      $const_set($nesting[0], 'INFO', 1);\n      $const_set($nesting[0], 'WARN', 2);\n      $const_set($nesting[0], 'ERROR', 3);\n      $const_set($nesting[0], 'FATAL', 4);\n      return $const_set($nesting[0], 'UNKNOWN', 5);\n    })($nesting[0], $nesting);\n    self.$include($$('Severity'));\n    $const_set($nesting[0], 'SEVERITY_LABELS', $send($$('Severity').$constants(), 'map', [], function $Logger$1(s){\n      \n      if (s == null) s = nil;\n      return [$$('Severity').$const_get(s), s.$to_s()];}).$to_h());\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      $const_set($nesting[0], 'MESSAGE_FORMAT', \"%s, [%s] %5s -- %s: %s\\n\");\n      $const_set($nesting[0], 'DATE_TIME_FORMAT', \"%Y-%m-%dT%H:%M:%S.%6N\");\n      \n      $def(self, '$call', function $$call(severity, time, progname, msg) {\n        var self = this;\n\n        return self.$format($$('MESSAGE_FORMAT'), severity.$chr(), time.$strftime($$('DATE_TIME_FORMAT')), severity, progname, self.$message_as_string(msg))\n      });\n      return $def(self, '$message_as_string', function $$message_as_string(msg) {\n        var $ret_or_1 = nil, $ret_or_2 = nil;\n\n        if ($eqeqeq($$$('String'), ($ret_or_1 = msg))) {\n          return msg\n        } else if ($eqeqeq($$$('Exception'), $ret_or_1)) {\n          return $rb_plus(\"\" + (msg.$message()) + \" (\" + (msg.$class()) + \")\\n\", ($truthy(($ret_or_2 = msg.$backtrace())) ? ($ret_or_2) : ([])).$join(\"\\n\"))\n        } else {\n          return msg.$inspect()\n        }\n      });\n    })($nesting[0], null, $nesting);\n    self.$attr_reader(\"level\");\n    self.$attr_accessor(\"progname\");\n    self.$attr_accessor(\"formatter\");\n    \n    $def(self, '$initialize', function $$initialize(pipe) {\n      var self = this;\n\n      \n      self.pipe = pipe;\n      self.level = $$('DEBUG');\n      return (self.formatter = $$('Formatter').$new());\n    });\n    \n    $def(self, '$level=', function $Logger_level$eq$2(severity) {\n      var self = this, level = nil;\n\n      if ($eqeqeq($$$('Integer'), severity)) {\n        return (self.level = severity)\n      } else if ($truthy((level = $$('SEVERITY_LABELS').$key(severity.$to_s().$upcase())))) {\n        return (self.level = level)\n      } else {\n        return self.$raise($$('ArgumentError'), \"invalid log level: \" + (severity))\n      }\n    });\n    \n    $def(self, '$info', function $$info(progname) {\n      var block = $$info.$$p || nil, self = this;\n\n      $$info.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('INFO'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$debug', function $$debug(progname) {\n      var block = $$debug.$$p || nil, self = this;\n\n      $$debug.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('DEBUG'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$warn', function $$warn(progname) {\n      var block = $$warn.$$p || nil, self = this;\n\n      $$warn.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('WARN'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$error', function $$error(progname) {\n      var block = $$error.$$p || nil, self = this;\n\n      $$error.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('ERROR'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$fatal', function $$fatal(progname) {\n      var block = $$fatal.$$p || nil, self = this;\n\n      $$fatal.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('FATAL'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$unknown', function $$unknown(progname) {\n      var block = $$unknown.$$p || nil, self = this;\n\n      $$unknown.$$p = null;\n      \n      ;\n      if (progname == null) progname = nil;\n      return $send(self, 'add', [$$('UNKNOWN'), nil, progname], block.$to_proc());\n    }, -1);\n    \n    $def(self, '$info?', function $Logger_info$ques$3() {\n      var self = this;\n\n      return $rb_le(self.level, $$('INFO'))\n    });\n    \n    $def(self, '$debug?', function $Logger_debug$ques$4() {\n      var self = this;\n\n      return $rb_le(self.level, $$('DEBUG'))\n    });\n    \n    $def(self, '$warn?', function $Logger_warn$ques$5() {\n      var self = this;\n\n      return $rb_le(self.level, $$('WARN'))\n    });\n    \n    $def(self, '$error?', function $Logger_error$ques$6() {\n      var self = this;\n\n      return $rb_le(self.level, $$('ERROR'))\n    });\n    \n    $def(self, '$fatal?', function $Logger_fatal$ques$7() {\n      var self = this;\n\n      return $rb_le(self.level, $$('FATAL'))\n    });\n    return $def(self, '$add', function $$add(severity, message, progname) {\n      var block = $$add.$$p || nil, self = this, $ret_or_1 = nil;\n\n      $$add.$$p = null;\n      \n      ;\n      if (message == null) message = nil;\n      if (progname == null) progname = nil;\n      if ($truthy($rb_lt((severity = ($truthy(($ret_or_1 = severity)) ? ($ret_or_1) : ($$('UNKNOWN')))), self.level))) {\n        return true\n      };\n      progname = ($truthy(($ret_or_1 = progname)) ? ($ret_or_1) : (self.progname));\n      if (!$truthy(message)) {\n        if ((block !== nil)) {\n          message = Opal.yieldX(block, [])\n        } else {\n          \n          message = progname;\n          progname = self.progname;\n        }\n      };\n      self.pipe.$write(self.formatter.$call(($truthy(($ret_or_1 = $$('SEVERITY_LABELS')['$[]'](severity))) ? ($ret_or_1) : (\"ANY\")), $$$('Time').$now(), progname, message));\n      return true;\n    }, -2);\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"asciidoctor/logging\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $const_set = Opal.const_set, $hash2 = Opal.hash2, $eqeqeq = Opal.eqeqeq, $gvars = Opal.gvars, $alias = Opal.alias, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,attr_reader,progname=,formatter=,new,level=,>,[],===,inspect,to_h,map,constants,const_get,<<,clear,empty?,max,attr_accessor,memoize_logger,private,logger,extend,private_class_method,merge');\n  \n  self.$require(\"logger\");\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Logger');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      $def(self, '$initialize', function $$initialize($a) {\n        var $post_args, args, $b, $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a(args), $yield);\n        self['$progname='](\"asciidoctor\");\n        self['$formatter=']($$('BasicFormatter').$new());\n        return ($b = [$$('WARN')], $send(self, 'level=', $b), $b[$b.length - 1]);\n      }, -1);\n      \n      $def(self, '$add', function $$add(severity, message, progname) {\n        var $yield = $$add.$$p || nil, self = this, $ret_or_1 = nil;\n\n        $$add.$$p = null;\n        \n        if (message == null) message = nil;\n        if (progname == null) progname = nil;\n        if ($truthy($rb_gt((severity = ($truthy(($ret_or_1 = severity)) ? ($ret_or_1) : ($$('UNKNOWN')))), (self.max_severity = ($truthy(($ret_or_1 = self.max_severity)) ? ($ret_or_1) : (severity)))))) {\n          self.max_severity = severity\n        };\n        return $send2(self, $find_super(self, 'add', $$add, false, true), 'add', [severity, message, progname], $yield);\n      }, -2);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BasicFormatter');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        $const_set($nesting[0], 'SEVERITY_LABEL_SUBSTITUTES', $hash2([\"WARN\", \"FATAL\"], {\"WARN\": \"WARNING\", \"FATAL\": \"FAILED\"}));\n        return $def(self, '$call', function $$call(severity, _, progname, msg) {\n          var $ret_or_1 = nil;\n\n          return \"\" + (progname) + \": \" + (($truthy(($ret_or_1 = $$('SEVERITY_LABEL_SUBSTITUTES')['$[]'](severity))) ? ($ret_or_1) : (severity))) + \": \" + (($eqeqeq($$$('String'), msg) ? (msg) : (msg.$inspect()))) + ($$('LF'))\n        });\n      })($nesting[0], $$('Formatter'), $nesting);\n      return (function($base) {\n        var self = $module($base, 'AutoFormattingMessage');\n\n        \n        return $def(self, '$inspect', function $$inspect() {\n          var self = this, sloc = nil;\n\n          if ($truthy((sloc = self['$[]'](\"source_location\")))) {\n            return \"\" + (sloc) + \": \" + (self['$[]'](\"text\"))\n          } else {\n            return self['$[]'](\"text\")\n          }\n        })\n      })($nesting[0]);\n    })($nesting[0], $$$('Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'MemoryLogger');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.messages = nil;\n      \n      $const_set($nesting[0], 'SEVERITY_SYMBOL_BY_VALUE', $send($$('Severity').$constants(false), 'map', [], function $MemoryLogger$1(c){\n        \n        if (c == null) c = nil;\n        return [$$('Severity').$const_get(c), c];}).$to_h());\n      self.$attr_reader(\"messages\");\n      \n      $def(self, '$initialize', function $$initialize() {\n        var self = this;\n\n        \n        self['$level=']($$('WARN'));\n        return (self.messages = []);\n      });\n      \n      $def(self, '$add', function $$add(severity, message, progname) {\n        var $yield = $$add.$$p || nil, self = this, $ret_or_1 = nil;\n\n        $$add.$$p = null;\n        \n        if (message == null) message = nil;\n        if (progname == null) progname = nil;\n        message = ($truthy(($ret_or_1 = message)) ? ($ret_or_1) : (($yield !== nil) ? (Opal.yieldX($yield, [])) : (progname)));\n        self.messages['$<<']($hash2([\"severity\", \"message\"], {\"severity\": $$('SEVERITY_SYMBOL_BY_VALUE')['$[]'](($truthy(($ret_or_1 = severity)) ? ($ret_or_1) : ($$('UNKNOWN')))), \"message\": message}));\n        return true;\n      }, -2);\n      \n      $def(self, '$clear', function $$clear() {\n        var self = this;\n\n        return self.messages.$clear()\n      });\n      \n      $def(self, '$empty?', function $MemoryLogger_empty$ques$2() {\n        var self = this;\n\n        return self.messages['$empty?']()\n      });\n      return $def(self, '$max_severity', function $$max_severity() {\n        var self = this;\n\n        if ($truthy(self['$empty?']())) {\n          return nil\n        } else {\n          return $send(self.messages, 'map', [], function $$3(m){\n            \n            if (m == null) m = nil;\n            return $$('Severity').$const_get(m['$[]'](\"severity\"));}).$max()\n        }\n      });\n    })($nesting[0], $$$('Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'NullLogger');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      $def(self, '$initialize', function $$initialize() {\n        var $a, self = this;\n\n        return ($a = [$$('WARN')], $send(self, 'level=', $a), $a[$a.length - 1])\n      });\n      return $def(self, '$add', function $$add(severity, message, progname) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (message == null) message = nil;\n        if (progname == null) progname = nil;\n        if ($truthy($rb_gt((severity = ($truthy(($ret_or_1 = severity)) ? ($ret_or_1) : ($$('UNKNOWN')))), (self.max_severity = ($truthy(($ret_or_1 = self.max_severity)) ? ($ret_or_1) : (severity)))))) {\n          self.max_severity = severity\n        };\n        return true;\n      }, -2);\n    })($nesting[0], $$$('Logger'), $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'LoggerManager');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.logger_class = $$('Logger');\n      return (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        self.$attr_accessor(\"logger_class\");\n        \n        $def(self, '$logger', function $$logger(pipe) {\n          var self = this, $ret_or_1 = nil;\n          if (self.logger == null) self.logger = nil;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          \n          if (pipe == null) pipe = $gvars.stderr;\n          self.$memoize_logger();\n          return (self.logger = ($truthy(($ret_or_1 = self.logger)) ? ($ret_or_1) : (self.logger_class.$new(pipe))));\n        }, -1);\n        \n        $def(self, '$logger=', function $logger$eq$4(new_logger) {\n          var self = this, $ret_or_1 = nil;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          return (self.logger = ($truthy(($ret_or_1 = new_logger)) ? ($ret_or_1) : (self.logger_class.$new($gvars.stderr))))\n        });\n        self.$private();\n        return $def(self, '$memoize_logger', function $$memoize_logger() {\n          var self = this;\n\n          return (function(self, $parent_nesting) {\n            \n            \n            $alias(self, \"logger\", \"logger\");\n            return self.$attr_reader(\"logger\");\n          })(Opal.get_singleton_class(self), $nesting)\n        });\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting);\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Logging');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      $defs(self, '$included', function $$included(into) {\n        \n        return into.$extend($$('Logging'))\n      });\n      self.$private_class_method(\"included\");\n      \n      $def(self, '$logger', function $$logger() {\n        \n        return $$('LoggerManager').$logger()\n      });\n      return $def(self, '$message_with_context', function $$message_with_context(text, context) {\n        \n        \n        if (context == null) context = $hash2([], {});\n        return $hash2([\"text\"], {\"text\": text}).$merge(context).$extend($$$($$('Logger'), 'AutoFormattingMessage'));\n      }, -2);\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting);\n};\n\nOpal.modules[\"asciidoctor/rx\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $const_set = Opal.const_set, $regexp = Opal.regexp, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('join,to_a,new,[]=,empty?,escape');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    $module($nesting[0], 'Rx');\n    $const_set($nesting[0], 'AuthorInfoLineRx', $regexp([\"^(\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"\\\\-'.]*)(?: +(\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"\\\\-'.]*))?(?: +(\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"\\\\-'.]*))?(?: +<([^>]+)>)?$\"]));\n    $const_set($nesting[0], 'AuthorDelimiterRx', /;(?: |$)/);\n    $const_set($nesting[0], 'RevisionInfoLineRx', $regexp([\"^(?:[^\\\\d{]*(\", $$('CC_ANY'), \"*?),)? *(?!:)(\", $$('CC_ANY'), \"*?)(?: *(?!^),?: *(\", $$('CC_ANY'), \"*))?$\"]));\n    $const_set($nesting[0], 'ManpageTitleVolnumRx', $regexp([\"^(\", $$('CC_ANY'), \"+?) *\\\\( *(\", $$('CC_ANY'), \"+?) *\\\\)$\"]));\n    $const_set($nesting[0], 'ManpageNamePurposeRx', $regexp([\"^(\", $$('CC_ANY'), \"+?) +- +(\", $$('CC_ANY'), \"+)$\"]));\n    $const_set($nesting[0], 'ConditionalDirectiveRx', $regexp([\"^(\\\\\\\\)?(ifdef|ifndef|ifeval|endif)::(\\\\S*?(?:([,+])\\\\S*?)?)\\\\[(\", $$('CC_ANY'), \"+)?\\\\]$\"]));\n    $const_set($nesting[0], 'EvalExpressionRx', $regexp([\"^(\", $$('CC_ANY'), \"+?) *([=!><]=|[><]) *(\", $$('CC_ANY'), \"+)$\"]));\n    $const_set($nesting[0], 'IncludeDirectiveRx', $regexp([\"^(\\\\\\\\)?include::([^\\\\s\\\\[](?:[^\\\\[]*[^\\\\s\\\\[])?)\\\\[(\", $$('CC_ANY'), \"+)?\\\\]$\"]));\n    $const_set($nesting[0], 'TagDirectiveRx', /\\b(?:tag|(e)nd)::(\\S+?)\\[\\](?=$|[ \\r])/m);\n    $const_set($nesting[0], 'AttributeEntryRx', $regexp([\"^:(!?\", $$('CG_WORD'), \"[^:]*):(?:[ \\\\t]+(\", $$('CC_ANY'), \"*))?$\"]));\n    $const_set($nesting[0], 'InvalidAttributeNameCharsRx', $regexp([\"[^\", $$('CC_WORD'), \"-]\"]));\n    $const_set($nesting[0], 'AttributeEntryPassMacroRx', $regexp([\"^pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(\", $$('CC_ALL'), \"*)\\\\]$\"]));\n    $const_set($nesting[0], 'AttributeReferenceRx', $regexp([\"(\\\\\\\\)?\\\\{(\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"-]*|(set|counter2?):\", $$('CC_ANY'), \"+?)(\\\\\\\\)?\\\\}\"]));\n    $const_set($nesting[0], 'BlockAnchorRx', $regexp([\"^\\\\[\\\\[(?:|([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+))?)\\\\]\\\\]$\"]));\n    $const_set($nesting[0], 'BlockAttributeListRx', $regexp([\"^\\\\[(|[\", $$('CC_WORD'), \".#%{,\\\"']\", $$('CC_ANY'), \"*)\\\\]$\"]));\n    $const_set($nesting[0], 'BlockAttributeLineRx', $regexp([\"^\\\\[(?:|[\", $$('CC_WORD'), \".#%{,\\\"']\", $$('CC_ANY'), \"*|\\\\[(?:|[\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*(?:, *\", $$('CC_ANY'), \"+)?)\\\\])\\\\]$\"]));\n    $const_set($nesting[0], 'BlockTitleRx', $regexp([\"^\\\\.(\\\\.?[^ \\\\t.]\", $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'AdmonitionParagraphRx', $regexp([\"^(\", $$('ADMONITION_STYLES').$to_a().$join(\"|\"), \"):[ \\\\t]+\"]));\n    $const_set($nesting[0], 'LiteralParagraphRx', $regexp([\"^([ \\\\t]+\", $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'AtxSectionTitleRx', $regexp([\"^(=={0,5})[ \\\\t]+(\", $$('CC_ANY'), \"+?)(?:[ \\\\t]+\\\\1)?$\"]));\n    $const_set($nesting[0], 'ExtAtxSectionTitleRx', $regexp([\"^(=={0,5}|#\\\\\\#{0,5})[ \\\\t]+(\", $$('CC_ANY'), \"+?)(?:[ \\\\t]+\\\\1)?$\"]));\n    $const_set($nesting[0], 'SetextSectionTitleRx', $regexp([\"^((?!\\\\.)\", $$('CC_ANY'), \"*?\", $$('CG_ALNUM'), $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'InlineSectionAnchorRx', $regexp([\" (\\\\\\\\)?\\\\[\\\\[([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+))?\\\\]\\\\]$\"]));\n    $const_set($nesting[0], 'InvalidSectionIdCharsRx', $regexp([\"<[^>]+>|&(?:[a-z][a-z]+\\\\d{0,2}|#\\\\d\\\\d\\\\d{0,4}|#x[\\\\da-f][\\\\da-f][\\\\da-f]{0,3});|[^ \", $$('CC_WORD'), \"\\\\-.]+?\"]));\n    $const_set($nesting[0], 'SectionLevelStyleRx', /^sect\\d$/);\n    $const_set($nesting[0], 'AnyListRx', $regexp([\"^(?:[ \\\\t]*(?:-|\\\\*\\\\**|\\\\.\\\\.*|\\\\u2022|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]|(?!//[^/])[ \\\\t]*[^ \\\\t]\", $$('CC_ANY'), \"*?(?::::{0,2}|;;)(?:$|[ \\\\t])|<(?:\\\\d+|\\\\.)>[ \\\\t])\"]));\n    $const_set($nesting[0], 'UnorderedListRx', $regexp([\"^[ \\\\t]*(-|\\\\*\\\\**|\\\\u2022)[ \\\\t]+(\", $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'OrderedListRx', $regexp([\"^[ \\\\t]*(\\\\.\\\\.*|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]+(\", $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'OrderedListMarkerRxMap', $hash2([\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"arabic\": /\\d+\\./, \"loweralpha\": /[a-z]\\./, \"lowerroman\": /[ivx]+\\)/, \"upperalpha\": /[A-Z]\\./, \"upperroman\": /[IVX]+\\)/}));\n    $const_set($nesting[0], 'DescriptionListRx', $regexp([\"^(?!//[^/])[ \\\\t]*([^ \\\\t]\", $$('CC_ANY'), \"*?)(:::{0,2}|;;)(?:$|[ \\\\t]+(\", $$('CC_ANY'), \"*)$)\"]));\n    $const_set($nesting[0], 'DescriptionListSiblingRx', $hash2([\"::\", \":::\", \"::::\", \";;\"], {\"::\": $regexp([\"^(?!//[^/])[ \\\\t]*([^ \\\\t]\", $$('CC_ANY'), \"*?[^:]|[^ \\\\t:])(::)(?:$|[ \\\\t]+(\", $$('CC_ANY'), \"*)$)\"]), \":::\": $regexp([\"^(?!//[^/])[ \\\\t]*([^ \\\\t]\", $$('CC_ANY'), \"*?[^:]|[^ \\\\t:])(:::)(?:$|[ \\\\t]+(\", $$('CC_ANY'), \"*)$)\"]), \"::::\": $regexp([\"^(?!//[^/])[ \\\\t]*([^ \\\\t]\", $$('CC_ANY'), \"*?[^:]|[^ \\\\t:])(::::)(?:$|[ \\\\t]+(\", $$('CC_ANY'), \"*)$)\"]), \";;\": $regexp([\"^(?!//[^/])[ \\\\t]*([^ \\\\t]\", $$('CC_ANY'), \"*?)(;;)(?:$|[ \\\\t]+(\", $$('CC_ANY'), \"*)$)\"])}));\n    $const_set($nesting[0], 'CalloutListRx', $regexp([\"^<(\\\\d+|\\\\.)>[ \\\\t]+(\", $$('CC_ANY'), \"*)$\"]));\n    $const_set($nesting[0], 'CalloutExtractRx', /((?:\\/\\/|#|--|;;) ?)?(\\\\)?<!?(|--)(\\d+|\\.)\\3>(?=(?: ?\\\\?<!?\\3(?:\\d+|\\.)\\3>)*$)/);\n    $const_set($nesting[0], 'CalloutExtractRxt', \"(\\\\\\\\)?<()(\\\\d+|\\\\.)>(?=(?: ?\\\\\\\\?<(?:\\\\d+|\\\\.)>)*$)\");\n    $const_set($nesting[0], 'CalloutExtractRxMap', $send($$$('Hash'), 'new', [], function $Asciidoctor$1(h, k){var $a;\n\n      \n      if (h == null) h = nil;\n      if (k == null) k = nil;\n      return ($a = [k, $regexp([\"(\", ($truthy(k['$empty?']()) ? (\"\") : (\"\" + ($$$('Regexp').$escape(k)) + \" ?\")), \")?\", $$('CalloutExtractRxt')])], $send(h, '[]=', $a), $a[$a.length - 1]);}));\n    $const_set($nesting[0], 'CalloutScanRx', $regexp([\"\\\\\\\\?<!?(|--)(\\\\d+|\\\\.)\\\\1>(?=(?: ?\\\\\\\\?<!?\\\\1(?:\\\\d+|\\\\.)\\\\1>)*\", $$('CC_EOL'), \")\"]));\n    $const_set($nesting[0], 'CalloutSourceRx', $regexp([\"((?://|#|--|;;) ?)?(\\\\\\\\)?&lt;!?(|--)(\\\\d+|\\\\.)\\\\3&gt;(?=(?: ?\\\\\\\\?&lt;!?\\\\3(?:\\\\d+|\\\\.)\\\\3&gt;)*\", $$('CC_EOL'), \")\"]));\n    $const_set($nesting[0], 'CalloutSourceRxt', \"(\\\\\\\\)?&lt;()(\\\\d+|\\\\.)&gt;(?=(?: ?\\\\\\\\?&lt;(?:\\\\d+|\\\\.)&gt;)*\" + ($$('CC_EOL')) + \")\");\n    $const_set($nesting[0], 'CalloutSourceRxMap', $send($$$('Hash'), 'new', [], function $Asciidoctor$2(h, k){var $a;\n\n      \n      if (h == null) h = nil;\n      if (k == null) k = nil;\n      return ($a = [k, $regexp([\"(\", ($truthy(k['$empty?']()) ? (\"\") : (\"\" + ($$$('Regexp').$escape(k)) + \" ?\")), \")?\", $$('CalloutSourceRxt')])], $send(h, '[]=', $a), $a[$a.length - 1]);}));\n    $const_set($nesting[0], 'ListRxMap', $hash2([\"ulist\", \"olist\", \"dlist\", \"colist\"], {\"ulist\": $$('UnorderedListRx'), \"olist\": $$('OrderedListRx'), \"dlist\": $$('DescriptionListRx'), \"colist\": $$('CalloutListRx')}));\n    $const_set($nesting[0], 'ColumnSpecRx', /^(?:(\\d+)\\*)?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?(\\d+%?|~)?([a-z])?$/);\n    $const_set($nesting[0], 'CellSpecStartRx', /^[ \\t]*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    $const_set($nesting[0], 'CellSpecEndRx', /[ \\t]+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    $const_set($nesting[0], 'CustomBlockMacroRx', $regexp([\"^(\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"-]*)::(|\\\\S|\\\\S\", $$('CC_ANY'), \"*?\\\\S)\\\\[(\", $$('CC_ANY'), \"+)?\\\\]$\"]));\n    $const_set($nesting[0], 'BlockMediaMacroRx', $regexp([\"^(image|video|audio)::(\\\\S|\\\\S\", $$('CC_ANY'), \"*?\\\\S)\\\\[(\", $$('CC_ANY'), \"+)?\\\\]$\"]));\n    $const_set($nesting[0], 'BlockTocMacroRx', $regexp([\"^toc::\\\\[(\", $$('CC_ANY'), \"+)?\\\\]$\"]));\n    $const_set($nesting[0], 'InlineAnchorRx', $regexp([\"(\\\\\\\\)?(?:\\\\[\\\\[([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+?))?\\\\]\\\\]|anchor:([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)\\\\[(?:\\\\]|(\", $$('CC_ANY'), \"*?[^\\\\\\\\])\\\\]))\"]));\n    $const_set($nesting[0], 'InlineAnchorScanRx', $regexp([\"(?:^|[^\\\\\\\\\\\\[])\\\\[\\\\[([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+?))?\\\\]\\\\]|(?:^|[^\\\\\\\\])anchor:([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)\\\\[(?:\\\\]|(\", $$('CC_ANY'), \"*?[^\\\\\\\\])\\\\])\"]));\n    $const_set($nesting[0], 'LeadingInlineAnchorRx', $regexp([\"^\\\\[\\\\[([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+?))?\\\\]\\\\]\"]));\n    $const_set($nesting[0], 'InlineBiblioAnchorRx', $regexp([\"^\\\\[\\\\[\\\\[([\", $$('CC_ALPHA'), \"_:][\", $$('CC_WORD'), \"\\\\-:.]*)(?:, *(\", $$('CC_ANY'), \"+?))?\\\\]\\\\]\\\\]\"]));\n    $const_set($nesting[0], 'InlineEmailRx', $regexp([\"([\\\\\\\\>:/])?\", $$('CG_WORD'), \"(?:&amp;|[\", $$('CC_WORD'), \"\\\\-.%+])*@\", $$('CG_ALNUM'), \"[\", $$('CC_ALNUM'), \"_\\\\-.]*\\\\.[a-zA-Z]{2,5}\\\\b\"]));\n    $const_set($nesting[0], 'InlineFootnoteMacroRx', $regexp([\"\\\\\\\\?footnote(?:(ref):|:([\", $$('CC_WORD'), \"-]+)?)\\\\[(?:|(\", $$('CC_ALL'), \"*?[^\\\\\\\\]))\\\\](?!</a>)\"], 'm'));\n    $const_set($nesting[0], 'InlineImageMacroRx', $regexp([\"\\\\\\\\?i(?:mage|con):([^:\\\\s\\\\[](?:[^\\\\n\\\\[]*[^\\\\s\\\\[])?)\\\\[(|\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]\"], 'm'));\n    $const_set($nesting[0], 'InlineIndextermMacroRx', $regexp([\"\\\\\\\\?(?:(indexterm2?):\\\\[(\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]|\\\\(\\\\((\", $$('CC_ALL'), \"+?)\\\\)\\\\)(?!\\\\)))\"], 'm'));\n    $const_set($nesting[0], 'InlineKbdBtnMacroRx', $regexp([\"(\\\\\\\\)?(kbd|btn):\\\\[(\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]\"], 'm'));\n    $const_set($nesting[0], 'InlineLinkRx', $regexp([\"(^|link:|\", $$('CG_BLANK'), \"|&lt;|[>\\\\(\\\\)\\\\[\\\\];\\\"'])(\\\\\\\\?(?:https?|file|ftp|irc)://)(?:([^\\\\s\\\\[\\\\]]+)\\\\[(|\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]|([^\\\\s\\\\[\\\\]<]*([^\\\\s,.?!\\\\[\\\\]<\\\\)])))\"], 'm'));\n    $const_set($nesting[0], 'InlineLinkMacroRx', $regexp([\"\\\\\\\\?(?:link|(mailto)):(|[^:\\\\s\\\\[][^\\\\s\\\\[]*)\\\\[(|\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]\"], 'm'));\n    $const_set($nesting[0], 'MacroNameRx', $regexp([\"^\", $$('CG_WORD'), \"[\", $$('CC_WORD'), \"-]*$\"]));\n    $const_set($nesting[0], 'InlineStemMacroRx', $regexp([\"\\\\\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z-]+)*)?\\\\[(\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]\"], 'm'));\n    $const_set($nesting[0], 'InlineMenuMacroRx', $regexp([\"\\\\\\\\?menu:(\", $$('CG_WORD'), \"|[\", $$('CC_WORD'), \"&][^\\\\n\\\\[]*[^\\\\s\\\\[])\\\\[ *(?:|(\", $$('CC_ALL'), \"*?[^\\\\\\\\]))\\\\]\"], 'm'));\n    $const_set($nesting[0], 'InlineMenuRx', $regexp([\"\\\\\\\\?\\\"([\", $$('CC_WORD'), \"&][^\\\"]*?[ \\\\n]+&gt;[ \\\\n]+[^\\\"]*)\\\"\"]));\n    $const_set($nesting[0], 'InlinePassRx', $hash(false, [\"+\", \"-]\", $regexp([\"((?:^|[^\", $$('CC_WORD'), \";:\\\\\\\\])(?=(\\\\[)|\\\\+)|\\\\\\\\(?=\\\\[)|(?=\\\\\\\\\\\\+))(?:\\\\2(x-|[^\\\\]]+ x-)\\\\]|(?:\\\\[([^\\\\]]+)\\\\])?(?=(\\\\\\\\)?\\\\+))(\\\\5?(\\\\+|`)(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)\\\\7)(?!\", $$('CG_WORD'), \")\"], 'm')], true, [\"`\", nil, $regexp([\"(^|[^`\", $$('CC_WORD'), \"])(?:(\\\\Z)()|\\\\[([^\\\\]]+)\\\\](?=(\\\\\\\\))?)?(\\\\5?(`)([^`\\\\s]|[^`\\\\s]\", $$('CC_ALL'), \"*?\\\\S)\\\\7)(?![`\", $$('CC_WORD'), \"])\"], 'm')]));\n    $const_set($nesting[0], 'InlinePassMacroRx', $regexp([\"(?:(?:(\\\\\\\\?)\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\{0,2})(\\\\+\\\\+\\\\+?|\\\\$\\\\$)(\", $$('CC_ALL'), \"*?)\\\\4|(\\\\\\\\?)pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(|\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\])\"], 'm'));\n    $const_set($nesting[0], 'InlineXrefMacroRx', $regexp([\"\\\\\\\\?(?:&lt;&lt;([\", $$('CC_WORD'), \"#/.:{]\", $$('CC_ALL'), \"*?)&gt;&gt;|xref:([\", $$('CC_WORD'), \"#/.:{]\", $$('CC_ALL'), \"*?)\\\\[(?:\\\\]|(\", $$('CC_ALL'), \"*?[^\\\\\\\\])\\\\]))\"], 'm'));\n    $const_set($nesting[0], 'HardLineBreakRx', $regexp([\"^(\", $$('CC_ANY'), \"*) \\\\+$\"], 'm'));\n    $const_set($nesting[0], 'MarkdownThematicBreakRx', /^ {0,3}([-*_])( *)\\1\\2\\1$/);\n    $const_set($nesting[0], 'ExtLayoutBreakRx', /^(?:'{3,}|<{3,}|([-*_])( *)\\1\\2\\1)$/);\n    $const_set($nesting[0], 'BlankLineRx', /\\n{2,}/);\n    $const_set($nesting[0], 'EscapedSpaceRx', /\\\\([ \\t\\n])/);\n    $const_set($nesting[0], 'ReplaceableTextRx', /[&']|--|\\.\\.\\.|\\([CRT]M?\\)/);\n    $const_set($nesting[0], 'SpaceDelimiterRx', /([^\\\\])[ \\t\\n]+/);\n    $const_set($nesting[0], 'SubModifierSniffRx', /[+-]/);\n    $const_set($nesting[0], 'TrailingDigitsRx', /\\d+$/);\n    $const_set($nesting[0], 'UriSniffRx', $regexp([\"^\", $$('CG_ALPHA'), \"[\", $$('CC_ALNUM'), \".+-]+:/{0,2}\"]));\n    return $const_set($nesting[0], 'XmlSanitizeRx', /<[^>]+>/);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/substitutors\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $const_set = Opal.const_set, $hash2 = Opal.hash2, $hash = Opal.hash, $rb_plus = Opal.rb_plus, $regexp = Opal.regexp, $not = Opal.not, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $alias = Opal.alias, $gvars = Opal.gvars, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $neqeq = Opal.neqeq, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $rb_gt = Opal.rb_gt, $slice = Opal.slice, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $rb_times = Opal.rb_times, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('freeze,+,keys,!,empty?,===,[],join,include?,extract_passthroughs,each,sub_specialchars,sub_quotes,sub_attributes,sub_replacements,sub_macros,highlight_source,sub_callouts,sub_post_replacements,warn,logger,restore_passthroughs,clear,split,apply_subs,gsub,match?,compat_mode,convert_quoted_text,attributes,==,shift,store_attribute,!=,attribute_undefined,counter,key?,downcase,attribute_missing,info,squeeze,delete,reject,start_with?,do_replacement,inline_macros?,extensions,inline_macros,regexp,instance,slice,length,names,config,merge,[]=,normalize_text,parse_attributes,process_method,expand_subs,text=,text,convert,class,strip,index,min,compact,>,end_with?,map,chop,new,pop,rstrip,register,tr,basename,parse,lstrip,split_simple_csv,-,partition,extract_attributes_from_text,sub,encode_uri_component,style,extname?,rindex,catalog,info?,fetch,outfilesuffix,natural_xrefs,resolve_id,find,footnotes,id,<,size,<<,attr?,attr,to_s,read_next_id,callouts,highlight?,syntax_highlighter,sub_source,extract_callouts,name,to_i,to_sym,resolve_lines_to_highlight,highlight,nil_or_empty?,restore_callouts,count,to_a,|,sort,*,parse_quoted_text_attributes,resolve_pass_subs,basebackend?,error,chr,drop,&,resolve_subs,resolve_block_subs,parse_into,private,shorthand_property_syntax,each_char');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Substitutors');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      $const_set($nesting[0], 'SpecialCharsRx', /[<&>]/);\n      $const_set($nesting[0], 'SpecialCharsTr', $hash2([\">\", \"<\", \"&\"], {\">\": \"&gt;\", \"<\": \"&lt;\", \"&\": \"&amp;\"}));\n      $const_set($nesting[0], 'QuotedTextSniffRx', $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));\n      $const_set($nesting[0], 'BASIC_SUBS', [\"specialcharacters\"]).$freeze();\n      $const_set($nesting[0], 'HEADER_SUBS', [\"specialcharacters\", \"attributes\"]).$freeze();\n      $const_set($nesting[0], 'NO_SUBS', []).$freeze();\n      $const_set($nesting[0], 'NORMAL_SUBS', [\"specialcharacters\", \"quotes\", \"attributes\", \"replacements\", \"macros\", \"post_replacements\"]).$freeze();\n      $const_set($nesting[0], 'REFTEXT_SUBS', [\"specialcharacters\", \"quotes\", \"replacements\"]).$freeze();\n      $const_set($nesting[0], 'VERBATIM_SUBS', [\"specialcharacters\", \"callouts\"]).$freeze();\n      $const_set($nesting[0], 'SUB_GROUPS', $hash2([\"none\", \"normal\", \"verbatim\", \"specialchars\"], {\"none\": $$('NO_SUBS'), \"normal\": $$('NORMAL_SUBS'), \"verbatim\": $$('VERBATIM_SUBS'), \"specialchars\": $$('BASIC_SUBS')}));\n      $const_set($nesting[0], 'SUB_HINTS', $hash2([\"a\", \"m\", \"n\", \"p\", \"q\", \"r\", \"c\", \"v\"], {\"a\": \"attributes\", \"m\": \"macros\", \"n\": \"normal\", \"p\": \"post_replacements\", \"q\": \"quotes\", \"r\": \"replacements\", \"c\": \"specialcharacters\", \"v\": \"verbatim\"}));\n      $const_set($nesting[0], 'SUB_OPTIONS', $hash2([\"block\", \"inline\"], {\"block\": $rb_plus($rb_plus($$('SUB_GROUPS').$keys(), $$('NORMAL_SUBS')), [\"callouts\"]), \"inline\": $rb_plus($$('SUB_GROUPS').$keys(), $$('NORMAL_SUBS'))}));\n      $const_set($nesting[0], 'CAN', \"\\u0018\");\n      $const_set($nesting[0], 'DEL', \"\\u007F\");\n      $const_set($nesting[0], 'PASS_START', \"\\u0096\");\n      $const_set($nesting[0], 'PASS_END', \"\\u0097\");\n      $const_set($nesting[0], 'PassSlotRx', $regexp([$$('PASS_START'), \"(\\\\d+)\", $$('PASS_END')]));\n      $const_set($nesting[0], 'HighlightedPassSlotRx', $regexp([\"<span\\\\b[^>]*>\", $$('PASS_START'), \"</span>[^\\\\d]*(\\\\d+)[^\\\\d]*<span\\\\b[^>]*>\", $$('PASS_END'), \"</span>\"]));\n      $const_set($nesting[0], 'RS', \"\\\\\");\n      $const_set($nesting[0], 'R_SB', \"]\");\n      $const_set($nesting[0], 'ESC_R_SB', \"\\\\]\");\n      $const_set($nesting[0], 'PLUS', \"+\");\n      \n      $def(self, '$apply_subs', function $$apply_subs(text, subs) {\n        var self = this, is_multiline = nil, passthrus = nil, $ret_or_1 = nil, clear_passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n        if (self.passthroughs_locked == null) self.passthroughs_locked = nil;\n\n        \n        if (subs == null) subs = $$('NORMAL_SUBS');\n        if (($truthy(text['$empty?']()) || ($not(subs)))) {\n          return text\n        };\n        if ($truthy((is_multiline = $$$('Array')['$==='](text)))) {\n          text = ($truthy(text['$[]'](1)) ? (text.$join($$('LF'))) : (text['$[]'](0)))\n        };\n        if ($truthy(subs['$include?'](\"macros\"))) {\n          \n          text = self.$extract_passthroughs(text);\n          if (!$truthy(self.passthroughs['$empty?']())) {\n            \n            passthrus = self.passthroughs;\n            self.passthroughs_locked = ($truthy(($ret_or_1 = self.passthroughs_locked)) ? ($ret_or_1) : ((clear_passthrus = true)));\n          };\n        };\n        $send(subs, 'each', [], function $$1(type){var self = $$1.$$s == null ? this : $$1.$$s;\n\n          \n          if (type == null) type = nil;\n          \n          switch (type) {\n            case \"specialcharacters\":\n              return (text = self.$sub_specialchars(text))\n            case \"quotes\":\n              return (text = self.$sub_quotes(text))\n            case \"attributes\":\n              if ($truthy(text['$include?']($$('ATTR_REF_HEAD')))) {\n                return (text = self.$sub_attributes(text))\n              } else {\n                return nil\n              }\n              break;\n            case \"replacements\":\n              return (text = self.$sub_replacements(text))\n            case \"macros\":\n              return (text = self.$sub_macros(text))\n            case \"highlight\":\n              return (text = self.$highlight_source(text, subs['$include?'](\"callouts\")))\n            case \"callouts\":\n              if ($truthy(subs['$include?'](\"highlight\"))) {\n                return nil\n              } else {\n                return (text = self.$sub_callouts(text))\n              }\n              break;\n            case \"post_replacements\":\n              return (text = self.$sub_post_replacements(text))\n            default:\n              return self.$logger().$warn(\"unknown substitution type \" + (type))\n          };}, {$$s: self});\n        if ($truthy(passthrus)) {\n          \n          text = self.$restore_passthroughs(text);\n          if ($truthy(clear_passthrus)) {\n            \n            passthrus.$clear();\n            self.passthroughs_locked = nil;\n          };\n        };\n        if ($truthy(is_multiline)) {\n          \n          return text.$split($$('LF'), -1);\n        } else {\n          return text\n        };\n      }, -2);\n      \n      $def(self, '$apply_normal_subs', function $$apply_normal_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$('NORMAL_SUBS'))\n      });\n      \n      $def(self, '$apply_header_subs', function $$apply_header_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$('HEADER_SUBS'))\n      });\n      $alias(self, \"apply_title_subs\", \"apply_subs\");\n      \n      $def(self, '$apply_reftext_subs', function $$apply_reftext_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$('REFTEXT_SUBS'))\n      });\n      \n      $def(self, '$sub_specialchars', function $$sub_specialchars(text) {\n        \n        if ((($truthy(text['$include?'](\">\")) || ($truthy(text['$include?'](\"&\")))) || ($truthy(text['$include?'](\"<\"))))) {\n          \n          return text.$gsub($$('SpecialCharsRx'), $$('SpecialCharsTr'));\n        } else {\n          return text\n        }\n      });\n      $alias(self, \"sub_specialcharacters\", \"sub_specialchars\");\n      \n      $def(self, '$sub_quotes', function $$sub_quotes(text) {\n        var self = this, compat = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if ($truthy($$('QuotedTextSniffRx')['$[]']((compat = self.document.$compat_mode()))['$match?'](text))) {\n          $send($$('QUOTE_SUBS')['$[]'](compat), 'each', [], function $$2(type, scope, pattern){var self = $$2.$$s == null ? this : $$2.$$s;\n\n            \n            if (type == null) type = nil;\n            if (scope == null) scope = nil;\n            if (pattern == null) pattern = nil;\n            return (text = $send(text, 'gsub', [pattern], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n              return self.$convert_quoted_text($gvars[\"~\"], type, scope)}, {$$s: self}));}, {$$s: self})\n        };\n        return text;\n      });\n      \n      $def(self, '$sub_attributes', function $$sub_attributes(text, opts) {\n        var self = this, doc_attrs = nil, drop = nil, drop_line = nil, drop_line_severity = nil, drop_empty_line = nil, attribute_undefined = nil, attribute_missing = nil, lines = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        doc_attrs = self.document.$attributes();\n        drop = (drop_line = (drop_line_severity = (drop_empty_line = (attribute_undefined = (attribute_missing = nil)))));\n        text = $send(text, 'gsub', [$$('AttributeReferenceRx')], function $$4(){var $a, $b, self = $$4.$$s == null ? this : $$4.$$s, args = nil, $ret_or_2 = nil, _ = nil, value = nil, $ret_or_3 = nil, key = nil, $ret_or_4 = nil;\n          if (self.document == null) self.document = nil;\n\n          if (($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), $$('RS')) || ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), $$('RS'))))) {\n            return \"{\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"}\"\n          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {\n            \n            switch ((args = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$split(\":\", 3)).$shift()) {\n              case \"set\":\n                \n                $b = $$('Parser').$store_attribute(args['$[]'](0), ($truthy(($ret_or_2 = args['$[]'](1))) ? ($ret_or_2) : (\"\")), self.document), $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;\n                if (($truthy(value) || ($neqeq((attribute_undefined = ($truthy(($ret_or_2 = attribute_undefined)) ? ($ret_or_2) : (($truthy(($ret_or_3 = doc_attrs['$[]'](\"attribute-undefined\"))) ? ($ret_or_3) : ($$('Compliance').$attribute_undefined()))))), \"drop-line\")))) {\n                  return (drop = (drop_empty_line = $$('DEL')))\n                } else {\n                  return (drop = (drop_line = $$('CAN')))\n                };\n                break;\n              case \"counter2\":\n                \n                $send(self.document, 'counter', $to_a(args));\n                return (drop = (drop_empty_line = $$('DEL')));\n              default:\n                return $send(self.document, 'counter', $to_a(args))\n            }\n          } else if ($truthy(doc_attrs['$key?']((key = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$downcase())))) {\n            return doc_attrs['$[]'](key)\n          } else if ($truthy((value = $$('INTRINSIC_ATTRIBUTES')['$[]'](key)))) {\n            return value\n          } else \n          switch ((attribute_missing = ($truthy(($ret_or_2 = attribute_missing)) ? ($ret_or_2) : (($truthy(($ret_or_3 = ($truthy(($ret_or_4 = opts['$[]'](\"attribute_missing\"))) ? ($ret_or_4) : (doc_attrs['$[]'](\"attribute-missing\"))))) ? ($ret_or_3) : ($$('Compliance').$attribute_missing())))))) {\n            case \"drop\":\n              return (drop = (drop_empty_line = $$('DEL')))\n            case \"drop-line\":\n              \n              if ($eqeq((drop_line_severity = ($truthy(($ret_or_2 = drop_line_severity)) ? ($ret_or_2) : (($truthy(($ret_or_3 = opts['$[]'](\"drop_line_severity\"))) ? ($ret_or_3) : (\"info\"))))), \"info\")) {\n                $send(self.$logger(), 'info', [], function $$5(){\n                  return \"dropping line containing reference to missing attribute: \" + (key)})\n              };\n              return (drop = (drop_line = $$('CAN')));\n            case \"warn\":\n              \n              self.$logger().$warn(\"skipping reference to missing attribute: \" + (key));\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0));\n            default:\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n          }}, {$$s: self});\n        if ($truthy(drop)) {\n          if ($truthy(drop_empty_line)) {\n            \n            lines = text.$squeeze($$('DEL')).$split($$('LF'), -1);\n            if ($truthy(drop_line)) {\n              return $send(lines, 'reject', [], function $$6(line){var $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;\n\n                \n                if (line == null) line = nil;\n                if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = line['$==']($$('DEL')))) ? ($ret_or_3) : (line['$==']($$('CAN')))))) ? ($ret_or_2) : (line['$start_with?']($$('CAN'))))))) {\n                  return $ret_or_1\n                } else {\n                  \n                  return line['$include?']($$('CAN'));\n                };}).$join($$('LF')).$delete($$('DEL'))\n            } else {\n              return $send(lines, 'reject', [], function $$7(line){\n                \n                if (line == null) line = nil;\n                return line['$==']($$('DEL'));}).$join($$('LF')).$delete($$('DEL'))\n            };\n          } else if ($truthy(text['$include?']($$('LF')))) {\n            return $send(text.$split($$('LF'), -1), 'reject', [], function $$8(line){var $ret_or_1 = nil, $ret_or_2 = nil;\n\n              \n              if (line == null) line = nil;\n              if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = line['$==']($$('CAN')))) ? ($ret_or_2) : (line['$start_with?']($$('CAN'))))))) {\n                return $ret_or_1\n              } else {\n                \n                return line['$include?']($$('CAN'));\n              };}).$join($$('LF'))\n          } else {\n            return \"\"\n          }\n        } else {\n          return text\n        };\n      }, -2);\n      \n      $def(self, '$sub_replacements', function $$sub_replacements(text) {\n        var self = this;\n\n        \n        if ($truthy($$('ReplaceableTextRx')['$match?'](text))) {\n          $send($$('REPLACEMENTS'), 'each', [], function $$9(pattern, replacement, restore){var self = $$9.$$s == null ? this : $$9.$$s;\n\n            \n            if (pattern == null) pattern = nil;\n            if (replacement == null) replacement = nil;\n            if (restore == null) restore = nil;\n            return (text = $send(text, 'gsub', [pattern], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n              return self.$do_replacement($gvars[\"~\"], replacement, restore)}, {$$s: self}));}, {$$s: self})\n        };\n        return text;\n      });\n      \n      $def(self, '$sub_macros', function $$sub_macros(text) {\n        var self = this, found_square_bracket = nil, found_colon = nil, found_macroish = nil, $ret_or_1 = nil, found_macroish_short = nil, doc_attrs = nil, doc = nil, extensions = nil;\n        if (self.document == null) self.document = nil;\n        if (self.parent == null) self.parent = nil;\n        if (self.context == null) self.context = nil;\n\n        \n        found_square_bracket = text['$include?'](\"[\");\n        found_colon = text['$include?'](\":\");\n        found_macroish = ($truthy(($ret_or_1 = found_square_bracket)) ? (found_colon) : ($ret_or_1));\n        found_macroish_short = ($truthy(($ret_or_1 = found_macroish)) ? (text['$include?'](\":[\")) : ($ret_or_1));\n        doc_attrs = (doc = self.document).$attributes();\n        if (($truthy((extensions = doc.$extensions())) && ($truthy(extensions['$inline_macros?']())))) {\n          $send(extensions.$inline_macros(), 'each', [], function $$11(extension){var self = $$11.$$s == null ? this : $$11.$$s;\n\n            \n            if (extension == null) extension = nil;\n            return (text = $send(text, 'gsub', [extension.$instance().$regexp()], function $$12(){var $a, $b, self = $$12.$$s == null ? this : $$12.$$s, match = nil, target = nil, content = nil, attributes = nil, default_attrs = nil, ext_config = nil, $ret_or_2 = nil, replacement = nil, inline_subs = nil;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n              \n              if ($truthy((match = (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)))['$start_with?']($$('RS')))) {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n              };\n              if ($truthy($gvars[\"~\"].$names()['$empty?']())) {\n                $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (target = $a[0]), (content = $a[1]), $a\n              } else {\n                $a = [(function() { try {\n                  return $gvars[\"~\"]['$[]'](\"target\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$('StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception(); }\n                  } else { throw $err; }\n                }})(), (function() { try {\n                  return $gvars[\"~\"]['$[]'](\"content\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$('StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception(); }\n                  } else { throw $err; }\n                }})()], (target = $a[0]), (content = $a[1]), $a\n              };\n              attributes = ($truthy((default_attrs = (ext_config = extension.$config())['$[]'](\"default_attrs\"))) ? (default_attrs.$merge()) : ($hash2([], {})));\n              if ($truthy(content)) {\n                \n                if ($truthy(content['$empty?']())) {\n                  if (!$eqeq(ext_config['$[]'](\"content_model\"), \"attributes\")) {\n                    attributes['$[]='](\"text\", content)\n                  }\n                } else {\n                  \n                  content = self.$normalize_text(content, true, true);\n                  if ($eqeq(ext_config['$[]'](\"content_model\"), \"attributes\")) {\n                    self.$parse_attributes(content, ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ext_config['$[]'](\"positional_attrs\"))) ? ($ret_or_2) : (ext_config['$[]'](\"pos_attrs\"))))) ? ($ret_or_1) : ([])), $hash2([\"into\"], {\"into\": attributes}))\n                  } else {\n                    attributes['$[]='](\"text\", content)\n                  };\n                };\n                target = ($truthy(($ret_or_1 = target)) ? ($ret_or_1) : ($eqeq(ext_config['$[]'](\"format\"), \"short\") ? (content) : (target)));\n              };\n              if ($eqeqeq($$('Inline'), (replacement = extension.$process_method()['$[]'](self, target, attributes)))) {\n                \n                if (($truthy((inline_subs = replacement.$attributes().$delete(\"subs\"))) && ($truthy((inline_subs = self.$expand_subs(inline_subs, \"custom inline macro\")))))) {\n                  replacement['$text='](self.$apply_subs(replacement.$text(), inline_subs))\n                };\n                return replacement.$convert();\n              } else if ($truthy(replacement)) {\n                \n                $send(self.$logger(), 'info', [], function $$13(){\n                  return \"expected substitution value for custom inline macro to be of type Inline; got \" + (replacement.$class()) + \": \" + (match)});\n                return replacement;\n              } else {\n                return \"\"\n              };}, {$$s: self}));}, {$$s: self})\n        };\n        if ($truthy(doc_attrs['$key?'](\"experimental\"))) {\n          \n          if (($truthy(found_macroish_short) && (($truthy(text['$include?'](\"kbd:\")) || ($truthy(text['$include?'](\"btn:\"))))))) {\n            text = $send(text, 'gsub', [$$('InlineKbdBtnMacroRx')], function $$14(){var $a, self = $$14.$$s == null ? this : $$14.$$s, keys = nil, delim_idx = nil, delim = nil;\n\n              if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n              } else if ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), \"kbd\")) {\n                \n                if ($truthy((keys = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$strip())['$include?']($$('R_SB')))) {\n                  keys = keys.$gsub($$('ESC_R_SB'), $$('R_SB'))\n                };\n                if (($truthy($rb_gt(keys.$length(), 1)) && ($truthy((delim_idx = ($truthy((delim_idx = keys.$index(\",\", 1))) ? ([delim_idx, keys.$index(\"+\", 1)].$compact().$min()) : (keys.$index(\"+\", 1)))))))) {\n                  \n                  delim = keys.$slice(delim_idx, 1);\n                  if ($truthy(keys['$end_with?'](delim))) {\n                    \n                    keys = $send(keys.$chop().$split(delim, -1), 'map', [], function $$15(key){\n                      \n                      if (key == null) key = nil;\n                      return key.$strip();});\n                    keys['$[]='](-1, $rb_plus(keys['$[]'](-1), delim));\n                  } else {\n                    keys = $send(keys.$split(delim), 'map', [], function $$16(key){\n                      \n                      if (key == null) key = nil;\n                      return key.$strip();})\n                  };\n                } else {\n                  keys = [keys]\n                };\n                return $$('Inline').$new(self, \"kbd\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"keys\"], {\"keys\": keys})})).$convert();\n              } else {\n                return $$('Inline').$new(self, \"button\", self.$normalize_text((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), true, true)).$convert()\n              }}, {$$s: self})\n          };\n          if (($truthy(found_macroish) && ($truthy(text['$include?'](\"menu:\"))))) {\n            text = $send(text, 'gsub', [$$('InlineMenuMacroRx')], function $$17(){var $a, self = $$17.$$s == null ? this : $$17.$$s, menu = nil, items = nil, delim = nil, submenus = nil, menuitem = nil;\n\n              \n              if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n              };\n              menu = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));\n              if ($truthy((items = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n                \n                if ($truthy(items['$include?']($$('R_SB')))) {\n                  items = items.$gsub($$('ESC_R_SB'), $$('R_SB'))\n                };\n                if ($truthy((delim = ($truthy(items['$include?'](\"&gt;\")) ? (\"&gt;\") : (($truthy(items['$include?'](\",\")) ? (\",\") : (nil))))))) {\n                  \n                  submenus = $send(items.$split(delim), 'map', [], function $$18(it){\n                    \n                    if (it == null) it = nil;\n                    return it.$strip();});\n                  menuitem = submenus.$pop();\n                } else {\n                  $a = [[], items.$rstrip()], (submenus = $a[0]), (menuitem = $a[1]), $a\n                };\n              } else {\n                $a = [[], nil], (submenus = $a[0]), (menuitem = $a[1]), $a\n              };\n              return $$('Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, {$$s: self})\n          };\n          if (($truthy(text['$include?'](\"\\\"\")) && ($truthy(text['$include?'](\"&gt;\"))))) {\n            text = $send(text, 'gsub', [$$('InlineMenuRx')], function $$19(){var $a, $b, $c, self = $$19.$$s == null ? this : $$19.$$s, menu = nil, submenus = nil, menuitem = nil;\n\n              \n              if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n              };\n              $b = $send((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$split(\"&gt;\"), 'map', [], function $$20(it){\n                \n                if (it == null) it = nil;\n                return it.$strip();}), $a = $to_ary($b), (menu = ($a[0] == null ? nil : $a[0])), (submenus = $slice($a, 1)), $b;\n              menuitem = submenus.$pop();\n              return $$('Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, {$$s: self})\n          };\n        };\n        if (($truthy(found_macroish) && (($truthy(text['$include?'](\"image:\")) || ($truthy(text['$include?'](\"icon:\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineImageMacroRx')], function $$21(){var $a, self = $$21.$$s == null ? this : $$21.$$s, type = nil, posattrs = nil, target = nil, attrs = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n            } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?'](\"icon:\"))) {\n              $a = [\"icon\", [\"size\"]], (type = $a[0]), (posattrs = $a[1]), $a\n            } else {\n              $a = [\"image\", [\"alt\", \"width\", \"height\"]], (type = $a[0]), (posattrs = $a[1]), $a\n            };\n            target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));\n            attrs = self.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), posattrs, $hash2([\"unescape_input\"], {\"unescape_input\": true}));\n            if (!$eqeq(type, \"icon\")) {\n              \n              doc.$register(\"images\", target);\n              attrs['$[]='](\"imagesdir\", doc_attrs['$[]'](\"imagesdir\"));\n            };\n            if ($truthy(($ret_or_1 = attrs['$[]'](\"alt\")))) {\n              $ret_or_1\n            } else {\n              attrs['$[]='](\"alt\", ($a = [\"default-alt\", $$('Helpers').$basename(target, true).$tr(\"_-\", \" \")], $send(attrs, '[]=', $a), $a[$a.length - 1]))\n            };\n            return $$('Inline').$new(self, \"image\", nil, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": type, \"target\": target, \"attributes\": attrs})).$convert();}, {$$s: self})\n        };\n        if ((($truthy(text['$include?'](\"((\")) && ($truthy(text['$include?'](\"))\")))) || (($truthy(found_macroish_short) && ($truthy(text['$include?'](\"dexterm\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineIndextermMacroRx')], function $$22(){var $a, $b, self = $$22.$$s == null ? this : $$22.$$s, attrlist = nil, primary = nil, attrs = nil, see_also = nil, term = nil, $ret_or_2 = nil, $ret_or_3 = nil, encl_text = nil, visible = nil, before = nil, after = nil, _ = nil, see = nil, subbed_term = nil, terms = nil;\n\n            \n            switch ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) {\n              case \"indexterm\":\n                \n                if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n                  return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n                };\n                if ($truthy((attrlist = self.$normalize_text((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), true, true))['$include?'](\"=\"))) {\n                  if ($truthy((primary = (attrs = $$('AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n                    \n                    attrs['$[]='](\"terms\", [primary]);\n                    if ($truthy((see_also = attrs['$[]'](\"see-also\")))) {\n                      attrs['$[]='](\"see-also\", ($truthy(see_also['$include?'](\",\")) ? ($send(see_also.$split(\",\"), 'map', [], function $$23(it){\n                        \n                        if (it == null) it = nil;\n                        return it.$lstrip();})) : ([see_also])))\n                    };\n                  } else {\n                    attrs = $hash2([\"terms\"], {\"terms\": attrlist})\n                  }\n                } else {\n                  attrs = $hash2([\"terms\"], {\"terms\": self.$split_simple_csv(attrlist)})\n                };\n                return $$('Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();\n              case \"indexterm2\":\n                \n                if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n                  return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n                };\n                if ($truthy((term = self.$normalize_text((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), true, true))['$include?'](\"=\"))) {\n                  \n                  term = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = (attrs = $$('AttributeList').$new(term, self).$parse())['$[]'](1))) ? ($ret_or_3) : ((attrs = nil))))) ? ($ret_or_2) : (term));\n                  if (($truthy(attrs) && ($truthy((see_also = attrs['$[]'](\"see-also\")))))) {\n                    attrs['$[]='](\"see-also\", ($truthy(see_also['$include?'](\",\")) ? ($send(see_also.$split(\",\"), 'map', [], function $$24(it){\n                      \n                      if (it == null) it = nil;\n                      return it.$lstrip();})) : ([see_also])))\n                  };\n                };\n                return $$('Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();\n              default:\n                \n                encl_text = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n                if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n                  if (($truthy(encl_text['$start_with?'](\"(\")) && ($truthy(encl_text['$end_with?'](\")\"))))) {\n                    \n                    encl_text = encl_text.$slice(1, $rb_minus(encl_text.$length(), 2));\n                    $a = [true, \"(\", \")\"], (visible = $a[0]), (before = $a[1]), (after = $a[2]), $a;\n                  } else {\n                    return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n                  }\n                } else {\n                  \n                  visible = true;\n                  if ($truthy(encl_text['$start_with?'](\"(\"))) {\n                    if ($truthy(encl_text['$end_with?'](\")\"))) {\n                      $a = [encl_text.$slice(1, $rb_minus(encl_text.$length(), 2)), false], (encl_text = $a[0]), (visible = $a[1]), $a\n                    } else {\n                      $a = [encl_text.$slice(1, encl_text.$length()), \"(\", \"\"], (encl_text = $a[0]), (before = $a[1]), (after = $a[2]), $a\n                    }\n                  } else if ($truthy(encl_text['$end_with?'](\")\"))) {\n                    $a = [encl_text.$chop(), \"\", \")\"], (encl_text = $a[0]), (before = $a[1]), (after = $a[2]), $a\n                  };\n                };\n                if ($truthy(visible)) {\n                  \n                  if ($truthy((term = self.$normalize_text(encl_text, true))['$include?'](\";&\"))) {\n                    if ($truthy(term['$include?'](\" &gt;&gt; \"))) {\n                      \n                      $b = term.$partition(\" &gt;&gt; \"), $a = $to_ary($b), (term = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (see = ($a[2] == null ? nil : $a[2])), $b;\n                      attrs = $hash2([\"see\"], {\"see\": see});\n                    } else if ($truthy(term['$include?'](\" &amp;&gt; \"))) {\n                      \n                      $b = term.$split(\" &amp;&gt; \"), $a = $to_ary($b), (term = ($a[0] == null ? nil : $a[0])), (see_also = $slice($a, 1)), $b;\n                      attrs = $hash2([\"see-also\"], {\"see-also\": see_also});\n                    }\n                  };\n                  subbed_term = $$('Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();\n                } else {\n                  \n                  attrs = $hash2([], {});\n                  if ($truthy((terms = self.$normalize_text(encl_text, true))['$include?'](\";&\"))) {\n                    if ($truthy(terms['$include?'](\" &gt;&gt; \"))) {\n                      \n                      $b = terms.$partition(\" &gt;&gt; \"), $a = $to_ary($b), (terms = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (see = ($a[2] == null ? nil : $a[2])), $b;\n                      attrs['$[]='](\"see\", see);\n                    } else if ($truthy(terms['$include?'](\" &amp;&gt; \"))) {\n                      \n                      $b = terms.$split(\" &amp;&gt; \"), $a = $to_ary($b), (terms = ($a[0] == null ? nil : $a[0])), (see_also = $slice($a, 1)), $b;\n                      attrs['$[]='](\"see-also\", see_also);\n                    }\n                  };\n                  attrs['$[]='](\"terms\", self.$split_simple_csv(terms));\n                  subbed_term = $$('Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();\n                };\n                if ($truthy(before)) {\n                  return \"\" + (before) + (subbed_term) + (after)\n                } else {\n                  return subbed_term\n                };\n            }}, {$$s: self})\n        };\n        if (($truthy(found_colon) && ($truthy(text['$include?'](\"://\"))))) {\n          text = $send(text, 'gsub', [$$('InlineLinkRx')], function $$25(){var $a, $b, self = $$25.$$s == null ? this : $$25.$$s, target = nil, rs_idx = nil, prefix = nil, suffix = nil, link_text = nil, attrs = nil, link_opts = nil, new_link_text = nil, bare = nil;\n\n            \n            if ($truthy((target = $rb_plus((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), ($truthy(($ret_or_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) ? ($ret_or_1) : ((($a = $gvars['~']) === nil ? nil : $a['$[]'](5))))))['$start_with?']($$('RS')))) {\n              return $rb_plus((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(0, (rs_idx = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$length())), (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice($rb_plus(rs_idx, 1), (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length()))\n            };\n            $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), \"\"], (prefix = $a[0]), (suffix = $a[1]), $a;\n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](4)))) {\n              \n              if ($eqeq(prefix, \"link:\")) {\n                prefix = \"\"\n              };\n              if ($truthy((link_text = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)))['$empty?']())) {\n                link_text = nil\n              };\n            } else {\n              \n              \n              switch (prefix) {\n                case \"link:\":\n                case \"\\\"\":\n                case \"'\":\n                  return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n                default:\n                  nil\n              };\n              \n              switch ((($a = $gvars['~']) === nil ? nil : $a['$[]'](6))) {\n                case \";\":\n                  \n                  if (($truthy(prefix['$start_with?'](\"&lt;\")) && ($truthy(target['$end_with?'](\"&gt;\"))))) {\n                    \n                    prefix = prefix.$slice(4, prefix.$length());\n                    target = target.$slice(0, $rb_minus(target.$length(), 4));\n                  } else if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                    \n                    target = target.$chop();\n                    suffix = \");\";\n                  } else {\n                    suffix = \";\"\n                  };\n                  if ($truthy(target['$end_with?'](\"://\"))) {\n                    return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n                  };\n                  break;\n                case \":\":\n                  \n                  if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                    \n                    target = target.$chop();\n                    suffix = \"):\";\n                  } else {\n                    suffix = \":\"\n                  };\n                  if ($truthy(target['$end_with?'](\"://\"))) {\n                    return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n                  };\n                  break;\n                default:\n                  nil\n              };\n            };\n            $a = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $a[0]), (link_opts = $a[1]), $a;\n            if ($truthy(link_text)) {\n              \n              if ($truthy(link_text['$include?']($$('R_SB')))) {\n                new_link_text = (link_text = link_text.$gsub($$('ESC_R_SB'), $$('R_SB')))\n              };\n              if (($not(doc.$compat_mode()) && ($truthy(link_text['$include?'](\"=\"))))) {\n                \n                $b = self.$extract_attributes_from_text(link_text, \"\"), $a = $to_ary($b), (link_text = ($a[0] == null ? nil : $a[0])), (attrs = ($a[1] == null ? nil : $a[1])), $b;\n                new_link_text = link_text;\n                link_opts['$[]='](\"id\", attrs['$[]'](\"id\"));\n              };\n              if ($truthy(link_text['$end_with?'](\"^\"))) {\n                \n                new_link_text = (link_text = link_text.$chop());\n                if ($truthy(attrs)) {\n                  if ($truthy(($ret_or_1 = attrs['$[]'](\"window\")))) {\n                    $ret_or_1\n                  } else {\n                    attrs['$[]='](\"window\", \"_blank\")\n                  }\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };\n              };\n              if (($truthy(new_link_text) && ($truthy(new_link_text['$empty?']())))) {\n                \n                link_text = ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\")) ? (target.$sub($$('UriSniffRx'), \"\")) : (target));\n                bare = true;\n              };\n            } else {\n              \n              link_text = ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\")) ? (target.$sub($$('UriSniffRx'), \"\")) : (target));\n              bare = true;\n            };\n            if ($truthy(bare)) {\n              if ($truthy(attrs)) {\n                attrs['$[]='](\"role\", ($truthy(attrs['$key?'](\"role\")) ? (\"bare \" + (attrs['$[]'](\"role\"))) : (\"bare\")))\n              } else {\n                attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n              }\n            };\n            doc.$register(\"links\", ($a = [\"target\", target], $send(link_opts, '[]=', $a), $a[$a.length - 1]));\n            if ($truthy(attrs)) {\n              link_opts['$[]='](\"attributes\", attrs)\n            };\n            return \"\" + (prefix) + ($$('Inline').$new(self, \"anchor\", link_text, link_opts).$convert()) + (suffix);}, {$$s: self})\n        };\n        if (($truthy(found_macroish) && (($truthy(text['$include?'](\"link:\")) || ($truthy(text['$include?'](\"ilto:\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineLinkMacroRx')], function $$26(){var $a, $b, self = $$26.$$s == null ? this : $$26.$$s, mailto = nil, target = nil, mailto_text = nil, attrs = nil, link_opts = nil, link_text = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n            } else if ($truthy((mailto = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))) {\n              target = $rb_plus(\"mailto:\", (mailto_text = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))\n            } else {\n              target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))\n            };\n            $a = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $a[0]), (link_opts = $a[1]), $a;\n            if (!$truthy((link_text = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))['$empty?']())) {\n              \n              if ($truthy(link_text['$include?']($$('R_SB')))) {\n                link_text = link_text.$gsub($$('ESC_R_SB'), $$('R_SB'))\n              };\n              if ($truthy(mailto)) {\n                if (($not(doc.$compat_mode()) && ($truthy(link_text['$include?'](\",\"))))) {\n                  \n                  $b = self.$extract_attributes_from_text(link_text, \"\"), $a = $to_ary($b), (link_text = ($a[0] == null ? nil : $a[0])), (attrs = ($a[1] == null ? nil : $a[1])), $b;\n                  link_opts['$[]='](\"id\", attrs['$[]'](\"id\"));\n                  if ($truthy(attrs['$key?'](2))) {\n                    if ($truthy(attrs['$key?'](3))) {\n                      target = \"\" + (target) + \"?subject=\" + ($$('Helpers').$encode_uri_component(attrs['$[]'](2))) + \"&amp;body=\" + ($$('Helpers').$encode_uri_component(attrs['$[]'](3)))\n                    } else {\n                      target = \"\" + (target) + \"?subject=\" + ($$('Helpers').$encode_uri_component(attrs['$[]'](2)))\n                    }\n                  };\n                }\n              } else if (($not(doc.$compat_mode()) && ($truthy(link_text['$include?'](\"=\"))))) {\n                \n                $b = self.$extract_attributes_from_text(link_text, \"\"), $a = $to_ary($b), (link_text = ($a[0] == null ? nil : $a[0])), (attrs = ($a[1] == null ? nil : $a[1])), $b;\n                link_opts['$[]='](\"id\", attrs['$[]'](\"id\"));\n              };\n              if ($truthy(link_text['$end_with?'](\"^\"))) {\n                \n                link_text = link_text.$chop();\n                if ($truthy(attrs)) {\n                  if ($truthy(($ret_or_1 = attrs['$[]'](\"window\")))) {\n                    $ret_or_1\n                  } else {\n                    attrs['$[]='](\"window\", \"_blank\")\n                  }\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };\n              };\n            };\n            if ($truthy(link_text['$empty?']())) {\n              if ($truthy(mailto)) {\n                link_text = mailto_text\n              } else {\n                \n                if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                  if ($truthy((link_text = target.$sub($$('UriSniffRx'), \"\"))['$empty?']())) {\n                    link_text = target\n                  }\n                } else {\n                  link_text = target\n                };\n                if ($truthy(attrs)) {\n                  attrs['$[]='](\"role\", ($truthy(attrs['$key?'](\"role\")) ? (\"bare \" + (attrs['$[]'](\"role\"))) : (\"bare\")))\n                } else {\n                  attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n                };\n              }\n            };\n            doc.$register(\"links\", ($a = [\"target\", target], $send(link_opts, '[]=', $a), $a[$a.length - 1]));\n            if ($truthy(attrs)) {\n              link_opts['$[]='](\"attributes\", attrs)\n            };\n            return $$('Inline').$new(self, \"anchor\", link_text, link_opts).$convert();}, {$$s: self})\n        };\n        if ($truthy(text['$include?'](\"@\"))) {\n          text = $send(text, 'gsub', [$$('InlineEmailRx')], function $$27(){var $a, self = $$27.$$s == null ? this : $$27.$$s, target = nil, address = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n              return ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), $$('RS')) ? ((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())) : ((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))))\n            };\n            target = $rb_plus(\"mailto:\", (address = (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))));\n            doc.$register(\"links\", target);\n            return $$('Inline').$new(self, \"anchor\", address, $hash2([\"type\", \"target\"], {\"type\": \"link\", \"target\": target})).$convert();}, {$$s: self})\n        };\n        if ((($truthy(found_square_bracket) && ($eqeq(self.context, \"list_item\"))) && ($eqeq(self.parent.$style(), \"bibliography\")))) {\n          text = $send(text, 'sub', [$$('InlineBiblioAnchorRx')], function $$28(){var $a, self = $$28.$$s == null ? this : $$28.$$s;\n\n            return $$('Inline').$new(self, \"anchor\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))})).$convert()}, {$$s: self})\n        };\n        if ((($truthy(found_square_bracket) && ($truthy(text['$include?'](\"[[\")))) || (($truthy(found_macroish) && ($truthy(text['$include?'](\"or:\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineAnchorRx')], function $$29(){var $a, self = $$29.$$s == null ? this : $$29.$$s, id = nil, reftext = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n            };\n            if ($truthy((id = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n              reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))\n            } else {\n              \n              id = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));\n              if (($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)))) && ($truthy(reftext['$include?']($$('R_SB')))))) {\n                reftext = reftext.$gsub($$('ESC_R_SB'), $$('R_SB'))\n              };\n            };\n            return $$('Inline').$new(self, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id})).$convert();}, {$$s: self})\n        };\n        if ((($truthy(text['$include?'](\"&\")) && ($truthy(text['$include?'](\";&l\")))) || (($truthy(found_macroish) && ($truthy(text['$include?'](\"xref:\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineXrefMacroRx')], function $$30(){var $a, $b, self = $$30.$$s == null ? this : $$30.$$s, attrs = nil, refid = nil, _ = nil, link_text = nil, macro = nil, fragment = nil, hash_idx = nil, fragment_len = nil, path = nil, src2src = nil, target = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n            };\n            attrs = $hash2([], {});\n            if ($truthy((refid = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))) {\n              if ($truthy(refid['$include?'](\",\"))) {\n                \n                $b = refid.$partition(\",\"), $a = $to_ary($b), (refid = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (link_text = ($a[2] == null ? nil : $a[2])), $b;\n                if ($truthy((link_text = link_text.$lstrip())['$empty?']())) {\n                  link_text = nil\n                };\n              }\n            } else {\n              \n              macro = true;\n              refid = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n              if ($truthy((link_text = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))))) {\n                \n                if ($truthy(link_text['$include?']($$('R_SB')))) {\n                  link_text = link_text.$gsub($$('ESC_R_SB'), $$('R_SB'))\n                };\n                if (($not(doc.$compat_mode()) && ($truthy(link_text['$include?'](\"=\"))))) {\n                  $b = self.$extract_attributes_from_text(link_text), $a = $to_ary($b), (link_text = ($a[0] == null ? nil : $a[0])), (attrs = ($a[1] == null ? nil : $a[1])), $b\n                };\n              };\n            };\n            if ($truthy(doc.$compat_mode())) {\n              fragment = refid\n            } else if (($truthy((hash_idx = refid.$index(\"#\"))) && ($neqeq(refid['$[]']($rb_minus(hash_idx, 1)), \"&\")))) {\n              if ($truthy($rb_gt(hash_idx, 0))) {\n                \n                if ($truthy($rb_gt((fragment_len = $rb_minus($rb_minus(refid.$length(), 1), hash_idx)), 0))) {\n                  $a = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], (path = $a[0]), (fragment = $a[1]), $a\n                } else {\n                  path = refid.$chop()\n                };\n                if ($truthy(macro)) {\n                  if ($truthy(path['$end_with?'](\".adoc\"))) {\n                    src2src = (path = path.$slice(0, $rb_minus(path.$length(), 5)))\n                  } else if ($not($$('Helpers')['$extname?'](path))) {\n                    src2src = path\n                  }\n                } else if ($truthy($send(path, 'end_with?', $to_a($$('ASCIIDOC_EXTENSIONS').$keys())))) {\n                  src2src = (path = path.$slice(0, path.$rindex(\".\")))\n                } else {\n                  src2src = path\n                };\n              } else {\n                $a = [refid, refid.$slice(1, refid.$length())], (target = $a[0]), (fragment = $a[1]), $a\n              }\n            } else if ($truthy(macro)) {\n              if ($truthy(refid['$end_with?'](\".adoc\"))) {\n                src2src = (path = refid.$slice(0, $rb_minus(refid.$length(), 5)))\n              } else if ($truthy($$('Helpers')['$extname?'](refid))) {\n                path = refid\n              } else {\n                fragment = refid\n              }\n            } else {\n              fragment = refid\n            };\n            if ($truthy(target)) {\n              \n              refid = fragment;\n              if (($truthy(self.$logger()['$info?']()) && ($not(doc.$catalog()['$[]'](\"refs\")['$[]'](refid))))) {\n                self.$logger().$info(\"possible invalid reference: \" + (refid))\n              };\n            } else if ($truthy(path)) {\n              if (($truthy(src2src) && (($eqeq(doc.$attributes()['$[]'](\"docname\"), path) || ($truthy(doc.$catalog()['$[]'](\"includes\")['$[]'](path))))))) {\n                if ($truthy(fragment)) {\n                  \n                  $a = [fragment, nil, \"#\" + (fragment)], (refid = $a[0]), (path = $a[1]), (target = $a[2]), $a;\n                  if (($truthy(self.$logger()['$info?']()) && ($not(doc.$catalog()['$[]'](\"refs\")['$[]'](refid))))) {\n                    self.$logger().$info(\"possible invalid reference: \" + (refid))\n                  };\n                } else {\n                  $a = [nil, nil, \"#\"], (refid = $a[0]), (path = $a[1]), (target = $a[2]), $a\n                }\n              } else {\n                \n                $a = [path, \"\" + (($truthy(($ret_or_1 = doc.$attributes()['$[]'](\"relfileprefix\"))) ? ($ret_or_1) : (\"\"))) + (path) + (($truthy(src2src) ? (doc.$attributes().$fetch(\"relfilesuffix\", doc.$outfilesuffix())) : (\"\")))], (refid = $a[0]), (path = $a[1]), $a;\n                if ($truthy(fragment)) {\n                  $a = [\"\" + (refid) + \"#\" + (fragment), \"\" + (path) + \"#\" + (fragment)], (refid = $a[0]), (target = $a[1]), $a\n                } else {\n                  target = path\n                };\n              }\n            } else if (($truthy(doc.$compat_mode()) || ($not($$('Compliance').$natural_xrefs())))) {\n              \n              $a = [fragment, \"#\" + (fragment)], (refid = $a[0]), (target = $a[1]), $a;\n              if (($truthy(self.$logger()['$info?']()) && ($not(doc.$catalog()['$[]'](\"refs\")['$[]'](refid))))) {\n                self.$logger().$info(\"possible invalid reference: \" + (refid))\n              };\n            } else if ($truthy(doc.$catalog()['$[]'](\"refs\")['$[]'](fragment))) {\n              $a = [fragment, \"#\" + (fragment)], (refid = $a[0]), (target = $a[1]), $a\n            } else if ((($truthy(fragment['$include?'](\" \")) || ($neqeq(fragment.$downcase(), fragment))) && ($truthy((refid = doc.$resolve_id(fragment)))))) {\n              $a = [refid, \"#\" + (refid)], (fragment = $a[0]), (target = $a[1]), $a\n            } else {\n              \n              $a = [fragment, \"#\" + (fragment)], (refid = $a[0]), (target = $a[1]), $a;\n              if ($truthy(self.$logger()['$info?']())) {\n                self.$logger().$info(\"possible invalid reference: \" + (refid))\n              };\n            };\n            attrs['$[]='](\"path\", path);\n            attrs['$[]='](\"fragment\", fragment);\n            attrs['$[]='](\"refid\", refid);\n            return $$('Inline').$new(self, \"anchor\", link_text, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": \"xref\", \"target\": target, \"attributes\": attrs})).$convert();}, {$$s: self})\n        };\n        if (($truthy(found_macroish) && ($truthy(text['$include?'](\"tnote\"))))) {\n          text = $send(text, 'gsub', [$$('InlineFootnoteMacroRx')], function $$31(){var $a, $b, $c, self = $$31.$$s == null ? this : $$31.$$s, id = nil, content = nil, footnote = nil, index = nil, type = nil, target = nil;\n\n            \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('RS')))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n            };\n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n              if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {\n                \n                $b = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$split(\",\", 2), $a = $to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (content = ($a[1] == null ? nil : $a[1])), $b;\n                if (!$truthy(doc.$compat_mode())) {\n                  self.$logger().$warn(\"found deprecated footnoteref macro: \" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))) + \"; use footnote macro with target instead\")\n                };\n              } else {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n              }\n            } else {\n              \n              id = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n              content = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n            };\n            if ($truthy(id)) {\n              if ($truthy((footnote = $send(doc.$footnotes(), 'find', [], function $$32(candidate){\n                \n                if (candidate == null) candidate = nil;\n                return candidate.$id()['$=='](id);})))) {\n                \n                $a = [footnote.$index(), footnote.$text()], (index = $a[0]), (content = $a[1]), $a;\n                $a = [\"xref\", id, nil], (type = $a[0]), (target = $a[1]), (id = $a[2]), $a;\n              } else if ($truthy(content)) {\n                \n                content = self.$restore_passthroughs(self.$normalize_text(content, true, true));\n                index = doc.$counter(\"footnote-number\");\n                doc.$register(\"footnotes\", $$$($$('Document'), 'Footnote').$new(index, id, content));\n                $a = [\"ref\", nil], (type = $a[0]), (target = $a[1]), $a;\n              } else {\n                \n                self.$logger().$warn(\"invalid footnote reference: \" + (id));\n                $a = [\"xref\", id, id, nil], (type = $a[0]), (target = $a[1]), (content = $a[2]), (id = $a[3]), $a;\n              }\n            } else if ($truthy(content)) {\n              \n              content = self.$restore_passthroughs(self.$normalize_text(content, true, true));\n              index = doc.$counter(\"footnote-number\");\n              doc.$register(\"footnotes\", $$$($$('Document'), 'Footnote').$new(index, id, content));\n              type = (target = nil);\n            } else {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))\n            };\n            return $$('Inline').$new(self, \"footnote\", content, $hash2([\"attributes\", \"id\", \"target\", \"type\"], {\"attributes\": $hash2([\"index\"], {\"index\": index}), \"id\": id, \"target\": target, \"type\": type})).$convert();}, {$$s: self})\n        };\n        return text;\n      });\n      \n      $def(self, '$sub_post_replacements', function $$sub_post_replacements(text) {\n        var self = this, lines = nil, last = nil;\n        if (self.document == null) self.document = nil;\n        if (self.attributes == null) self.attributes = nil;\n\n        if (($truthy(self.attributes['$[]'](\"hardbreaks-option\")) || ($truthy(self.document.$attributes()['$[]'](\"hardbreaks-option\"))))) {\n          \n          lines = text.$split($$('LF'), -1);\n          if ($truthy($rb_lt(lines.$size(), 2))) {\n            return text\n          };\n          last = lines.$pop();\n          return $send(lines, 'map', [], function $$33(line){var self = $$33.$$s == null ? this : $$33.$$s;\n\n            \n            if (line == null) line = nil;\n            return $$('Inline').$new(self, \"break\", ($truthy(line['$end_with?']($$('HARD_LINE_BREAK'))) ? (line.$slice(0, $rb_minus(line.$length(), 2))) : (line)), $hash2([\"type\"], {\"type\": \"line\"})).$convert();}, {$$s: self})['$<<'](last).$join($$('LF'));\n        } else if (($truthy(text['$include?']($$('PLUS'))) && ($truthy(text['$include?']($$('HARD_LINE_BREAK')))))) {\n          return $send(text, 'gsub', [$$('HardLineBreakRx')], function $$34(){var $a, self = $$34.$$s == null ? this : $$34.$$s;\n\n            return $$('Inline').$new(self, \"break\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), $hash2([\"type\"], {\"type\": \"line\"})).$convert()}, {$$s: self})\n        } else {\n          return text\n        }\n      });\n      \n      $def(self, '$sub_source', function $$sub_source(source, process_callouts) {\n        var self = this;\n\n        if ($truthy(process_callouts)) {\n          return self.$sub_callouts(self.$sub_specialchars(source))\n        } else {\n          \n          return self.$sub_specialchars(source);\n        }\n      });\n      \n      $def(self, '$sub_callouts', function $$sub_callouts(text) {\n        var self = this, callout_rx = nil, autonum = nil;\n\n        \n        callout_rx = ($truthy(self['$attr?'](\"line-comment\")) ? ($$('CalloutSourceRxMap')['$[]'](self.$attr(\"line-comment\"))) : ($$('CalloutSourceRx')));\n        autonum = 0;\n        return $send(text, 'gsub', [callout_rx], function $$35(){var $a, self = $$35.$$s == null ? this : $$35.$$s, $ret_or_1 = nil;\n          if (self.document == null) self.document = nil;\n\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$('RS'), \"\")\n          } else {\n            return $$('Inline').$new(self, \"callout\", ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), \".\") ? ((autonum = $rb_plus(autonum, 1)).$to_s()) : ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4)))), $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": ($truthy(($ret_or_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) ? ($ret_or_1) : (($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), \"--\") ? ([\"<!--\", \"-->\"]) : (nil))))})})).$convert()\n          }}, {$$s: self});\n      });\n      \n      $def(self, '$highlight_source', function $$highlight_source(source, process_callouts) {\n        var $a, $b, self = this, syntax_hl = nil, callout_marks = nil, doc_attrs = nil, syntax_hl_name = nil, start_line_number = nil, linenums_mode = nil, $ret_or_1 = nil, highlight_lines = nil, highlighted = nil, source_offset = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        if (!($truthy((syntax_hl = self.document.$syntax_highlighter())) && ($truthy(syntax_hl['$highlight?']())))) {\n          return self.$sub_source(source, process_callouts)\n        };\n        if ($truthy(process_callouts)) {\n          $b = self.$extract_callouts(source), $a = $to_ary($b), (source = ($a[0] == null ? nil : $a[0])), (callout_marks = ($a[1] == null ? nil : $a[1])), $b\n        };\n        doc_attrs = self.document.$attributes();\n        syntax_hl_name = syntax_hl.$name();\n        if (($truthy((linenums_mode = ($truthy(self['$attr?'](\"linenums\")) ? (($truthy(($ret_or_1 = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-linenums-mode\"))) ? ($ret_or_1) : (\"table\")).$to_sym()) : (nil)))) && ($truthy($rb_lt((start_line_number = self.$attr(\"start\", 1).$to_i()), 1))))) {\n          start_line_number = 1\n        };\n        if ($truthy(self['$attr?'](\"highlight\"))) {\n          highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr(\"highlight\"), start_line_number)\n        };\n        $b = syntax_hl.$highlight(self, source, self.$attr(\"language\"), $hash2([\"callouts\", \"css_mode\", \"highlight_lines\", \"number_lines\", \"start_line_number\", \"style\"], {\"callouts\": callout_marks, \"css_mode\": ($truthy(($ret_or_1 = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-css\"))) ? ($ret_or_1) : (\"class\")).$to_sym(), \"highlight_lines\": highlight_lines, \"number_lines\": linenums_mode, \"start_line_number\": start_line_number, \"style\": doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-style\")})), $a = $to_ary($b), (highlighted = ($a[0] == null ? nil : $a[0])), (source_offset = ($a[1] == null ? nil : $a[1])), $b;\n        if (!$truthy(self.passthroughs['$empty?']())) {\n          highlighted = highlighted.$gsub($$('HighlightedPassSlotRx'), \"\" + ($$('PASS_START')) + \"\\\\1\" + ($$('PASS_END')))\n        };\n        if ($truthy(callout_marks['$nil_or_empty?']())) {\n          return highlighted\n        } else {\n          \n          return self.$restore_callouts(highlighted, callout_marks, source_offset);\n        };\n      });\n      \n      $def(self, '$resolve_lines_to_highlight', function $$resolve_lines_to_highlight(source, spec, start) {\n        var lines = nil, shift = nil;\n\n        \n        if (start == null) start = nil;\n        lines = [];\n        if ($truthy(spec['$include?'](\" \"))) {\n          spec = spec.$delete(\" \")\n        };\n        $send(($truthy(spec['$include?'](\",\")) ? (spec.$split(\",\")) : (spec.$split(\";\"))), 'map', [], function $$36(entry){var $a, $b, negate = nil, delim = nil, from = nil, _ = nil, to = nil, line = nil;\n\n          \n          if (entry == null) entry = nil;\n          if ($truthy(entry['$start_with?'](\"!\"))) {\n            \n            entry = entry.$slice(1, entry.$length());\n            negate = true;\n          };\n          if ($truthy((delim = ($truthy(entry['$include?'](\"..\")) ? (\"..\") : (($truthy(entry['$include?'](\"-\")) ? (\"-\") : (nil))))))) {\n            \n            $b = entry.$partition(delim), $a = $to_ary($b), (from = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (to = ($a[2] == null ? nil : $a[2])), $b;\n            if (($truthy(to['$empty?']()) || ($truthy($rb_lt((to = to.$to_i()), 0))))) {\n              to = $rb_plus(source.$count($$('LF')), 1)\n            };\n            if ($truthy(negate)) {\n              return (lines = $rb_minus(lines, Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            } else {\n              return (lines = lines['$|'](Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            };\n          } else if ($truthy(negate)) {\n            return lines.$delete(entry.$to_i())\n          } else if ($not(lines['$include?']((line = entry.$to_i())))) {\n            return lines['$<<'](line)\n          } else {\n            return nil\n          };});\n        if (!$eqeq((shift = ($truthy(start) ? ($rb_minus(start, 1)) : (0))), 0)) {\n          lines = $send(lines, 'map', [], function $$37(it){\n            \n            if (it == null) it = nil;\n            return $rb_minus(it, shift);})\n        };\n        return lines.$sort();\n      }, -3);\n      \n      $def(self, '$extract_passthroughs', function $$extract_passthroughs(text) {\n        var $a, $b, self = this, compat_mode = nil, passthrus = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        compat_mode = self.document.$compat_mode();\n        passthrus = self.passthroughs;\n        if ((($truthy(text['$include?'](\"++\")) || ($truthy(text['$include?'](\"$$\")))) || ($truthy(text['$include?'](\"ss:\"))))) {\n          text = $send(text, 'gsub', [$$('InlinePassMacroRx')], function $$38(){var $a, self = $$38.$$s == null ? this : $$38.$$s, boundary = nil, attrlist = nil, escape_count = nil, preceding = nil, old_behavior = nil, attributes = nil, subs = nil, passthru_key = nil, $ret_or_1 = nil;\n\n            \n            if ($truthy((boundary = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))))) {\n              \n              if (($truthy(compat_mode) && ($eqeq(boundary, \"++\")))) {\n                return \"\" + (($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) ? (\"\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + \"[\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"]\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) : (\"\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))))) + \"++\" + (self.$extract_passthroughs((($a = $gvars['~']) === nil ? nil : $a['$[]'](5)))) + \"++\"\n              };\n              if ($truthy((attrlist = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n                if ($truthy($rb_gt((escape_count = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$length()), 0))) {\n                  return \"\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + \"[\" + (attrlist) + \"]\" + ($rb_times($$('RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](5))) + (boundary)\n                } else if ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), $$('RS'))) {\n                  preceding = \"[\" + (attrlist) + \"]\"\n                } else if ($eqeq(boundary, \"++\")) {\n                  if ($eqeq(attrlist, \"x-\")) {\n                    \n                    old_behavior = true;\n                    attributes = $hash2([], {});\n                  } else if ($truthy(attrlist['$end_with?'](\" x-\"))) {\n                    \n                    old_behavior = true;\n                    attributes = self.$parse_quoted_text_attributes(attrlist.$slice(0, $rb_minus(attrlist.$length(), 3)));\n                  } else {\n                    attributes = self.$parse_quoted_text_attributes(attrlist)\n                  }\n                } else {\n                  attributes = self.$parse_quoted_text_attributes(attrlist)\n                }\n              } else if ($truthy($rb_gt((escape_count = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$length()), 0))) {\n                return \"\" + ($rb_times($$('RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](5))) + (boundary)\n              };\n              subs = ($eqeq(boundary, \"+++\") ? ([]) : ($$('BASIC_SUBS')));\n              if ($truthy(attributes)) {\n                if ($truthy(old_behavior)) {\n                  passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)), \"subs\": $$('NORMAL_SUBS'), \"type\": \"monospaced\", \"attributes\": attributes}))\n                } else {\n                  passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)), \"subs\": subs, \"type\": \"unquoted\", \"attributes\": attributes}))\n                }\n              } else {\n                passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)), \"subs\": subs}))\n              };\n            } else {\n              \n              if ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](6)), $$('RS'))) {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$slice(1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length())\n              };\n              if ($truthy((subs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](7))))) {\n                passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": self.$normalize_text((($a = $gvars['~']) === nil ? nil : $a['$[]'](8)), nil, true), \"subs\": self.$resolve_pass_subs(subs)}))\n              } else {\n                passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\"], {\"text\": self.$normalize_text((($a = $gvars['~']) === nil ? nil : $a['$[]'](8)), nil, true)}))\n              };\n            };\n            return \"\" + (($truthy(($ret_or_1 = preceding)) ? ($ret_or_1) : (\"\"))) + ($$('PASS_START')) + (passthru_key) + ($$('PASS_END'));}, {$$s: self})\n        };\n        $b = $$('InlinePassRx')['$[]'](compat_mode), $a = $to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;\n        if (($truthy(text['$include?'](pass_inline_char1)) || (($truthy(pass_inline_char2) && ($truthy(text['$include?'](pass_inline_char2))))))) {\n          text = $send(text, 'gsub', [pass_inline_rx], function $$39(){var $c, self = $$39.$$s == null ? this : $$39.$$s, preceding = nil, attrlist = nil, $ret_or_1 = nil, escaped = nil, quoted_text = nil, format_mark = nil, content = nil, old_behavior = nil, old_behavior_forced = nil, attributes = nil, passthru_key = nil, subs = nil;\n\n            \n            preceding = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            attrlist = ($truthy(($ret_or_1 = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4)))) ? ($ret_or_1) : ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))));\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](5)))) {\n              escaped = true\n            };\n            quoted_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](6));\n            format_mark = (($c = $gvars['~']) === nil ? nil : $c['$[]'](7));\n            content = (($c = $gvars['~']) === nil ? nil : $c['$[]'](8));\n            if ($truthy(compat_mode)) {\n              old_behavior = true\n            } else if (($truthy(attrlist) && (($eqeq(attrlist, \"x-\") || ($truthy(attrlist['$end_with?'](\" x-\"))))))) {\n              old_behavior = (old_behavior_forced = true)\n            };\n            if ($truthy(attrlist)) {\n              if ($truthy(escaped)) {\n                return \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (quoted_text.$slice(1, quoted_text.$length()))\n              } else if ($eqeq(preceding, $$('RS'))) {\n                \n                if (($truthy(old_behavior_forced) && ($eqeq(format_mark, \"`\")))) {\n                  return \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (quoted_text)\n                };\n                preceding = \"[\" + (attrlist) + \"]\";\n              } else if ($truthy(old_behavior_forced)) {\n                attributes = ($eqeq(attrlist, \"x-\") ? ($hash2([], {})) : (self.$parse_quoted_text_attributes(attrlist.$slice(0, $rb_minus(attrlist.$length(), 3)))))\n              } else {\n                attributes = self.$parse_quoted_text_attributes(attrlist)\n              }\n            } else if ($truthy(escaped)) {\n              return \"\" + (preceding) + (quoted_text.$slice(1, quoted_text.$length()))\n            } else if (($truthy(compat_mode) && ($eqeq(preceding, $$('RS'))))) {\n              return quoted_text\n            };\n            if ($truthy(compat_mode)) {\n              passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$('BASIC_SUBS'), \"attributes\": attributes, \"type\": \"monospaced\"}))\n            } else if ($truthy(attributes)) {\n              if ($truthy(old_behavior)) {\n                \n                subs = ($eqeq(format_mark, \"`\") ? ($$('BASIC_SUBS')) : ($$('NORMAL_SUBS')));\n                passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": subs, \"attributes\": attributes, \"type\": \"monospaced\"}));\n              } else {\n                passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$('BASIC_SUBS'), \"attributes\": attributes, \"type\": \"unquoted\"}))\n              }\n            } else {\n              passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": content, \"subs\": $$('BASIC_SUBS')}))\n            };\n            return \"\" + (preceding) + ($$('PASS_START')) + (passthru_key) + ($$('PASS_END'));}, {$$s: self})\n        };\n        if (($truthy(text['$include?'](\":\")) && (($truthy(text['$include?'](\"stem:\")) || ($truthy(text['$include?'](\"math:\"))))))) {\n          text = $send(text, 'gsub', [$$('InlineStemMacroRx')], function $$40(){var $c, self = $$40.$$s == null ? this : $$40.$$s, type = nil, subs = nil, content = nil, passthru_key = nil;\n            if (self.document == null) self.document = nil;\n\n            \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$('RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length())\n            };\n            if ($eqeq((type = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym()), \"stem\")) {\n              type = $$('STEM_TYPE_ALIASES')['$[]'](self.document.$attributes()['$[]'](\"stem\")).$to_sym()\n            };\n            subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n            content = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), nil, true);\n            if ((($eqeq(type, \"latexmath\") && ($truthy(content['$start_with?'](\"$\")))) && ($truthy(content['$end_with?'](\"$\"))))) {\n              content = content.$slice(1, $rb_minus(content.$length(), 2))\n            };\n            subs = ($truthy(subs) ? (self.$resolve_pass_subs(subs)) : (($truthy(self.document['$basebackend?'](\"html\")) ? ($$('BASIC_SUBS')) : (nil))));\n            passthrus['$[]=']((passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\"], {\"text\": content, \"subs\": subs, \"type\": type}));\n            return \"\" + ($$('PASS_START')) + (passthru_key) + ($$('PASS_END'));}, {$$s: self})\n        };\n        return text;\n      });\n      \n      $def(self, '$restore_passthroughs', function $$restore_passthroughs(text) {\n        var self = this, passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        passthrus = self.passthroughs;\n        return $send(text, 'gsub', [$$('PassSlotRx')], function $$41(){var $a, self = $$41.$$s == null ? this : $$41.$$s, pass = nil, subbed_text = nil, type = nil, attributes = nil, id = nil;\n\n          if ($truthy((pass = passthrus['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i())))) {\n            \n            subbed_text = self.$apply_subs(pass['$[]'](\"text\"), pass['$[]'](\"subs\"));\n            if ($truthy((type = pass['$[]'](\"type\")))) {\n              \n              if ($truthy((attributes = pass['$[]'](\"attributes\")))) {\n                id = attributes['$[]'](\"id\")\n              };\n              subbed_text = $$('Inline').$new(self, \"quoted\", subbed_text, $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();\n            };\n            if ($truthy(subbed_text['$include?']($$('PASS_START')))) {\n              return self.$restore_passthroughs(subbed_text)\n            } else {\n              return subbed_text\n            };\n          } else {\n            \n            self.$logger().$error(\"unresolved passthrough detected: \" + (text));\n            return \"??pass??\";\n          }}, {$$s: self});\n      });\n      \n      $def(self, '$resolve_subs', function $$resolve_subs(subs, type, defaults, subject) {\n        var self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;\n\n        \n        if (type == null) type = \"block\";\n        if (defaults == null) defaults = nil;\n        if (subject == null) subject = nil;\n        if ($truthy(subs['$nil_or_empty?']())) {\n          return nil\n        };\n        candidates = nil;\n        if ($truthy(subs['$include?'](\" \"))) {\n          subs = subs.$delete(\" \")\n        };\n        modifiers_present = $$('SubModifierSniffRx')['$match?'](subs);\n        $send(subs.$split(\",\"), 'each', [], function $$42(key){var modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $ret_or_1 = nil;\n\n          \n          if (key == null) key = nil;\n          modifier_operation = nil;\n          if ($truthy(modifiers_present)) {\n            if ($eqeq((first = key.$chr()), \"+\")) {\n              \n              modifier_operation = \"append\";\n              key = key.$slice(1, key.$length());\n            } else if ($eqeq(first, \"-\")) {\n              \n              modifier_operation = \"remove\";\n              key = key.$slice(1, key.$length());\n            } else if ($truthy(key['$end_with?'](\"+\"))) {\n              \n              modifier_operation = \"prepend\";\n              key = key.$chop();\n            }\n          };\n          key = key.$to_sym();\n          if (($eqeq(type, \"inline\") && (($eqeq(key, \"verbatim\") || ($eqeq(key, \"v\")))))) {\n            resolved_keys = $$('BASIC_SUBS')\n          } else if ($truthy($$('SUB_GROUPS')['$key?'](key))) {\n            resolved_keys = $$('SUB_GROUPS')['$[]'](key)\n          } else if ((($eqeq(type, \"inline\") && ($eqeq(key.$length(), 1))) && ($truthy($$('SUB_HINTS')['$key?'](key))))) {\n            \n            resolved_key = $$('SUB_HINTS')['$[]'](key);\n            if ($truthy((candidate = $$('SUB_GROUPS')['$[]'](resolved_key)))) {\n              resolved_keys = candidate\n            } else {\n              resolved_keys = [resolved_key]\n            };\n          } else {\n            resolved_keys = [key]\n          };\n          if ($truthy(modifier_operation)) {\n            \n            candidates = ($truthy(($ret_or_1 = candidates)) ? ($ret_or_1) : (($truthy(defaults) ? (defaults.$drop(0)) : ([]))));\n            \n            switch (modifier_operation) {\n              case \"append\":\n                return (candidates = $rb_plus(candidates, resolved_keys))\n              case \"prepend\":\n                return (candidates = $rb_plus(resolved_keys, candidates))\n              case \"remove\":\n                return (candidates = $rb_minus(candidates, resolved_keys))\n              default:\n                return nil\n            };\n          } else {\n            \n            candidates = ($truthy(($ret_or_1 = candidates)) ? ($ret_or_1) : ([]));\n            return (candidates = $rb_plus(candidates, resolved_keys));\n          };});\n        if (!$truthy(candidates)) {\n          return nil\n        };\n        resolved = candidates['$&']($$('SUB_OPTIONS')['$[]'](type));\n        if (!$truthy($rb_minus(candidates, resolved)['$empty?']())) {\n          \n          invalid = $rb_minus(candidates, resolved);\n          self.$logger().$warn(\"invalid substitution type\" + (($truthy($rb_gt(invalid.$size(), 1)) ? (\"s\") : (\"\"))) + (($truthy(subject) ? (\" for \") : (\"\"))) + (subject) + \": \" + (invalid.$join(\", \")));\n        };\n        return resolved;\n      }, -2);\n      \n      $def(self, '$resolve_block_subs', function $$resolve_block_subs(subs, defaults, subject) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"block\", defaults, subject)\n      });\n      \n      $def(self, '$resolve_pass_subs', function $$resolve_pass_subs(subs) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"inline\", nil, \"passthrough macro\")\n      });\n      \n      $def(self, '$expand_subs', function $$expand_subs(subs, subject) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, expanded_subs = nil;\n\n        \n        if (subject == null) subject = nil;\n        if ($eqeqeq($$$('Symbol'), ($ret_or_1 = subs))) {\n          if ($eqeq(subs, \"none\")) {\n            return nil\n          } else if ($truthy(($ret_or_2 = $$('SUB_GROUPS')['$[]'](subs)))) {\n            return $ret_or_2\n          } else {\n            return [subs]\n          }\n        } else if ($eqeqeq($$$('Array'), $ret_or_1)) {\n          \n          expanded_subs = [];\n          $send(subs, 'each', [], function $$43(key){var sub_group = nil;\n\n            \n            if (key == null) key = nil;\n            if ($eqeq(key, \"none\")) {\n              return nil\n            } else if ($truthy((sub_group = $$('SUB_GROUPS')['$[]'](key)))) {\n              return (expanded_subs = $rb_plus(expanded_subs, sub_group))\n            } else {\n              return expanded_subs['$<<'](key)\n            };});\n          if ($truthy(expanded_subs['$empty?']())) {\n            return nil\n          } else {\n            return expanded_subs\n          };\n        } else {\n          return self.$resolve_subs(subs, \"inline\", nil, subject)\n        };\n      }, -2);\n      \n      $def(self, '$commit_subs', function $$commit_subs() {\n        var self = this, default_subs = nil, custom_subs = nil, $ret_or_1 = nil, idx = nil, syntax_hl = nil;\n        if (self.default_subs == null) self.default_subs = nil;\n        if (self.content_model == null) self.content_model = nil;\n        if (self.context == null) self.context = nil;\n        if (self.subs == null) self.subs = nil;\n        if (self.attributes == null) self.attributes = nil;\n        if (self.document == null) self.document = nil;\n        if (self.style == null) self.style = nil;\n\n        \n        if (!$truthy((default_subs = self.default_subs))) {\n          \n          switch (self.content_model) {\n            case \"simple\":\n              default_subs = $$('NORMAL_SUBS')\n              break;\n            case \"verbatim\":\n              default_subs = ($eqeq(self.context, \"verse\") ? ($$('NORMAL_SUBS')) : ($$('VERBATIM_SUBS')))\n              break;\n            case \"raw\":\n              default_subs = ($eqeq(self.context, \"stem\") ? ($$('BASIC_SUBS')) : ($$('NO_SUBS')))\n              break;\n            default:\n              return self.subs\n          }\n        };\n        if ($truthy((custom_subs = self.attributes['$[]'](\"subs\")))) {\n          self.subs = ($truthy(($ret_or_1 = self.$resolve_block_subs(custom_subs, default_subs, self.context))) ? ($ret_or_1) : ([]))\n        } else {\n          self.subs = default_subs.$drop(0)\n        };\n        if ((((($eqeq(self.context, \"listing\") && ($eqeq(self.style, \"source\"))) && ($truthy((syntax_hl = self.document.$syntax_highlighter())))) && ($truthy(syntax_hl['$highlight?']()))) && ($truthy((idx = self.subs.$index(\"specialcharacters\")))))) {\n          self.subs['$[]='](idx, \"highlight\")\n        };\n        return nil;\n      });\n      \n      $def(self, '$parse_attributes', function $$parse_attributes(attrlist, posattrs, opts) {\n        var self = this, block = nil, into = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if (posattrs == null) posattrs = [];\n        if (opts == null) opts = $hash2([], {});\n        if ($truthy(($truthy(attrlist) ? (attrlist['$empty?']()) : (true)))) {\n          return $hash2([], {})\n        };\n        if ($truthy(opts['$[]'](\"unescape_input\"))) {\n          attrlist = self.$normalize_text(attrlist, true, true)\n        };\n        if (($truthy(opts['$[]'](\"sub_input\")) && ($truthy(attrlist['$include?']($$('ATTR_REF_HEAD')))))) {\n          attrlist = self.document.$sub_attributes(attrlist)\n        };\n        if ($truthy(opts['$[]'](\"sub_result\"))) {\n          block = self\n        };\n        if ($truthy((into = opts['$[]'](\"into\")))) {\n          return $$('AttributeList').$new(attrlist, block).$parse_into(into, posattrs)\n        } else {\n          return $$('AttributeList').$new(attrlist, block).$parse(posattrs)\n        };\n      }, -2);\n      self.$private();\n      \n      $def(self, '$extract_attributes_from_text', function $$extract_attributes_from_text(text, default_text) {\n        var self = this, attrlist = nil, resolved_text = nil, attrs = nil;\n\n        \n        if (default_text == null) default_text = nil;\n        attrlist = ($truthy(text['$include?']($$('LF'))) ? (text.$tr($$('LF'), \" \")) : (text));\n        if ($truthy((resolved_text = (attrs = $$('AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n          if ($eqeq(resolved_text, attrlist)) {\n            return [text, attrs.$clear()]\n          } else {\n            return [resolved_text, attrs]\n          }\n        } else {\n          return [default_text, attrs]\n        };\n      }, -2);\n      \n      $def(self, '$extract_callouts', function $$extract_callouts(source) {\n        var self = this, callout_marks = nil, autonum = nil, lineno = nil, last_lineno = nil, callout_rx = nil;\n\n        \n        callout_marks = $hash2([], {});\n        autonum = (lineno = 0);\n        last_lineno = nil;\n        callout_rx = ($truthy(self['$attr?'](\"line-comment\")) ? ($$('CalloutExtractRxMap')['$[]'](self.$attr(\"line-comment\"))) : ($$('CalloutExtractRx')));\n        source = $send(source.$split($$('LF'), -1), 'map', [], function $$44(line){\n          \n          if (line == null) line = nil;\n          lineno = $rb_plus(lineno, 1);\n          return $send(line, 'gsub', [callout_rx], function $$45(){var $a, $ret_or_1 = nil;\n\n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$('RS'), \"\")\n            } else {\n              \n              ($truthy(($ret_or_1 = callout_marks['$[]'](lineno))) ? ($ret_or_1) : (($a = [lineno, []], $send(callout_marks, '[]=', $a), $a[$a.length - 1])))['$<<']([($truthy(($ret_or_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) ? ($ret_or_1) : (($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), \"--\") ? ([\"<!--\", \"-->\"]) : (nil)))), ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), \".\") ? ((autonum = $rb_plus(autonum, 1)).$to_s()) : ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))))]);\n              last_lineno = lineno;\n              return \"\";\n            }});}).$join($$('LF'));\n        if ($truthy(last_lineno)) {\n          if ($eqeq(last_lineno, lineno)) {\n            source = \"\" + (source) + ($$('LF'))\n          }\n        } else {\n          callout_marks = nil\n        };\n        return [source, callout_marks];\n      });\n      \n      $def(self, '$restore_callouts', function $$restore_callouts(source, callout_marks, source_offset) {\n        var self = this, preamble = nil, lineno = nil;\n\n        \n        if (source_offset == null) source_offset = nil;\n        if ($truthy(source_offset)) {\n          \n          preamble = source.$slice(0, source_offset);\n          source = source.$slice(source_offset, source.$length());\n        } else {\n          preamble = \"\"\n        };\n        lineno = 0;\n        return $rb_plus(preamble, $send(source.$split($$('LF'), -1), 'map', [], function $$46(line){var $a, $b, self = $$46.$$s == null ? this : $$46.$$s, conums = nil, guard = nil, numeral = nil;\n          if (self.document == null) self.document = nil;\n\n          \n          if (line == null) line = nil;\n          if ($truthy((conums = callout_marks.$delete((lineno = $rb_plus(lineno, 1)))))) {\n            if ($eqeq(conums.$size(), 1)) {\n              \n              $b = conums['$[]'](0), $a = $to_ary($b), (guard = ($a[0] == null ? nil : $a[0])), (numeral = ($a[1] == null ? nil : $a[1])), $b;\n              return \"\" + (line) + ($$('Inline').$new(self, \"callout\", numeral, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard})})).$convert());\n            } else {\n              return \"\" + (line) + ($send(conums, 'map', [], function $$47(guard_it, numeral_it){var self = $$47.$$s == null ? this : $$47.$$s;\n                if (self.document == null) self.document = nil;\n\n                \n                if (guard_it == null) guard_it = nil;\n                if (numeral_it == null) numeral_it = nil;\n                return $$('Inline').$new(self, \"callout\", numeral_it, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard_it})})).$convert();}, {$$s: self}).$join(\" \"))\n            }\n          } else {\n            return line\n          };}, {$$s: self}).$join($$('LF')));\n      }, -3);\n      \n      $def(self, '$convert_quoted_text', function $$convert_quoted_text(match, type, scope) {\n        var self = this, attrs = nil, unescaped_attrs = nil, attrlist = nil, id = nil, attributes = nil;\n\n        \n        if ($truthy(match['$[]'](0)['$start_with?']($$('RS')))) {\n          if (($eqeq(scope, \"constrained\") && ($truthy((attrs = match['$[]'](2)))))) {\n            unescaped_attrs = \"[\" + (attrs) + \"]\"\n          } else {\n            return match['$[]'](0).$slice(1, match['$[]'](0).$length())\n          }\n        };\n        if ($eqeq(scope, \"constrained\")) {\n          if ($truthy(unescaped_attrs)) {\n            return \"\" + (unescaped_attrs) + ($$('Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\"], {\"type\": type})).$convert())\n          } else {\n            \n            if ($truthy((attrlist = match['$[]'](2)))) {\n              \n              id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n              if ($eqeq(type, \"mark\")) {\n                type = \"unquoted\"\n              };\n            };\n            return \"\" + (match['$[]'](1)) + ($$('Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert());\n          }\n        } else {\n          \n          if ($truthy((attrlist = match['$[]'](1)))) {\n            \n            id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n            if ($eqeq(type, \"mark\")) {\n              type = \"unquoted\"\n            };\n          };\n          return $$('Inline').$new(self, \"quoted\", match['$[]'](2), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();\n        };\n      });\n      \n      $def(self, '$do_replacement', function $$do_replacement(m, replacement, restore) {\n        var captured = nil;\n\n        if ($truthy((captured = m['$[]'](0))['$include?']($$('RS')))) {\n          return captured.$sub($$('RS'), \"\")\n        } else \n        switch (restore) {\n          case \"none\":\n            return replacement\n          case \"bounding\":\n            return $rb_plus($rb_plus(m['$[]'](1), replacement), m['$[]'](2))\n          default:\n            return $rb_plus(m['$[]'](1), replacement)\n        }\n      });\n      nil;\n      \n      $def(self, '$parse_quoted_text_attributes', function $$parse_quoted_text_attributes(str) {\n        var $a, $b, self = this, before = nil, _ = nil, after = nil, attrs = nil, id = nil, roles = nil;\n\n        \n        if ($truthy(str['$include?']($$('ATTR_REF_HEAD')))) {\n          str = self.$sub_attributes(str)\n        };\n        if ($truthy(str['$include?'](\",\"))) {\n          str = str.$slice(0, str.$index(\",\"))\n        };\n        if ($truthy((str = str.$strip())['$empty?']())) {\n          return $hash2([], {})\n        } else if (($truthy(str['$start_with?'](\".\", \"#\")) && ($truthy($$('Compliance').$shorthand_property_syntax())))) {\n          \n          $b = str.$partition(\"#\"), $a = $to_ary($b), (before = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (after = ($a[2] == null ? nil : $a[2])), $b;\n          attrs = $hash2([], {});\n          if ($truthy(after['$empty?']())) {\n            if ($truthy($rb_gt(before.$length(), 1))) {\n              attrs['$[]='](\"role\", before.$tr(\".\", \" \").$lstrip())\n            }\n          } else {\n            \n            $b = after.$partition(\".\"), $a = $to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (roles = ($a[2] == null ? nil : $a[2])), $b;\n            if (!$truthy(id['$empty?']())) {\n              attrs['$[]='](\"id\", id)\n            };\n            if ($truthy(roles['$empty?']())) {\n              if ($truthy($rb_gt(before.$length(), 1))) {\n                attrs['$[]='](\"role\", before.$tr(\".\", \" \").$lstrip())\n              }\n            } else if ($truthy($rb_gt(before.$length(), 1))) {\n              attrs['$[]='](\"role\", $rb_plus($rb_plus(before, \".\"), roles).$tr(\".\", \" \").$lstrip())\n            } else {\n              attrs['$[]='](\"role\", roles.$tr(\".\", \" \"))\n            };\n          };\n          return attrs;\n        } else {\n          return $hash2([\"role\"], {\"role\": str})\n        };\n      });\n      \n      $def(self, '$normalize_text', function $$normalize_text(text, normalize_whitespace, unescape_closing_square_brackets) {\n        \n        \n        if (normalize_whitespace == null) normalize_whitespace = nil;\n        if (unescape_closing_square_brackets == null) unescape_closing_square_brackets = nil;\n        if (!$truthy(text['$empty?']())) {\n          \n          if ($truthy(normalize_whitespace)) {\n            text = text.$strip().$tr($$('LF'), \" \")\n          };\n          if (($truthy(unescape_closing_square_brackets) && ($truthy(text['$include?']($$('R_SB')))))) {\n            text = text.$gsub($$('ESC_R_SB'), $$('R_SB'))\n          };\n        };\n        return text;\n      }, -2);\n      return $def(self, '$split_simple_csv', function $$split_simple_csv(str) {\n        var values = nil, accum = nil, quote_open = nil;\n\n        if ($truthy(str['$empty?']())) {\n          return []\n        } else if ($truthy(str['$include?'](\"\\\"\"))) {\n          \n          values = [];\n          accum = \"\";\n          quote_open = nil;\n          $send(str, 'each_char', [], function $$48(c){\n            \n            if (c == null) c = nil;\n            \n            switch (c) {\n              case \",\":\n                if ($truthy(quote_open)) {\n                  return (accum = $rb_plus(accum, c))\n                } else {\n                  \n                  values['$<<'](accum.$strip());\n                  return (accum = \"\");\n                }\n                break;\n              case \"\\\"\":\n                return (quote_open = quote_open['$!']())\n              default:\n                return (accum = $rb_plus(accum, c))\n            };});\n          return values['$<<'](accum.$strip());\n        } else {\n          return $send(str.$split(\",\"), 'map', [], function $$49(it){\n            \n            if (it == null) it = nil;\n            return it.$strip();})\n        }\n      });\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/version\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return $const_set($nesting[0], 'VERSION', \"2.0.20\")\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/abstract_node\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $rb_lt = Opal.rb_lt, $not = Opal.not, $to_ary = Opal.to_ary, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,attr_reader,attr_accessor,==,document,to_s,[],merge,raise,converter,attributes,key?,[]=,delete,tap,new,each_key,end_with?,<<,slice,-,length,update,split,include?,===,join,empty?,apply_reftext_subs,attr?,attr,extname?,image_uri,<,safe,normalize_web_path,uriish?,encode_spaces_in_uri,generate_data_uri_from_uri,generate_data_uri,extname,normalize_system_path,readable?,strict_encode64,binread,warn,logger,require_library,!,open_uri,content_type,read,base_dir,root?,path_resolver,system_path,web_path,!=,prepare_source_string,fetch,read_asset');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.document = $proto.attributes = $proto.parent = nil;\n      \n      self.$include($$('Logging'));\n      self.$include($$('Substitutors'));\n      self.$attr_reader(\"attributes\");\n      self.$attr_reader(\"context\");\n      self.$attr_reader(\"document\");\n      self.$attr_accessor(\"id\");\n      self.$attr_reader(\"node_name\");\n      self.$attr_reader(\"parent\");\n      \n      $def(self, '$initialize', function $$initialize(parent, context, opts) {\n        var self = this, attrs = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        if ($eqeq(context, \"document\")) {\n          self.document = self\n        } else if ($truthy(parent)) {\n          self.document = (self.parent = parent).$document()\n        };\n        self.node_name = (self.context = context).$to_s();\n        self.attributes = ($truthy((attrs = opts['$[]'](\"attributes\"))) ? (attrs.$merge()) : ($hash2([], {})));\n        return (self.passthroughs = []);\n      }, -3);\n      \n      $def(self, '$block?', function $AbstractNode_block$ques$1() {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'))\n      });\n      \n      $def(self, '$inline?', function $AbstractNode_inline$ques$2() {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'))\n      });\n      \n      $def(self, '$converter', function $$converter() {\n        var self = this;\n\n        return self.document.$converter()\n      });\n      \n      $def(self, '$parent=', function $AbstractNode_parent$eq$3(parent) {\n        var $a, self = this;\n\n        return $a = [parent, parent.$document()], (self.parent = $a[0]), (self.document = $a[1]), $a\n      });\n      \n      $def(self, '$attr', function $$attr(name, default_value, fallback_name) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;\n\n        \n        if (default_value == null) default_value = nil;\n        if (fallback_name == null) fallback_name = nil;\n        if ($truthy(($ret_or_1 = self.attributes['$[]'](name.$to_s())))) {\n          return $ret_or_1\n        } else {\n          \n          if ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = fallback_name)) ? (self.parent) : ($ret_or_4)))) ? (self.document.$attributes()['$[]'](($eqeq(fallback_name, true) ? (name) : (fallback_name)).$to_s())) : ($ret_or_3))))) {\n            return $ret_or_2\n          } else {\n            return default_value\n          };\n        };\n      }, -2);\n      \n      $def(self, '$attr?', function $AbstractNode_attr$ques$4(name, expected_value, fallback_name) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (expected_value == null) expected_value = nil;\n        if (fallback_name == null) fallback_name = nil;\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](($truthy(($ret_or_1 = self.attributes['$[]'](name.$to_s()))) ? ($ret_or_1) : ((($truthy(fallback_name) && ($truthy(self.parent))) ? (self.document.$attributes()['$[]'](($eqeq(fallback_name, true) ? (name) : (fallback_name)).$to_s())) : (nil)))))\n        } else if ($truthy(($ret_or_1 = self.attributes['$key?'](name.$to_s())))) {\n          return $ret_or_1\n        } else {\n          \n          if (($truthy(fallback_name) && ($truthy(self.parent)))) {\n            \n            return self.document.$attributes()['$key?'](($eqeq(fallback_name, true) ? (name) : (fallback_name)).$to_s());\n          } else {\n            return false\n          };\n        };\n      }, -2);\n      \n      $def(self, '$set_attr', function $$set_attr(name, value, overwrite) {\n        var self = this;\n\n        \n        if (value == null) value = \"\";\n        if (overwrite == null) overwrite = true;\n        if (($eqeq(overwrite, false) && ($truthy(self.attributes['$key?'](name))))) {\n          return false\n        } else {\n          \n          self.attributes['$[]='](name, value);\n          return true;\n        };\n      }, -2);\n      \n      $def(self, '$remove_attr', function $$remove_attr(name) {\n        var self = this;\n\n        return self.attributes.$delete(name)\n      });\n      \n      $def(self, '$option?', function $AbstractNode_option$ques$5(name) {\n        var self = this;\n\n        if ($truthy(self.attributes['$[]'](\"\" + (name) + \"-option\"))) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$set_option', function $$set_option(name) {\n        var self = this;\n\n        \n        self.attributes['$[]='](\"\" + (name) + \"-option\", \"\");\n        return nil;\n      });\n      \n      $def(self, '$enabled_options', function $$enabled_options() {\n        var self = this;\n\n        return $send($$$('Set').$new(), 'tap', [], function $$6(accum){var self = $$6.$$s == null ? this : $$6.$$s;\n          if (self.attributes == null) self.attributes = nil;\n\n          \n          if (accum == null) accum = nil;\n          return $send(self.attributes, 'each_key', [], function $$7(k){\n            \n            if (k == null) k = nil;\n            if ($truthy(k.$to_s()['$end_with?'](\"-option\"))) {\n              return accum['$<<'](k.$slice(0, $rb_minus(k.$length(), 7)))\n            } else {\n              return nil\n            };});}, {$$s: self})\n      });\n      \n      $def(self, '$update_attributes', function $$update_attributes(new_attributes) {\n        var self = this;\n\n        return self.attributes.$update(new_attributes)\n      });\n      \n      $def(self, '$role', function $$role() {\n        var self = this;\n\n        return self.attributes['$[]'](\"role\")\n      });\n      \n      $def(self, '$roles', function $$roles() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          return val.$split()\n        } else {\n          return []\n        }\n      });\n      \n      $def(self, '$role?', function $AbstractNode_role$ques$8(expected_value) {\n        var self = this;\n\n        \n        if (expected_value == null) expected_value = nil;\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](self.attributes['$[]'](\"role\"))\n        } else {\n          \n          return self.attributes['$key?'](\"role\");\n        };\n      }, -1);\n      \n      $def(self, '$has_role?', function $AbstractNode_has_role$ques$9(name) {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          \n          return (((\" \") + (val)) + \" \")['$include?'](\" \" + (name) + \" \");\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$role=', function $AbstractNode_role$eq$10(names) {\n        var $a, self = this;\n\n        return ($a = [\"role\", ($eqeqeq($$$('Array'), names) ? (names.$join(\" \")) : (names))], $send(self.attributes, '[]=', $a), $a[$a.length - 1])\n      });\n      \n      $def(self, '$add_role', function $$add_role(name) {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          if ($truthy((((\" \") + (val)) + \" \")['$include?'](\" \" + (name) + \" \"))) {\n            return false\n          } else {\n            \n            self.attributes['$[]='](\"role\", \"\" + (val) + \" \" + (name));\n            return true;\n          }\n        } else {\n          \n          self.attributes['$[]='](\"role\", name);\n          return true;\n        }\n      });\n      \n      $def(self, '$remove_role', function $$remove_role(name) {\n        var self = this, val = nil;\n\n        if (($truthy((val = self.attributes['$[]'](\"role\"))) && ($truthy((val = val.$split()).$delete(name))))) {\n          \n          if ($truthy(val['$empty?']())) {\n            self.attributes.$delete(\"role\")\n          } else {\n            self.attributes['$[]='](\"role\", val.$join(\" \"))\n          };\n          return true;\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$reftext', function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"reftext\")))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$reftext?', function $AbstractNode_reftext$ques$11() {\n        var self = this;\n\n        return self.attributes['$key?'](\"reftext\")\n      });\n      \n      $def(self, '$icon_uri', function $$icon_uri(name) {\n        var self = this, icon = nil;\n\n        \n        if ($truthy(self['$attr?'](\"icon\"))) {\n          \n          icon = self.$attr(\"icon\");\n          if (!$truthy($$('Helpers')['$extname?'](icon))) {\n            icon = \"\" + (icon) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n          };\n        } else {\n          icon = \"\" + (name) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n        };\n        return self.$image_uri(icon, \"iconsdir\");\n      });\n      \n      $def(self, '$image_uri', function $$image_uri(target_image, asset_dir_key) {\n        var self = this, doc = nil, images_base = nil;\n\n        \n        if (asset_dir_key == null) asset_dir_key = \"imagesdir\";\n        if (($truthy($rb_lt((doc = self.document).$safe(), $$$($$('SafeMode'), 'SECURE'))) && ($truthy(doc['$attr?'](\"data-uri\"))))) {\n          if ((($truthy($$('Helpers')['$uriish?'](target_image)) && ($truthy((target_image = $$('Helpers').$encode_spaces_in_uri(target_image))))) || (((($truthy(asset_dir_key) && ($truthy((images_base = doc.$attr(asset_dir_key))))) && ($truthy($$('Helpers')['$uriish?'](images_base)))) && ($truthy((target_image = self.$normalize_web_path(target_image, images_base, false)))))))) {\n            if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n              \n              return self.$generate_data_uri_from_uri(target_image, doc['$attr?'](\"cache-uri\"));\n            } else {\n              return target_image\n            }\n          } else {\n            return self.$generate_data_uri(target_image, asset_dir_key)\n          }\n        } else {\n          return self.$normalize_web_path(target_image, ($truthy(asset_dir_key) ? (doc.$attr(asset_dir_key)) : (nil)))\n        };\n      }, -2);\n      \n      $def(self, '$media_uri', function $$media_uri(target, asset_dir_key) {\n        var self = this;\n\n        \n        if (asset_dir_key == null) asset_dir_key = \"imagesdir\";\n        return self.$normalize_web_path(target, ($truthy(asset_dir_key) ? (self.document.$attr(asset_dir_key)) : (nil)));\n      }, -2);\n      \n      $def(self, '$generate_data_uri', function $$generate_data_uri(target_image, asset_dir_key) {\n        var self = this, ext = nil, mimetype = nil, image_path = nil;\n\n        \n        if (asset_dir_key == null) asset_dir_key = nil;\n        if ($truthy((ext = $$('Helpers').$extname(target_image, nil)))) {\n          mimetype = ($eqeq(ext, \".svg\") ? (\"image/svg+xml\") : (\"image/\" + (ext.$slice(1, ext.$length()))))\n        } else {\n          mimetype = \"application/octet-stream\"\n        };\n        if ($truthy(asset_dir_key)) {\n          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2([\"target_name\"], {\"target_name\": \"image\"}))\n        } else {\n          image_path = self.$normalize_system_path(target_image)\n        };\n        if ($truthy($$$('File')['$readable?'](image_path))) {\n          return \"data:\" + (mimetype) + \";base64,\" + ($$$('Base64').$strict_encode64($$$('File').$binread(image_path)))\n        } else {\n          \n          self.$logger().$warn(\"image to embed not found or not readable: \" + (image_path));\n          return \"data:\" + (mimetype) + \";base64,\";\n        };\n      }, -2);\n      \n      $def(self, '$generate_data_uri_from_uri', function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var $a, $b, self = this, mimetype = nil, bindata = nil;\n\n        \n        if (cache_uri == null) cache_uri = false;\n        if ($truthy(cache_uri)) {\n          $$('Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n        } else if ($not($$('RUBY_ENGINE_OPAL'))) {\n          $$$('OpenURI')\n        };\n        \n        try {\n          \n          $b = $send($$$('OpenURI'), 'open_uri', [image_uri, $$('URI_READ_MODE')], function $$12(f){\n            \n            if (f == null) f = nil;\n            return [f.$content_type(), f.$read()];}), $a = $to_ary($b), (mimetype = ($a[0] == null ? nil : $a[0])), (bindata = ($a[1] == null ? nil : $a[1])), $b;\n          return \"data:\" + (mimetype) + \";base64,\" + ($$$('Base64').$strict_encode64(bindata));\n        } catch ($err) {\n          if (Opal.rescue($err, [$$('StandardError')])) {\n            try {\n              \n              self.$logger().$warn(\"could not retrieve image data from URI: \" + (image_uri));\n              return image_uri;\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };;\n      }, -2);\n      \n      $def(self, '$normalize_asset_path', function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {\n        var self = this;\n\n        \n        if (asset_name == null) asset_name = \"path\";\n        if (autocorrect == null) autocorrect = true;\n        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": asset_name, \"recover\": autocorrect}));\n      }, -2);\n      \n      $def(self, '$normalize_system_path', function $$normalize_system_path(target, start, jail, opts) {\n        var self = this, doc = nil, $ret_or_1 = nil;\n\n        \n        if (start == null) start = nil;\n        if (jail == null) jail = nil;\n        if (opts == null) opts = $hash2([], {});\n        if ($truthy($rb_lt((doc = self.document).$safe(), $$$($$('SafeMode'), 'SAFE')))) {\n          if ($truthy(start)) {\n            if (!$truthy(doc.$path_resolver()['$root?'](start))) {\n              start = $$$('File').$join(doc.$base_dir(), start)\n            }\n          } else {\n            start = doc.$base_dir()\n          }\n        } else {\n          \n          start = ($truthy(($ret_or_1 = start)) ? ($ret_or_1) : (doc.$base_dir()));\n          jail = ($truthy(($ret_or_1 = jail)) ? ($ret_or_1) : (doc.$base_dir()));\n        };\n        return doc.$path_resolver().$system_path(target, start, jail, opts);\n      }, -2);\n      \n      $def(self, '$normalize_web_path', function $$normalize_web_path(target, start, preserve_uri_target) {\n        var self = this;\n\n        \n        if (start == null) start = nil;\n        if (preserve_uri_target == null) preserve_uri_target = true;\n        if (($truthy(preserve_uri_target) && ($truthy($$('Helpers')['$uriish?'](target))))) {\n          return $$('Helpers').$encode_spaces_in_uri(target)\n        } else {\n          return self.document.$path_resolver().$web_path(target, start)\n        };\n      }, -2);\n      \n      $def(self, '$read_asset', function $$read_asset(path, opts) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        if (!$eqeqeq($$$('Hash'), opts)) {\n          opts = $hash2([\"warn_on_failure\"], {\"warn_on_failure\": opts['$!='](false)})\n        };\n        if ($truthy($$$('File')['$readable?'](path))) {\n          if ($truthy(opts['$[]'](\"normalize\"))) {\n            \n            return $$('Helpers').$prepare_source_string($$$('File').$read(path, $hash2([\"mode\"], {\"mode\": $$('FILE_READ_MODE')}))).$join($$('LF'));\n          } else {\n            \n            return $$$('File').$read(path, $hash2([\"mode\"], {\"mode\": $$('FILE_READ_MODE')}));\n          }\n        } else if ($truthy(opts['$[]'](\"warn_on_failure\"))) {\n          \n          self.$logger().$warn(\"\" + (($truthy(($ret_or_1 = self.$attr(\"docfile\"))) ? ($ret_or_1) : (\"<stdin>\"))) + \": \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"file\"))) + \" does not exist or cannot be read: \" + (path));\n          return nil;\n        } else {\n          return nil\n        };\n      }, -2);\n      \n      $def(self, '$read_contents', function $$read_contents(target, opts) {\n        var self = this, doc = nil, start = nil, contents = nil, $ret_or_1 = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        doc = self.document;\n        if (($truthy($$('Helpers')['$uriish?'](target)) || ((($truthy((start = opts['$[]'](\"start\"))) && ($truthy($$('Helpers')['$uriish?'](start)))) && ($truthy((target = doc.$path_resolver().$web_path(target, start)))))))) {\n          if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n            \n            if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n              $$('Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n            };\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                contents = $$('Helpers').$prepare_source_string($send($$$('OpenURI'), 'open_uri', [target, $$('URI_READ_MODE')], function $$13(f){\n                  \n                  if (f == null) f = nil;\n                  return f.$read();})).$join($$('LF'))\n              } else {\n                contents = $send($$$('OpenURI'), 'open_uri', [target, $$('URI_READ_MODE')], function $$14(f){\n                  \n                  if (f == null) f = nil;\n                  return f.$read();})\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"could not retrieve contents of \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))) + \" at URI: \" + (target))\n                  }\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };;\n          } else if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n            self.$logger().$warn(\"cannot retrieve contents of \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")\n          }\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))}));\n          contents = self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n        if ((($truthy(contents) && ($truthy(opts['$[]'](\"warn_if_empty\")))) && ($truthy(contents['$empty?']())))) {\n          self.$logger().$warn(\"contents of \" + (($truthy(($ret_or_1 = opts['$[]'](\"label\"))) ? ($ret_or_1) : (\"asset\"))) + \" is empty: \" + (target))\n        };\n        return contents;\n      }, -2);\n      return $def(self, '$is_uri?', function $AbstractNode_is_uri$ques$15(str) {\n        \n        return $$('Helpers')['$uriish?'](str)\n      });\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/abstract_block\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $return_val = Opal.return_val, $truthy = Opal.truthy, $alias = Opal.alias, $send = Opal.send, $rb_plus = Opal.rb_plus, $not = Opal.not, $neqeq = Opal.neqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_reader,attr_writer,attr_accessor,==,===,level,file,lineno,playback_attributes,convert,converter,join,map,to_s,parent,parent=,<<,empty?,Integer,find_by_internal,to_proc,find_by,context,[],items,+,find_index,include?,next_adjacent_block,blocks,select,sub_specialchars,match?,sub_replacements,title,apply_title_subs,delete,!,reftext,nil_or_empty?,sub_placeholder,sub_quotes,compat_mode,attributes,chomp,increment_and_store_counter,index=,numbered,sectname,numeral=,counter,caption=,numeral,int_to_roman,each,assign_numeral,reindex_sections,protected,has_role?,raise,header?,!=,flatten,head,rows,merge,body,foot,style,inner_document');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractBlock');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.source_location = $proto.document = $proto.attributes = $proto.blocks = $proto.numeral = $proto.context = $proto.parent = $proto.caption = $proto.style = $proto.converted_title = $proto.title = $proto.subs = $proto.next_section_index = $proto.next_section_ordinal = $proto.id = $proto.header = nil;\n      \n      self.$attr_reader(\"blocks\");\n      self.$attr_writer(\"caption\");\n      self.$attr_accessor(\"content_model\");\n      self.$attr_accessor(\"level\");\n      self.$attr_accessor(\"numeral\");\n      self.$attr_accessor(\"source_location\");\n      self.$attr_accessor(\"style\");\n      self.$attr_reader(\"subs\");\n      \n      $def(self, '$initialize', function $$initialize(parent, context, opts) {\n        var $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        if (opts == null) opts = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, context, opts], $yield);\n        self.content_model = \"compound\";\n        self.blocks = [];\n        self.subs = [];\n        self.id = (self.title = (self.caption = (self.numeral = (self.style = (self.default_subs = (self.source_location = nil))))));\n        if (($eqeq(context, \"document\") || ($eqeq(context, \"section\")))) {\n          \n          self.level = (self.next_section_index = 0);\n          return (self.next_section_ordinal = 1);\n        } else if ($eqeqeq($$('AbstractBlock'), parent)) {\n          return (self.level = parent.$level())\n        } else {\n          return (self.level = nil)\n        };\n      }, -3);\n      \n      $def(self, '$block?', $return_val(true));\n      \n      $def(self, '$inline?', $return_val(false));\n      \n      $def(self, '$file', function $$file() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.source_location))) {\n          return self.source_location.$file()\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$lineno', function $$lineno() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.source_location))) {\n          return self.source_location.$lineno()\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$convert', function $$convert() {\n        var self = this;\n\n        \n        self.document.$playback_attributes(self.attributes);\n        return self.$converter().$convert(self);\n      });\n      $alias(self, \"render\", \"convert\");\n      \n      $def(self, '$content', function $$content() {\n        var self = this;\n\n        return $send(self.blocks, 'map', [], function $$1(b){\n          \n          if (b == null) b = nil;\n          return b.$convert();}).$join($$('LF'))\n      });\n      \n      $def(self, '$context=', function $AbstractBlock_context$eq$2(context) {\n        var self = this;\n\n        return (self.node_name = (self.context = context).$to_s())\n      });\n      \n      $def(self, '$<<', function $AbstractBlock_$lt$lt$3(block) {\n        var self = this;\n\n        \n        if (!$eqeq(block.$parent(), self)) {\n          block['$parent='](self)\n        };\n        self.blocks['$<<'](block);\n        return self;\n      });\n      $alias(self, \"append\", \"<<\");\n      \n      $def(self, '$blocks?', function $AbstractBlock_blocks$ques$4() {\n        var self = this;\n\n        if ($truthy(self.blocks['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      });\n      \n      $def(self, '$sections?', $return_val(false));\n      \n      $def(self, '$number', function $$number() {\n        var self = this;\n\n        try {\n          \n          return self.$Integer(self.numeral);\n        } catch ($err) {\n          if (Opal.rescue($err, [$$('StandardError')])) {\n            try {\n              return self.numeral\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        }\n      });\n      \n      $def(self, '$number=', function $AbstractBlock_number$eq$5(val) {\n        var self = this;\n\n        return (self.numeral = val.$to_s())\n      });\n      \n      $def(self, '$find_by', function $$find_by(selector) {\n        var block = $$find_by.$$p || nil, self = this, result = nil;\n\n        $$find_by.$$p = null;\n        \n        ;\n        if (selector == null) selector = $hash2([], {});\n        try {\n          return $send(self, 'find_by_internal', [selector, (result = [])], block.$to_proc())\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('StopIteration')])) {\n            try {\n              return result\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };\n      }, -1);\n      $alias(self, \"query\", \"find_by\");\n      \n      $def(self, '$next_adjacent_block', function $$next_adjacent_block() {\n        var self = this, p = nil, sib = nil;\n\n        if ($eqeq(self.context, \"document\")) {\n          return nil\n        } else if (($eqeq((p = self.parent).$context(), \"dlist\") && ($eqeq(self.context, \"list_item\")))) {\n          if ($truthy((sib = p.$items()['$[]']($rb_plus($send(p.$items(), 'find_index', [], function $$6(terms, desc){var self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil;\n\n            \n            if (terms == null) terms = nil;\n            if (desc == null) desc = nil;\n            if ($truthy(($ret_or_1 = terms['$include?'](self)))) {\n              return $ret_or_1\n            } else {\n              return desc['$=='](self)\n            };}, {$$s: self}), 1))))) {\n            return sib\n          } else {\n            return p.$next_adjacent_block()\n          }\n        } else if ($truthy((sib = p.$blocks()['$[]']($rb_plus(p.$blocks().$find_index(self), 1))))) {\n          return sib\n        } else {\n          return p.$next_adjacent_block()\n        }\n      });\n      \n      $def(self, '$sections', function $$sections() {\n        var self = this;\n\n        return $send(self.blocks, 'select', [], function $$7(block){\n          \n          if (block == null) block = nil;\n          return block.$context()['$=='](\"section\");})\n      });\n      \n      $def(self, '$alt', function $$alt() {\n        var self = this, text = nil;\n\n        if ($truthy((text = self.attributes['$[]'](\"alt\")))) {\n          if ($eqeq(text, self.attributes['$[]'](\"default-alt\"))) {\n            return self.$sub_specialchars(text)\n          } else {\n            \n            text = self.$sub_specialchars(text);\n            if ($truthy($$('ReplaceableTextRx')['$match?'](text))) {\n              \n              return self.$sub_replacements(text);\n            } else {\n              return text\n            };\n          }\n        } else {\n          return \"\"\n        }\n      });\n      \n      $def(self, '$caption', function $$caption() {\n        var self = this;\n\n        if ($eqeq(self.context, \"admonition\")) {\n          return self.attributes['$[]'](\"textlabel\")\n        } else {\n          return self.caption\n        }\n      });\n      \n      $def(self, '$captioned_title', function $$captioned_title() {\n        var self = this;\n\n        return \"\" + (self.caption) + (self.$title())\n      });\n      \n      $def(self, '$list_marker_keyword', function $$list_marker_keyword(list_type) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (list_type == null) list_type = nil;\n        return $$('ORDERED_LIST_KEYWORDS')['$[]'](($truthy(($ret_or_1 = list_type)) ? ($ret_or_1) : (self.style)));\n      }, -1);\n      \n      $def(self, '$title', function $$title() {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        return (self.converted_title = ($truthy(($ret_or_1 = self.converted_title)) ? ($ret_or_1) : ($truthy(($ret_or_2 = self.title)) ? (self.$apply_title_subs(self.title)) : ($ret_or_2))))\n      });\n      \n      $def(self, '$title?', function $AbstractBlock_title$ques$8() {\n        var self = this;\n\n        if ($truthy(self.title)) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$title=', function $AbstractBlock_title$eq$9(val) {\n        var self = this;\n\n        \n        self.converted_title = nil;\n        return (self.title = val);\n      });\n      \n      $def(self, '$sub?', function $AbstractBlock_sub$ques$10(name) {\n        var self = this;\n\n        return self.subs['$include?'](name)\n      });\n      \n      $def(self, '$remove_sub', function $$remove_sub(sub) {\n        var self = this;\n\n        \n        self.subs.$delete(sub);\n        return nil;\n      });\n      \n      $def(self, '$xreftext', function $$xreftext(xrefstyle) {\n        var self = this, val = nil, quoted_title = nil, prefix = nil, caption_attr_name = nil;\n\n        \n        if (xrefstyle == null) xrefstyle = nil;\n        if (($truthy((val = self.$reftext())) && ($not(val['$empty?']())))) {\n          return val\n        } else if ((($truthy(xrefstyle) && ($truthy(self.title))) && ($not(self.caption['$nil_or_empty?']())))) {\n          \n          switch (xrefstyle) {\n            case \"full\":\n              \n              quoted_title = self.$sub_placeholder(self.$sub_quotes(($truthy(self.document.$compat_mode()) ? (\"``%s''\") : (\"\\\"`%s`\\\"\"))), self.$title());\n              if ((($truthy(self.numeral) && ($truthy((caption_attr_name = $$('CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context))))) && ($truthy((prefix = self.document.$attributes()['$[]'](caption_attr_name)))))) {\n                return \"\" + (prefix) + \" \" + (self.numeral) + \", \" + (quoted_title)\n              } else {\n                return \"\" + (self.caption.$chomp(\". \")) + \", \" + (quoted_title)\n              };\n              break;\n            case \"short\":\n              if ((($truthy(self.numeral) && ($truthy((caption_attr_name = $$('CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context))))) && ($truthy((prefix = self.document.$attributes()['$[]'](caption_attr_name)))))) {\n                return \"\" + (prefix) + \" \" + (self.numeral)\n              } else {\n                return self.caption.$chomp(\". \")\n              }\n              break;\n            default:\n              return self.$title()\n          }\n        } else {\n          return self.$title()\n        };\n      }, -1);\n      \n      $def(self, '$assign_caption', function $$assign_caption(value, caption_context) {\n        var self = this, $ret_or_1 = nil, prefix = nil, attr_name = nil;\n\n        \n        if (caption_context == null) caption_context = self.context;\n        if ((($truthy(self.caption) || ($not(self.title))) || ($truthy((self.caption = ($truthy(($ret_or_1 = value)) ? ($ret_or_1) : (self.document.$attributes()['$[]'](\"caption\")))))))) {\n          return nil\n        } else if (($truthy((attr_name = $$('CAPTION_ATTRIBUTE_NAMES')['$[]'](caption_context))) && ($truthy((prefix = self.document.$attributes()['$[]'](attr_name)))))) {\n          \n          self.caption = \"\" + (prefix) + \" \" + ((self.numeral = self.document.$increment_and_store_counter(\"\" + (caption_context) + \"-number\", self))) + \". \";\n          return nil;\n        } else {\n          return nil\n        };\n      }, -2);\n      \n      $def(self, '$assign_numeral', function $$assign_numeral(section) {\n        var $a, self = this, like = nil, sectname = nil, caption = nil;\n\n        \n        self.next_section_index = $rb_plus(($a = [self.next_section_index], $send(section, 'index=', $a), $a[$a.length - 1]), 1);\n        if ($truthy((like = section.$numbered()))) {\n          if ($eqeq((sectname = section.$sectname()), \"appendix\")) {\n            \n            section['$numeral='](self.document.$counter(\"appendix-number\", \"A\"));\n            section['$caption='](($truthy((caption = self.document.$attributes()['$[]'](\"appendix-caption\"))) ? (\"\" + (caption) + \" \" + (section.$numeral()) + \": \") : (\"\" + (section.$numeral()) + \". \")));\n          } else if (($eqeq(sectname, \"chapter\") || ($eqeq(like, \"chapter\")))) {\n            section['$numeral='](self.document.$counter(\"chapter-number\", 1).$to_s())\n          } else {\n            \n            section['$numeral='](($eqeq(sectname, \"part\") ? ($$('Helpers').$int_to_roman(self.next_section_ordinal)) : (self.next_section_ordinal.$to_s())));\n            self.next_section_ordinal = $rb_plus(self.next_section_ordinal, 1);\n          }\n        };\n        return nil;\n      });\n      \n      $def(self, '$reindex_sections', function $$reindex_sections() {\n        var self = this;\n\n        \n        self.next_section_index = 0;\n        self.next_section_ordinal = 1;\n        return $send(self.blocks, 'each', [], function $$11(block){var self = $$11.$$s == null ? this : $$11.$$s;\n\n          \n          if (block == null) block = nil;\n          if ($eqeq(block.$context(), \"section\")) {\n            \n            self.$assign_numeral(block);\n            return block.$reindex_sections();\n          } else {\n            return nil\n          };}, {$$s: self});\n      });\n      self.$protected();\n      return $def(self, '$find_by_internal', function $$find_by_internal(selector, result) {\n        var block = $$find_by_internal.$$p || nil, self = this, id_selector = nil, role_selector = nil, style_selector = nil, any_context = nil, context_selector = nil, verdict = nil;\n\n        $$find_by_internal.$$p = null;\n        \n        ;\n        if (selector == null) selector = $hash2([], {});\n        if (result == null) result = [];\n        if ((((($truthy((any_context = ($truthy((context_selector = selector['$[]'](\"context\"))) ? (nil) : (true)))) || ($eqeq(context_selector, self.context))) && (($not((style_selector = selector['$[]'](\"style\"))) || ($eqeq(style_selector, self.style))))) && (($not((role_selector = selector['$[]'](\"role\"))) || ($truthy(self['$has_role?'](role_selector)))))) && (($not((id_selector = selector['$[]'](\"id\"))) || ($eqeq(id_selector, self.id)))))) {\n          if ((block !== nil)) {\n            if ($truthy((verdict = Opal.yield1(block, self)))) {\n              \n              switch (verdict) {\n                case \"prune\":\n                  \n                  result['$<<'](self);\n                  if ($truthy(id_selector)) {\n                    self.$raise($$$('StopIteration'))\n                  };\n                  return result;\n                case \"reject\":\n                  \n                  if ($truthy(id_selector)) {\n                    self.$raise($$$('StopIteration'))\n                  };\n                  return result;\n                case \"stop\":\n                  self.$raise($$$('StopIteration'))\n                  break;\n                default:\n                  \n                  result['$<<'](self);\n                  if ($truthy(id_selector)) {\n                    self.$raise($$$('StopIteration'))\n                  };\n              }\n            } else if ($truthy(id_selector)) {\n              self.$raise($$$('StopIteration'))\n            }\n          } else {\n            \n            result['$<<'](self);\n            if ($truthy(id_selector)) {\n              self.$raise($$$('StopIteration'))\n            };\n          }\n        };\n        \n        switch (self.context) {\n          case \"document\":\n            if (!$eqeq(context_selector, \"document\")) {\n              \n              if (($truthy(self['$header?']()) && (($truthy(any_context) || ($eqeq(context_selector, \"section\")))))) {\n                $send(self.header, 'find_by_internal', [selector, result], block.$to_proc())\n              };\n              $send(self.blocks, 'each', [], function $$12(b){\n                \n                if (b == null) b = nil;\n                if (($eqeq(context_selector, \"section\") && ($neqeq(b.$context(), \"section\")))) {\n                  return nil\n                };\n                return $send(b, 'find_by_internal', [selector, result], block.$to_proc());});\n            }\n            break;\n          case \"dlist\":\n            if (($truthy(any_context) || ($neqeq(context_selector, \"section\")))) {\n              $send(self.blocks.$flatten(), 'each', [], function $$13(b){\n                \n                if (b == null) b = nil;\n                if ($truthy(b)) {\n                  return $send(b, 'find_by_internal', [selector, result], block.$to_proc())\n                } else {\n                  return nil\n                };})\n            }\n            break;\n          case \"table\":\n            if ($truthy(selector['$[]'](\"traverse_documents\"))) {\n              \n              $send(self.$rows().$head(), 'each', [], function $$14(r){\n                \n                if (r == null) r = nil;\n                return $send(r, 'each', [], function $$15(c){\n                  \n                  if (c == null) c = nil;\n                  return $send(c, 'find_by_internal', [selector, result], block.$to_proc());});});\n              if ($eqeq(context_selector, \"inner_document\")) {\n                selector = selector.$merge($hash2([\"context\"], {\"context\": \"document\"}))\n              };\n              $send($rb_plus(self.$rows().$body(), self.$rows().$foot()), 'each', [], function $$16(r){\n                \n                if (r == null) r = nil;\n                return $send(r, 'each', [], function $$17(c){\n                  \n                  if (c == null) c = nil;\n                  $send(c, 'find_by_internal', [selector, result], block.$to_proc());\n                  if ($eqeq(c.$style(), \"asciidoc\")) {\n                    return $send(c.$inner_document(), 'find_by_internal', [selector, result], block.$to_proc())\n                  } else {\n                    return nil\n                  };});});\n            } else {\n              $send($rb_plus($rb_plus(self.$rows().$head(), self.$rows().$body()), self.$rows().$foot()), 'each', [], function $$18(r){\n                \n                if (r == null) r = nil;\n                return $send(r, 'each', [], function $$19(c){\n                  \n                  if (c == null) c = nil;\n                  return $send(c, 'find_by_internal', [selector, result], block.$to_proc());});})\n            }\n            break;\n          default:\n            $send(self.blocks, 'each', [], function $$20(b){\n              \n              if (b == null) b = nil;\n              if (($eqeq(context_selector, \"section\") && ($neqeq(b.$context(), \"section\")))) {\n                return nil\n              };\n              return $send(b, 'find_by_internal', [selector, result], block.$to_proc());})\n        };\n        return result;\n      }, -1);\n    })($nesting[0], $$('AbstractNode'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/attribute_list\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash = Opal.hash, $regexp = Opal.regexp, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send = Opal.send, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('new,[],update,parse,parse_attribute,eos?,skip_delimiter,+,rekey,each_with_index,[]=,private,skip_blank,===,peek,parse_attribute_value,get_byte,start_with?,scan_name,end_with?,rstrip,string,==,unscan,scan_to_delimiter,*,include?,delete,each,split,empty?,apply_subs,scan_to_quote,gsub,skip,scan');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AttributeList');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.attributes = $proto.scanner = $proto.delimiter = $proto.block = $proto.delimiter_skip_pattern = $proto.delimiter_boundary_pattern = nil;\n      \n      $const_set($nesting[0], 'APOS', \"'\");\n      $const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      $const_set($nesting[0], 'QUOT', \"\\\"\");\n      $const_set($nesting[0], 'BoundaryRx', $hash($$('QUOT'), /.*?[^\\\\](?=\")/, $$('APOS'), /.*?[^\\\\](?=')/, \",\", /.*?(?=[ \\t]*(,|$))/));\n      $const_set($nesting[0], 'EscapedQuotes', $hash($$('QUOT'), \"\\\\\\\"\", $$('APOS'), \"\\\\'\"));\n      $const_set($nesting[0], 'NameRx', $regexp([$$('CG_WORD'), \"[\", $$('CC_WORD'), \"\\\\-.]*\"]));\n      $const_set($nesting[0], 'BlankRx', /[ \\t]+/);\n      $const_set($nesting[0], 'SkipRx', $hash2([\",\"], {\",\": /[ \\t]*(,|$)/}));\n      \n      $def(self, '$initialize', function $$initialize(source, block, delimiter) {\n        var self = this;\n\n        \n        if (block == null) block = nil;\n        if (delimiter == null) delimiter = \",\";\n        self.scanner = $$$('StringScanner').$new(source);\n        self.block = block;\n        self.delimiter = delimiter;\n        self.delimiter_skip_pattern = $$('SkipRx')['$[]'](delimiter);\n        self.delimiter_boundary_pattern = $$('BoundaryRx')['$[]'](delimiter);\n        return (self.attributes = nil);\n      }, -2);\n      \n      $def(self, '$parse_into', function $$parse_into(attributes, positional_attrs) {\n        var self = this;\n\n        \n        if (positional_attrs == null) positional_attrs = [];\n        return attributes.$update(self.$parse(positional_attrs));\n      }, -2);\n      \n      $def(self, '$parse', function $$parse(positional_attrs) {\n        var self = this, index = nil;\n\n        \n        if (positional_attrs == null) positional_attrs = [];\n        if ($truthy(self.attributes)) {\n          return self.attributes\n        };\n        self.attributes = $hash2([], {});\n        index = 0;\n        while ($truthy(self.$parse_attribute(index, positional_attrs))) {\n        \n          if ($truthy(self.scanner['$eos?']())) {\n            break\n          };\n          self.$skip_delimiter();\n          index = $rb_plus(index, 1);\n        };\n        return self.attributes;\n      }, -1);\n      \n      $def(self, '$rekey', function $$rekey(positional_attrs) {\n        var self = this;\n\n        return $$('AttributeList').$rekey(self.attributes, positional_attrs)\n      });\n      $defs(self, '$rekey', function $$rekey(attributes, positional_attrs) {\n        \n        \n        $send(positional_attrs, 'each_with_index', [], function $$1(key, index){var $a, val = nil;\n\n          \n          if (key == null) key = nil;\n          if (index == null) index = nil;\n          if (($truthy(key) && ($truthy((val = attributes['$[]']($rb_plus(index, 1))))))) {\n            return ($a = [key, val], $send(attributes, '[]=', $a), $a[$a.length - 1])\n          } else {\n            return nil\n          };});\n        return attributes;\n      });\n      self.$private();\n      \n      $def(self, '$parse_attribute', function $$parse_attribute(index, positional_attrs) {\n        var self = this, continue$ = nil, $ret_or_1 = nil, name = nil, single_quoted = nil, skipped = nil, $ret_or_2 = nil, $ret_or_3 = nil, c = nil, value = nil, positional_attr_name = nil;\n\n        \n        continue$ = true;\n        self.$skip_blank();\n        if ($eqeqeq($$('QUOT'), ($ret_or_1 = self.scanner.$peek(1)))) {\n          name = self.$parse_attribute_value(self.scanner.$get_byte())\n        } else if ($eqeqeq($$('APOS'), $ret_or_1)) {\n          \n          name = self.$parse_attribute_value(self.scanner.$get_byte());\n          if (!$truthy(name['$start_with?']($$('APOS')))) {\n            single_quoted = true\n          };\n        } else {\n          \n          skipped = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = (name = self.$scan_name()))) ? (self.$skip_blank()) : ($ret_or_3)))) ? ($ret_or_2) : (0));\n          if ($truthy(self.scanner['$eos?']())) {\n            \n            if (!($truthy(name) || ($truthy(self.scanner.$string().$rstrip()['$end_with?'](self.delimiter))))) {\n              return nil\n            };\n            continue$ = nil;\n          } else if ($eqeq((c = self.scanner.$get_byte()), self.delimiter)) {\n            self.scanner.$unscan()\n          } else if ($truthy(name)) {\n            if ($eqeq(c, \"=\")) {\n              \n              self.$skip_blank();\n              if ($eqeqeq($$('QUOT'), ($ret_or_2 = (c = self.scanner.$get_byte())))) {\n                value = self.$parse_attribute_value(c)\n              } else if ($eqeqeq($$('APOS'), $ret_or_2)) {\n                \n                value = self.$parse_attribute_value(c);\n                if (!$truthy(value['$start_with?']($$('APOS')))) {\n                  single_quoted = true\n                };\n              } else if ($eqeqeq(self.delimiter, $ret_or_2)) {\n                \n                value = \"\";\n                self.scanner.$unscan();\n              } else if ($eqeqeq(nil, $ret_or_2)) {\n                value = \"\"\n              } else {\n                \n                value = \"\" + (c) + (self.$scan_to_delimiter());\n                if ($eqeq(value, \"None\")) {\n                  return true\n                };\n              };\n            } else {\n              name = \"\" + (name) + ($rb_times(\" \", skipped)) + (c) + (self.$scan_to_delimiter())\n            }\n          } else {\n            name = \"\" + (c) + (self.$scan_to_delimiter())\n          };\n        };\n        if ($truthy(value)) {\n          \n          switch (name) {\n            case \"options\":\n            case \"opts\":\n              if ($truthy(value['$include?'](\",\"))) {\n                \n                if ($truthy(value['$include?'](\" \"))) {\n                  value = value.$delete(\" \")\n                };\n                $send(value.$split(\",\"), 'each', [], function $$2(opt){var $a, self = $$2.$$s == null ? this : $$2.$$s;\n                  if (self.attributes == null) self.attributes = nil;\n\n                  \n                  if (opt == null) opt = nil;\n                  if ($truthy(opt['$empty?']())) {\n                    return nil\n                  } else {\n                    return ($a = [\"\" + (opt) + \"-option\", \"\"], $send(self.attributes, '[]=', $a), $a[$a.length - 1])\n                  };}, {$$s: self});\n              } else if (!$truthy(value['$empty?']())) {\n                self.attributes['$[]='](\"\" + (value) + \"-option\", \"\")\n              }\n              break;\n            default:\n              if (($truthy(single_quoted) && ($truthy(self.block)))) {\n                \n                switch (name) {\n                  case \"title\":\n                  case \"reftext\":\n                    self.attributes['$[]='](name, value)\n                    break;\n                  default:\n                    self.attributes['$[]='](name, self.block.$apply_subs(value))\n                }\n              } else {\n                self.attributes['$[]='](name, value)\n              }\n          }\n        } else {\n          \n          if (($truthy(single_quoted) && ($truthy(self.block)))) {\n            name = self.block.$apply_subs(name)\n          };\n          if (($truthy((positional_attr_name = positional_attrs['$[]'](index))) && ($truthy(name)))) {\n            self.attributes['$[]='](positional_attr_name, name)\n          };\n          self.attributes['$[]=']($rb_plus(index, 1), name);\n        };\n        return continue$;\n      });\n      \n      $def(self, '$parse_attribute_value', function $$parse_attribute_value(quote) {\n        var self = this, value = nil;\n\n        if ($eqeq(self.scanner.$peek(1), quote)) {\n          \n          self.scanner.$get_byte();\n          return \"\";\n        } else if ($truthy((value = self.$scan_to_quote(quote)))) {\n          \n          self.scanner.$get_byte();\n          if ($truthy(value['$include?']($$('BACKSLASH')))) {\n            \n            return value.$gsub($$('EscapedQuotes')['$[]'](quote), quote);\n          } else {\n            return value\n          };\n        } else {\n          return \"\" + (quote) + (self.$scan_to_delimiter())\n        }\n      });\n      \n      $def(self, '$skip_blank', function $$skip_blank() {\n        var self = this;\n\n        return self.scanner.$skip($$('BlankRx'))\n      });\n      \n      $def(self, '$skip_delimiter', function $$skip_delimiter() {\n        var self = this;\n\n        return self.scanner.$skip(self.delimiter_skip_pattern)\n      });\n      \n      $def(self, '$scan_name', function $$scan_name() {\n        var self = this;\n\n        return self.scanner.$scan($$('NameRx'))\n      });\n      \n      $def(self, '$scan_to_delimiter', function $$scan_to_delimiter() {\n        var self = this;\n\n        return self.scanner.$scan(self.delimiter_boundary_pattern)\n      });\n      return $def(self, '$scan_to_quote', function $$scan_to_quote(quote) {\n        var self = this;\n\n        return self.scanner.$scan($$('BoundaryRx')['$[]'](quote))\n      });\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/block\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash2 = Opal.hash2, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('default=,context,attr_accessor,[],key?,===,drop,delete,[]=,to_s,commit_subs,nil_or_empty?,prepare_source_string,apply_subs,join,<,size,empty?,rstrip,shift,pop,==,warn,logger,class,object_id,inspect');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Block');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.attributes = $proto.content_model = $proto.lines = $proto.subs = $proto.blocks = $proto.context = $proto.style = nil;\n      \n      $const_set($nesting[0], 'DEFAULT_CONTENT_MODEL', $hash2([\"audio\", \"image\", \"listing\", \"literal\", \"stem\", \"open\", \"page_break\", \"pass\", \"thematic_break\", \"video\"], {\"audio\": \"empty\", \"image\": \"empty\", \"listing\": \"verbatim\", \"literal\": \"verbatim\", \"stem\": \"raw\", \"open\": \"compound\", \"page_break\": \"empty\", \"pass\": \"raw\", \"thematic_break\": \"empty\", \"video\": \"empty\"}))['$default='](\"simple\");\n      $alias(self, \"blockname\", \"context\");\n      self.$attr_accessor(\"lines\");\n      \n      $def(self, '$initialize', function $$initialize(parent, context, opts) {\n        var $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil, subs = nil, raw_source = nil;\n\n        $$initialize.$$p = null;\n        \n        if (opts == null) opts = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, context, opts], $yield);\n        self.content_model = ($truthy(($ret_or_1 = opts['$[]'](\"content_model\"))) ? ($ret_or_1) : ($$('DEFAULT_CONTENT_MODEL')['$[]'](context)));\n        if ($truthy(opts['$key?'](\"subs\"))) {\n          if ($truthy((subs = opts['$[]'](\"subs\")))) {\n            \n            if ($eqeqeq(\"default\", ($ret_or_1 = subs))) {\n              self.default_subs = opts['$[]'](\"default_subs\")\n            } else if ($eqeqeq($$$('Array'), $ret_or_1)) {\n              \n              self.default_subs = subs.$drop(0);\n              self.attributes.$delete(\"subs\");\n            } else {\n              \n              self.default_subs = nil;\n              self.attributes['$[]='](\"subs\", subs.$to_s());\n            };\n            self.$commit_subs();\n          } else {\n            \n            self.default_subs = [];\n            self.attributes.$delete(\"subs\");\n          }\n        } else {\n          self.default_subs = nil\n        };\n        if ($truthy((raw_source = opts['$[]'](\"source\"))['$nil_or_empty?']())) {\n          return (self.lines = [])\n        } else if ($eqeqeq($$$('String'), raw_source)) {\n          return (self.lines = $$('Helpers').$prepare_source_string(raw_source))\n        } else {\n          return (self.lines = raw_source.$drop(0))\n        };\n      }, -3);\n      \n      $def(self, '$content', function $$content() {\n        var $yield = $$content.$$p || nil, self = this, result = nil, $ret_or_2 = nil, first = nil, last = nil;\n\n        $$content.$$p = null;\n        \n        switch (self.content_model) {\n          case \"compound\":\n            return $send2(self, $find_super(self, 'content', $$content, false, true), 'content', [], $yield)\n          case \"simple\":\n            return self.$apply_subs(self.lines.$join($$('LF')), self.subs)\n          case \"verbatim\":\n          case \"raw\":\n            \n            result = self.$apply_subs(self.lines, self.subs);\n            if ($truthy($rb_lt(result.$size(), 2))) {\n              if ($truthy(($ret_or_2 = result['$[]'](0)))) {\n                return $ret_or_2\n              } else {\n                return \"\"\n              }\n            } else {\n              \n              while ($truthy(($truthy(($ret_or_2 = (first = result['$[]'](0)))) ? (first.$rstrip()['$empty?']()) : ($ret_or_2)))) {\n              result.$shift()\n              };\n              while ($truthy(($truthy(($ret_or_2 = (last = result['$[]'](-1)))) ? (last.$rstrip()['$empty?']()) : ($ret_or_2)))) {\n              result.$pop()\n              };\n              return result.$join($$('LF'));\n            };\n            break;\n          default:\n            \n            if (!$eqeq(self.content_model, \"empty\")) {\n              self.$logger().$warn(\"unknown content model '\" + (self.content_model) + \"' for block: \" + (self))\n            };\n            return nil;\n        }\n      });\n      \n      $def(self, '$source', function $$source() {\n        var self = this;\n\n        return self.lines.$join($$('LF'))\n      });\n      return $def(self, '$to_s', function $$to_s() {\n        var self = this, content_summary = nil;\n\n        \n        content_summary = ($eqeq(self.content_model, \"compound\") ? (\"blocks: \" + (self.blocks.$size())) : (\"lines: \" + (self.lines.$size())));\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", content_model: \" + (self.content_model.$inspect()) + \", style: \" + (self.style.$inspect()) + \", \" + (content_summary) + \"}>\";\n      });\n    })($nesting[0], $$('AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/callouts\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $rb_le = Opal.rb_le, $rb_minus = Opal.rb_minus, $send = Opal.send, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('next_list,<<,current_list,to_i,generate_next_callout_id,+,<=,size,[],-,chop,join,map,==,<,private,generate_callout_id');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Callouts');\n\n      var $proto = self.$$prototype;\n\n      $proto.co_index = $proto.lists = $proto.list_index = nil;\n      \n      \n      $def(self, '$initialize', function $$initialize() {\n        var self = this;\n\n        \n        self.lists = [];\n        self.list_index = 0;\n        return self.$next_list();\n      });\n      \n      $def(self, '$register', function $$register(li_ordinal) {\n        var self = this, id = nil;\n\n        \n        self.$current_list()['$<<']($hash2([\"ordinal\", \"id\"], {\"ordinal\": li_ordinal.$to_i(), \"id\": (id = self.$generate_next_callout_id())}));\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      });\n      \n      $def(self, '$read_next_id', function $$read_next_id() {\n        var self = this, id = nil, list = nil;\n\n        \n        id = nil;\n        list = self.$current_list();\n        if ($truthy($rb_le(self.co_index, list.$size()))) {\n          id = list['$[]']($rb_minus(self.co_index, 1))['$[]'](\"id\")\n        };\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      });\n      \n      $def(self, '$callout_ids', function $$callout_ids(li_ordinal) {\n        var self = this;\n\n        return $send(self.$current_list(), 'map', [], function $$1(it){\n          \n          if (it == null) it = nil;\n          if ($eqeq(it['$[]'](\"ordinal\"), li_ordinal)) {\n            return \"\" + (it['$[]'](\"id\")) + \" \"\n          } else {\n            return \"\"\n          };}).$join().$chop()\n      });\n      \n      $def(self, '$current_list', function $$current_list() {\n        var self = this;\n\n        return self.lists['$[]']($rb_minus(self.list_index, 1))\n      });\n      \n      $def(self, '$next_list', function $$next_list() {\n        var self = this;\n\n        \n        self.list_index = $rb_plus(self.list_index, 1);\n        if ($truthy($rb_lt(self.lists.$size(), self.list_index))) {\n          self.lists['$<<']([])\n        };\n        self.co_index = 1;\n        return nil;\n      });\n      \n      $def(self, '$rewind', function $$rewind() {\n        var self = this;\n\n        \n        self.list_index = 1;\n        self.co_index = 1;\n        return nil;\n      });\n      self.$private();\n      \n      $def(self, '$generate_next_callout_id', function $$generate_next_callout_id() {\n        var self = this;\n\n        return self.$generate_callout_id(self.list_index, self.co_index)\n      });\n      return $def(self, '$generate_callout_id', function $$generate_callout_id(list_index, co_index) {\n        \n        return \"CO\" + (list_index) + \"-\" + (co_index)\n      });\n    })($nesting[0], null)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/converter/composite\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_reader,each,respond_to?,composed,init_backend_traits,backend_traits,new,[]=,find_converter,convert,converter_for,node_name,[],handles?,raise');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'CompositeConverter');\n\n      var $proto = self.$$prototype;\n\n      $proto.converter_cache = $proto.converters = nil;\n      \n      self.$attr_reader(\"converters\");\n      \n      $def(self, '$initialize', function $$initialize(backend, $a, $b) {\n        var $post_args, $kwargs, converters, backend_traits_source, self = this;\n\n        \n        $post_args = $slice(arguments, 1);\n        $kwargs = $extract_kwargs($post_args);\n        $kwargs = $ensure_kwargs($kwargs);\n        converters = $post_args;\n        \n        backend_traits_source = $kwargs.$$smap[\"backend_traits_source\"];if (backend_traits_source == null) backend_traits_source = nil;\n        self.backend = backend;\n        $send((self.converters = converters), 'each', [], function $$1(converter){var self = $$1.$$s == null ? this : $$1.$$s;\n\n          \n          if (converter == null) converter = nil;\n          if ($truthy(converter['$respond_to?'](\"composed\"))) {\n            return converter.$composed(self)\n          } else {\n            return nil\n          };}, {$$s: self});\n        if ($truthy(backend_traits_source)) {\n          self.$init_backend_traits(backend_traits_source.$backend_traits())\n        };\n        return (self.converter_cache = $send($$$('Hash'), 'new', [], function $$2(hash, key){var $c, self = $$2.$$s == null ? this : $$2.$$s;\n\n          \n          if (hash == null) hash = nil;\n          if (key == null) key = nil;\n          return ($c = [key, self.$find_converter(key)], $send(hash, '[]=', $c), $c[$c.length - 1]);}, {$$s: self}));\n      }, -2);\n      \n      $def(self, '$convert', function $$convert(node, transform, opts) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (transform == null) transform = nil;\n        if (opts == null) opts = nil;\n        return self.$converter_for((transform = ($truthy(($ret_or_1 = transform)) ? ($ret_or_1) : (node.$node_name())))).$convert(node, transform, opts);\n      }, -2);\n      \n      $def(self, '$converter_for', function $$converter_for(transform) {\n        var self = this;\n\n        return self.converter_cache['$[]'](transform)\n      });\n      return $def(self, '$find_converter', function $$find_converter(transform) {try { var $t_return = $thrower('return'); \n        var self = this;\n\n        \n        $send(self.converters, 'each', [], function $$3(candidate){\n          \n          if (candidate == null) candidate = nil;\n          if ($truthy(candidate['$handles?'](transform))) {\n            $t_return.$throw(candidate)\n          } else {\n            return nil\n          };}, {$$ret: $t_return});\n        return self.$raise(\"Could not find a converter to handle transform: \" + (transform));} catch($e) {\n          if ($e === $t_return) return $e.$v;\n          throw $e;\n        }\n      });\n    })($$('Converter'), $$$($$('Converter'), 'Base'))\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/converter\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $hash2 = Opal.hash2, $def = Opal.def, $return_val = Opal.return_val, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $defs = Opal.defs, $send = Opal.send, $alias = Opal.alias, $slice = Opal.slice, $to_a = Opal.to_a, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $eqeqeq = Opal.eqeqeq, $Class = Opal.Class, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $rb_plus = Opal.rb_plus, $gvars = Opal.gvars, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('autoload,attr_reader,raise,class,[],sub,slice,length,==,[]=,backend_traits,derive_backend_traits,register,map,to_s,new,create,default,each,default=,registry,for,===,supports_templates?,merge,private,include,delete,clear,send,extend,private_class_method,node_name,+,name,receiver,warn,logger,respond_to?,content');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Converter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$autoload(\"CompositeConverter\", \"\" + (\"asciidoctor\") + \"/converter/composite\");\n      nil;\n      self.$attr_reader(\"backend\");\n      \n      $def(self, '$initialize', function $$initialize(backend, opts) {\n        var self = this;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        return (self.backend = backend);\n      }, -2);\n      \n      $def(self, '$convert', function $$convert(node, transform, opts) {\n        var self = this;\n        if (self.backend == null) self.backend = nil;\n\n        \n        if (transform == null) transform = nil;\n        if (opts == null) opts = nil;\n        return self.$raise($$$('NotImplementedError'), \"\" + (self.$class()) + \" (backend: \" + (self.backend) + \") must implement the #\" + (\"convert\") + \" method\");\n      }, -2);\n      \n      $def(self, '$handles?', $return_val(true));\n      $defs(self, '$derive_backend_traits', function $$derive_backend_traits(backend, basebackend) {\n        var outfilesuffix = nil, $ret_or_1 = nil, filetype = nil;\n\n        \n        if (basebackend == null) basebackend = nil;\n        if (!$truthy(backend)) {\n          return $hash2([], {})\n        };\n        if ($truthy((outfilesuffix = $$('DEFAULT_EXTENSIONS')['$[]']((basebackend = ($truthy(($ret_or_1 = basebackend)) ? ($ret_or_1) : (backend.$sub($$('TrailingDigitsRx'), \"\")))))))) {\n          filetype = outfilesuffix.$slice(1, outfilesuffix.$length())\n        } else {\n          outfilesuffix = \".\" + ((filetype = basebackend))\n        };\n        if ($eqeq(filetype, \"html\")) {\n          return $hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"htmlsyntax\": \"html\", \"outfilesuffix\": outfilesuffix})\n        } else {\n          return $hash2([\"basebackend\", \"filetype\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"outfilesuffix\": outfilesuffix})\n        };\n      }, -2);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BackendTraits');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        \n        $def(self, '$basebackend', function $$basebackend(value) {\n          var $a, self = this;\n\n          \n          if (value == null) value = nil;\n          if ($truthy(value)) {\n            \n            return ($a = [\"basebackend\", value], $send(self.$backend_traits(value), '[]=', $a), $a[$a.length - 1]);\n          } else {\n            return self.$backend_traits()['$[]'](\"basebackend\")\n          };\n        }, -1);\n        \n        $def(self, '$filetype', function $$filetype(value) {\n          var $a, self = this;\n\n          \n          if (value == null) value = nil;\n          if ($truthy(value)) {\n            \n            return ($a = [\"filetype\", value], $send(self.$backend_traits(), '[]=', $a), $a[$a.length - 1]);\n          } else {\n            return self.$backend_traits()['$[]'](\"filetype\")\n          };\n        }, -1);\n        \n        $def(self, '$htmlsyntax', function $$htmlsyntax(value) {\n          var $a, self = this;\n\n          \n          if (value == null) value = nil;\n          if ($truthy(value)) {\n            \n            return ($a = [\"htmlsyntax\", value], $send(self.$backend_traits(), '[]=', $a), $a[$a.length - 1]);\n          } else {\n            return self.$backend_traits()['$[]'](\"htmlsyntax\")\n          };\n        }, -1);\n        \n        $def(self, '$outfilesuffix', function $$outfilesuffix(value) {\n          var $a, self = this;\n\n          \n          if (value == null) value = nil;\n          if ($truthy(value)) {\n            \n            return ($a = [\"outfilesuffix\", value], $send(self.$backend_traits(), '[]=', $a), $a[$a.length - 1]);\n          } else {\n            return self.$backend_traits()['$[]'](\"outfilesuffix\")\n          };\n        }, -1);\n        \n        $def(self, '$supports_templates', function $$supports_templates(value) {\n          var $a, self = this;\n\n          \n          if (value == null) value = true;\n          return ($a = [\"supports_templates\", value], $send(self.$backend_traits(), '[]=', $a), $a[$a.length - 1]);\n        }, -1);\n        \n        $def(self, '$supports_templates?', function $BackendTraits_supports_templates$ques$1() {\n          var self = this;\n\n          return self.$backend_traits()['$[]'](\"supports_templates\")\n        });\n        \n        $def(self, '$init_backend_traits', function $$init_backend_traits(value) {\n          var self = this, $ret_or_1 = nil;\n\n          \n          if (value == null) value = nil;\n          return (self.backend_traits = ($truthy(($ret_or_1 = value)) ? ($ret_or_1) : ($hash2([], {}))));\n        }, -1);\n        \n        $def(self, '$backend_traits', function $$backend_traits(basebackend) {\n          var self = this, $ret_or_1 = nil;\n          if (self.backend_traits == null) self.backend_traits = nil;\n          if (self.backend == null) self.backend = nil;\n\n          \n          if (basebackend == null) basebackend = nil;\n          return (self.backend_traits = ($truthy(($ret_or_1 = self.backend_traits)) ? ($ret_or_1) : ($$('Converter').$derive_backend_traits(self.backend, basebackend))));\n        }, -1);\n        $alias(self, \"backend_info\", \"backend_traits\");\n        return $defs(self, '$derive_backend_traits', function $$derive_backend_traits(backend, basebackend) {\n          \n          \n          if (basebackend == null) basebackend = nil;\n          return $$('Converter').$derive_backend_traits(backend, basebackend);\n        }, -2);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$register_for', function $$register_for($a) {\n          var $post_args, backends, self = this;\n\n          \n          $post_args = $slice(arguments);\n          backends = $post_args;\n          return $send($$('Converter'), 'register', [self].concat($to_a($send(backends, 'map', [], function $$2(backend){\n            \n            if (backend == null) backend = nil;\n            return backend.$to_s();}))));\n        }, -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        $defs(self, '$new', function $Factory_new$3($a, $b) {\n          var $post_args, $kwargs, converters, proxy_default;\n\n          \n          $post_args = $slice(arguments);\n          $kwargs = $extract_kwargs($post_args);\n          $kwargs = $ensure_kwargs($kwargs);\n          \n          if ($post_args.length > 0) converters = $post_args.shift();if (converters == null) converters = nil;\n          \n          proxy_default = $kwargs.$$smap[\"proxy_default\"];if (proxy_default == null) proxy_default = true;\n          if ($truthy(proxy_default)) {\n            \n            return $$('DefaultFactoryProxy').$new(converters);\n          } else {\n            \n            return $$('CustomFactory').$new(converters);\n          };\n        }, -1);\n        $defs(self, '$default', function $Factory_default$4($a) {\n          var $post_args, args;\n\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $$('Converter');\n        }, -1);\n        $defs(self, '$create', function $$create(backend, opts) {\n          var self = this;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          return self.$default().$create(backend, opts);\n        }, -2);\n        \n        $def(self, '$register', function $$register(converter, $a) {\n          var $post_args, backends, self = this;\n\n          \n          $post_args = $slice(arguments, 1);\n          backends = $post_args;\n          return $send(backends, 'each', [], function $$5(backend){var $b, self = $$5.$$s == null ? this : $$5.$$s;\n\n            \n            if (backend == null) backend = nil;\n            if ($eqeq(backend, \"*\")) {\n              \n              return ($b = [converter], $send(self.$registry(), 'default=', $b), $b[$b.length - 1]);\n            } else {\n              \n              return ($b = [backend, converter], $send(self.$registry(), '[]=', $b), $b[$b.length - 1]);\n            };}, {$$s: self});\n        }, -2);\n        \n        $def(self, '$for', function $Factory_for$6(backend) {\n          var self = this;\n\n          return self.$registry()['$[]'](backend)\n        });\n        \n        $def(self, '$create', function $$create(backend, opts) {\n          var self = this, converter = nil, template_dirs = nil, delegate_backend = nil;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          if ($truthy((converter = self.$for(backend)))) {\n            \n            if ($eqeqeq($Class, converter)) {\n              converter = converter.$new(backend, opts)\n            };\n            if ((($truthy((template_dirs = opts['$[]'](\"template_dirs\"))) && ($eqeqeq($$('BackendTraits'), converter))) && ($truthy(converter['$supports_templates?']())))) {\n              return $$('CompositeConverter').$new(backend, $$('TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}))\n            } else {\n              return converter\n            };\n          } else if ($truthy((template_dirs = opts['$[]'](\"template_dirs\")))) {\n            if (($truthy((delegate_backend = opts['$[]'](\"delegate_backend\"))) && ($truthy((converter = self.$for(delegate_backend)))))) {\n              \n              if ($eqeqeq($Class, converter)) {\n                converter = converter.$new(delegate_backend, opts)\n              };\n              return $$('CompositeConverter').$new(backend, $$('TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}));\n            } else {\n              return $$('TemplateConverter').$new(backend, template_dirs, opts)\n            }\n          } else {\n            return nil\n          };\n        }, -2);\n        \n        $def(self, '$converters', function $$converters() {\n          var self = this;\n\n          return self.$registry().$merge()\n        });\n        self.$private();\n        return $def(self, '$registry', function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        });\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('Factory'));\n        \n        $def(self, '$initialize', function $$initialize(seed_registry) {\n          var self = this;\n\n          \n          if (seed_registry == null) seed_registry = nil;\n          if ($truthy(seed_registry)) {\n            \n            seed_registry['$default='](seed_registry.$delete(\"*\"));\n            return (self.registry = seed_registry);\n          } else {\n            return (self.registry = $hash2([], {}))\n          };\n        }, -1);\n        \n        $def(self, '$unregister_all', function $$unregister_all() {\n          var $a, self = this;\n\n          return ($a = [nil], $send(self.$registry().$clear(), 'default=', $a), $a[$a.length - 1])\n        });\n        self.$private();\n        return self.$attr_reader(\"registry\");\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('Factory'));\n        self.$private();\n        $class_variable_set($nesting[0], '@@registry', $hash2([], {}));\n        \n        $def(self, '$registry', function $$registry() {\n          \n          return $class_variable_get($nesting[0], '@@registry', false)\n        });\n        return nil;\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('DefaultFactory'));\n        return nil;\n      })($nesting[0], $$('CustomFactory'), $nesting);\n      $defs(self, '$included', function $$included(into) {\n        \n        \n        into.$send(\"include\", $$('BackendTraits'));\n        return into.$extend($$('Config'));\n      });\n      self.$private_class_method(\"included\");\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.backend = nil;\n        \n        self.$include($$('Logging'));\n        self.$include($$('Converter'));\n        \n        $def(self, '$convert', function $$convert(node, transform, opts) {\n          var self = this, ex = nil;\n          if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n          \n          if (transform == null) transform = node.$node_name();\n          if (opts == null) opts = nil;\n          try {\n            if ($truthy(opts)) {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node, opts);\n            } else {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node);\n            }\n          } catch ($err) {\n            if (Opal.rescue($err, [$$('StandardError')])) {\n              try {\n                \n                if (!(($eqeqeq($$$('NoMethodError'), (ex = $gvars[\"!\"])) && ($eqeq(ex.$receiver(), self))) && ($eqeq(ex.$name().$to_s(), transform)))) {\n                  self.$raise()\n                };\n                self.$logger().$warn(\"missing convert handler for \" + (ex.$name()) + \" node in \" + (self.backend) + \" backend (\" + (self.$class()) + \")\");\n                return nil;\n              } finally { Opal.pop_exception(); }\n            } else { throw $err; }\n          };\n        }, -2);\n        \n        $def(self, '$handles?', function $Base_handles$ques$7(transform) {\n          var self = this;\n\n          return self['$respond_to?'](\"convert_\" + (transform))\n        });\n        \n        $def(self, '$content_only', function $$content_only(node) {\n          \n          return node.$content()\n        });\n        return $def(self, '$skip', $return_val(nil));\n      })($nesting[0], null, $nesting);\n      return self.$extend($$('DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/document\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $alias = Opal.alias, $truthy = Opal.truthy, $def = Opal.def, $hash2 = Opal.hash2, $not = Opal.not, $to_ary = Opal.to_ary, $return_ivar = Opal.return_ivar, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq, $hash = Opal.hash, $rb_ge = Opal.rb_ge, $rb_plus = Opal.rb_plus, $neqeq = Opal.neqeq, $thrower = Opal.thrower, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $gvars = Opal.gvars, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('new,target,attr_reader,nil?,<<,[],[]=,main,include?,strip,squeeze,gsub,!,empty?,rpartition,attr_accessor,catalog,delete,base_dir,options,merge,instance_variable_get,attributes,safe,compat_mode,outfilesuffix,sourcemap,path_resolver,converter,extensions,syntax_highlighter,each,end_with?,start_with?,slice,-,length,chop,==,downcase,===,extname,value_for_name,key?,freeze,attribute_undefined,attribute_missing,update,&,keys,name_for_value,expand_path,pwd,to_s,>=,+,abs,to_i,delete_if,update_doctype_attributes,cursor,parse,restore_attributes,update_backend_attributes,fetch,fill_datetime_attributes,activate,groups,create,to_proc,preprocessors?,preprocessors,process_method,tree_processors?,tree_processors,!=,counter,nil_or_empty?,attribute_locked?,nextval,value,save_to,increment_and_store_counter,register,tap,xreftext,>,source,source_lines,doctitle,sectname=,title=,first_section,title,reftext,<,find,context,header?,assign_numeral,clear_playback_attributes,save_attributes,name,negate,rewind,replace,apply_attribute_value_subs,delete?,start,doctype,content_model,warn,logger,content,convert,postprocessors?,postprocessors,record,write,respond_to?,chomp,class,write_alternate_pages,map,split,resolve_docinfo_subs,normalize_system_path,read_asset,apply_subs,docinfo_processors?,join,concat,compact,docinfo_processors,object_id,inspect,size,private,=~,resolve_pass_subs,apply_header_subs,limit_bytesize,bytesize,valid_encoding?,byteslice,resolve_subs,utc,at,Integer,now,index,strftime,year,utc_offset,partition,create_converter,basebackend,filetype,htmlsyntax,derive_backend_traits,raise');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Document');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.attributes = $proto.safe = $proto.sourcemap = $proto.reader = $proto.base_dir = $proto.parsed = $proto.parent_document = $proto.extensions = $proto.options = $proto.counters = $proto.catalog = $proto.reftexts = $proto.next_section_index = $proto.header = $proto.blocks = $proto.header_attributes = $proto.attributes_modified = $proto.backend = $proto.attribute_overrides = $proto.timings = $proto.converter = $proto.outfilesuffix = $proto.docinfo_processor_extensions = $proto.document = $proto.max_attribute_value_size = $proto.id = $proto.doctype = nil;\n      \n      $const_set($nesting[0], 'ImageReference', $send($$$('Struct'), 'new', [\"target\", \"imagesdir\"], function $Document$1(){var self = $Document$1.$$s == null ? this : $Document$1.$$s;\n\n        return $alias(self, \"to_s\", \"target\")}, {$$s: self}));\n      $const_set($nesting[0], 'Footnote', $$$('Struct').$new(\"index\", \"id\", \"text\"));\n      (function($base, $super) {\n        var self = $klass($base, $super, 'AttributeEntry');\n\n        \n        \n        self.$attr_reader(\"name\", \"value\", \"negate\");\n        \n        $def(self, '$initialize', function $$initialize(name, value, negate) {\n          var self = this;\n\n          \n          if (negate == null) negate = nil;\n          self.name = name;\n          self.value = value;\n          return (self.negate = ($truthy(negate['$nil?']()) ? (value['$nil?']()) : (negate)));\n        }, -3);\n        return $def(self, '$save_to', function $$save_to(block_attributes) {\n          var $a, self = this, $ret_or_1 = nil;\n\n          \n          ($truthy(($ret_or_1 = block_attributes['$[]'](\"attribute_entries\"))) ? ($ret_or_1) : (($a = [\"attribute_entries\", []], $send(block_attributes, '[]=', $a), $a[$a.length - 1])))['$<<'](self);\n          return self;\n        });\n      })($nesting[0], null);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Title');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.subtitle = nil;\n        \n        self.$attr_reader(\"main\");\n        $alias(self, \"title\", \"main\");\n        self.$attr_reader(\"subtitle\");\n        self.$attr_reader(\"combined\");\n        \n        $def(self, '$initialize', function $$initialize(val, opts) {\n          var $a, $b, self = this, sep = nil, $ret_or_1 = nil, _ = nil;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          if (($truthy((self.sanitized = opts['$[]'](\"sanitize\"))) && ($truthy(val['$include?'](\"<\"))))) {\n            val = val.$gsub($$('XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()\n          };\n          if (($truthy((sep = ($truthy(($ret_or_1 = opts['$[]'](\"separator\"))) ? ($ret_or_1) : (\":\")))['$empty?']()) || ($not(val['$include?']((sep = \"\" + (sep) + \" \")))))) {\n            \n            self.main = val;\n            self.subtitle = nil;\n          } else {\n            $b = val.$rpartition(sep), $a = $to_ary($b), (self.main = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (self.subtitle = ($a[2] == null ? nil : $a[2])), $b\n          };\n          return (self.combined = val);\n        }, -2);\n        \n        $def(self, '$sanitized?', $return_ivar(\"sanitized\"));\n        \n        $def(self, '$subtitle?', function $Title_subtitle$ques$2() {\n          var self = this;\n\n          if ($truthy(self.subtitle)) {\n            return true\n          } else {\n            return false\n          }\n        });\n        return $def(self, '$to_s', $return_ivar(\"combined\"));\n      })($nesting[0], null, $nesting);\n      $const_set($nesting[0], 'Author', $$$('Struct').$new(\"name\", \"firstname\", \"middlename\", \"lastname\", \"initials\", \"email\"));\n      self.$attr_reader(\"safe\");\n      self.$attr_reader(\"compat_mode\");\n      self.$attr_reader(\"backend\");\n      self.$attr_reader(\"doctype\");\n      self.$attr_accessor(\"sourcemap\");\n      self.$attr_reader(\"catalog\");\n      $alias(self, \"references\", \"catalog\");\n      self.$attr_reader(\"counters\");\n      self.$attr_reader(\"header\");\n      self.$attr_reader(\"base_dir\");\n      self.$attr_reader(\"options\");\n      self.$attr_reader(\"outfilesuffix\");\n      self.$attr_reader(\"parent_document\");\n      self.$attr_reader(\"reader\");\n      self.$attr_reader(\"path_resolver\");\n      self.$attr_reader(\"converter\");\n      self.$attr_reader(\"syntax_highlighter\");\n      self.$attr_reader(\"extensions\");\n      \n      $def(self, '$initialize', function $$initialize(data, options) {\n        var $a, $b, $c, $d, $e, $yield = $$initialize.$$p || nil, self = this, parent_doc = nil, $ret_or_1 = nil, attr_overrides = nil, parent_doctype = nil, initialize_extensions = nil, to_file = nil, safe_mode = nil, input_mtime = nil, standalone = nil, attrs = nil, safe_mode_name = nil, base_dir_val = nil, backend_val = nil, doctype_val = nil, size = nil, initial_backend = nil, ext_registry = nil, ext_block = nil;\n\n        $$initialize.$$p = null;\n        \n        if (data == null) data = nil;\n        if (options == null) options = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [self, \"document\"], null);\n        if ($truthy((parent_doc = options.$delete(\"parent\")))) {\n          \n          self.parent_document = parent_doc;\n          if ($truthy(($ret_or_1 = options['$[]'](\"base_dir\")))) {\n            $ret_or_1\n          } else {\n            options['$[]='](\"base_dir\", parent_doc.$base_dir())\n          };\n          if ($truthy(parent_doc.$options()['$[]'](\"catalog_assets\"))) {\n            options['$[]='](\"catalog_assets\", true)\n          };\n          if ($truthy(parent_doc.$options()['$[]'](\"to_dir\"))) {\n            options['$[]='](\"to_dir\", parent_doc.$options()['$[]'](\"to_dir\"))\n          };\n          self.catalog = parent_doc.$catalog().$merge($hash2([\"footnotes\"], {\"footnotes\": []}));\n          self.attribute_overrides = (attr_overrides = parent_doc.$instance_variable_get(\"@attribute_overrides\").$merge(parent_doc.$attributes()));\n          attr_overrides.$delete(\"compat-mode\");\n          parent_doctype = attr_overrides.$delete(\"doctype\");\n          attr_overrides.$delete(\"notitle\");\n          attr_overrides.$delete(\"showtitle\");\n          attr_overrides.$delete(\"toc\");\n          self.attributes['$[]='](\"toc-placement\", ($truthy(($ret_or_1 = attr_overrides.$delete(\"toc-placement\"))) ? ($ret_or_1) : (\"auto\")));\n          attr_overrides.$delete(\"toc-position\");\n          self.safe = parent_doc.$safe();\n          if ($truthy((self.compat_mode = parent_doc.$compat_mode()))) {\n            self.attributes['$[]='](\"compat-mode\", \"\")\n          };\n          self.outfilesuffix = parent_doc.$outfilesuffix();\n          self.sourcemap = parent_doc.$sourcemap();\n          self.timings = nil;\n          self.path_resolver = parent_doc.$path_resolver();\n          self.converter = parent_doc.$converter();\n          initialize_extensions = nil;\n          self.extensions = parent_doc.$extensions();\n          self.syntax_highlighter = parent_doc.$syntax_highlighter();\n        } else {\n          \n          self.parent_document = nil;\n          self.catalog = $hash2([\"ids\", \"refs\", \"footnotes\", \"links\", \"images\", \"callouts\", \"includes\"], {\"ids\": $hash2([], {}), \"refs\": $hash2([], {}), \"footnotes\": [], \"links\": [], \"images\": [], \"callouts\": $$('Callouts').$new(), \"includes\": $hash2([], {})});\n          self.attribute_overrides = (attr_overrides = $hash2([], {}));\n          $send(($truthy(($ret_or_1 = options['$[]'](\"attributes\"))) ? ($ret_or_1) : ($hash2([], {}))), 'each', [], function $$3(key, val){var $a;\n\n            \n            if (key == null) key = nil;\n            if (val == null) val = nil;\n            if ($truthy(key['$end_with?'](\"@\"))) {\n              if ($truthy(key['$start_with?'](\"!\"))) {\n                $a = [key.$slice(1, $rb_minus(key.$length(), 2)), false], (key = $a[0]), (val = $a[1]), $a\n              } else if ($truthy(key['$end_with?'](\"!@\"))) {\n                $a = [key.$slice(0, $rb_minus(key.$length(), 2)), false], (key = $a[0]), (val = $a[1]), $a\n              } else {\n                $a = [key.$chop(), \"\" + (val) + \"@\"], (key = $a[0]), (val = $a[1]), $a\n              }\n            } else if ($truthy(key['$start_with?'](\"!\"))) {\n              $a = [key.$slice(1, key.$length()), ($eqeq(val, \"@\") ? (false) : (nil))], (key = $a[0]), (val = $a[1]), $a\n            } else if ($truthy(key['$end_with?'](\"!\"))) {\n              $a = [key.$chop(), ($eqeq(val, \"@\") ? (false) : (nil))], (key = $a[0]), (val = $a[1]), $a\n            };\n            return ($a = [key.$downcase(), val], $send(attr_overrides, '[]=', $a), $a[$a.length - 1]);});\n          if ($eqeqeq($$$('String'), (to_file = options['$[]'](\"to_file\")))) {\n            attr_overrides['$[]='](\"outfilesuffix\", $$('Helpers').$extname(to_file))\n          };\n          if ($not((safe_mode = options['$[]'](\"safe\")))) {\n            self.safe = $$$($$('SafeMode'), 'SECURE')\n          } else if ($eqeqeq($$$('Integer'), safe_mode)) {\n            self.safe = safe_mode\n          } else {\n            self.safe = (function() { try {\n              \n              return $$('SafeMode').$value_for_name(safe_mode);\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  return $$$($$('SafeMode'), 'SECURE')\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            }})()\n          };\n          input_mtime = options.$delete(\"input_mtime\");\n          self.compat_mode = attr_overrides['$key?'](\"compat-mode\");\n          self.sourcemap = options['$[]'](\"sourcemap\");\n          self.timings = options.$delete(\"timings\");\n          self.path_resolver = $$('PathResolver').$new();\n          initialize_extensions = (($truthy((($b = $$$('::', 'Asciidoctor', 'skip_raise')) && ($a = $$$($b, 'Extensions', 'skip_raise')) ? 'constant' : nil)) || ($truthy(options['$key?'](\"extensions\")))) ? ($$$($$$('Asciidoctor'), 'Extensions')) : (nil));\n          self.extensions = nil;\n          if (($truthy(options['$key?'](\"header_footer\")) && ($not(options['$key?'](\"standalone\"))))) {\n            options['$[]='](\"standalone\", options['$[]'](\"header_footer\"))\n          };\n        };\n        self.parsed = (self.reftexts = (self.header = (self.header_attributes = nil)));\n        self.counters = $hash2([], {});\n        self.attributes_modified = $$$('Set').$new();\n        self.docinfo_processor_extensions = $hash2([], {});\n        standalone = options['$[]'](\"standalone\");\n        (self.options = options).$freeze();\n        attrs = self.attributes;\n        if (!$truthy(parent_doc)) {\n          \n          attrs['$[]='](\"attribute-undefined\", $$('Compliance').$attribute_undefined());\n          attrs['$[]='](\"attribute-missing\", $$('Compliance').$attribute_missing());\n          attrs.$update($$('DEFAULT_ATTRIBUTES'));\n        };\n        if ($truthy(standalone)) {\n          \n          attr_overrides['$[]='](\"embedded\", nil);\n          attrs['$[]='](\"copycss\", \"\");\n          attrs['$[]='](\"iconfont-remote\", \"\");\n          attrs['$[]='](\"stylesheet\", \"\");\n          attrs['$[]='](\"webfonts\", \"\");\n        } else {\n          \n          attr_overrides['$[]='](\"embedded\", \"\");\n          if (($truthy(attr_overrides['$key?'](\"showtitle\")) && ($eqeq(attr_overrides.$keys()['$&']([\"notitle\", \"showtitle\"])['$[]'](-1), \"showtitle\")))) {\n            attr_overrides['$[]='](\"notitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"showtitle\")))\n          } else if ($truthy(attr_overrides['$key?'](\"notitle\"))) {\n            attr_overrides['$[]='](\"showtitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"notitle\")))\n          } else {\n            attrs['$[]='](\"notitle\", \"\")\n          };\n        };\n        attr_overrides['$[]='](\"asciidoctor\", \"\");\n        attr_overrides['$[]='](\"asciidoctor-version\", $$$($$$('Asciidoctor'), 'VERSION'));\n        attr_overrides['$[]='](\"safe-mode-name\", (safe_mode_name = $$('SafeMode').$name_for_value(self.safe)));\n        attr_overrides['$[]='](\"safe-mode-\" + (safe_mode_name), \"\");\n        attr_overrides['$[]='](\"safe-mode-level\", self.safe);\n        if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"max-include-depth\")))) {\n          $ret_or_1\n        } else {\n          attr_overrides['$[]='](\"max-include-depth\", 64)\n        };\n        if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"allow-uri-read\")))) {\n          $ret_or_1\n        } else {\n          attr_overrides['$[]='](\"allow-uri-read\", nil)\n        };\n        if ($truthy(attr_overrides['$key?'](\"numbered\"))) {\n          attr_overrides['$[]='](\"sectnums\", attr_overrides.$delete(\"numbered\"))\n        };\n        if ($truthy(attr_overrides['$key?'](\"hardbreaks\"))) {\n          attr_overrides['$[]='](\"hardbreaks-option\", attr_overrides.$delete(\"hardbreaks\"))\n        };\n        if ($truthy((base_dir_val = options['$[]'](\"base_dir\")))) {\n          self.base_dir = ($c = [\"docdir\", $$$('File').$expand_path(base_dir_val)], $send(attr_overrides, '[]=', $c), $c[$c.length - 1])\n        } else if ($truthy(attr_overrides['$[]'](\"docdir\"))) {\n          self.base_dir = attr_overrides['$[]'](\"docdir\")\n        } else {\n          self.base_dir = ($c = [\"docdir\", $$$('Dir').$pwd()], $send(attr_overrides, '[]=', $c), $c[$c.length - 1])\n        };\n        if ($truthy((backend_val = options['$[]'](\"backend\")))) {\n          attr_overrides['$[]='](\"backend\", backend_val.$to_s())\n        };\n        if ($truthy((doctype_val = options['$[]'](\"doctype\")))) {\n          attr_overrides['$[]='](\"doctype\", doctype_val.$to_s())\n        };\n        if ($truthy($rb_ge(self.safe, $$$($$('SafeMode'), 'SERVER')))) {\n          \n          if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"copycss\")))) {\n            $ret_or_1\n          } else {\n            attr_overrides['$[]='](\"copycss\", nil)\n          };\n          if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"source-highlighter\")))) {\n            $ret_or_1\n          } else {\n            attr_overrides['$[]='](\"source-highlighter\", nil)\n          };\n          if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"backend\")))) {\n            $ret_or_1\n          } else {\n            attr_overrides['$[]='](\"backend\", $$('DEFAULT_BACKEND'))\n          };\n          if (($not(parent_doc) && ($truthy(attr_overrides['$key?'](\"docfile\"))))) {\n            attr_overrides['$[]='](\"docfile\", attr_overrides['$[]'](\"docfile\")['$[]'](Opal.Range.$new($rb_plus(attr_overrides['$[]'](\"docdir\").$length(), 1), -1, false)))\n          };\n          attr_overrides['$[]='](\"docdir\", \"\");\n          if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"user-home\")))) {\n            $ret_or_1\n          } else {\n            attr_overrides['$[]='](\"user-home\", \".\")\n          };\n          if ($truthy($rb_ge(self.safe, $$$($$('SafeMode'), 'SECURE')))) {\n            \n            if (!$truthy(attr_overrides['$key?'](\"max-attribute-value-size\"))) {\n              attr_overrides['$[]='](\"max-attribute-value-size\", 4096)\n            };\n            if (!$truthy(attr_overrides['$key?'](\"linkcss\"))) {\n              attr_overrides['$[]='](\"linkcss\", \"\")\n            };\n            if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"icons\")))) {\n              $ret_or_1\n            } else {\n              attr_overrides['$[]='](\"icons\", nil)\n            };\n          };\n        } else if ($truthy(($ret_or_1 = attr_overrides['$[]'](\"user-home\")))) {\n          $ret_or_1\n        } else {\n          attr_overrides['$[]='](\"user-home\", $$('USER_HOME'))\n        };\n        self.max_attribute_value_size = ($truthy((size = ($truthy(($ret_or_1 = attr_overrides['$[]'](\"max-attribute-value-size\"))) ? ($ret_or_1) : (($c = [\"max-attribute-value-size\", nil], $send(attr_overrides, '[]=', $c), $c[$c.length - 1]))))) ? (size.$to_i().$abs()) : (nil));\n        $send(attr_overrides, 'delete_if', [], function $$4(key, val){var $d, verdict = nil;\n\n          \n          if (key == null) key = nil;\n          if (val == null) val = nil;\n          if ($truthy(val)) {\n            \n            if (($eqeqeq($$$('String'), val) && ($truthy(val['$end_with?'](\"@\"))))) {\n              $d = [val.$chop(), true], (val = $d[0]), (verdict = $d[1]), $d\n            };\n            attrs['$[]='](key, val);\n          } else {\n            \n            attrs.$delete(key);\n            verdict = val['$=='](false);\n          };\n          return verdict;});\n        if ($truthy(parent_doc)) {\n          \n          self.backend = attrs['$[]'](\"backend\");\n          if (!$eqeq((self.doctype = ($c = [\"doctype\", parent_doctype], $send(attrs, '[]=', $c), $c[$c.length - 1])), $$('DEFAULT_DOCTYPE'))) {\n            self.$update_doctype_attributes($$('DEFAULT_DOCTYPE'))\n          };\n          self.reader = $$('Reader').$new(data, options['$[]'](\"cursor\"));\n          if ($truthy(self.sourcemap)) {\n            self.source_location = self.reader.$cursor()\n          };\n          $$('Parser').$parse(self.reader, self);\n          self.$restore_attributes();\n          return (self.parsed = true);\n        } else {\n          \n          self.backend = nil;\n          if ($eqeq((initial_backend = ($truthy(($ret_or_1 = attrs['$[]'](\"backend\"))) ? ($ret_or_1) : ($$('DEFAULT_BACKEND')))), \"manpage\")) {\n            self.doctype = ($c = [\"doctype\", ($d = [\"doctype\", \"manpage\"], $send(attr_overrides, '[]=', $d), $d[$d.length - 1])], $send(attrs, '[]=', $c), $c[$c.length - 1])\n          } else {\n            self.doctype = ($truthy(($ret_or_1 = attrs['$[]'](\"doctype\"))) ? ($ret_or_1) : (($c = [\"doctype\", $$('DEFAULT_DOCTYPE')], $send(attrs, '[]=', $c), $c[$c.length - 1])))\n          };\n          self.$update_backend_attributes(initial_backend, true);\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"stylesdir\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"stylesdir\", \".\")\n          };\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"iconsdir\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"iconsdir\", \"\" + (attrs.$fetch(\"imagesdir\", \"./images\")) + \"/icons\")\n          };\n          self.$fill_datetime_attributes(attrs, input_mtime);\n          if ($truthy(initialize_extensions)) {\n            if ($truthy((ext_registry = options['$[]'](\"extension_registry\")))) {\n              if (($eqeqeq($$$($$('Extensions'), 'Registry'), ext_registry) || (($truthy((($e = $$$('::', 'AsciidoctorJ', 'skip_raise')) && ($d = $$$($e, 'Extensions', 'skip_raise')) && ($c = $$$($d, 'ExtensionRegistry', 'skip_raise')) ? 'constant' : nil)) && ($eqeqeq($$$($$$($$$('AsciidoctorJ'), 'Extensions'), 'ExtensionRegistry'), ext_registry)))))) {\n                self.extensions = ext_registry.$activate(self)\n              }\n            } else if ($truthy((ext_block = options['$[]'](\"extensions\"))['$nil?']())) {\n              if (!$truthy($$('Extensions').$groups()['$empty?']())) {\n                self.extensions = $$$($$('Extensions'), 'Registry').$new().$activate(self)\n              }\n            } else if ($eqeqeq($$$('Proc'), ext_block)) {\n              self.extensions = $send($$('Extensions'), 'create', [], ext_block.$to_proc()).$activate(self)\n            }\n          };\n          self.reader = $$('PreprocessorReader').$new(self, data, $$$($$('Reader'), 'Cursor').$new(attrs['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n          if ($truthy(self.sourcemap)) {\n            return (self.source_location = self.reader.$cursor())\n          } else {\n            return nil\n          };\n        };\n      }, -1);\n      \n      $def(self, '$parse', function $$parse(data) {\n        var self = this, doc = nil, exts = nil;\n\n        \n        if (data == null) data = nil;\n        if ($truthy(self.parsed)) {\n          return self\n        } else {\n          \n          doc = self;\n          if ($truthy(data)) {\n            \n            self.reader = $$('PreprocessorReader').$new(doc, data, $$$($$('Reader'), 'Cursor').$new(self.attributes['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n            if ($truthy(self.sourcemap)) {\n              self.source_location = self.reader.$cursor()\n            };\n          };\n          if (($truthy((exts = ($truthy(self.parent_document) ? (nil) : (self.extensions)))) && ($truthy(exts['$preprocessors?']())))) {\n            $send(exts.$preprocessors(), 'each', [], function $$5(ext){var self = $$5.$$s == null ? this : $$5.$$s, $ret_or_1 = nil;\n              if (self.reader == null) self.reader = nil;\n\n              \n              if (ext == null) ext = nil;\n              return (self.reader = ($truthy(($ret_or_1 = ext.$process_method()['$[]'](doc, self.reader))) ? ($ret_or_1) : (self.reader)));}, {$$s: self})\n          };\n          $$('Parser').$parse(self.reader, doc, $hash2([\"header_only\"], {\"header_only\": self.options['$[]'](\"parse_header_only\")}));\n          self.$restore_attributes();\n          if (($truthy(exts) && ($truthy(exts['$tree_processors?']())))) {\n            $send(exts.$tree_processors(), 'each', [], function $$6(ext){var result = nil;\n\n              \n              if (ext == null) ext = nil;\n              if ((($truthy((result = ext.$process_method()['$[]'](doc))) && ($eqeqeq($$('Document'), result))) && ($neqeq(result, doc)))) {\n                return (doc = result)\n              } else {\n                return nil\n              };})\n          };\n          self.parsed = true;\n          return doc;\n        };\n      }, -1);\n      \n      $def(self, '$parsed?', $return_ivar(\"parsed\"));\n      \n      $def(self, '$counter', function $$counter(name, seed) {\n        var $a, self = this, curr_val = nil, locked = nil, next_val = nil;\n\n        \n        if (seed == null) seed = nil;\n        if ($truthy(self.parent_document)) {\n          return self.parent_document.$counter(name, seed)\n        };\n        if ((($truthy((locked = self['$attribute_locked?'](name))) && ($truthy((curr_val = self.counters['$[]'](name))))) || ($not((curr_val = self.attributes['$[]'](name))['$nil_or_empty?']())))) {\n          next_val = ($a = [name, $$('Helpers').$nextval(curr_val)], $send(self.counters, '[]=', $a), $a[$a.length - 1])\n        } else if ($truthy(seed)) {\n          next_val = ($a = [name, ($eqeq(seed, seed.$to_i().$to_s()) ? (seed.$to_i()) : (seed))], $send(self.counters, '[]=', $a), $a[$a.length - 1])\n        } else {\n          next_val = ($a = [name, 1], $send(self.counters, '[]=', $a), $a[$a.length - 1])\n        };\n        if (!$truthy(locked)) {\n          self.attributes['$[]='](name, next_val)\n        };\n        return next_val;\n      }, -2);\n      \n      $def(self, '$increment_and_store_counter', function $$increment_and_store_counter(counter_name, block) {\n        var self = this;\n\n        return $$('AttributeEntry').$new(counter_name, self.$counter(counter_name)).$save_to(block.$attributes()).$value()\n      });\n      $alias(self, \"counter_increment\", \"increment_and_store_counter\");\n      \n      $def(self, '$register', function $$register(type, value) {\n        var self = this, id = nil, $logical_op_recvr_tmp_1 = nil, $ret_or_2 = nil, ref = nil;\n\n        \n        switch (type) {\n          case \"ids\":\n            return self.$register(\"refs\", [(id = value['$[]'](0)), $$('Inline').$new(self, \"anchor\", value['$[]'](1), $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))])\n          case \"refs\":\n            \n            \n            $logical_op_recvr_tmp_1 = self.catalog['$[]'](\"refs\");\n            if ($truthy(($ret_or_2 = $logical_op_recvr_tmp_1['$[]'](value['$[]'](0))))) {\n              $ret_or_2\n            } else {\n              $logical_op_recvr_tmp_1['$[]='](value['$[]'](0), (ref = value['$[]'](1)))\n            };;\n            return ref;\n          case \"footnotes\":\n            return self.catalog['$[]'](type)['$<<'](value)\n          default:\n            if ($truthy(self.options['$[]'](\"catalog_assets\"))) {\n              return self.catalog['$[]'](type)['$<<'](($eqeq(type, \"images\") ? ($$('ImageReference').$new(value, self.attributes['$[]'](\"imagesdir\"))) : (value)))\n            } else {\n              return nil\n            }\n        }\n      });\n      \n      $def(self, '$resolve_id', function $$resolve_id(text) {\n        var self = this, resolved_id = nil, accum = nil;\n\n        if ($truthy(self.reftexts)) {\n          return self.reftexts['$[]'](text)\n        } else if ($truthy(self.parsed)) {\n          return $send((self.reftexts = $hash2([], {})), 'tap', [], function $$7(accum){var self = $$7.$$s == null ? this : $$7.$$s;\n            if (self.catalog == null) self.catalog = nil;\n\n            \n            if (accum == null) accum = nil;\n            return $send(self.catalog['$[]'](\"refs\"), 'each', [], function $$8(id, ref){var $a, $ret_or_1 = nil;\n\n              \n              if (id == null) id = nil;\n              if (ref == null) ref = nil;\n              if ($truthy(($ret_or_1 = accum['$[]'](ref.$xreftext())))) {\n                return $ret_or_1\n              } else {\n                return ($a = [ref.$xreftext(), id], $send(accum, '[]=', $a), $a[$a.length - 1])\n              };});}, {$$s: self})['$[]'](text)\n        } else {\n          \n          resolved_id = nil;\n          self.reftexts = (accum = $hash2([], {}));\n          (function(){try { var $t_break = $thrower('break'); return $send(self.catalog['$[]'](\"refs\"), 'each', [], function $$9(id, ref){var $a, xreftext = nil, $ret_or_1 = nil;\n\n            \n            if (id == null) id = nil;\n            if (ref == null) ref = nil;\n            if ($eqeq((xreftext = ref.$xreftext()), text)) {\n              \n              resolved_id = id;\n              $t_break.$throw();\n            };\n            if ($truthy(($ret_or_1 = accum['$[]'](xreftext)))) {\n              return $ret_or_1\n            } else {\n              return ($a = [xreftext, id], $send(accum, '[]=', $a), $a[$a.length - 1])\n            };})} catch($e) {\n            if ($e === $t_break) return $e.$v;\n            throw $e;\n          }})();\n          self.reftexts = nil;\n          return resolved_id;\n        }\n      });\n      \n      $def(self, '$sections?', function $Document_sections$ques$10() {\n        var self = this;\n\n        return $rb_gt(self.next_section_index, 0)\n      });\n      \n      $def(self, '$footnotes?', function $Document_footnotes$ques$11() {\n        var self = this;\n\n        if ($truthy(self.catalog['$[]'](\"footnotes\")['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      });\n      \n      $def(self, '$footnotes', function $$footnotes() {\n        var self = this;\n\n        return self.catalog['$[]'](\"footnotes\")\n      });\n      \n      $def(self, '$callouts', function $$callouts() {\n        var self = this;\n\n        return self.catalog['$[]'](\"callouts\")\n      });\n      \n      $def(self, '$nested?', function $Document_nested$ques$12() {\n        var self = this;\n\n        if ($truthy(self.parent_document)) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$embedded?', function $Document_embedded$ques$13() {\n        var self = this;\n\n        return self.attributes['$key?'](\"embedded\")\n      });\n      \n      $def(self, '$extensions?', function $Document_extensions$ques$14() {\n        var self = this;\n\n        if ($truthy(self.extensions)) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$source', function $$source() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source()\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$source_lines', function $$source_lines() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source_lines()\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$basebackend?', function $Document_basebackend$ques$15(base) {\n        var self = this;\n\n        return self.attributes['$[]'](\"basebackend\")['$=='](base)\n      });\n      \n      $def(self, '$title', function $$title() {\n        var self = this;\n\n        return self.$doctitle()\n      });\n      \n      $def(self, '$title=', function $Document_title$eq$16(title) {\n        var $a, self = this, sect = nil;\n\n        \n        if (!$truthy((sect = self.header))) {\n          (sect = (self.header = $$('Section').$new(self, 0)))['$sectname='](\"header\")\n        };\n        return ($a = [title], $send(sect, 'title=', $a), $a[$a.length - 1]);\n      });\n      \n      $def(self, '$doctitle', function $$doctitle(opts) {\n        var self = this, val = nil, sect = nil, $ret_or_1 = nil, separator = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        if (!$truthy((val = self.attributes['$[]'](\"title\")))) {\n          if ($truthy((sect = self.$first_section()))) {\n            val = sect.$title()\n          } else if ($not(($truthy(($ret_or_1 = opts['$[]'](\"use_fallback\"))) ? ((val = self.attributes['$[]'](\"untitled-label\"))) : ($ret_or_1)))) {\n            return nil\n          }\n        };\n        if ($truthy((separator = opts['$[]'](\"partition\")))) {\n          return $$('Title').$new(val, opts.$merge($hash2([\"separator\"], {\"separator\": ($eqeq(separator, true) ? (self.attributes['$[]'](\"title-separator\")) : (separator))})))\n        } else if (($truthy(opts['$[]'](\"sanitize\")) && ($truthy(val['$include?'](\"<\"))))) {\n          return val.$gsub($$('XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()\n        } else {\n          return val\n        };\n      }, -1);\n      $alias(self, \"name\", \"doctitle\");\n      \n      $def(self, '$xreftext', function $$xreftext(xrefstyle) {\n        var self = this, val = nil;\n\n        \n        if (xrefstyle == null) xrefstyle = nil;\n        if (($truthy((val = self.$reftext())) && ($not(val['$empty?']())))) {\n          return val\n        } else {\n          return self.$title()\n        };\n      }, -1);\n      \n      $def(self, '$author', function $$author() {\n        var self = this;\n\n        return self.attributes['$[]'](\"author\")\n      });\n      \n      $def(self, '$authors', function $$authors() {\n        var self = this, attrs = nil, authors = nil, num_authors = nil, $ret_or_1 = nil, idx = nil;\n\n        if ($truthy((attrs = self.attributes)['$key?'](\"author\"))) {\n          \n          authors = [$$('Author').$new(attrs['$[]'](\"author\"), attrs['$[]'](\"firstname\"), attrs['$[]'](\"middlename\"), attrs['$[]'](\"lastname\"), attrs['$[]'](\"authorinitials\"), attrs['$[]'](\"email\"))];\n          if ($truthy($rb_gt((num_authors = ($truthy(($ret_or_1 = attrs['$[]'](\"authorcount\"))) ? ($ret_or_1) : (0))), 1))) {\n            \n            idx = 1;\n            while ($truthy($rb_lt(idx, num_authors))) {\n            \n              idx = $rb_plus(idx, 1);\n              authors['$<<']($$('Author').$new(attrs['$[]'](\"author_\" + (idx)), attrs['$[]'](\"firstname_\" + (idx)), attrs['$[]'](\"middlename_\" + (idx)), attrs['$[]'](\"lastname_\" + (idx)), attrs['$[]'](\"authorinitials_\" + (idx)), attrs['$[]'](\"email_\" + (idx))));\n            };\n          };\n          return authors;\n        } else {\n          return []\n        }\n      });\n      \n      $def(self, '$revdate', function $$revdate() {\n        var self = this;\n\n        return self.attributes['$[]'](\"revdate\")\n      });\n      \n      $def(self, '$notitle', function $$notitle() {\n        var self = this;\n\n        return self.attributes['$key?'](\"notitle\")\n      });\n      \n      $def(self, '$noheader', function $$noheader() {\n        var self = this;\n\n        return self.attributes['$key?'](\"noheader\")\n      });\n      \n      $def(self, '$nofooter', function $$nofooter() {\n        var self = this;\n\n        return self.attributes['$key?'](\"nofooter\")\n      });\n      \n      $def(self, '$first_section', function $$first_section() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.header))) {\n          return $ret_or_1\n        } else {\n          return $send(self.blocks, 'find', [], function $$17(e){\n            \n            if (e == null) e = nil;\n            return e.$context()['$=='](\"section\");})\n        }\n      });\n      \n      $def(self, '$header?', function $Document_header$ques$18() {\n        var self = this;\n\n        if ($truthy(self.header)) {\n          return true\n        } else {\n          return false\n        }\n      });\n      $alias(self, \"has_header?\", \"header?\");\n      \n      $def(self, '$<<', function $Document_$lt$lt$19(block) {\n        var $yield = $Document_$lt$lt$19.$$p || nil, self = this;\n\n        $Document_$lt$lt$19.$$p = null;\n        \n        if ($eqeq(block.$context(), \"section\")) {\n          self.$assign_numeral(block)\n        };\n        return $send2(self, $find_super(self, '<<', $Document_$lt$lt$19, false, true), '<<', [block], $yield);\n      });\n      \n      $def(self, '$finalize_header', function $$finalize_header(unrooted_attributes, header_valid) {\n        var self = this;\n\n        \n        if (header_valid == null) header_valid = true;\n        self.$clear_playback_attributes(unrooted_attributes);\n        self.$save_attributes();\n        if (!$truthy(header_valid)) {\n          unrooted_attributes['$[]='](\"invalid-header\", true)\n        };\n        return unrooted_attributes;\n      }, -2);\n      \n      $def(self, '$playback_attributes', function $$playback_attributes(block_attributes) {\n        var self = this;\n\n        if ($truthy(block_attributes['$key?'](\"attribute_entries\"))) {\n          return $send(block_attributes['$[]'](\"attribute_entries\"), 'each', [], function $$20(entry){var self = $$20.$$s == null ? this : $$20.$$s, name = nil;\n            if (self.attributes == null) self.attributes = nil;\n\n            \n            if (entry == null) entry = nil;\n            name = entry.$name();\n            if ($truthy(entry.$negate())) {\n              \n              self.attributes.$delete(name);\n              if ($eqeq(name, \"compat-mode\")) {\n                return (self.compat_mode = false)\n              } else {\n                return nil\n              };\n            } else {\n              \n              self.attributes['$[]='](name, entry.$value());\n              if ($eqeq(name, \"compat-mode\")) {\n                return (self.compat_mode = true)\n              } else {\n                return nil\n              };\n            };}, {$$s: self})\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$restore_attributes', function $$restore_attributes() {\n        var self = this;\n\n        \n        if (!$truthy(self.parent_document)) {\n          self.catalog['$[]'](\"callouts\").$rewind()\n        };\n        return self.attributes.$replace(self.header_attributes);\n      });\n      \n      $def(self, '$set_attribute', function $$set_attribute(name, value) {\n        var self = this, $ret_or_2 = nil;\n\n        \n        if (value == null) value = \"\";\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return nil\n        } else {\n          \n          if (!$truthy(value['$empty?']())) {\n            value = self.$apply_attribute_value_subs(value)\n          };\n          if ($truthy(self.header_attributes)) {\n            self.attributes['$[]='](name, value)\n          } else {\n            \n            \n            switch (name) {\n              case \"backend\":\n                self.$update_backend_attributes(value, ($truthy(($ret_or_2 = self.attributes_modified['$delete?'](\"htmlsyntax\"))) ? (value['$=='](self.backend)) : ($ret_or_2)))\n                break;\n              case \"doctype\":\n                self.$update_doctype_attributes(value)\n                break;\n              default:\n                self.attributes['$[]='](name, value)\n            };\n            self.attributes_modified['$<<'](name);\n          };\n          return value;\n        };\n      }, -2);\n      \n      $def(self, '$delete_attribute', function $$delete_attribute(name) {\n        var self = this;\n\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return false\n        } else {\n          \n          self.attributes.$delete(name);\n          self.attributes_modified['$<<'](name);\n          return true;\n        }\n      });\n      \n      $def(self, '$attribute_locked?', function $Document_attribute_locked$ques$21(name) {\n        var self = this;\n\n        return self.attribute_overrides['$key?'](name)\n      });\n      \n      $def(self, '$set_header_attribute', function $$set_header_attribute(name, value, overwrite) {\n        var self = this, attrs = nil, $ret_or_1 = nil;\n\n        \n        if (value == null) value = \"\";\n        if (overwrite == null) overwrite = true;\n        attrs = ($truthy(($ret_or_1 = self.header_attributes)) ? ($ret_or_1) : (self.attributes));\n        if (($eqeq(overwrite, false) && ($truthy(attrs['$key?'](name))))) {\n          return false\n        } else {\n          \n          attrs['$[]='](name, value);\n          return true;\n        };\n      }, -2);\n      \n      $def(self, '$convert', function $$convert(opts) {\n        var $a, self = this, block = nil, $ret_or_1 = nil, output = nil, transform = nil, exts = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        if ($truthy(self.timings)) {\n          self.timings.$start(\"convert\")\n        };\n        if (!$truthy(self.parsed)) {\n          self.$parse()\n        };\n        if (!($truthy($rb_ge(self.safe, $$$($$('SafeMode'), 'SERVER'))) || ($truthy(opts['$empty?']())))) {\n          \n          if (!$truthy(($a = [\"outfile\", opts['$[]'](\"outfile\")], $send(self.attributes, '[]=', $a), $a[$a.length - 1]))) {\n            self.attributes.$delete(\"outfile\")\n          };\n          if (!$truthy(($a = [\"outdir\", opts['$[]'](\"outdir\")], $send(self.attributes, '[]=', $a), $a[$a.length - 1]))) {\n            self.attributes.$delete(\"outdir\")\n          };\n        };\n        if ($eqeq(self.$doctype(), \"inline\")) {\n          if ($truthy((block = ($truthy(($ret_or_1 = self.blocks['$[]'](0))) ? ($ret_or_1) : (self.header))))) {\n            if (($eqeq(block.$content_model(), \"compound\") || ($eqeq(block.$content_model(), \"empty\")))) {\n              self.$logger().$warn(\"no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block\")\n            } else {\n              output = block.$content()\n            }\n          }\n        } else {\n          \n          if ($truthy(opts['$key?'](\"standalone\"))) {\n            transform = ($truthy(opts['$[]'](\"standalone\")) ? (\"document\") : (\"embedded\"))\n          } else if ($truthy(opts['$key?'](\"header_footer\"))) {\n            transform = ($truthy(opts['$[]'](\"header_footer\")) ? (\"document\") : (\"embedded\"))\n          } else {\n            transform = ($truthy(self.options['$[]'](\"standalone\")) ? (\"document\") : (\"embedded\"))\n          };\n          output = self.converter.$convert(self, transform);\n        };\n        if (!$truthy(self.parent_document)) {\n          if (($truthy((exts = self.extensions)) && ($truthy(exts['$postprocessors?']())))) {\n            $send(exts.$postprocessors(), 'each', [], function $$22(ext){var self = $$22.$$s == null ? this : $$22.$$s;\n\n              \n              if (ext == null) ext = nil;\n              return (output = ext.$process_method()['$[]'](self, output));}, {$$s: self})\n          }\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"convert\")\n        };\n        return output;\n      }, -1);\n      $alias(self, \"render\", \"convert\");\n      \n      $def(self, '$write', function $$write(output, target) {\n        var self = this;\n\n        \n        if ($truthy(self.timings)) {\n          self.timings.$start(\"write\")\n        };\n        if ($eqeqeq($$('Writer'), self.converter)) {\n          self.converter.$write(output, target)\n        } else {\n          \n          if ($truthy(target['$respond_to?'](\"write\"))) {\n            if (!$truthy(output['$nil_or_empty?']())) {\n              \n              target.$write(output.$chomp());\n              target.$write($$('LF'));\n            }\n          } else {\n            $$$('File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}))\n          };\n          if ((($eqeq(self.backend, \"manpage\") && ($eqeqeq($$$('String'), target))) && ($truthy(self.converter.$class()['$respond_to?'](\"write_alternate_pages\"))))) {\n            self.converter.$class().$write_alternate_pages(self.attributes['$[]'](\"mannames\"), self.attributes['$[]'](\"manvolnum\"), target)\n          };\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"write\")\n        };\n        return nil;\n      });\n      \n      $def(self, '$content', function $$content() {\n        var $yield = $$content.$$p || nil, self = this;\n\n        $$content.$$p = null;\n        \n        self.attributes.$delete(\"title\");\n        return $send2(self, $find_super(self, 'content', $$content, false, true), 'content', [], $yield);\n      });\n      \n      $def(self, '$docinfo', function $$docinfo(location, suffix) {\n        var $a, self = this, qualifier = nil, $ret_or_1 = nil, docinfo = nil, content = nil, docinfo_file = nil, docinfo_dir = nil, docinfo_subs = nil, docinfo_path = nil, shared_docinfo = nil, private_docinfo = nil;\n\n        \n        if (location == null) location = \"head\";\n        if (suffix == null) suffix = nil;\n        if ($truthy($rb_lt(self.$safe(), $$$($$('SafeMode'), 'SECURE')))) {\n          \n          if (!$eqeq(location, \"head\")) {\n            qualifier = \"-\" + (location)\n          };\n          suffix = ($truthy(($ret_or_1 = suffix)) ? ($ret_or_1) : (self.outfilesuffix));\n          if ($truthy((docinfo = self.attributes['$[]'](\"docinfo\"))['$nil_or_empty?']())) {\n            if ($truthy(self.attributes['$key?'](\"docinfo2\"))) {\n              docinfo = [\"private\", \"shared\"]\n            } else if ($truthy(self.attributes['$key?'](\"docinfo1\"))) {\n              docinfo = [\"shared\"]\n            } else {\n              docinfo = ($truthy(docinfo) ? ([\"private\"]) : (nil))\n            }\n          } else {\n            docinfo = $send(docinfo.$split(\",\"), 'map', [], function $$23(it){\n              \n              if (it == null) it = nil;\n              return it.$strip();})\n          };\n          if ($truthy(docinfo)) {\n            \n            content = [];\n            $a = [\"docinfo\" + (qualifier) + (suffix), self.attributes['$[]'](\"docinfodir\"), self.$resolve_docinfo_subs()], (docinfo_file = $a[0]), (docinfo_dir = $a[1]), (docinfo_subs = $a[2]), $a;\n            if (!$truthy(docinfo['$&']([\"shared\", \"shared-\" + (location)])['$empty?']())) {\n              \n              docinfo_path = self.$normalize_system_path(docinfo_file, docinfo_dir);\n              if ($truthy((shared_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(shared_docinfo, docinfo_subs))\n              };\n            };\n            if (!($truthy(self.attributes['$[]'](\"docname\")['$nil_or_empty?']()) || ($truthy(docinfo['$&']([\"private\", \"private-\" + (location)])['$empty?']())))) {\n              \n              docinfo_path = self.$normalize_system_path(\"\" + (self.attributes['$[]'](\"docname\")) + \"-\" + (docinfo_file), docinfo_dir);\n              if ($truthy((private_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(private_docinfo, docinfo_subs))\n              };\n            };\n          };\n        };\n        if (($truthy(self.extensions) && ($truthy(self['$docinfo_processors?'](location))))) {\n          return ($truthy(($ret_or_1 = content)) ? ($ret_or_1) : ([])).$concat($send(self.docinfo_processor_extensions['$[]'](location), 'map', [], function $$24(ext){var self = $$24.$$s == null ? this : $$24.$$s;\n\n            \n            if (ext == null) ext = nil;\n            return ext.$process_method()['$[]'](self);}, {$$s: self}).$compact()).$join($$('LF'))\n        } else if ($truthy(content)) {\n          return content.$join($$('LF'))\n        } else {\n          return \"\"\n        };\n      }, -1);\n      \n      $def(self, '$docinfo_processors?', function $Document_docinfo_processors$ques$25(location) {\n        var $a, self = this;\n\n        \n        if (location == null) location = \"head\";\n        if ($truthy(self.docinfo_processor_extensions['$key?'](location))) {\n          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)\n        } else if (($truthy(self.extensions) && ($truthy(self.document.$extensions()['$docinfo_processors?'](location))))) {\n          return ($a = [location, self.document.$extensions().$docinfo_processors(location)], $send(self.docinfo_processor_extensions, '[]=', $a), $a[$a.length - 1])['$!']()['$!']()\n        } else {\n          return ($a = [location, false], $send(self.docinfo_processor_extensions, '[]=', $a), $a[$a.length - 1])\n        };\n      }, -1);\n      \n      $def(self, '$to_s', function $$to_s() {\n        var self = this, $ret_or_1 = nil;\n\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {doctype: \" + (self.$doctype().$inspect()) + \", doctitle: \" + (($truthy(($ret_or_1 = self.header)) ? (self.header.$title()) : ($ret_or_1)).$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\"\n      });\n      self.$private();\n      \n      $def(self, '$apply_attribute_value_subs', function $$apply_attribute_value_subs(value) {\n        var $a, self = this;\n\n        \n        if ($truthy($$('AttributeEntryPassMacroRx')['$=~'](value))) {\n          \n          value = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n            value = self.$apply_subs(value, self.$resolve_pass_subs((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))\n          };\n        } else {\n          value = self.$apply_header_subs(value)\n        };\n        if ($truthy(self.max_attribute_value_size)) {\n          \n          return self.$limit_bytesize(value, self.max_attribute_value_size);\n        } else {\n          return value\n        };\n      });\n      \n      $def(self, '$limit_bytesize', function $$limit_bytesize(str, max) {\n        \n        \n        if ($truthy($rb_gt(str.$bytesize(), max))) {\n          while (!($truthy((str = str.$byteslice(0, max))['$valid_encoding?']()))) {\n          max = $rb_minus(max, 1)\n          }\n        };\n        return str;\n      });\n      \n      $def(self, '$resolve_docinfo_subs', function $$resolve_docinfo_subs() {\n        var self = this;\n\n        if ($truthy(self.attributes['$key?'](\"docinfosubs\"))) {\n          \n          return self.$resolve_subs(self.attributes['$[]'](\"docinfosubs\"), \"block\", nil, \"docinfo\");\n        } else {\n          return [\"attributes\"]\n        }\n      });\n      \n      $def(self, '$create_converter', function $$create_converter(backend, delegate_backend) {\n        var self = this, converter_opts = nil, template_dirs = nil, $ret_or_1 = nil, opts = nil, converter = nil;\n\n        \n        converter_opts = $hash2([\"document\", \"htmlsyntax\"], {\"document\": self, \"htmlsyntax\": self.attributes['$[]'](\"htmlsyntax\")});\n        if ($truthy((template_dirs = ($truthy(($ret_or_1 = (opts = self.options)['$[]'](\"template_dirs\"))) ? ($ret_or_1) : (opts['$[]'](\"template_dir\")))))) {\n          \n          converter_opts['$[]='](\"template_dirs\", [].concat($to_a(template_dirs)));\n          converter_opts['$[]='](\"template_cache\", opts.$fetch(\"template_cache\", true));\n          converter_opts['$[]='](\"template_engine\", opts['$[]'](\"template_engine\"));\n          converter_opts['$[]='](\"template_engine_options\", opts['$[]'](\"template_engine_options\"));\n          converter_opts['$[]='](\"eruby\", opts['$[]'](\"eruby\"));\n          converter_opts['$[]='](\"safe\", self.safe);\n          if ($truthy(delegate_backend)) {\n            converter_opts['$[]='](\"delegate_backend\", delegate_backend)\n          };\n        };\n        if ($truthy((converter = opts['$[]'](\"converter\")))) {\n          return $$$($$('Converter'), 'CustomFactory').$new($hash(backend, converter)).$create(backend, converter_opts)\n        } else {\n          return opts.$fetch(\"converter_factory\", $$('Converter')).$create(backend, converter_opts)\n        };\n      });\n      \n      $def(self, '$clear_playback_attributes', function $$clear_playback_attributes(attributes) {\n        \n        return attributes.$delete(\"attribute_entries\")\n      });\n      \n      $def(self, '$save_attributes', function $$save_attributes() {\n        var self = this, doctitle_val = nil, attrs = nil, $ret_or_1 = nil, toc_val = nil, toc_position_val = nil, toc_placement_val = nil, default_toc_position = nil, default_toc_class = nil, position = nil, icons_val = nil, basebackend = nil, syntax_hl_name = nil, syntax_hl_factory = nil, syntax_hls = nil;\n\n        \n        if (!($truthy((attrs = self.attributes)['$key?'](\"doctitle\")) || ($not((doctitle_val = self.$doctitle()))))) {\n          attrs['$[]='](\"doctitle\", doctitle_val)\n        };\n        self.id = ($truthy(($ret_or_1 = self.id)) ? ($ret_or_1) : (attrs['$[]'](\"css-signature\")));\n        if ($truthy((toc_val = ($truthy(attrs.$delete(\"toc2\")) ? (\"left\") : (attrs['$[]'](\"toc\")))))) {\n          \n          toc_position_val = (($truthy((toc_placement_val = attrs.$fetch(\"toc-placement\", \"macro\"))) && ($neqeq(toc_placement_val, \"auto\"))) ? (toc_placement_val) : (attrs['$[]'](\"toc-position\")));\n          if (!($truthy(toc_val['$empty?']()) && ($truthy(toc_position_val['$nil_or_empty?']())))) {\n            \n            default_toc_position = \"left\";\n            default_toc_class = \"toc2\";\n            position = ($truthy(toc_position_val['$nil_or_empty?']()) ? (($truthy(toc_val['$empty?']()) ? (default_toc_position) : (toc_val))) : (toc_position_val));\n            attrs['$[]='](\"toc\", \"\");\n            attrs['$[]='](\"toc-placement\", \"auto\");\n            \n            switch (position) {\n              case \"left\":\n              case \"<\":\n              case \"&lt;\":\n                attrs['$[]='](\"toc-position\", \"left\")\n                break;\n              case \"right\":\n              case \">\":\n              case \"&gt;\":\n                attrs['$[]='](\"toc-position\", \"right\")\n                break;\n              case \"top\":\n              case \"^\":\n                attrs['$[]='](\"toc-position\", \"top\")\n                break;\n              case \"bottom\":\n              case \"v\":\n                attrs['$[]='](\"toc-position\", \"bottom\")\n                break;\n              case \"preamble\":\n              case \"macro\":\n                \n                attrs['$[]='](\"toc-position\", \"content\");\n                attrs['$[]='](\"toc-placement\", position);\n                default_toc_class = nil;\n                break;\n              default:\n                \n                attrs.$delete(\"toc-position\");\n                default_toc_class = nil;\n            };\n            if ($truthy(default_toc_class)) {\n              if ($truthy(($ret_or_1 = attrs['$[]'](\"toc-class\")))) {\n                $ret_or_1\n              } else {\n                attrs['$[]='](\"toc-class\", default_toc_class)\n              }\n            };\n          };\n        };\n        if (($truthy((icons_val = attrs['$[]'](\"icons\"))) && ($not(attrs['$key?'](\"icontype\"))))) {\n          \n          switch (icons_val) {\n            case \"\":\n            case \"font\":\n              \n              break;\n            default:\n              \n              attrs['$[]='](\"icons\", \"\");\n              if (!$eqeq(icons_val, \"image\")) {\n                attrs['$[]='](\"icontype\", icons_val)\n              };\n          }\n        };\n        if (($truthy((self.compat_mode = attrs['$key?'](\"compat-mode\"))) && ($truthy(attrs['$key?'](\"language\"))))) {\n          attrs['$[]='](\"source-language\", attrs['$[]'](\"language\"))\n        };\n        if (!$truthy(self.parent_document)) {\n          \n          if ($eqeq((basebackend = attrs['$[]'](\"basebackend\")), \"html\")) {\n            if (($truthy((syntax_hl_name = attrs['$[]'](\"source-highlighter\"))) && ($not(attrs['$[]'](\"\" + (syntax_hl_name) + \"-unavailable\"))))) {\n              if ($truthy((syntax_hl_factory = self.options['$[]'](\"syntax_highlighter_factory\")))) {\n                self.syntax_highlighter = syntax_hl_factory.$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else if ($truthy((syntax_hls = self.options['$[]'](\"syntax_highlighters\")))) {\n                self.syntax_highlighter = $$$($$('SyntaxHighlighter'), 'DefaultFactoryProxy').$new(syntax_hls).$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else {\n                self.syntax_highlighter = $$('SyntaxHighlighter').$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              }\n            }\n          } else if ($eqeq(basebackend, \"docbook\")) {\n            \n            if (!($truthy(self['$attribute_locked?'](\"toc\")) || ($truthy(self.attributes_modified['$include?'](\"toc\"))))) {\n              attrs['$[]='](\"toc\", \"\")\n            };\n            if (!($truthy(self['$attribute_locked?'](\"sectnums\")) || ($truthy(self.attributes_modified['$include?'](\"sectnums\"))))) {\n              attrs['$[]='](\"sectnums\", \"\")\n            };\n          };\n          self.outfilesuffix = attrs['$[]'](\"outfilesuffix\");\n          $send($$('FLEXIBLE_ATTRIBUTES'), 'each', [], function $$26(name){var self = $$26.$$s == null ? this : $$26.$$s;\n            if (self.attribute_overrides == null) self.attribute_overrides = nil;\n\n            \n            if (name == null) name = nil;\n            if (($truthy(self.attribute_overrides['$key?'](name)) && ($truthy(self.attribute_overrides['$[]'](name))))) {\n              return self.attribute_overrides.$delete(name)\n            } else {\n              return nil\n            };}, {$$s: self});\n        };\n        return (self.header_attributes = attrs.$merge());\n      });\n      \n      $def(self, '$fill_datetime_attributes', function $$fill_datetime_attributes(attrs, input_mtime) {\n        var $a, self = this, now = nil, source_date_epoch = nil, localdate = nil, $ret_or_1 = nil, localtime = nil, $ret_or_2 = nil, docdate = nil, doctime = nil;\n\n        \n        now = ($truthy($$$('ENV')['$key?'](\"SOURCE_DATE_EPOCH\")) ? ((source_date_epoch = $$$('Time').$at(self.$Integer($$$('ENV')['$[]'](\"SOURCE_DATE_EPOCH\"))).$utc())) : ($$$('Time').$now()));\n        if ($truthy((localdate = attrs['$[]'](\"localdate\")))) {\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"localyear\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"localyear\", ($eqeq(localdate.$index(\"-\"), 4) ? (localdate.$slice(0, 4)) : (nil)))\n          }\n        } else {\n          \n          localdate = ($a = [\"localdate\", now.$strftime(\"%F\")], $send(attrs, '[]=', $a), $a[$a.length - 1]);\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"localyear\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"localyear\", now.$year().$to_s())\n          };\n        };\n        localtime = ($truthy(($ret_or_1 = attrs['$[]'](\"localtime\"))) ? ($ret_or_1) : (($a = [\"localtime\", now.$strftime(\"%T \" + (($eqeq(now.$utc_offset(), 0) ? (\"UTC\") : (\"%z\"))))], $send(attrs, '[]=', $a), $a[$a.length - 1])));\n        if ($truthy(($ret_or_1 = attrs['$[]'](\"localdatetime\")))) {\n          $ret_or_1\n        } else {\n          attrs['$[]='](\"localdatetime\", \"\" + (localdate) + \" \" + (localtime))\n        };\n        input_mtime = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = source_date_epoch)) ? ($ret_or_2) : (input_mtime)))) ? ($ret_or_1) : (now));\n        if ($truthy((docdate = attrs['$[]'](\"docdate\")))) {\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"docyear\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"docyear\", ($eqeq(docdate.$index(\"-\"), 4) ? (docdate.$slice(0, 4)) : (nil)))\n          }\n        } else {\n          \n          docdate = ($a = [\"docdate\", input_mtime.$strftime(\"%F\")], $send(attrs, '[]=', $a), $a[$a.length - 1]);\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"docyear\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"docyear\", input_mtime.$year().$to_s())\n          };\n        };\n        doctime = ($truthy(($ret_or_1 = attrs['$[]'](\"doctime\"))) ? ($ret_or_1) : (($a = [\"doctime\", input_mtime.$strftime(\"%T \" + (($eqeq(input_mtime.$utc_offset(), 0) ? (\"UTC\") : (\"%z\"))))], $send(attrs, '[]=', $a), $a[$a.length - 1])));\n        if ($truthy(($ret_or_1 = attrs['$[]'](\"docdatetime\")))) {\n          $ret_or_1\n        } else {\n          attrs['$[]='](\"docdatetime\", \"\" + (docdate) + \" \" + (doctime))\n        };\n        return nil;\n      });\n      \n      $def(self, '$update_backend_attributes', function $$update_backend_attributes(new_backend, init) {\n        var $a, $b, self = this, current_backend = nil, current_basebackend = nil, attrs = nil, current_doctype = nil, actual_backend = nil, _ = nil, $ret_or_1 = nil, delegate_backend = nil, converter = nil, new_basebackend = nil, new_filetype = nil, htmlsyntax = nil, backend_traits = nil, current_filetype = nil, page_width = nil;\n\n        \n        if (init == null) init = nil;\n        if (($truthy(init) || ($neqeq(new_backend, self.backend)))) {\n          \n          current_backend = self.backend;\n          current_basebackend = (attrs = self.attributes)['$[]'](\"basebackend\");\n          current_doctype = self.doctype;\n          if ($truthy(new_backend['$include?'](\":\"))) {\n            $b = new_backend.$partition(\":\"), $a = $to_ary($b), (actual_backend = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (new_backend = ($a[2] == null ? nil : $a[2])), $b\n          };\n          if ($truthy(new_backend['$start_with?'](\"xhtml\"))) {\n            \n            attrs['$[]='](\"htmlsyntax\", \"xml\");\n            new_backend = new_backend.$slice(1, new_backend.$length());\n          } else if ($truthy(new_backend['$start_with?'](\"html\"))) {\n            if ($truthy(($ret_or_1 = attrs['$[]'](\"htmlsyntax\")))) {\n              $ret_or_1\n            } else {\n              attrs['$[]='](\"htmlsyntax\", \"html\")\n            }\n          };\n          new_backend = ($truthy(($ret_or_1 = $$('BACKEND_ALIASES')['$[]'](new_backend))) ? ($ret_or_1) : (new_backend));\n          if ($truthy(actual_backend)) {\n            $a = [actual_backend, new_backend], (new_backend = $a[0]), (delegate_backend = $a[1]), $a\n          };\n          if ($truthy(current_doctype)) {\n            \n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"backend-\" + (current_backend));\n              attrs.$delete(\"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));\n            };\n            attrs['$[]='](\"backend-\" + (new_backend) + \"-doctype-\" + (current_doctype), \"\");\n            attrs['$[]='](\"doctype-\" + (current_doctype), \"\");\n          } else if ($truthy(current_backend)) {\n            attrs.$delete(\"backend-\" + (current_backend))\n          };\n          attrs['$[]='](\"backend-\" + (new_backend), \"\");\n          self.backend = ($a = [\"backend\", new_backend], $send(attrs, '[]=', $a), $a[$a.length - 1]);\n          if ($eqeqeq($$$($$('Converter'), 'BackendTraits'), (converter = self.$create_converter(new_backend, delegate_backend)))) {\n            \n            new_basebackend = converter.$basebackend();\n            new_filetype = converter.$filetype();\n            if ($truthy((htmlsyntax = converter.$htmlsyntax()))) {\n              attrs['$[]='](\"htmlsyntax\", htmlsyntax)\n            };\n            if ($truthy(init)) {\n              if ($truthy(($ret_or_1 = attrs['$[]'](\"outfilesuffix\")))) {\n                $ret_or_1\n              } else {\n                attrs['$[]='](\"outfilesuffix\", converter.$outfilesuffix())\n              }\n            } else if (!$truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n              attrs['$[]='](\"outfilesuffix\", converter.$outfilesuffix())\n            };\n          } else if ($truthy(converter)) {\n            \n            backend_traits = $$('Converter').$derive_backend_traits(new_backend);\n            new_basebackend = backend_traits['$[]'](\"basebackend\");\n            new_filetype = backend_traits['$[]'](\"filetype\");\n            if ($truthy(init)) {\n              if ($truthy(($ret_or_1 = attrs['$[]'](\"outfilesuffix\")))) {\n                $ret_or_1\n              } else {\n                attrs['$[]='](\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\"))\n              }\n            } else if (!$truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n              attrs['$[]='](\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\"))\n            };\n          } else {\n            self.$raise($$$('NotImplementedError'), \"asciidoctor: FAILED: missing converter for backend '\" + (new_backend) + \"'. Processing aborted.\")\n          };\n          self.converter = converter;\n          if ($truthy((current_filetype = attrs['$[]'](\"filetype\")))) {\n            attrs.$delete(\"filetype-\" + (current_filetype))\n          };\n          attrs['$[]='](\"filetype\", new_filetype);\n          attrs['$[]='](\"filetype-\" + (new_filetype), \"\");\n          if ($truthy((page_width = $$('DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend)))) {\n            attrs['$[]='](\"pagewidth\", page_width)\n          } else {\n            attrs.$delete(\"pagewidth\")\n          };\n          if ($neqeq(new_basebackend, current_basebackend)) {\n            \n            if ($truthy(current_doctype)) {\n              \n              if ($truthy(current_basebackend)) {\n                \n                attrs.$delete(\"basebackend-\" + (current_basebackend));\n                attrs.$delete(\"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));\n              };\n              attrs['$[]='](\"basebackend-\" + (new_basebackend) + \"-doctype-\" + (current_doctype), \"\");\n            } else if ($truthy(current_basebackend)) {\n              attrs.$delete(\"basebackend-\" + (current_basebackend))\n            };\n            attrs['$[]='](\"basebackend-\" + (new_basebackend), \"\");\n            attrs['$[]='](\"basebackend\", new_basebackend);\n          };\n          return new_backend;\n        } else {\n          return nil\n        };\n      }, -2);\n      return $def(self, '$update_doctype_attributes', function $$update_doctype_attributes(new_doctype) {\n        var $a, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil;\n\n        if (($truthy(new_doctype) && ($neqeq(new_doctype, self.doctype)))) {\n          \n          $a = [self.backend, (attrs = self.attributes)['$[]'](\"basebackend\"), self.doctype], (current_backend = $a[0]), (current_basebackend = $a[1]), (current_doctype = $a[2]), $a;\n          if ($truthy(current_doctype)) {\n            \n            attrs.$delete(\"doctype-\" + (current_doctype));\n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));\n              attrs['$[]='](\"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\");\n            };\n            if ($truthy(current_basebackend)) {\n              \n              attrs.$delete(\"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));\n              attrs['$[]='](\"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\");\n            };\n          } else {\n            \n            if ($truthy(current_backend)) {\n              attrs['$[]='](\"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\")\n            };\n            if ($truthy(current_basebackend)) {\n              attrs['$[]='](\"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\")\n            };\n          };\n          attrs['$[]='](\"doctype-\" + (new_doctype), \"\");\n          return (self.doctype = ($a = [\"doctype\", new_doctype], $send(attrs, '[]=', $a), $a[$a.length - 1]));\n        } else {\n          return nil\n        }\n      });\n    })($nesting[0], $$('AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/inline\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $return_val = Opal.return_val, $alias = Opal.alias, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('attr_accessor,attr_reader,[],convert,converter,attr,==,apply_reftext_subs,reftext');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Inline');\n\n      var $proto = self.$$prototype;\n\n      $proto.text = $proto.type = nil;\n      \n      self.$attr_accessor(\"text\");\n      self.$attr_reader(\"type\");\n      self.$attr_accessor(\"target\");\n      \n      $def(self, '$initialize', function $$initialize(parent, context, text, opts) {\n        var $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        if (text == null) text = nil;\n        if (opts == null) opts = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, context, opts], null);\n        self.node_name = \"inline_\" + (context);\n        self.text = text;\n        self.id = opts['$[]'](\"id\");\n        self.type = opts['$[]'](\"type\");\n        return (self.target = opts['$[]'](\"target\"));\n      }, -3);\n      \n      $def(self, '$block?', $return_val(false));\n      \n      $def(self, '$inline?', $return_val(true));\n      \n      $def(self, '$convert', function $$convert() {\n        var self = this;\n\n        return self.$converter().$convert(self)\n      });\n      $alias(self, \"render\", \"convert\");\n      \n      $def(self, '$alt', function $$alt() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.$attr(\"alt\")))) {\n          return $ret_or_1\n        } else {\n          return \"\"\n        }\n      });\n      \n      $def(self, '$reftext?', function $Inline_reftext$ques$1() {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        if ($truthy(($ret_or_1 = self.text))) {\n          \n          if ($truthy(($ret_or_2 = self.type['$=='](\"ref\")))) {\n            return $ret_or_2\n          } else {\n            return self.type['$=='](\"bibref\")\n          };\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$reftext', function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.text))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      });\n      return $def(self, '$xreftext', function $$xreftext(xrefstyle) {\n        var self = this;\n\n        \n        if (xrefstyle == null) xrefstyle = nil;\n        return self.$reftext();\n      }, -1);\n    })($nesting[0], $$('AbstractNode'))\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/list\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('blocks,blocks?,==,next_list,callouts,convert,class,object_id,inspect,size,items,parent,attr_accessor,level,drop,nil_or_empty?,apply_subs,attr_writer,empty?,===,[],outline?,!,simple?,source,shift,context');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    (function($base, $super) {\n      var self = $klass($base, $super, 'List');\n\n      var $proto = self.$$prototype;\n\n      $proto.context = $proto.document = $proto.style = nil;\n      \n      $alias(self, \"items\", \"blocks\");\n      $alias(self, \"content\", \"blocks\");\n      $alias(self, \"items?\", \"blocks?\");\n      \n      $def(self, '$initialize', function $$initialize(parent, context, opts) {\n        var $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        if (opts == null) opts = $hash2([], {});\n        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, context, opts], $yield);\n      }, -3);\n      \n      $def(self, '$outline?', function $List_outline$ques$1() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.context['$=='](\"ulist\")))) {\n          return $ret_or_1\n        } else {\n          return self.context['$=='](\"olist\")\n        }\n      });\n      \n      $def(self, '$convert', function $$convert() {\n        var $yield = $$convert.$$p || nil, self = this, result = nil;\n\n        $$convert.$$p = null;\n        if ($eqeq(self.context, \"colist\")) {\n          \n          result = $send2(self, $find_super(self, 'convert', $$convert, false, true), 'convert', [], $yield);\n          self.document.$callouts().$next_list();\n          return result;\n        } else {\n          return $send2(self, $find_super(self, 'convert', $$convert, false, true), 'convert', [], $yield)\n        }\n      });\n      $alias(self, \"render\", \"convert\");\n      return $def(self, '$to_s', function $$to_s() {\n        var self = this;\n\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", style: \" + (self.style.$inspect()) + \", items: \" + (self.$items().$size()) + \"}>\"\n      });\n    })($nesting[0], $$('AbstractBlock'));\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ListItem');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.text = $proto.subs = $proto.blocks = nil;\n      \n      $alias(self, \"list\", \"parent\");\n      self.$attr_accessor(\"marker\");\n      \n      $def(self, '$initialize', function $$initialize(parent, text) {\n        var $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        if (text == null) text = nil;\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, \"list_item\"], null);\n        self.text = text;\n        self.level = parent.$level();\n        return (self.subs = $$('NORMAL_SUBS').$drop(0));\n      }, -2);\n      \n      $def(self, '$text?', function $ListItem_text$ques$2() {\n        var self = this;\n\n        if ($truthy(self.text['$nil_or_empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      });\n      \n      $def(self, '$text', function $$text() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.text))) {\n          \n          return self.$apply_subs(self.text, self.subs);\n        } else {\n          return $ret_or_1\n        }\n      });\n      self.$attr_writer(\"text\");\n      \n      $def(self, '$simple?', function $ListItem_simple$ques$3() {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, blk = nil;\n\n        if ($truthy(($ret_or_1 = self.blocks['$empty?']()))) {\n          return $ret_or_1\n        } else {\n          \n          if ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.blocks.$size()['$=='](1))) ? ($$('List')['$===']((blk = self.blocks['$[]'](0)))) : ($ret_or_3))))) {\n            return blk['$outline?']()\n          } else {\n            return $ret_or_2\n          };\n        }\n      });\n      \n      $def(self, '$compound?', function $ListItem_compound$ques$4() {\n        var self = this;\n\n        return self['$simple?']()['$!']()\n      });\n      \n      $def(self, '$fold_first', function $$fold_first() {\n        var self = this;\n\n        \n        self.text = ($truthy(self.text['$nil_or_empty?']()) ? (self.blocks.$shift().$source()) : (\"\" + (self.text) + ($$('LF')) + (self.blocks.$shift().$source())));\n        return nil;\n      });\n      return $def(self, '$to_s', function $$to_s() {\n        var self = this, $ret_or_1 = nil;\n\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {list_context: \" + (self.$parent().$context().$inspect()) + \", text: \" + (self.text.$inspect()) + \", blocks: \" + (($truthy(($ret_or_1 = self.blocks)) ? ($ret_or_1) : ([])).$size()) + \"}>\"\n      });\n    })($nesting[0], $$('AbstractBlock'), $nesting);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/parser\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $to_ary = Opal.to_ary, $defs = Opal.defs, $eqeq = Opal.eqeq, $not = Opal.not, $gvars = Opal.gvars, $neqeq = Opal.neqeq, $rb_plus = Opal.rb_plus, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,new,proc,start_with?,match?,is_delimited_block?,private_class_method,parse_document_header,[],has_more_lines?,next_section,assign_numeral,<<,blocks,skip_blank_lines,parse_block_metadata_lines,attributes,is_next_line_doctitle?,[]=,finalize_header,nil_or_empty?,title=,sourcemap,cursor,parse_section_title,id=,include?,sub_specialchars,sub_attributes,source_location=,header,attribute_locked?,id,clear,delete,instance_variable_get,parse_header_metadata,==,!,register,process_authors,update,doctype,parse_manpage_header,=~,downcase,error,logger,message_with_context,cursor_at_line,backend,save,is_next_line_section?,initialize_section,join,map,read_lines_until,lstrip,split,title,restore_save,discard_save,header?,empty?,context,!=,attr?,attr,key?,document,+,level,special,sectname,to_i,<,>,warn,next_block,blocks?,style,style=,parent=,content_model,content_model=,lines,subs,size,context=,shift,unwrap_standalone_preamble,source_location,merge,fetch,parse_block_metadata_line,extensions,block_macros?,mark,read_line,terminator,to_s,masq,to_sym,registered_for_block?,debug?,debug,cursor_at_mark,strict_verbatim_paragraphs,unshift_line,markdown_syntax,keys,chr,uniform?,length,end_with?,parse_attributes,attribute_missing,tr,basename,assign_caption,registered_for_block_macro?,config,process_method,replace,parse_callout_list,callouts,===,parse_list,parse_description_list,underline_style_section_titles,is_section_title?,peek_line,atx_section_title?,generate_id,level=,read_paragraph_lines,adjust_indentation!,map!,slice,pop,build_block,apply_subs,chop,catalog_inline_anchors,rekey,index,strip,-,parse_table,each,raise,title?,update_attributes,commit_subs,sub?,catalog_callouts,source,remove_sub,block_terminates_paragraph,to_proc,nil?,parse_blocks,parse_list_item,items,scan,gsub,count,advance,dup,match,callout_ids,next_list,catalog_inline_anchor,marker=,catalog_inline_biblio_anchor,set_option,text=,resolve_ordered_list_marker,read_lines_for_list_item,skip_line_comments,unshift_lines,fold_first,text?,is_sibling_list_item?,concat,find,casecmp,sectname=,special=,numbered=,numbered,lineno,peek_lines,setext_section_title?,abs,cursor_at_prev_line,process_attribute_entries,next_line_empty?,apply_header_subs,rstrip,each_with_index,compact,to_h,squeeze,to_a,parse_style_attribute,process_attribute_entry,skip_comment_lines,store_attribute,sanitize_attribute_name,set_attribute,save_to,delete_attribute,ord,int_to_roman,resolve_list_marker,parse_colspecs,create_columns,has_header_option=,format,starts_with_delimiter?,close_open_cell,parse_cellspec,delimiter,match_delimiter,pre_match,post_match,buffer_has_unclosed_quotes?,skip_past_delimiter,buffer=,buffer,skip_past_escaped_delimiter,keep_cell_open,push_cellspec,close_cell,cell_open?,columns,assign_column_widths,partition_header_footer,upto,partition,shorthand_property_syntax,each_char,yield_buffered_attribute,any?,*,each_byte,%');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Parser');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$include($$('Logging'));\n      $const_set($nesting[0], 'BlockMatchData', $$('Struct').$new(\"context\", \"masq\", \"tip\", \"terminator\"));\n      $const_set($nesting[0], 'TAB', \"\\t\");\n      $const_set($nesting[0], 'TabIndentRx', /^\\t+/);\n      $const_set($nesting[0], 'StartOfBlockProc', $send(self, 'proc', [], function $Parser$1(l){var self = $Parser$1.$$s == null ? this : $Parser$1.$$s, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        \n        if (l == null) l = nil;\n        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = l['$start_with?'](\"[\"))) ? ($$('BlockAttributeLineRx')['$match?'](l)) : ($ret_or_2))))) {\n          return $ret_or_1\n        } else {\n          \n          return self['$is_delimited_block?'](l);\n        };}, {$$s: self}));\n      $const_set($nesting[0], 'StartOfListProc', $send(self, 'proc', [], function $Parser$2(l){\n        \n        if (l == null) l = nil;\n        return $$('AnyListRx')['$match?'](l);}));\n      $const_set($nesting[0], 'StartOfBlockOrListProc', $send(self, 'proc', [], function $Parser$3(l){var self = $Parser$3.$$s == null ? this : $Parser$3.$$s, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;\n\n        \n        if (l == null) l = nil;\n        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$is_delimited_block?'](l))) ? ($ret_or_2) : (($truthy(($ret_or_3 = l['$start_with?'](\"[\"))) ? ($$('BlockAttributeLineRx')['$match?'](l)) : ($ret_or_3))))))) {\n          return $ret_or_1\n        } else {\n          \n          return $$('AnyListRx')['$match?'](l);\n        };}, {$$s: self}));\n      $const_set($nesting[0], 'NoOp', nil);\n      $const_set($nesting[0], 'AuthorKeys', [\"author\", \"authorinitials\", \"firstname\", \"middlename\", \"lastname\", \"email\"]);\n      $const_set($nesting[0], 'TableCellHorzAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"left\", \">\": \"right\", \"^\": \"center\"}));\n      $const_set($nesting[0], 'TableCellVertAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"top\", \">\": \"bottom\", \"^\": \"middle\"}));\n      $const_set($nesting[0], 'TableCellStyles', $hash2([\"d\", \"s\", \"e\", \"m\", \"h\", \"l\", \"a\"], {\"d\": \"none\", \"s\": \"strong\", \"e\": \"emphasis\", \"m\": \"monospaced\", \"h\": \"header\", \"l\": \"literal\", \"a\": \"asciidoc\"}));\n      self.$private_class_method(\"new\");\n      $defs(self, '$parse', function $$parse(reader, document, options) {\n        var $a, $b, self = this, block_attributes = nil, header_only = nil, new_section = nil;\n\n        \n        if (options == null) options = $hash2([], {});\n        block_attributes = self.$parse_document_header(reader, document, (header_only = options['$[]'](\"header_only\")));\n        if (!$truthy(header_only)) {\n          while ($truthy(reader['$has_more_lines?']())) {\n          \n            $b = self.$next_section(reader, document, block_attributes), $a = $to_ary($b), (new_section = ($a[0] == null ? nil : $a[0])), (block_attributes = ($a[1] == null ? nil : $a[1])), $b;\n            if ($truthy(new_section)) {\n              \n              document.$assign_numeral(new_section);\n              document.$blocks()['$<<'](new_section);\n            };\n          }\n        };\n        return document;\n      }, -3);\n      $defs(self, '$parse_document_header', function $$parse_document_header(reader, document, header_only) {\n        var $a, $b, $c, self = this, block_attrs = nil, doc_attrs = nil, implicit_doctitle = nil, val = nil, doctitle_attr_val = nil, source_location = nil, _ = nil, l0_section_title = nil, atx = nil, separator = nil, doc_id = nil, role = nil, reftext = nil, modified_attrs = nil, author = nil, author_metadata = nil;\n\n        \n        if (header_only == null) header_only = false;\n        block_attrs = ($truthy(reader.$skip_blank_lines()) ? (self.$parse_block_metadata_lines(reader, document)) : ($hash2([], {})));\n        doc_attrs = document.$attributes();\n        if (($truthy((implicit_doctitle = self['$is_next_line_doctitle?'](reader, block_attrs, doc_attrs['$[]'](\"leveloffset\")))) && ($truthy(block_attrs['$[]'](\"title\"))))) {\n          \n          doc_attrs['$[]='](\"authorcount\", 0);\n          return document.$finalize_header(block_attrs, false);\n        };\n        if (!$truthy((val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']())) {\n          document['$title=']((doctitle_attr_val = val))\n        };\n        if ($truthy(implicit_doctitle)) {\n          \n          if ($truthy(document.$sourcemap())) {\n            source_location = reader.$cursor()\n          };\n          $b = self.$parse_section_title(reader, document), $a = $to_ary($b), ($c = [($a[0] == null ? nil : $a[0])], $send(document, 'id=', $c), $c[$c.length - 1]), (_ = ($a[1] == null ? nil : $a[1])), (l0_section_title = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (atx = ($a[4] == null ? nil : $a[4])), $b;\n          if ($truthy(doctitle_attr_val)) {\n            l0_section_title = nil\n          } else {\n            \n            document['$title='](l0_section_title);\n            if ($truthy(($a = [\"doctitle\", (doctitle_attr_val = document.$sub_specialchars(l0_section_title))], $send(doc_attrs, '[]=', $a), $a[$a.length - 1])['$include?']($$('ATTR_REF_HEAD')))) {\n              doc_attrs['$[]='](\"doctitle\", (doctitle_attr_val = document.$sub_attributes(doctitle_attr_val, $hash2([\"attribute_missing\"], {\"attribute_missing\": \"skip\"}))))\n            };\n          };\n          if ($truthy(source_location)) {\n            document.$header()['$source_location='](source_location)\n          };\n          if (!($truthy(atx) || ($truthy(document['$attribute_locked?'](\"compat-mode\"))))) {\n            doc_attrs['$[]='](\"compat-mode\", \"\")\n          };\n          if ($truthy((separator = block_attrs['$[]'](\"separator\")))) {\n            if (!$truthy(document['$attribute_locked?'](\"title-separator\"))) {\n              doc_attrs['$[]='](\"title-separator\", separator)\n            }\n          };\n          if ($truthy((doc_id = block_attrs['$[]'](\"id\")))) {\n            document['$id='](doc_id)\n          } else {\n            doc_id = document.$id()\n          };\n          if ($truthy((role = block_attrs['$[]'](\"role\")))) {\n            doc_attrs['$[]='](\"role\", role)\n          };\n          if ($truthy((reftext = block_attrs['$[]'](\"reftext\")))) {\n            doc_attrs['$[]='](\"reftext\", reftext)\n          };\n          block_attrs.$clear();\n          (modified_attrs = document.$instance_variable_get(\"@attributes_modified\")).$delete(\"doctitle\");\n          self.$parse_header_metadata(reader, document, nil);\n          if ($truthy(modified_attrs['$include?'](\"doctitle\"))) {\n            if (($truthy((val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']()) || ($eqeq(val, doctitle_attr_val)))) {\n              doc_attrs['$[]='](\"doctitle\", doctitle_attr_val)\n            } else {\n              document['$title='](val)\n            }\n          } else if ($not(l0_section_title)) {\n            modified_attrs['$<<'](\"doctitle\")\n          };\n          if ($truthy(doc_id)) {\n            document.$register(\"refs\", [doc_id, document])\n          };\n        } else if ($truthy((author = doc_attrs['$[]'](\"author\")))) {\n          \n          author_metadata = self.$process_authors(author, true, false);\n          if ($truthy(doc_attrs['$[]'](\"authorinitials\"))) {\n            author_metadata.$delete(\"authorinitials\")\n          };\n          doc_attrs.$update(author_metadata);\n        } else if ($truthy((author = doc_attrs['$[]'](\"authors\")))) {\n          \n          author_metadata = self.$process_authors(author, true);\n          doc_attrs.$update(author_metadata);\n        } else {\n          doc_attrs['$[]='](\"authorcount\", 0)\n        };\n        if ($eqeq(document.$doctype(), \"manpage\")) {\n          self.$parse_manpage_header(reader, document, block_attrs, header_only)\n        };\n        return document.$finalize_header(block_attrs);\n      }, -3);\n      $defs(self, '$parse_manpage_header', function $$parse_manpage_header(reader, document, block_attributes, header_only) {\n        var $a, self = this, doc_attrs = nil, manvolnum = nil, mantitle = nil, $ret_or_1 = nil, $ret_or_2 = nil, manname = nil, name_section_level = nil, name_section = nil, name_section_buffer = nil, mannames = nil, manpurpose = nil, error_msg = nil;\n\n        \n        if (header_only == null) header_only = false;\n        if ($truthy($$('ManpageTitleVolnumRx')['$=~']((doc_attrs = document.$attributes())['$[]'](\"doctitle\")))) {\n          \n          doc_attrs['$[]='](\"manvolnum\", (manvolnum = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))));\n          doc_attrs['$[]='](\"mantitle\", ($truthy((mantitle = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$('ATTR_REF_HEAD'))) ? (document.$sub_attributes(mantitle)) : (mantitle)).$downcase());\n        } else {\n          \n          self.$logger().$error(self.$message_with_context(\"non-conforming manpage title\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line(1)})));\n          doc_attrs['$[]='](\"mantitle\", ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = doc_attrs['$[]'](\"doctitle\"))) ? ($ret_or_2) : (doc_attrs['$[]'](\"docname\"))))) ? ($ret_or_1) : (\"command\")));\n          doc_attrs['$[]='](\"manvolnum\", (manvolnum = \"1\"));\n        };\n        if (($truthy((manname = doc_attrs['$[]'](\"manname\"))) && ($truthy(doc_attrs['$[]'](\"manpurpose\"))))) {\n          \n          if ($truthy(($ret_or_1 = doc_attrs['$[]'](\"manname-title\")))) {\n            $ret_or_1\n          } else {\n            doc_attrs['$[]='](\"manname-title\", \"Name\")\n          };\n          doc_attrs['$[]='](\"mannames\", [manname]);\n          if ($eqeq(document.$backend(), \"manpage\")) {\n            \n            doc_attrs['$[]='](\"docname\", manname);\n            doc_attrs['$[]='](\"outfilesuffix\", \".\" + (manvolnum));\n          };\n        } else if (!$truthy(header_only)) {\n          \n          reader.$skip_blank_lines();\n          reader.$save();\n          block_attributes.$update(self.$parse_block_metadata_lines(reader, document));\n          if ($truthy((name_section_level = self['$is_next_line_section?'](reader, $hash2([], {}))))) {\n            if ($eqeq(name_section_level, 1)) {\n              \n              name_section = self.$initialize_section(reader, document, $hash2([], {}));\n              name_section_buffer = $send(reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"skip_line_comments\"], {\"break_on_blank_lines\": true, \"skip_line_comments\": true})), 'map', [], function $$4(l){\n                \n                if (l == null) l = nil;\n                return l.$lstrip();}).$join(\" \");\n              if ($truthy($$('ManpageNamePurposeRx')['$=~'](name_section_buffer))) {\n                \n                if ($truthy((manname = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$('ATTR_REF_HEAD')))) {\n                  manname = document.$sub_attributes(manname)\n                };\n                if ($truthy(manname['$include?'](\",\"))) {\n                  manname = (mannames = $send(manname.$split(\",\"), 'map', [], function $$5(n){\n                    \n                    if (n == null) n = nil;\n                    return n.$lstrip();}))['$[]'](0)\n                } else {\n                  mannames = [manname]\n                };\n                if ($truthy((manpurpose = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))['$include?']($$('ATTR_REF_HEAD')))) {\n                  manpurpose = document.$sub_attributes(manpurpose)\n                };\n                if ($truthy(($ret_or_1 = doc_attrs['$[]'](\"manname-title\")))) {\n                  $ret_or_1\n                } else {\n                  doc_attrs['$[]='](\"manname-title\", name_section.$title())\n                };\n                if ($truthy(name_section.$id())) {\n                  doc_attrs['$[]='](\"manname-id\", name_section.$id())\n                };\n                doc_attrs['$[]='](\"manname\", manname);\n                doc_attrs['$[]='](\"mannames\", mannames);\n                doc_attrs['$[]='](\"manpurpose\", manpurpose);\n                if ($eqeq(document.$backend(), \"manpage\")) {\n                  \n                  doc_attrs['$[]='](\"docname\", manname);\n                  doc_attrs['$[]='](\"outfilesuffix\", \".\" + (manvolnum));\n                };\n              } else {\n                error_msg = \"non-conforming name section body\"\n              };\n            } else {\n              error_msg = \"name section must be at level 1\"\n            }\n          } else {\n            error_msg = \"name section expected\"\n          };\n          if ($truthy(error_msg)) {\n            \n            reader.$restore_save();\n            self.$logger().$error(self.$message_with_context(error_msg, $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n            doc_attrs['$[]='](\"manname\", (manname = ($truthy(($ret_or_1 = doc_attrs['$[]'](\"docname\"))) ? ($ret_or_1) : (\"command\"))));\n            doc_attrs['$[]='](\"mannames\", [manname]);\n            if ($eqeq(document.$backend(), \"manpage\")) {\n              \n              doc_attrs['$[]='](\"docname\", manname);\n              doc_attrs['$[]='](\"outfilesuffix\", \".\" + (manvolnum));\n            };\n          } else {\n            reader.$discard_save()\n          };\n        };\n        return nil;\n      }, -4);\n      $defs(self, '$next_section', function $$next_section(reader, parent, attributes) {\n        var $a, $b, self = this, preamble = nil, intro = nil, part = nil, has_header = nil, book = nil, document = nil, section = nil, current_level = nil, expected_next_level = nil, expected_next_level_alt = nil, title = nil, sectname = nil, next_level = nil, expected_condition = nil, new_section = nil, block_cursor = nil, new_block = nil, $ret_or_1 = nil, first_block = nil, child_block = nil;\n\n        \n        if (attributes == null) attributes = $hash2([], {});\n        preamble = (intro = (part = false));\n        if ((($eqeq(parent.$context(), \"document\") && ($truthy(parent.$blocks()['$empty?']()))) && ((($truthy((has_header = parent['$header?']())) || ($truthy(attributes.$delete(\"invalid-header\")))) || ($not(self['$is_next_line_section?'](reader, attributes))))))) {\n          \n          book = (document = parent).$doctype()['$=='](\"book\");\n          if (($truthy(has_header) || (($truthy(book) && ($neqeq(attributes['$[]'](1), \"abstract\")))))) {\n            \n            preamble = (intro = $$('Block').$new(parent, \"preamble\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})));\n            if (($truthy(book) && ($truthy(parent['$attr?'](\"preface-title\"))))) {\n              preamble['$title='](parent.$attr(\"preface-title\"))\n            };\n            parent.$blocks()['$<<'](preamble);\n          };\n          section = parent;\n          current_level = 0;\n          if ($truthy(parent.$attributes()['$key?'](\"fragment\"))) {\n            expected_next_level = -1\n          } else if ($truthy(book)) {\n            $a = [1, 0], (expected_next_level = $a[0]), (expected_next_level_alt = $a[1]), $a\n          } else {\n            expected_next_level = 1\n          };\n        } else {\n          \n          book = (document = parent.$document()).$doctype()['$=='](\"book\");\n          section = self.$initialize_section(reader, parent, attributes);\n          attributes = ($truthy((title = attributes['$[]'](\"title\"))) ? ($hash2([\"title\"], {\"title\": title})) : ($hash2([], {})));\n          expected_next_level = $rb_plus((current_level = section.$level()), 1);\n          if ($eqeq(current_level, 0)) {\n            part = book\n          } else if (($eqeq(current_level, 1) && ($truthy(section.$special())))) {\n            if (!(($eqeq((sectname = section.$sectname()), \"appendix\") || ($eqeq(sectname, \"preface\"))) || ($eqeq(sectname, \"abstract\")))) {\n              expected_next_level = nil\n            }\n          };\n        };\n        reader.$skip_blank_lines();\n        while ($truthy(reader['$has_more_lines?']())) {\n        \n          self.$parse_block_metadata_lines(reader, document, attributes);\n          if ($truthy((next_level = self['$is_next_line_section?'](reader, attributes)))) {\n            \n            if ($truthy(document['$attr?'](\"leveloffset\"))) {\n              \n              next_level = $rb_plus(next_level, document.$attr(\"leveloffset\").$to_i());\n              if ($truthy($rb_lt(next_level, 0))) {\n                next_level = 0\n              };\n            };\n            if ($truthy($rb_gt(next_level, current_level))) {\n              \n              if ($truthy(expected_next_level)) {\n                if (!(($eqeq(next_level, expected_next_level) || (($truthy(expected_next_level_alt) && ($eqeq(next_level, expected_next_level_alt))))) || ($truthy($rb_lt(expected_next_level, 0))))) {\n                  \n                  expected_condition = ($truthy(expected_next_level_alt) ? (\"expected levels \" + (expected_next_level_alt) + \" or \" + (expected_next_level)) : (\"expected level \" + (expected_next_level)));\n                  self.$logger().$warn(self.$message_with_context(\"section title out of sequence: \" + (expected_condition) + \", got level \" + (next_level), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n                }\n              } else {\n                self.$logger().$error(self.$message_with_context(\"\" + (sectname) + \" sections do not support nested sections\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $b = self.$next_section(reader, section, attributes), $a = $to_ary($b), (new_section = ($a[0] == null ? nil : $a[0])), (attributes = ($a[1] == null ? nil : $a[1])), $b;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else if (($eqeq(next_level, 0) && ($eqeq(section, document)))) {\n              \n              if (!$truthy(book)) {\n                self.$logger().$error(self.$message_with_context(\"level 0 sections can only be used when doctype is book\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $b = self.$next_section(reader, section, attributes), $a = $to_ary($b), (new_section = ($a[0] == null ? nil : $a[0])), (attributes = ($a[1] == null ? nil : $a[1])), $b;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else {\n              break\n            };\n          } else {\n            \n            block_cursor = reader.$cursor();\n            if ($truthy((new_block = self.$next_block(reader, ($truthy(($ret_or_1 = intro)) ? ($ret_or_1) : (section)), attributes, $hash2([\"parse_metadata\"], {\"parse_metadata\": false}))))) {\n              \n              if ($truthy(part)) {\n                if ($not(section['$blocks?']())) {\n                  if ($neqeq(new_block.$style(), \"partintro\")) {\n                    if (($eqeq(new_block.$style(), \"open\") && ($eqeq(new_block.$context(), \"open\")))) {\n                      new_block['$style='](\"partintro\")\n                    } else {\n                      \n                      new_block['$parent=']((intro = $$('Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"}))));\n                      intro['$style='](\"partintro\");\n                      section.$blocks()['$<<'](intro);\n                    }\n                  } else if ($eqeq(new_block.$content_model(), \"simple\")) {\n                    \n                    new_block['$content_model='](\"compound\");\n                    new_block['$<<']($$('Block').$new(new_block, \"paragraph\", $hash2([\"source\", \"subs\"], {\"source\": new_block.$lines(), \"subs\": new_block.$subs()})));\n                    new_block.$lines().$clear();\n                    new_block.$subs().$clear();\n                  }\n                } else if ($eqeq(section.$blocks().$size(), 1)) {\n                  \n                  first_block = section.$blocks()['$[]'](0);\n                  if (($not(intro) && ($eqeq(first_block.$content_model(), \"compound\")))) {\n                    self.$logger().$error(self.$message_with_context(\"illegal block content outside of partintro block\", $hash2([\"source_location\"], {\"source_location\": block_cursor})))\n                  } else if ($neqeq(first_block.$content_model(), \"compound\")) {\n                    \n                    new_block['$parent=']((intro = $$('Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"}))));\n                    if ($eqeq(first_block.$style(), ($a = [\"partintro\"], $send(intro, 'style=', $a), $a[$a.length - 1]))) {\n                      \n                      first_block['$context='](\"paragraph\");\n                      first_block['$style='](nil);\n                    };\n                    section.$blocks().$shift();\n                    intro['$<<'](first_block);\n                    section.$blocks()['$<<'](intro);\n                  };\n                }\n              };\n              ($truthy(($ret_or_1 = intro)) ? ($ret_or_1) : (section)).$blocks()['$<<'](new_block);\n              attributes.$clear();\n            };\n          };\n          if ($truthy(($ret_or_1 = reader.$skip_blank_lines()))) {\n            $ret_or_1\n          } else {\n            break\n          };\n        };\n        if ($truthy(part)) {\n          if (!($truthy(section['$blocks?']()) && ($eqeq(section.$blocks()['$[]'](-1).$context(), \"section\")))) {\n            self.$logger().$error(self.$message_with_context(\"invalid part, must have at least one section (e.g., chapter, appendix, etc.)\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n          }\n        } else if ($truthy(preamble)) {\n          if ($truthy(preamble['$blocks?']())) {\n            if ((($truthy(book) || ($truthy(document.$blocks()['$[]'](1)))) || ($not($$('Compliance').$unwrap_standalone_preamble())))) {\n              if ($truthy(document.$sourcemap())) {\n                preamble['$source_location='](preamble.$blocks()['$[]'](0).$source_location())\n              }\n            } else {\n              \n              document.$blocks().$shift();\n              while ($truthy((child_block = preamble.$blocks().$shift()))) {\n              document['$<<'](child_block)\n              };\n            }\n          } else {\n            document.$blocks().$shift()\n          }\n        };\n        return [($eqeq(section, parent) ? (nil) : (section)), attributes.$merge()];\n      }, -3);\n      $defs(self, '$next_block', function $$next_block(reader, parent, attributes, options) {\n        var $a, $b, self = this, skipped = nil, text_only = nil, document = nil, $ret_or_1 = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, this_line = nil, doc_attrs = nil, style = nil, block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_block = nil, indented = nil, md_syntax = nil, ch0 = nil, layout_break_chars = nil, ll = nil, blk_ctx = nil, target = nil, blk_attrs = nil, posattrs = nil, expanded_target = nil, $ret_or_2 = nil, scaledwidth = nil, block_title = nil, extension = nil, report_unknown_block_macro = nil, content = nil, ext_config = nil, default_attrs = nil, float_id = nil, float_reftext = nil, float_level = nil, lines = nil, content_adjacent = nil, admonition_name = nil, credit_line = nil, attribution = nil, citetitle = nil, language = nil, comma_idx = nil, block_cursor = nil, block_reader = nil, content_model = nil, positional_attrs = nil, block_id = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        if (attributes == null) attributes = $hash2([], {});\n        if (options == null) options = $hash2([], {});\n        if (!$truthy((skipped = reader.$skip_blank_lines()))) {\n          return nil\n        };\n        if (($truthy((text_only = options['$[]'](\"text_only\"))) && ($truthy($rb_gt(skipped, 0))))) {\n          \n          options.$delete(\"text_only\");\n          text_only = nil;\n        };\n        document = parent.$document();\n        if ($truthy(options.$fetch(\"parse_metadata\", true))) {\n          while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n          \n            reader.$shift();\n            if ($truthy(($ret_or_1 = reader.$skip_blank_lines()))) {\n              $ret_or_1\n            } else {\n              return nil\n            };\n          }\n        };\n        if ($truthy((extensions = document.$extensions()))) {\n          $a = [extensions['$blocks?'](), extensions['$block_macros?']()], (block_extensions = $a[0]), (block_macro_extensions = $a[1]), $a\n        };\n        reader.$mark();\n        $a = [reader.$read_line(), document.$attributes(), attributes['$[]'](1)], (this_line = $a[0]), (doc_attrs = $a[1]), (style = $a[2]), $a;\n        block = (block_context = (cloaked_context = (terminator = nil)));\n        if ($truthy((delimited_block = self['$is_delimited_block?'](this_line, true)))) {\n          \n          block_context = (cloaked_context = delimited_block.$context());\n          terminator = delimited_block.$terminator();\n          if ($truthy(style)) {\n            if (!$eqeq(style, block_context.$to_s())) {\n              if ($truthy(delimited_block.$masq()['$include?'](style))) {\n                block_context = style.$to_sym()\n              } else if (($truthy(delimited_block.$masq()['$include?'](\"admonition\")) && ($truthy($$('ADMONITION_STYLES')['$include?'](style))))) {\n                block_context = \"admonition\"\n              } else if (($truthy(block_extensions) && ($truthy(extensions['$registered_for_block?'](style, block_context))))) {\n                block_context = style.$to_sym()\n              } else {\n                \n                if ($truthy(self.$logger()['$debug?']())) {\n                  self.$logger().$debug(self.$message_with_context(\"unknown style for \" + (block_context) + \" block: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n                };\n                style = block_context.$to_s();\n              }\n            }\n          } else {\n            style = ($a = [\"style\", block_context.$to_s()], $send(attributes, '[]=', $a), $a[$a.length - 1])\n          };\n        };\n        if (!$truthy(delimited_block)) {\n          while ($truthy(true)) {\n          \n            if ((($truthy(style) && ($truthy($$('Compliance').$strict_verbatim_paragraphs()))) && ($truthy($$('VERBATIM_STYLES')['$include?'](style))))) {\n              \n              block_context = style.$to_sym();\n              reader.$unshift_line(this_line);\n              break;\n            };\n            if ($truthy(text_only)) {\n              indented = this_line['$start_with?'](\" \", $$('TAB'))\n            } else {\n              \n              md_syntax = $$('Compliance').$markdown_syntax();\n              if ($truthy(this_line['$start_with?'](\" \"))) {\n                \n                $a = [true, \" \"], (indented = $a[0]), (ch0 = $a[1]), $a;\n                if ((($truthy(md_syntax) && ($truthy($send(this_line.$lstrip(), 'start_with?', $to_a($$('MARKDOWN_THEMATIC_BREAK_CHARS').$keys()))))) && ($truthy($$('MarkdownThematicBreakRx')['$match?'](this_line))))) {\n                  \n                  block = $$('Block').$new(parent, \"thematic_break\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;\n                };\n              } else if ($truthy(this_line['$start_with?']($$('TAB')))) {\n                $a = [true, $$('TAB')], (indented = $a[0]), (ch0 = $a[1]), $a\n              } else {\n                \n                $a = [false, this_line.$chr()], (indented = $a[0]), (ch0 = $a[1]), $a;\n                layout_break_chars = ($truthy(md_syntax) ? ($$('HYBRID_LAYOUT_BREAK_CHARS')) : ($$('LAYOUT_BREAK_CHARS')));\n                if (($truthy(layout_break_chars['$key?'](ch0)) && ($truthy(($truthy(md_syntax) ? ($$('ExtLayoutBreakRx')['$match?'](this_line)) : ($truthy(($ret_or_1 = self['$uniform?'](this_line, ch0, (ll = this_line.$length())))) ? ($rb_gt(ll, 2)) : ($ret_or_1))))))) {\n                  \n                  block = $$('Block').$new(parent, layout_break_chars['$[]'](ch0), $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;\n                } else if (($truthy(this_line['$end_with?'](\"]\")) && ($truthy(this_line['$include?'](\"::\"))))) {\n                  if ((($eqeq(ch0, \"i\") || ($truthy(this_line['$start_with?'](\"video:\", \"audio:\")))) && ($truthy($$('BlockMediaMacroRx')['$=~'](this_line))))) {\n                    \n                    $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$to_sym(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (blk_ctx = $a[0]), (target = $a[1]), (blk_attrs = $a[2]), $a;\n                    block = $$('Block').$new(parent, blk_ctx, $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy(blk_attrs)) {\n                      \n                      \n                      switch (blk_ctx) {\n                        case \"video\":\n                          posattrs = [\"poster\", \"width\", \"height\"]\n                          break;\n                        case \"audio\":\n                          posattrs = []\n                          break;\n                        default:\n                          posattrs = [\"alt\", \"width\", \"height\"]\n                      };\n                      block.$parse_attributes(blk_attrs, posattrs, $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}));\n                    };\n                    if ($truthy(attributes['$key?'](\"style\"))) {\n                      attributes.$delete(\"style\")\n                    };\n                    if ($truthy(target['$include?']($$('ATTR_REF_HEAD')))) {\n                      if ((($truthy((expanded_target = block.$sub_attributes(target))['$empty?']()) && ($eqeq(($truthy(($ret_or_1 = doc_attrs['$[]'](\"attribute-missing\"))) ? ($ret_or_1) : ($$('Compliance').$attribute_missing())), \"drop-line\"))) && ($truthy(block.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']())))) {\n                        \n                        attributes.$clear();\n                        return nil;\n                      } else {\n                        target = expanded_target\n                      }\n                    };\n                    if ($eqeq(blk_ctx, \"image\")) {\n                      \n                      document.$register(\"images\", target);\n                      attributes['$[]='](\"imagesdir\", doc_attrs['$[]'](\"imagesdir\"));\n                      if ($truthy(($ret_or_1 = attributes['$[]'](\"alt\")))) {\n                        $ret_or_1\n                      } else {\n                        attributes['$[]='](\"alt\", ($truthy(($ret_or_2 = style)) ? ($ret_or_2) : (($a = [\"default-alt\", $$('Helpers').$basename(target, true).$tr(\"_-\", \" \")], $send(attributes, '[]=', $a), $a[$a.length - 1]))))\n                      };\n                      if (!$truthy((scaledwidth = attributes.$delete(\"scaledwidth\"))['$nil_or_empty?']())) {\n                        attributes['$[]='](\"scaledwidth\", ($truthy($$('TrailingDigitsRx')['$match?'](scaledwidth)) ? (\"\" + (scaledwidth) + \"%\") : (scaledwidth)))\n                      };\n                      if ($truthy(attributes['$[]'](\"title\"))) {\n                        \n                        block['$title=']((block_title = attributes.$delete(\"title\")));\n                        block.$assign_caption(attributes.$delete(\"caption\"), \"figure\");\n                      };\n                    };\n                    attributes['$[]='](\"target\", target);\n                    break;\n                  } else if ((($eqeq(ch0, \"t\") && ($truthy(this_line['$start_with?'](\"toc:\")))) && ($truthy($$('BlockTocMacroRx')['$=~'](this_line))))) {\n                    \n                    block = $$('Block').$new(parent, \"toc\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n                      block.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), [], $hash2([\"into\"], {\"into\": attributes}))\n                    };\n                    break;\n                  } else if ($truthy(($truthy(block_macro_extensions) ? (($truthy(($ret_or_1 = ($truthy(($ret_or_2 = $$('CustomBlockMacroRx')['$=~'](this_line))) ? ((extension = extensions['$registered_for_block_macro?']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))) : ($ret_or_2)))) ? ($ret_or_1) : ((report_unknown_block_macro = self.$logger()['$debug?']())))) : (($truthy(($ret_or_1 = self.$logger()['$debug?']())) ? ((report_unknown_block_macro = $$('CustomBlockMacroRx')['$=~'](this_line))) : ($ret_or_1)))))) {\n                    if ($truthy(report_unknown_block_macro)) {\n                      self.$logger().$debug(self.$message_with_context(\"unknown name for block macro: \" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n                    } else {\n                      \n                      content = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n                      if ($truthy((target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))['$include?']($$('ATTR_REF_HEAD')))) {\n                        if ((($truthy((expanded_target = parent.$sub_attributes(target))['$empty?']()) && ($eqeq(($truthy(($ret_or_1 = doc_attrs['$[]'](\"attribute-missing\"))) ? ($ret_or_1) : ($$('Compliance').$attribute_missing())), \"drop-line\"))) && ($truthy(parent.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']())))) {\n                          \n                          attributes.$clear();\n                          return nil;\n                        } else {\n                          target = expanded_target\n                        }\n                      };\n                      if ($eqeq((ext_config = extension.$config())['$[]'](\"content_model\"), \"attributes\")) {\n                        if ($truthy(content)) {\n                          document.$parse_attributes(content, ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ext_config['$[]'](\"positional_attrs\"))) ? ($ret_or_2) : (ext_config['$[]'](\"pos_attrs\"))))) ? ($ret_or_1) : ([])), $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}))\n                        }\n                      } else {\n                        attributes['$[]='](\"text\", ($truthy(($ret_or_1 = content)) ? ($ret_or_1) : (\"\")))\n                      };\n                      if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                        $send(attributes, 'update', [default_attrs], function $$6(_, old_v){\n                          \n                          if (_ == null) _ = nil;\n                          if (old_v == null) old_v = nil;\n                          return old_v;})\n                      };\n                      if (($truthy((block = extension.$process_method()['$[]'](parent, target, attributes))) && ($neqeq(block, parent)))) {\n                        \n                        attributes.$replace(block.$attributes());\n                        break;\n                      } else {\n                        \n                        attributes.$clear();\n                        return nil;\n                      };\n                    }\n                  }\n                };\n              };\n            };\n            if ((($not(indented) && ($eqeq((ch0 = ($truthy(($ret_or_1 = ch0)) ? ($ret_or_1) : (this_line.$chr()))), \"<\"))) && ($truthy($$('CalloutListRx')['$=~'](this_line))))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_callout_list(reader, $gvars[\"~\"], parent, document.$callouts());\n              attributes['$[]='](\"style\", \"arabic\");\n              break;\n            } else if ($truthy($$('UnorderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ((($not(style) && ($eqeqeq($$('Section'), parent))) && ($eqeq(parent.$sectname(), \"bibliography\")))) {\n                attributes['$[]='](\"style\", (style = \"bibliography\"))\n              };\n              block = self.$parse_list(reader, \"ulist\", parent, style);\n              break;\n            } else if ($truthy($$('OrderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_list(reader, \"olist\", parent, style);\n              if ($truthy(block.$style())) {\n                attributes['$[]='](\"style\", block.$style())\n              };\n              break;\n            } else if ((($truthy(this_line['$include?'](\"::\")) || ($truthy(this_line['$include?'](\";;\")))) && ($truthy($$('DescriptionListRx')['$=~'](this_line))))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_description_list(reader, $gvars[\"~\"], parent);\n              break;\n            } else if ((($eqeq(style, \"float\") || ($eqeq(style, \"discrete\"))) && ($truthy(($truthy($$('Compliance').$underline_style_section_titles()) ? (self['$is_section_title?'](this_line, reader.$peek_line())) : ($truthy(($ret_or_1 = indented['$!']())) ? (self['$atx_section_title?'](this_line)) : ($ret_or_1))))))) {\n              \n              reader.$unshift_line(this_line);\n              $b = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $a = $to_ary($b), (float_id = ($a[0] == null ? nil : $a[0])), (float_reftext = ($a[1] == null ? nil : $a[1])), (block_title = ($a[2] == null ? nil : $a[2])), (float_level = ($a[3] == null ? nil : $a[3])), $b;\n              if ($truthy(float_reftext)) {\n                attributes['$[]='](\"reftext\", float_reftext)\n              };\n              block = $$('Block').$new(parent, \"floating_title\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n              block['$title='](block_title);\n              attributes.$delete(\"title\");\n              block['$id='](($truthy(($ret_or_1 = float_id)) ? ($ret_or_1) : (($truthy(doc_attrs['$key?'](\"sectids\")) ? ($$('Section').$generate_id(block.$title(), document)) : (nil)))));\n              block['$level='](float_level);\n              break;\n            } else if (($truthy(style) && ($neqeq(style, \"normal\")))) {\n              if ($truthy($$('PARAGRAPH_STYLES')['$include?'](style))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;\n              } else if ($truthy($$('ADMONITION_STYLES')['$include?'](style))) {\n                \n                block_context = \"admonition\";\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;\n              } else if (($truthy(block_extensions) && ($truthy(extensions['$registered_for_block?'](style, \"paragraph\"))))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;\n              } else {\n                \n                if ($truthy(self.$logger()['$debug?']())) {\n                  self.$logger().$debug(self.$message_with_context(\"unknown style for paragraph: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n                };\n                style = nil;\n              }\n            };\n            reader.$unshift_line(this_line);\n            if (($truthy(indented) && ($not(style)))) {\n              \n              lines = self.$read_paragraph_lines(reader, (content_adjacent = ($eqeq(skipped, 0) ? (options['$[]'](\"list_type\")) : (nil))), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": text_only}));\n              self['$adjust_indentation!'](lines);\n              if (($truthy(text_only) || ($eqeq(content_adjacent, \"dlist\")))) {\n                block = $$('Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}))\n              } else {\n                block = $$('Block').$new(parent, \"literal\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"verbatim\", \"source\": lines, \"attributes\": attributes}))\n              };\n            } else {\n              \n              lines = self.$read_paragraph_lines(reader, ($truthy(($ret_or_1 = skipped['$=='](0))) ? (options['$[]'](\"list_type\")) : ($ret_or_1)), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": true}));\n              if ($truthy(text_only)) {\n                \n                if (($truthy(indented) && ($eqeq(style, \"normal\")))) {\n                  self['$adjust_indentation!'](lines)\n                };\n                block = $$('Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ((($truthy($$('ADMONITION_STYLE_HEADS')['$include?'](ch0)) && ($truthy(this_line['$include?'](\":\")))) && ($truthy($$('AdmonitionParagraphRx')['$=~'](this_line))))) {\n                \n                lines['$[]='](0, (($a = $gvars['~']) === nil ? nil : $a.$post_match()));\n                attributes['$[]='](\"name\", (admonition_name = ($a = [\"style\", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))], $send(attributes, '[]=', $a), $a[$a.length - 1]).$downcase()));\n                attributes['$[]='](\"textlabel\", ($truthy(($ret_or_1 = attributes.$delete(\"caption\"))) ? ($ret_or_1) : (doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))));\n                block = $$('Block').$new(parent, \"admonition\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ((($truthy(md_syntax) && ($eqeq(ch0, \">\"))) && ($truthy(this_line['$start_with?'](\"> \"))))) {\n                \n                $send(lines, 'map!', [], function $$7(line){\n                  \n                  if (line == null) line = nil;\n                  if ($eqeq(line, \">\")) {\n                    \n                    return line.$slice(1, line.$length());\n                  } else {\n                    \n                    if ($truthy(line['$start_with?'](\"> \"))) {\n                      \n                      return line.$slice(2, line.$length());\n                    } else {\n                      return line\n                    };\n                  };});\n                if ($truthy(lines['$[]'](-1)['$start_with?'](\"-- \"))) {\n                  \n                  credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                  if (!$truthy(lines['$empty?']())) {\n                    while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                    lines.$pop()\n                    }\n                  };\n                };\n                attributes['$[]='](\"style\", \"quote\");\n                block = self.$build_block(\"quote\", \"compound\", false, parent, $$('Reader').$new(lines), attributes);\n                if ($truthy(credit_line)) {\n                  \n                  $b = block.$apply_subs(credit_line).$split(\", \", 2), $a = $to_ary($b), (attribution = ($a[0] == null ? nil : $a[0])), (citetitle = ($a[1] == null ? nil : $a[1])), $b;\n                  if ($truthy(attribution)) {\n                    attributes['$[]='](\"attribution\", attribution)\n                  };\n                  if ($truthy(citetitle)) {\n                    attributes['$[]='](\"citetitle\", citetitle)\n                  };\n                };\n              } else if (((($eqeq(ch0, \"\\\"\") && ($truthy($rb_gt(lines.$size(), 1)))) && ($truthy(lines['$[]'](-1)['$start_with?'](\"-- \")))) && ($truthy(lines['$[]'](-2)['$end_with?'](\"\\\"\"))))) {\n                \n                lines['$[]='](0, this_line.$slice(1, this_line.$length()));\n                credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                lines.$pop()\n                };\n                lines['$<<'](lines.$pop().$chop());\n                attributes['$[]='](\"style\", \"quote\");\n                block = $$('Block').$new(parent, \"quote\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n                $b = block.$apply_subs(credit_line).$split(\", \", 2), $a = $to_ary($b), (attribution = ($a[0] == null ? nil : $a[0])), (citetitle = ($a[1] == null ? nil : $a[1])), $b;\n                if ($truthy(attribution)) {\n                  attributes['$[]='](\"attribution\", attribution)\n                };\n                if ($truthy(citetitle)) {\n                  attributes['$[]='](\"citetitle\", citetitle)\n                };\n              } else {\n                \n                if (($truthy(indented) && ($eqeq(style, \"normal\")))) {\n                  self['$adjust_indentation!'](lines)\n                };\n                block = $$('Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              };\n              self.$catalog_inline_anchors(lines.$join($$('LF')), block, document, reader);\n            };\n            break;\n          }\n        };\n        if (!$truthy(block)) {\n          \n          switch (block_context) {\n            case \"listing\":\n            case \"source\":\n              \n              if (($eqeq(block_context, \"source\") || (($not(attributes['$[]'](1)) && ($truthy((language = ($truthy(($ret_or_2 = attributes['$[]'](2))) ? ($ret_or_2) : (doc_attrs['$[]'](\"source-language\")))))))))) {\n                \n                if ($truthy(language)) {\n                  \n                  attributes['$[]='](\"style\", \"source\");\n                  attributes['$[]='](\"language\", language);\n                  $$('AttributeList').$rekey(attributes, [nil, nil, \"linenums\"]);\n                } else {\n                  \n                  $$('AttributeList').$rekey(attributes, [nil, \"language\", \"linenums\"]);\n                  if (!$truthy(attributes['$key?'](\"language\"))) {\n                    if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n                      attributes['$[]='](\"language\", doc_attrs['$[]'](\"source-language\"))\n                    }\n                  };\n                };\n                if (!$truthy(attributes['$key?'](\"linenums\"))) {\n                  if (($truthy(attributes['$[]'](\"linenums-option\")) || ($truthy(doc_attrs['$[]'](\"source-linenums-option\"))))) {\n                    attributes['$[]='](\"linenums\", \"\")\n                  }\n                };\n                if (!$truthy(attributes['$key?'](\"indent\"))) {\n                  if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n                    attributes['$[]='](\"indent\", doc_attrs['$[]'](\"source-indent\"))\n                  }\n                };\n              };\n              block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);\n              break;\n            case \"fenced_code\":\n              \n              attributes['$[]='](\"style\", \"source\");\n              if ($truthy($rb_gt((ll = this_line.$length()), 3))) {\n                if ($truthy((comma_idx = (language = this_line.$slice(3, ll)).$index(\",\")))) {\n                  if ($truthy($rb_gt(comma_idx, 0))) {\n                    \n                    language = language.$slice(0, comma_idx).$strip();\n                    if ($truthy($rb_lt(comma_idx, $rb_minus(ll, 4)))) {\n                      attributes['$[]='](\"linenums\", \"\")\n                    };\n                  } else if ($truthy($rb_gt(ll, 4))) {\n                    attributes['$[]='](\"linenums\", \"\")\n                  }\n                } else {\n                  language = language.$lstrip()\n                }\n              };\n              if ($truthy(language['$nil_or_empty?']())) {\n                if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n                  attributes['$[]='](\"language\", doc_attrs['$[]'](\"source-language\"))\n                }\n              } else {\n                attributes['$[]='](\"language\", language)\n              };\n              if (!$truthy(attributes['$key?'](\"linenums\"))) {\n                if (($truthy(attributes['$[]'](\"linenums-option\")) || ($truthy(doc_attrs['$[]'](\"source-linenums-option\"))))) {\n                  attributes['$[]='](\"linenums\", \"\")\n                }\n              };\n              if (!$truthy(attributes['$key?'](\"indent\"))) {\n                if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n                  attributes['$[]='](\"indent\", doc_attrs['$[]'](\"source-indent\"))\n                }\n              };\n              terminator = terminator.$slice(0, 3);\n              block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);\n              break;\n            case \"table\":\n              \n              block_cursor = reader.$cursor();\n              block_reader = $$('Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_line_comments\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_line_comments\": true, \"context\": \"table\", \"cursor\": \"at_mark\"})), block_cursor);\n              if (!$truthy(terminator['$start_with?'](\"|\", \"!\"))) {\n                if ($truthy(($ret_or_2 = attributes['$[]'](\"format\")))) {\n                  $ret_or_2\n                } else {\n                  attributes['$[]='](\"format\", ($truthy(terminator['$start_with?'](\",\")) ? (\"csv\") : (\"dsv\")))\n                }\n              };\n              block = self.$parse_table(block_reader, parent, attributes);\n              break;\n            case \"sidebar\":\n              block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes)\n              break;\n            case \"admonition\":\n              \n              attributes['$[]='](\"name\", (admonition_name = style.$downcase()));\n              attributes['$[]='](\"textlabel\", ($truthy(($ret_or_2 = attributes.$delete(\"caption\"))) ? ($ret_or_2) : (doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))));\n              block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);\n              break;\n            case \"open\":\n            case \"abstract\":\n            case \"partintro\":\n              block = self.$build_block(\"open\", \"compound\", terminator, parent, reader, attributes)\n              break;\n            case \"literal\":\n              block = self.$build_block(block_context, \"verbatim\", terminator, parent, reader, attributes)\n              break;\n            case \"example\":\n              \n              if ($truthy(attributes['$[]'](\"collapsible-option\"))) {\n                attributes['$[]='](\"caption\", \"\")\n              };\n              block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);\n              break;\n            case \"quote\":\n            case \"verse\":\n              \n              $$('AttributeList').$rekey(attributes, [nil, \"attribution\", \"citetitle\"]);\n              block = self.$build_block(block_context, ($eqeq(block_context, \"verse\") ? (\"verbatim\") : (\"compound\")), terminator, parent, reader, attributes);\n              break;\n            case \"stem\":\n            case \"latexmath\":\n            case \"asciimath\":\n              \n              if ($eqeq(block_context, \"stem\")) {\n                attributes['$[]='](\"style\", $$('STEM_TYPE_ALIASES')['$[]'](($truthy(($ret_or_2 = attributes['$[]'](2))) ? ($ret_or_2) : (doc_attrs['$[]'](\"stem\")))))\n              };\n              block = self.$build_block(\"stem\", \"raw\", terminator, parent, reader, attributes);\n              break;\n            case \"pass\":\n              block = self.$build_block(block_context, \"raw\", terminator, parent, reader, attributes)\n              break;\n            case \"comment\":\n              \n              self.$build_block(block_context, \"skip\", terminator, parent, reader, attributes);\n              attributes.$clear();\n              return nil;\n            default:\n              if (($truthy(block_extensions) && ($truthy((extension = extensions['$registered_for_block?'](block_context, cloaked_context)))))) {\n                \n                if (!$eqeq((content_model = (ext_config = extension.$config())['$[]'](\"content_model\")), \"skip\")) {\n                  \n                  if (!$truthy((positional_attrs = ($truthy(($ret_or_2 = ext_config['$[]'](\"positional_attrs\"))) ? ($ret_or_2) : (ext_config['$[]'](\"pos_attrs\"))))['$nil_or_empty?']())) {\n                    $$('AttributeList').$rekey(attributes, $rb_plus([nil], positional_attrs))\n                  };\n                  if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                    $send(default_attrs, 'each', [], function $$8(k, v){var $c;\n\n                      \n                      if (k == null) k = nil;\n                      if (v == null) v = nil;\n                      if ($truthy(($ret_or_2 = attributes['$[]'](k)))) {\n                        return $ret_or_2\n                      } else {\n                        return ($c = [k, v], $send(attributes, '[]=', $c), $c[$c.length - 1])\n                      };})\n                  };\n                  attributes['$[]='](\"cloaked-context\", cloaked_context);\n                };\n                if (!$truthy((block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2([\"extension\"], {\"extension\": extension}))))) {\n                  \n                  attributes.$clear();\n                  return nil;\n                };\n              } else {\n                self.$raise(\"Unsupported block type \" + (block_context) + \" at \" + (reader.$cursor()))\n              }\n          }\n        };\n        if ($truthy(document.$sourcemap())) {\n          block['$source_location='](reader.$cursor_at_mark())\n        };\n        if ($truthy(attributes['$[]'](\"title\"))) {\n          \n          block['$title=']((block_title = attributes.$delete(\"title\")));\n          if ($truthy($$('CAPTION_ATTRIBUTE_NAMES')['$[]'](block.$context()))) {\n            block.$assign_caption(attributes.$delete(\"caption\"))\n          };\n        };\n        block['$style='](attributes['$[]'](\"style\"));\n        if ($truthy((block_id = ($truthy(($ret_or_1 = block.$id())) ? ($ret_or_1) : (($a = [attributes['$[]'](\"id\")], $send(block, 'id=', $a), $a[$a.length - 1])))))) {\n          \n          if ($truthy(($truthy(block_title) ? (block_title['$include?']($$('ATTR_REF_HEAD'))) : (block['$title?']())))) {\n            block.$title()\n          };\n          if (!$truthy(document.$register(\"refs\", [block_id, block]))) {\n            self.$logger().$warn(self.$message_with_context(\"id assigned to block already in use: \" + (block_id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };\n        };\n        if (!$truthy(attributes['$empty?']())) {\n          block.$update_attributes(attributes)\n        };\n        block.$commit_subs();\n        if ($truthy(block['$sub?'](\"callouts\"))) {\n          if (!$truthy(self.$catalog_callouts(block.$source(), document))) {\n            block.$remove_sub(\"callouts\")\n          }\n        };\n        return block;\n      }, -3);\n      $defs(self, '$read_paragraph_lines', function $$read_paragraph_lines(reader, break_at_list, opts) {\n        var break_condition = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        opts['$[]='](\"break_on_blank_lines\", true);\n        opts['$[]='](\"break_on_list_continuation\", true);\n        opts['$[]='](\"preserve_last_line\", true);\n        break_condition = ($truthy(break_at_list) ? (($truthy($$('Compliance').$block_terminates_paragraph()) ? ($$('StartOfBlockOrListProc')) : ($$('StartOfListProc')))) : (($truthy($$('Compliance').$block_terminates_paragraph()) ? ($$('StartOfBlockProc')) : ($$('NoOp')))));\n        return $send(reader, 'read_lines_until', [opts], break_condition.$to_proc());\n      }, -3);\n      $defs(self, '$is_delimited_block?', function $Parser_is_delimited_block$ques$9(line, return_match_data) {\n        var $a, $b, self = this, line_len = nil, tip = nil, tip_len = nil, context = nil, masq = nil;\n\n        \n        if (return_match_data == null) return_match_data = nil;\n        if (!($truthy($rb_gt((line_len = line.$length()), 1)) && ($truthy($$('DELIMITED_BLOCK_HEADS')['$[]'](line.$slice(0, 2)))))) {\n          return nil\n        };\n        if ($eqeq(line_len, 2)) {\n          \n          tip = line;\n          tip_len = 2;\n        } else {\n          \n          if ($truthy($rb_lt(line_len, 5))) {\n            \n            tip = line;\n            tip_len = line_len;\n          } else {\n            tip = line.$slice(0, (tip_len = 4))\n          };\n          if (($truthy($$('Compliance').$markdown_syntax()) && ($truthy(tip['$start_with?'](\"`\"))))) {\n            if ($eqeq(tip_len, 4)) {\n              \n              if (($eqeq(tip, \"````\") || ($neqeq((tip = tip.$chop()), \"```\")))) {\n                return nil\n              };\n              line = tip;\n              line_len = (tip_len = 3);\n            } else if ($neqeq(tip, \"```\")) {\n              return nil\n            }\n          } else if ($eqeq(tip_len, 3)) {\n            return nil\n          };\n        };\n        $b = $$('DELIMITED_BLOCKS')['$[]'](tip), $a = $to_ary($b), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $b;\n        if (($truthy(context) && (($eqeq(line_len, tip_len) || ($truthy(self['$uniform?'](line.$slice(1, line_len), $$('DELIMITED_BLOCK_TAILS')['$[]'](tip), $rb_minus(line_len, 1)))))))) {\n          if ($truthy(return_match_data)) {\n            \n            return $$('BlockMatchData').$new(context, masq, tip, line);\n          } else {\n            return true\n          }\n        } else {\n          return nil\n        };\n      }, -2);\n      $defs(self, '$build_block', function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {\n        var $a, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, block_cursor = nil, tab_size = nil, $ret_or_2 = nil, indent = nil, extension = nil, block = nil, $ret_or_1 = nil;\n\n        \n        if (options == null) options = $hash2([], {});\n        \n        switch (content_model) {\n          case \"skip\":\n            $a = [true, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n            break;\n          case \"raw\":\n            $a = [false, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n            break;\n          default:\n            $a = [false, content_model], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n        };\n        if ($truthy(terminator['$nil?']())) {\n          \n          if ($eqeq(parse_as_content_model, \"verbatim\")) {\n            lines = reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"break_on_list_continuation\"], {\"break_on_blank_lines\": true, \"break_on_list_continuation\": true}))\n          } else {\n            \n            if ($eqeq(content_model, \"compound\")) {\n              content_model = \"simple\"\n            };\n            lines = self.$read_paragraph_lines(reader, false, $hash2([\"skip_line_comments\", \"skip_processing\"], {\"skip_line_comments\": true, \"skip_processing\": skip_processing}));\n          };\n          block_reader = nil;\n        } else if ($neqeq(parse_as_content_model, \"compound\")) {\n          \n          lines = reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"}));\n          block_reader = nil;\n        } else if ($eqeq(terminator, false)) {\n          \n          lines = nil;\n          block_reader = reader;\n        } else {\n          \n          lines = nil;\n          block_cursor = reader.$cursor();\n          block_reader = $$('Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"})), block_cursor);\n        };\n        \n        switch (content_model) {\n          case \"verbatim\":\n            \n            tab_size = ($truthy(($ret_or_2 = attributes['$[]'](\"tabsize\"))) ? ($ret_or_2) : (parent.$document().$attributes()['$[]'](\"tabsize\"))).$to_i();\n            if ($truthy((indent = attributes['$[]'](\"indent\")))) {\n              self['$adjust_indentation!'](lines, indent.$to_i(), tab_size)\n            } else if ($truthy($rb_gt(tab_size, 0))) {\n              self['$adjust_indentation!'](lines, -1, tab_size)\n            };\n            break;\n          case \"skip\":\n            return nil\n          default:\n            nil\n        };\n        if ($truthy((extension = options['$[]'](\"extension\")))) {\n          \n          attributes.$delete(\"style\");\n          if (($truthy((block = extension.$process_method()['$[]'](parent, ($truthy(($ret_or_1 = block_reader)) ? ($ret_or_1) : ($$('Reader').$new(lines))), attributes.$merge()))) && ($neqeq(block, parent)))) {\n            \n            attributes.$replace(block.$attributes());\n            if ((($eqeq(block.$content_model(), \"compound\") && ($eqeqeq($$('Block'), block))) && ($not((lines = block.$lines())['$empty?']())))) {\n              \n              content_model = \"compound\";\n              block_reader = $$('Reader').$new(lines);\n            };\n          } else {\n            return nil\n          };\n        } else {\n          block = $$('Block').$new(parent, block_context, $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": content_model, \"source\": lines, \"attributes\": attributes}))\n        };\n        if ($eqeq(content_model, \"compound\")) {\n          self.$parse_blocks(block_reader, block)\n        };\n        return block;\n      }, -7);\n      $defs(self, '$parse_blocks', function $$parse_blocks(reader, parent, attributes) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, block = nil;\n\n        \n        if (attributes == null) attributes = nil;\n        if ($truthy(attributes)) {\n          while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = (block = self.$next_block(reader, parent, attributes.$merge())))) ? (parent.$blocks()['$<<'](block)) : ($ret_or_2)))) ? ($ret_or_1) : (reader['$has_more_lines?']())))) {\n          \n          }\n        } else {\n          while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = (block = self.$next_block(reader, parent)))) ? (parent.$blocks()['$<<'](block)) : ($ret_or_2)))) ? ($ret_or_1) : (reader['$has_more_lines?']())))) {\n          \n          }\n        };\n        return nil;\n      }, -3);\n      $defs(self, '$parse_list', function $$parse_list(reader, list_type, parent, style) {\n        var $a, self = this, list_block = nil, list_rx = nil, $ret_or_1 = nil, list_item = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$('List').$new(parent, list_type);\n        list_rx = $$('ListRxMap')['$[]'](list_type);\n        while ($truthy(($truthy(($ret_or_1 = reader['$has_more_lines?']())) ? (list_rx['$=~'](reader.$peek_line())) : ($ret_or_1)))) {\n        \n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, $gvars[\"~\"], (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), style)))) {\n            list_block.$items()['$<<'](list_item)\n          };\n          if ($truthy(($ret_or_1 = reader.$skip_blank_lines()))) {\n            $ret_or_1\n          } else {\n            break\n          };\n        };\n        return list_block;\n      });\n      $defs(self, '$catalog_callouts', function $$catalog_callouts(text, document) {\n        var found = nil, autonum = nil;\n\n        \n        found = false;\n        autonum = 0;\n        if ($truthy(text['$include?'](\"<\"))) {\n          $send(text, 'scan', [$$('CalloutScanRx')], function $$10(){var $a;\n\n            \n            if (!$truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?'](\"\\\\\"))) {\n              document.$callouts().$register(($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), \".\") ? ((autonum = $rb_plus(autonum, 1)).$to_s()) : ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))))\n            };\n            return (found = true);})\n        };\n        return found;\n      });\n      $defs(self, '$catalog_inline_anchor', function $$catalog_inline_anchor(id, reftext, node, location, doc) {\n        var self = this;\n\n        \n        if (doc == null) doc = node.$document();\n        if (($truthy(reftext) && ($truthy(reftext['$include?']($$('ATTR_REF_HEAD')))))) {\n          reftext = doc.$sub_attributes(reftext)\n        };\n        if (!$truthy(doc.$register(\"refs\", [id, $$('Inline').$new(node, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n          \n          if ($eqeqeq($$('Reader'), location)) {\n            location = location.$cursor()\n          };\n          self.$logger().$warn(self.$message_with_context(\"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n        };\n        return nil;\n      }, -5);\n      $defs(self, '$catalog_inline_anchors', function $$catalog_inline_anchors(text, block, document, reader) {\n        var self = this;\n\n        \n        if (($truthy(text['$include?'](\"[[\")) || ($truthy(text['$include?'](\"or:\"))))) {\n          $send(text, 'scan', [$$('InlineAnchorScanRx')], function $$11(){var $a, self = $$11.$$s == null ? this : $$11.$$s, id = nil, reftext = nil, location = nil, offset = nil;\n\n            \n            if ($truthy((id = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))) {\n              if ((($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) && ($truthy(reftext['$include?']($$('ATTR_REF_HEAD'))))) && ($truthy((reftext = document.$sub_attributes(reftext))['$empty?']())))) {\n                return nil\n              }\n            } else {\n              \n              id = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n              if ($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))))) {\n                if ($truthy(reftext['$include?'](\"]\"))) {\n                  \n                  reftext = reftext.$gsub(\"\\\\]\", \"]\");\n                  if ($truthy(reftext['$include?']($$('ATTR_REF_HEAD')))) {\n                    reftext = document.$sub_attributes(reftext)\n                  };\n                } else if ($truthy(reftext['$include?']($$('ATTR_REF_HEAD')))) {\n                  if ($truthy((reftext = document.$sub_attributes(reftext))['$empty?']())) {\n                    reftext = nil\n                  }\n                }\n              };\n            };\n            if ($truthy(document.$register(\"refs\", [id, $$('Inline').$new(block, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n              return nil\n            } else {\n              \n              location = reader.$cursor_at_mark();\n              if ($truthy($rb_gt((offset = $rb_plus((($a = $gvars['~']) === nil ? nil : $a.$pre_match()).$count($$('LF')), ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?']($$('LF'))) ? (1) : (0)))), 0))) {\n                (location = location.$dup()).$advance(offset)\n              };\n              return self.$logger().$warn(self.$message_with_context(\"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n            };}, {$$s: self})\n        };\n        return nil;\n      });\n      $defs(self, '$catalog_inline_biblio_anchor', function $$catalog_inline_biblio_anchor(id, reftext, node, reader) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (!$truthy(node.$document().$register(\"refs\", [id, $$('Inline').$new(node, \"anchor\", ($truthy(($ret_or_1 = reftext)) ? (\"[\" + (reftext) + \"]\") : ($ret_or_1)), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": id}))]))) {\n          self.$logger().$warn(self.$message_with_context(\"id assigned to bibliography anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n        };\n        return nil;\n      });\n      $defs(self, '$parse_description_list', function $$parse_description_list(reader, match, parent) {\n        var self = this, list_block = nil, sibling_pattern = nil, current_pair = nil, $ret_or_1 = nil, next_pair = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$('List').$new(parent, \"dlist\");\n        sibling_pattern = $$('DescriptionListSiblingRx')['$[]'](match['$[]'](2));\n        list_block.$items()['$<<']((current_pair = self.$parse_list_item(reader, list_block, match, sibling_pattern)));\n        while ($truthy(($truthy(($ret_or_1 = reader['$has_more_lines?']())) ? (sibling_pattern['$=~'](reader.$peek_line())) : ($ret_or_1)))) {\n        \n          next_pair = self.$parse_list_item(reader, list_block, $gvars[\"~\"], sibling_pattern);\n          if ($truthy(current_pair['$[]'](1))) {\n            list_block.$items()['$<<']((current_pair = next_pair))\n          } else {\n            \n            current_pair['$[]'](0)['$<<'](next_pair['$[]'](0)['$[]'](0));\n            current_pair['$[]='](1, next_pair['$[]'](1));\n          };\n        };\n        return list_block;\n      });\n      $defs(self, '$parse_callout_list', function $$parse_callout_list(reader, match, parent, callouts) {\n        var self = this, list_block = nil, next_index = nil, autonum = nil, $ret_or_1 = nil, $ret_or_2 = nil, num = nil, list_item = nil, coids = nil;\n\n        \n        list_block = $$('List').$new(parent, \"colist\");\n        next_index = 1;\n        autonum = 0;\n        while ($truthy(($truthy(($ret_or_1 = match)) ? ($ret_or_1) : (($truthy(($ret_or_2 = (match = $$('CalloutListRx').$match(reader.$peek_line())))) ? (reader.$mark()) : ($ret_or_2)))))) {\n        \n          if ($eqeq((num = match['$[]'](1)), \".\")) {\n            num = (autonum = $rb_plus(autonum, 1)).$to_s()\n          };\n          if (!$eqeq(num, next_index.$to_s())) {\n            self.$logger().$warn(self.$message_with_context(\"callout list item index: expected \" + (next_index) + \", got \" + (num), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };\n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, match, \"<1>\")))) {\n            \n            list_block.$items()['$<<'](list_item);\n            if ($truthy((coids = callouts.$callout_ids(list_block.$items().$size()))['$empty?']())) {\n              self.$logger().$warn(self.$message_with_context(\"no callout found for <\" + (list_block.$items().$size()) + \">\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n            } else {\n              list_item.$attributes()['$[]='](\"coids\", coids)\n            };\n          };\n          next_index = $rb_plus(next_index, 1);\n          match = nil;\n        };\n        callouts.$next_list();\n        return list_block;\n      });\n      $defs(self, '$parse_list_item', function $$parse_list_item(reader, list_block, match, sibling_trait, style) {\n        var $a, $b, self = this, list_type = nil, dlist = nil, list_term = nil, term_text = nil, $ret_or_1 = nil, item_text = nil, has_text = nil, list_item = nil, sourcemap_assignment_deferred = nil, ordinal = nil, implicit_style = nil, $ret_or_2 = nil, $ret_or_3 = nil, block_cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, content_adjacent = nil, block = nil, first_block = nil;\n\n        \n        if (style == null) style = nil;\n        if ($eqeq((list_type = list_block.$context()), \"dlist\")) {\n          \n          dlist = true;\n          list_term = $$('ListItem').$new(list_block, (term_text = match['$[]'](1)));\n          if (($truthy(term_text['$start_with?'](\"[[\")) && ($truthy($$('LeadingInlineAnchorRx')['$=~'](term_text))))) {\n            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), ($truthy(($ret_or_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) ? ($ret_or_1) : ((($a = $gvars['~']) === nil ? nil : $a.$post_match()).$lstrip())), list_term, reader)\n          };\n          if ($truthy((item_text = match['$[]'](3)))) {\n            has_text = true\n          };\n          list_item = $$('ListItem').$new(list_block, item_text);\n          if ($truthy(list_block.$document().$sourcemap())) {\n            \n            list_term['$source_location='](reader.$cursor());\n            if ($truthy(has_text)) {\n              list_item['$source_location='](list_term.$source_location())\n            } else {\n              sourcemap_assignment_deferred = true\n            };\n          };\n        } else {\n          \n          has_text = true;\n          list_item = $$('ListItem').$new(list_block, (item_text = match['$[]'](2)));\n          if ($truthy(list_block.$document().$sourcemap())) {\n            list_item['$source_location='](reader.$cursor())\n          };\n          \n          switch (list_type) {\n            case \"ulist\":\n              \n              list_item['$marker='](sibling_trait);\n              if ($truthy(item_text['$start_with?'](\"[\"))) {\n                if (($truthy(style) && ($eqeq(style, \"bibliography\")))) {\n                  if ($truthy($$('InlineBiblioAnchorRx')['$=~'](item_text))) {\n                    self.$catalog_inline_biblio_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)\n                  }\n                } else if ($truthy(item_text['$start_with?'](\"[[\"))) {\n                  if ($truthy($$('LeadingInlineAnchorRx')['$=~'](item_text))) {\n                    self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)\n                  }\n                } else if ($truthy(item_text['$start_with?'](\"[ ] \", \"[x] \", \"[*] \"))) {\n                  \n                  list_block.$set_option(\"checklist\");\n                  list_item.$attributes()['$[]='](\"checkbox\", \"\");\n                  if (!$truthy(item_text['$start_with?'](\"[ \"))) {\n                    list_item.$attributes()['$[]='](\"checked\", \"\")\n                  };\n                  list_item['$text='](item_text.$slice(4, item_text.$length()));\n                }\n              };\n              break;\n            case \"olist\":\n              \n              $b = self.$resolve_ordered_list_marker(sibling_trait, (ordinal = list_block.$items().$size()), true, reader), $a = $to_ary($b), (sibling_trait = ($a[0] == null ? nil : $a[0])), (implicit_style = ($a[1] == null ? nil : $a[1])), $b;\n              list_item['$marker='](sibling_trait);\n              if (($eqeq(ordinal, 0) && ($not(style)))) {\n                list_block['$style='](($truthy(($ret_or_2 = implicit_style)) ? ($ret_or_2) : (($truthy(($ret_or_3 = $$('ORDERED_LIST_STYLES')['$[]']($rb_minus(sibling_trait.$length(), 1)))) ? ($ret_or_3) : (\"arabic\")).$to_s())))\n              };\n              if (($truthy(item_text['$start_with?'](\"[[\")) && ($truthy($$('LeadingInlineAnchorRx')['$=~'](item_text))))) {\n                self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)\n              };\n              break;\n            default:\n              \n              list_item['$marker='](sibling_trait);\n              if (($truthy(item_text['$start_with?'](\"[[\")) && ($truthy($$('LeadingInlineAnchorRx')['$=~'](item_text))))) {\n                self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)\n              };\n          };\n        };\n        reader.$shift();\n        block_cursor = reader.$cursor();\n        list_item_reader = $$('Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), block_cursor);\n        if ($truthy(list_item_reader['$has_more_lines?']())) {\n          \n          if ($truthy(sourcemap_assignment_deferred)) {\n            list_item['$source_location='](block_cursor)\n          };\n          comment_lines = list_item_reader.$skip_line_comments();\n          if ($truthy((subsequent_line = list_item_reader.$peek_line()))) {\n            \n            if (!$truthy(comment_lines['$empty?']())) {\n              list_item_reader.$unshift_lines(comment_lines)\n            };\n            if (!$truthy(subsequent_line['$empty?']())) {\n              \n              content_adjacent = true;\n              if (!$truthy(dlist)) {\n                has_text = nil\n              };\n            };\n          };\n          if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"text_only\", \"list_type\"], {\"text_only\": ($truthy(has_text) ? (nil) : (true)), \"list_type\": list_type}))))) {\n            list_item.$blocks()['$<<'](block)\n          };\n          while ($truthy(list_item_reader['$has_more_lines?']())) {\n          if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"list_type\"], {\"list_type\": list_type}))))) {\n              list_item.$blocks()['$<<'](block)\n            }\n          };\n          if ((($truthy(content_adjacent) && ($truthy((first_block = list_item.$blocks()['$[]'](0))))) && ($eqeq(first_block.$context(), \"paragraph\")))) {\n            list_item.$fold_first()\n          };\n        };\n        if ($truthy(dlist)) {\n          return [[list_term], (($truthy(list_item['$text?']()) || ($truthy(list_item['$blocks?']()))) ? (list_item) : (nil))]\n        } else {\n          return list_item\n        };\n      }, -5);\n      $defs(self, '$read_lines_for_list_item', function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {\n        var $a, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, dlist = nil, this_line = nil, prev_line = nil, match = nil, block_attribute_lines = nil, next_line = nil, interrupt = nil, ch0 = nil, nested_list_type = nil, $ret_or_1 = nil, last_line = nil;\n\n        \n        if (sibling_trait == null) sibling_trait = nil;\n        if (has_text == null) has_text = true;\n        buffer = [];\n        continuation = \"inactive\";\n        within_nested_list = false;\n        detached_continuation = nil;\n        dlist = list_type['$=='](\"dlist\");\n        while ($truthy(reader['$has_more_lines?']())) {\n        \n          this_line = reader.$read_line();\n          if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n            break\n          };\n          prev_line = ($truthy(buffer['$empty?']()) ? (nil) : (buffer['$[]'](-1)));\n          if ($eqeq(prev_line, $$('LIST_CONTINUATION'))) {\n            \n            if ($eqeq(continuation, \"inactive\")) {\n              \n              continuation = \"active\";\n              has_text = true;\n              if (!$truthy(within_nested_list)) {\n                buffer['$[]='](-1, \"\")\n              };\n            };\n            if ($eqeq(this_line, $$('LIST_CONTINUATION'))) {\n              \n              if ($neqeq(continuation, \"frozen\")) {\n                \n                continuation = \"frozen\";\n                buffer['$<<'](this_line);\n              };\n              this_line = nil;\n              continue;\n            };\n          };\n          if ($truthy((match = self['$is_delimited_block?'](this_line, true)))) {\n            \n            if (!$eqeq(continuation, \"active\")) {\n              break\n            };\n            buffer['$<<'](this_line);\n            buffer.$concat(reader.$read_lines_until($hash2([\"terminator\", \"read_last_line\", \"context\"], {\"terminator\": match.$terminator(), \"read_last_line\": true, \"context\": nil})));\n            continuation = \"inactive\";\n          } else if (((($truthy(dlist) && ($neqeq(continuation, \"active\"))) && ($truthy(this_line['$start_with?'](\"[\")))) && ($truthy($$('BlockAttributeLineRx')['$match?'](this_line))))) {\n            \n            block_attribute_lines = [this_line];\n            while ($truthy((next_line = reader.$peek_line()))) {\n            \n              if ($truthy(self['$is_delimited_block?'](next_line))) {\n                interrupt = true\n              } else if (($truthy(next_line['$empty?']()) || (($truthy(next_line['$start_with?'](\"[\")) && ($truthy($$('BlockAttributeLineRx')['$match?'](next_line))))))) {\n                \n                block_attribute_lines['$<<'](reader.$read_line());\n                continue;\n              } else if (($truthy($$('AnyListRx')['$match?'](next_line)) && ($not(self['$is_sibling_list_item?'](next_line, list_type, sibling_trait))))) {\n                buffer.$concat(block_attribute_lines)\n              } else {\n                interrupt = true\n              };\n              break;\n            };\n            if ($truthy(interrupt)) {\n              \n              reader.$unshift_lines(block_attribute_lines);\n              break;\n            };\n          } else if (($eqeq(continuation, \"active\") && ($not(this_line['$empty?']())))) {\n            if ($truthy($$('LiteralParagraphRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ($truthy(dlist)) {\n                buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], function $$12(line){var self = $$12.$$s == null ? this : $$12.$$s;\n\n                  \n                  if (line == null) line = nil;\n                  return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, {$$s: self}))\n              } else {\n                buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n              };\n              continuation = \"inactive\";\n            } else if (((($eqeq((ch0 = this_line.$chr()), \".\") && ($truthy($$('BlockTitleRx')['$match?'](this_line)))) || (($eqeq(ch0, \"[\") && ($truthy($$('BlockAttributeLineRx')['$match?'](this_line)))))) || (($eqeq(ch0, \":\") && ($truthy($$('AttributeEntryRx')['$match?'](this_line))))))) {\n              buffer['$<<'](this_line)\n            } else {\n              \n              if ($truthy((nested_list_type = $send(($truthy(within_nested_list) ? ([\"dlist\"]) : ($$('NESTABLE_LIST_CONTEXTS'))), 'find', [], function $$13(ctx){\n                \n                if (ctx == null) ctx = nil;\n                return $$('ListRxMap')['$[]'](ctx)['$match?'](this_line);})))) {\n                \n                within_nested_list = true;\n                if (($eqeq(nested_list_type, \"dlist\") && ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3))['$nil_or_empty?']())))) {\n                  has_text = false\n                };\n              };\n              buffer['$<<'](this_line);\n              continuation = \"inactive\";\n            }\n          } else if (($truthy(prev_line) && ($truthy(prev_line['$empty?']())))) {\n            \n            if ($truthy(this_line['$empty?']())) {\n              \n              if (!$truthy((this_line = ($truthy(($ret_or_1 = reader.$skip_blank_lines())) ? (reader.$read_line()) : ($ret_or_1))))) {\n                break\n              };\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break\n              };\n            };\n            if ($eqeq(this_line, $$('LIST_CONTINUATION'))) {\n              \n              detached_continuation = buffer.$size();\n              buffer['$<<'](this_line);\n            } else if ($truthy(has_text)) {\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break\n              } else if ($truthy((nested_list_type = $send($$('NESTABLE_LIST_CONTEXTS'), 'find', [], function $$14(ctx){\n                \n                if (ctx == null) ctx = nil;\n                return $$('ListRxMap')['$[]'](ctx)['$=~'](this_line);})))) {\n                \n                buffer['$<<'](this_line);\n                within_nested_list = true;\n                if (($eqeq(nested_list_type, \"dlist\") && ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3))['$nil_or_empty?']())))) {\n                  has_text = false\n                };\n              } else if ($truthy($$('LiteralParagraphRx')['$match?'](this_line))) {\n                \n                reader.$unshift_line(this_line);\n                if ($truthy(dlist)) {\n                  buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], function $$15(line){var self = $$15.$$s == null ? this : $$15.$$s;\n\n                    \n                    if (line == null) line = nil;\n                    return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, {$$s: self}))\n                } else {\n                  buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n                };\n              } else {\n                break\n              }\n            } else {\n              \n              if (!$truthy(within_nested_list)) {\n                buffer.$pop()\n              };\n              buffer['$<<'](this_line);\n              has_text = true;\n            };\n          } else {\n            \n            if (!$truthy(this_line['$empty?']())) {\n              has_text = true\n            };\n            if ($truthy((nested_list_type = $send(($truthy(within_nested_list) ? ([\"dlist\"]) : ($$('NESTABLE_LIST_CONTEXTS'))), 'find', [], function $$16(ctx){\n              \n              if (ctx == null) ctx = nil;\n              return $$('ListRxMap')['$[]'](ctx)['$=~'](this_line);})))) {\n              \n              within_nested_list = true;\n              if (($eqeq(nested_list_type, \"dlist\") && ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3))['$nil_or_empty?']())))) {\n                has_text = false\n              };\n            };\n            buffer['$<<'](this_line);\n          };\n          this_line = nil;\n        };\n        if ($truthy(this_line)) {\n          reader.$unshift_line(this_line)\n        };\n        if ($truthy(detached_continuation)) {\n          buffer['$[]='](detached_continuation, \"\")\n        };\n        while (!($truthy(buffer['$empty?']()))) {\n        if ($truthy((last_line = buffer['$[]'](-1))['$empty?']())) {\n            buffer.$pop()\n          } else {\n            \n            if ($eqeq(last_line, $$('LIST_CONTINUATION'))) {\n              buffer.$pop()\n            };\n            break;\n          }\n        };\n        return buffer;\n      }, -3);\n      $defs(self, '$initialize_section', function $$initialize_section(reader, parent, attributes) {\n        var $a, $b, self = this, document = nil, book = nil, doctype = nil, source_location = nil, sect_style = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, sect_atx = nil, sect_name = nil, sect_special = nil, sect_numbered = nil, section = nil, $ret_or_1 = nil, id = nil, generated_id = nil;\n\n        \n        if (attributes == null) attributes = $hash2([], {});\n        document = parent.$document();\n        book = (doctype = document.$doctype())['$=='](\"book\");\n        if ($truthy(document.$sourcemap())) {\n          source_location = reader.$cursor()\n        };\n        sect_style = attributes['$[]'](1);\n        $b = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $a = $to_ary($b), (sect_id = ($a[0] == null ? nil : $a[0])), (sect_reftext = ($a[1] == null ? nil : $a[1])), (sect_title = ($a[2] == null ? nil : $a[2])), (sect_level = ($a[3] == null ? nil : $a[3])), (sect_atx = ($a[4] == null ? nil : $a[4])), $b;\n        if ($truthy(sect_style)) {\n          if (($truthy(book) && ($eqeq(sect_style, \"abstract\")))) {\n            $a = [\"chapter\", 1], (sect_name = $a[0]), (sect_level = $a[1]), $a\n          } else if (($truthy(sect_style['$start_with?'](\"sect\")) && ($truthy($$('SectionLevelStyleRx')['$match?'](sect_style))))) {\n            sect_name = \"section\"\n          } else {\n            \n            $a = [sect_style, true], (sect_name = $a[0]), (sect_special = $a[1]), $a;\n            if ($eqeq(sect_level, 0)) {\n              sect_level = 1\n            };\n            sect_numbered = sect_name['$=='](\"appendix\");\n          }\n        } else if ($truthy(book)) {\n          sect_name = ($eqeq(sect_level, 0) ? (\"part\") : (($truthy($rb_gt(sect_level, 1)) ? (\"section\") : (\"chapter\"))))\n        } else if (($eqeq(doctype, \"manpage\") && ($eqeq(sect_title.$casecmp(\"synopsis\"), 0)))) {\n          $a = [\"synopsis\", true], (sect_name = $a[0]), (sect_special = $a[1]), $a\n        } else {\n          sect_name = \"section\"\n        };\n        if ($truthy(sect_reftext)) {\n          attributes['$[]='](\"reftext\", sect_reftext)\n        };\n        section = $$('Section').$new(parent, sect_level);\n        $a = [sect_id, sect_title, sect_name, source_location], ($b = [$a[0]], $send(section, 'id=', $b), $b[$b.length - 1]), ($b = [$a[1]], $send(section, 'title=', $b), $b[$b.length - 1]), ($b = [$a[2]], $send(section, 'sectname=', $b), $b[$b.length - 1]), ($b = [$a[3]], $send(section, 'source_location=', $b), $b[$b.length - 1]), $a;\n        if ($truthy(sect_special)) {\n          \n          section['$special='](true);\n          if ($truthy(sect_numbered)) {\n            section['$numbered='](true)\n          } else if ($eqeq(document.$attributes()['$[]'](\"sectnums\"), \"all\")) {\n            section['$numbered=']((($truthy(book) && ($eqeq(sect_level, 1))) ? (\"chapter\") : (true)))\n          };\n        } else if (($truthy(document.$attributes()['$[]'](\"sectnums\")) && ($truthy($rb_gt(sect_level, 0))))) {\n          section['$numbered='](($truthy(section.$special()) ? (($truthy(($ret_or_1 = parent.$numbered())) || ($ret_or_1))) : (true)))\n        } else if ((($truthy(book) && ($eqeq(sect_level, 0))) && ($truthy(document.$attributes()['$[]'](\"partnums\"))))) {\n          section['$numbered='](true)\n        };\n        if ($truthy((id = ($truthy(($ret_or_1 = section.$id())) ? ($ret_or_1) : (($a = [($truthy(document.$attributes()['$key?'](\"sectids\")) ? ((generated_id = $$('Section').$generate_id(section.$title(), document))) : (nil))], $send(section, 'id=', $a), $a[$a.length - 1])))))) {\n          \n          if (!($truthy(generated_id) || ($not(sect_title['$include?']($$('ATTR_REF_HEAD')))))) {\n            section.$title()\n          };\n          if (!$truthy(document.$register(\"refs\", [id, section]))) {\n            self.$logger().$warn(self.$message_with_context(\"id assigned to section already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line($rb_minus(reader.$lineno(), ($truthy(sect_atx) ? (1) : (2))))})))\n          };\n        };\n        section.$update_attributes(attributes);\n        reader.$skip_blank_lines();\n        return section;\n      }, -3);\n      $defs(self, '$is_next_line_section?', function $Parser_is_next_line_section$ques$17(reader, attributes) {\n        var self = this, style = nil, next_lines = nil, $ret_or_1 = nil;\n\n        \n        if (($truthy((style = attributes['$[]'](1))) && (($eqeq(style, \"discrete\") || ($eqeq(style, \"float\")))))) {\n          return nil\n        };\n        if ($truthy($$('Compliance').$underline_style_section_titles())) {\n          \n          next_lines = reader.$peek_lines(2, ($truthy(($ret_or_1 = style)) ? (style['$=='](\"comment\")) : ($ret_or_1)));\n          return self['$is_section_title?'](($truthy(($ret_or_1 = next_lines['$[]'](0))) ? ($ret_or_1) : (\"\")), next_lines['$[]'](1));\n        } else {\n          return self['$atx_section_title?'](($truthy(($ret_or_1 = reader.$peek_line())) ? ($ret_or_1) : (\"\")))\n        };\n      });\n      $defs(self, '$is_next_line_doctitle?', function $Parser_is_next_line_doctitle$ques$18(reader, attributes, leveloffset) {\n        var self = this, $ret_or_1 = nil, sect_level = nil;\n\n        if ($truthy(leveloffset)) {\n          if ($truthy(($ret_or_1 = (sect_level = self['$is_next_line_section?'](reader, attributes))))) {\n            \n            return $rb_plus(sect_level, leveloffset.$to_i())['$=='](0);\n          } else {\n            return $ret_or_1\n          }\n        } else {\n          return self['$is_next_line_section?'](reader, attributes)['$=='](0)\n        }\n      });\n      $defs(self, '$is_section_title?', function $Parser_is_section_title$ques$19(line1, line2) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (line2 == null) line2 = nil;\n        if ($truthy(($ret_or_1 = self['$atx_section_title?'](line1)))) {\n          return $ret_or_1\n        } else {\n          \n          if ($truthy(line2['$nil_or_empty?']())) {\n            return nil\n          } else {\n            return self['$setext_section_title?'](line1, line2)\n          };\n        };\n      }, -2);\n      $defs(self, '$atx_section_title?', function $Parser_atx_section_title$ques$20(line) {\n        var $a, $ret_or_1 = nil;\n\n        if ($truthy(($truthy($$('Compliance').$markdown_syntax()) ? (($truthy(($ret_or_1 = line['$start_with?'](\"=\", \"#\"))) ? ($$('ExtAtxSectionTitleRx')['$=~'](line)) : ($ret_or_1))) : (($truthy(($ret_or_1 = line['$start_with?'](\"=\"))) ? ($$('AtxSectionTitleRx')['$=~'](line)) : ($ret_or_1)))))) {\n          return $rb_minus((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$length(), 1)\n        } else {\n          return nil\n        }\n      });\n      $defs(self, '$setext_section_title?', function $Parser_setext_section_title$ques$21(line1, line2) {\n        var self = this, line2_len = nil, level = nil, line2_ch0 = nil;\n\n        if (((($truthy((level = $$('SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr())))) && ($truthy(self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length()))))) && ($truthy($$('SetextSectionTitleRx')['$match?'](line1)))) && ($truthy($rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2))))) {\n          return level\n        } else {\n          return nil\n        }\n      });\n      $defs(self, '$parse_section_title', function $$parse_section_title(reader, document, sect_id) {\n        var $a, $b, self = this, sect_reftext = nil, line1 = nil, $ret_or_1 = nil, sect_level = nil, sect_title = nil, atx = nil, line2_len = nil, line2_ch0 = nil, line2 = nil;\n\n        \n        if (sect_id == null) sect_id = nil;\n        sect_reftext = nil;\n        line1 = reader.$read_line();\n        if ($truthy(($truthy($$('Compliance').$markdown_syntax()) ? (($truthy(($ret_or_1 = line1['$start_with?'](\"=\", \"#\"))) ? ($$('ExtAtxSectionTitleRx')['$=~'](line1)) : ($ret_or_1))) : (($truthy(($ret_or_1 = line1['$start_with?'](\"=\"))) ? ($$('AtxSectionTitleRx')['$=~'](line1)) : ($ret_or_1)))))) {\n          \n          $a = [$rb_minus((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$length(), 1), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), true], (sect_level = $a[0]), (sect_title = $a[1]), (atx = $a[2]), $a;\n          if (!$truthy(sect_id)) {\n            if ((($truthy(sect_title['$end_with?'](\"]]\")) && ($truthy($$('InlineSectionAnchorRx')['$=~'](sect_title)))) && ($not((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))))) {\n              $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a\n            }\n          };\n        } else if (((((($truthy($$('Compliance').$underline_style_section_titles()) && ($truthy((line2 = reader.$peek_line(true))))) && ($truthy((sect_level = $$('SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr())))))) && ($truthy(self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length()))))) && ($truthy((sect_title = ($truthy(($ret_or_1 = $$('SetextSectionTitleRx')['$=~'](line1))) ? ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) : ($ret_or_1)))))) && ($truthy($rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2))))) {\n          \n          atx = false;\n          if (!$truthy(sect_id)) {\n            if ((($truthy(sect_title['$end_with?'](\"]]\")) && ($truthy($$('InlineSectionAnchorRx')['$=~'](sect_title)))) && ($not((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))))) {\n              $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a\n            }\n          };\n          reader.$shift();\n        } else {\n          self.$raise(\"Unrecognized section at \" + (reader.$cursor_at_prev_line()))\n        };\n        if ($truthy(document['$attr?'](\"leveloffset\"))) {\n          \n          sect_level = $rb_plus(sect_level, document.$attr(\"leveloffset\").$to_i());\n          if ($truthy($rb_lt(sect_level, 0))) {\n            sect_level = 0\n          };\n        };\n        return [sect_id, sect_reftext, sect_title, sect_level, atx];\n      }, -3);\n      $defs(self, '$parse_header_metadata', function $$parse_header_metadata(reader, document, retrieve) {\n        var $a, self = this, doc_attrs = nil, $ret_or_1 = nil, authorcount = nil, implicit_author_metadata = nil, implicit_author = nil, implicit_authorinitials = nil, implicit_authors = nil, rev_line = nil, match = nil, rev_metadata = nil, component = nil, author_line = nil, author_metadata = nil, authors = nil, author_idx = nil, author_key = nil, explicit = nil, sparse = nil, author_override = nil;\n\n        \n        if (document == null) document = nil;\n        if (retrieve == null) retrieve = true;\n        doc_attrs = ($truthy(($ret_or_1 = document)) ? (document.$attributes()) : ($ret_or_1));\n        self.$process_attribute_entries(reader, document);\n        if (($truthy(reader['$has_more_lines?']()) && ($not(reader['$next_line_empty?']())))) {\n          \n          authorcount = (implicit_author_metadata = self.$process_authors(reader.$read_line())).$delete(\"authorcount\");\n          if (($truthy(document) && ($truthy($rb_gt(($a = [\"authorcount\", authorcount], $send(doc_attrs, '[]=', $a), $a[$a.length - 1]), 0))))) {\n            \n            $send(implicit_author_metadata, 'each', [], function $$22(key, val){var $b;\n\n              \n              if (key == null) key = nil;\n              if (val == null) val = nil;\n              if ($truthy(doc_attrs['$key?'](key))) {\n                return nil\n              } else {\n                return ($b = [key, document.$apply_header_subs(val)], $send(doc_attrs, '[]=', $b), $b[$b.length - 1])\n              };});\n            implicit_author = doc_attrs['$[]'](\"author\");\n            implicit_authorinitials = doc_attrs['$[]'](\"authorinitials\");\n            implicit_authors = doc_attrs['$[]'](\"authors\");\n          };\n          implicit_author_metadata['$[]='](\"authorcount\", authorcount);\n          self.$process_attribute_entries(reader, document);\n          if (($truthy(reader['$has_more_lines?']()) && ($not(reader['$next_line_empty?']())))) {\n            \n            rev_line = reader.$read_line();\n            if ($truthy((match = $$('RevisionInfoLineRx').$match(rev_line)))) {\n              \n              rev_metadata = $hash2([], {});\n              if ($truthy(match['$[]'](1))) {\n                rev_metadata['$[]='](\"revnumber\", match['$[]'](1).$rstrip())\n              };\n              if (!$truthy((component = match['$[]'](2).$strip())['$empty?']())) {\n                if (($not(match['$[]'](1)) && ($truthy(component['$start_with?'](\"v\"))))) {\n                  rev_metadata['$[]='](\"revnumber\", component.$slice(1, component.$length()))\n                } else {\n                  rev_metadata['$[]='](\"revdate\", component)\n                }\n              };\n              if ($truthy(match['$[]'](3))) {\n                rev_metadata['$[]='](\"revremark\", match['$[]'](3).$rstrip())\n              };\n              if (($truthy(document) && ($not(rev_metadata['$empty?']())))) {\n                $send(rev_metadata, 'each', [], function $$23(key, val){var $b;\n\n                  \n                  if (key == null) key = nil;\n                  if (val == null) val = nil;\n                  if ($truthy(doc_attrs['$key?'](key))) {\n                    return nil\n                  } else {\n                    return ($b = [key, document.$apply_header_subs(val)], $send(doc_attrs, '[]=', $b), $b[$b.length - 1])\n                  };})\n              };\n            } else {\n              reader.$unshift_line(rev_line)\n            };\n          };\n          self.$process_attribute_entries(reader, document);\n          reader.$skip_blank_lines();\n        } else {\n          implicit_author_metadata = $hash2([], {})\n        };\n        if ($truthy(document)) {\n          \n          if (($truthy(doc_attrs['$key?'](\"author\")) && ($neqeq((author_line = doc_attrs['$[]'](\"author\")), implicit_author)))) {\n            \n            author_metadata = self.$process_authors(author_line, true, false);\n            if ($neqeq(doc_attrs['$[]'](\"authorinitials\"), implicit_authorinitials)) {\n              author_metadata.$delete(\"authorinitials\")\n            };\n          } else if (($truthy(doc_attrs['$key?'](\"authors\")) && ($neqeq((author_line = doc_attrs['$[]'](\"authors\")), implicit_authors)))) {\n            author_metadata = self.$process_authors(author_line, true)\n          } else {\n            \n            $a = [[], 1, \"author_1\", false, false], (authors = $a[0]), (author_idx = $a[1]), (author_key = $a[2]), (explicit = $a[3]), (sparse = $a[4]), $a;\n            while ($truthy(doc_attrs['$key?'](author_key))) {\n            \n              if ($eqeq((author_override = doc_attrs['$[]'](author_key)), implicit_author_metadata['$[]'](author_key))) {\n                \n                authors['$<<'](nil);\n                sparse = true;\n              } else {\n                \n                authors['$<<'](author_override);\n                explicit = true;\n              };\n              author_key = \"author_\" + ((author_idx = $rb_plus(author_idx, 1)));\n            };\n            if ($truthy(explicit)) {\n              \n              if ($truthy(sparse)) {\n                $send(authors, 'each_with_index', [], function $$24(author, idx){var $b, name_idx = nil;\n\n                  \n                  if (author == null) author = nil;\n                  if (idx == null) idx = nil;\n                  if ($truthy(author)) {\n                    return nil\n                  };\n                  return ($b = [idx, $send([implicit_author_metadata['$[]'](\"firstname_\" + ((name_idx = $rb_plus(idx, 1)))), implicit_author_metadata['$[]'](\"middlename_\" + (name_idx)), implicit_author_metadata['$[]'](\"lastname_\" + (name_idx))].$compact(), 'map', [], function $$25(it){\n                    \n                    if (it == null) it = nil;\n                    return it.$tr(\" \", \"_\");}).$join(\" \")], $send(authors, '[]=', $b), $b[$b.length - 1]);})\n              };\n              author_metadata = self.$process_authors(authors, true, false);\n            } else {\n              author_metadata = $hash2([\"authorcount\"], {\"authorcount\": 0})\n            };\n          };\n          if ($eqeq(author_metadata['$[]'](\"authorcount\"), 0)) {\n            if ($truthy(authorcount)) {\n              author_metadata = nil\n            } else {\n              doc_attrs['$[]='](\"authorcount\", 0)\n            }\n          } else {\n            \n            doc_attrs.$update(author_metadata);\n            if (($not(doc_attrs['$key?'](\"email\")) && ($truthy(doc_attrs['$key?'](\"email_1\"))))) {\n              doc_attrs['$[]='](\"email\", doc_attrs['$[]'](\"email_1\"))\n            };\n          };\n        };\n        if ($truthy(retrieve)) {\n          return implicit_author_metadata.$merge(rev_metadata.$to_h(), author_metadata.$to_h())\n        } else {\n          return nil\n        };\n      }, -2);\n      $defs(self, '$process_authors', function $$process_authors(author_line, names_only, multiple) {\n        var author_metadata = nil, author_idx = nil;\n\n        \n        if (names_only == null) names_only = false;\n        if (multiple == null) multiple = true;\n        author_metadata = $hash2([], {});\n        author_idx = 0;\n        $send((($truthy(multiple) && ($truthy(author_line['$include?'](\";\")))) ? (author_line.$split($$('AuthorDelimiterRx'))) : ([].concat($to_a(author_line)))), 'each', [], function $$26(author_entry){var $a, key_map = nil, segments = nil, match = nil, author = nil, fname = nil, mname = nil, lname = nil, $ret_or_1 = nil;\n\n          \n          if (author_entry == null) author_entry = nil;\n          if ($truthy(author_entry['$empty?']())) {\n            return nil\n          };\n          key_map = $hash2([], {});\n          if ($eqeq((author_idx = $rb_plus(author_idx, 1)), 1)) {\n            $send($$('AuthorKeys'), 'each', [], function $$27(key){var $a;\n\n              \n              if (key == null) key = nil;\n              return ($a = [key.$to_sym(), key], $send(key_map, '[]=', $a), $a[$a.length - 1]);})\n          } else {\n            $send($$('AuthorKeys'), 'each', [], function $$28(key){var $a;\n\n              \n              if (key == null) key = nil;\n              return ($a = [key.$to_sym(), \"\" + (key) + \"_\" + (author_idx)], $send(key_map, '[]=', $a), $a[$a.length - 1]);})\n          };\n          if ($truthy(names_only)) {\n            \n            if ($truthy(author_entry['$include?'](\"<\"))) {\n              \n              author_metadata['$[]='](key_map['$[]'](\"author\"), author_entry.$tr(\"_\", \" \"));\n              author_entry = author_entry.$gsub($$('XmlSanitizeRx'), \"\");\n            };\n            if ($eqeq((segments = author_entry.$split(nil, 3)).$size(), 3)) {\n              segments['$<<'](segments.$pop().$squeeze(\" \"))\n            };\n          } else if ($truthy((match = $$('AuthorInfoLineRx').$match(author_entry)))) {\n            (segments = match.$to_a()).$shift()\n          };\n          if ($truthy(segments)) {\n            \n            author = ($a = [key_map['$[]'](\"firstname\"), (fname = segments['$[]'](0).$tr(\"_\", \" \"))], $send(author_metadata, '[]=', $a), $a[$a.length - 1]);\n            author_metadata['$[]='](key_map['$[]'](\"authorinitials\"), fname.$chr());\n            if ($truthy(segments['$[]'](1))) {\n              if ($truthy(segments['$[]'](2))) {\n                \n                author_metadata['$[]='](key_map['$[]'](\"middlename\"), (mname = segments['$[]'](1).$tr(\"_\", \" \")));\n                author_metadata['$[]='](key_map['$[]'](\"lastname\"), (lname = segments['$[]'](2).$tr(\"_\", \" \")));\n                author = $rb_plus($rb_plus($rb_plus($rb_plus(fname, \" \"), mname), \" \"), lname);\n                author_metadata['$[]='](key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (mname.$chr()) + (lname.$chr()));\n              } else {\n                \n                author_metadata['$[]='](key_map['$[]'](\"lastname\"), (lname = segments['$[]'](1).$tr(\"_\", \" \")));\n                author = $rb_plus($rb_plus(fname, \" \"), lname);\n                author_metadata['$[]='](key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (lname.$chr()));\n              }\n            };\n            if ($truthy(($ret_or_1 = author_metadata['$[]'](key_map['$[]'](\"author\"))))) {\n              $ret_or_1\n            } else {\n              author_metadata['$[]='](key_map['$[]'](\"author\"), author)\n            };\n            if (!($truthy(names_only) || ($not(segments['$[]'](3))))) {\n              author_metadata['$[]='](key_map['$[]'](\"email\"), segments['$[]'](3))\n            };\n          } else {\n            \n            author_metadata['$[]='](key_map['$[]'](\"author\"), ($a = [key_map['$[]'](\"firstname\"), (fname = author_entry.$squeeze(\" \").$strip())], $send(author_metadata, '[]=', $a), $a[$a.length - 1]));\n            author_metadata['$[]='](key_map['$[]'](\"authorinitials\"), fname.$chr());\n          };\n          if ($eqeq(author_idx, 1)) {\n            return ($a = [\"authors\", author_metadata['$[]'](key_map['$[]'](\"author\"))], $send(author_metadata, '[]=', $a), $a[$a.length - 1])\n          } else {\n            \n            if ($eqeq(author_idx, 2)) {\n              $send($$('AuthorKeys'), 'each', [], function $$29(key){var $b;\n\n                \n                if (key == null) key = nil;\n                if ($truthy(author_metadata['$key?'](key))) {\n                  return ($b = [\"\" + (key) + \"_1\", author_metadata['$[]'](key)], $send(author_metadata, '[]=', $b), $b[$b.length - 1])\n                } else {\n                  return nil\n                };})\n            };\n            return ($a = [\"authors\", \"\" + (author_metadata['$[]'](\"authors\")) + \", \" + (author_metadata['$[]'](key_map['$[]'](\"author\")))], $send(author_metadata, '[]=', $a), $a[$a.length - 1]);\n          };});\n        author_metadata['$[]='](\"authorcount\", author_idx);\n        return author_metadata;\n      }, -2);\n      $defs(self, '$parse_block_metadata_lines', function $$parse_block_metadata_lines(reader, document, attributes, options) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (attributes == null) attributes = $hash2([], {});\n        if (options == null) options = $hash2([], {});\n        while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n        \n          reader.$shift();\n          if ($truthy(($ret_or_1 = reader.$skip_blank_lines()))) {\n            $ret_or_1\n          } else {\n            break\n          };\n        };\n        return attributes;\n      }, -3);\n      $defs(self, '$parse_block_metadata_line', function $$parse_block_metadata_line(reader, document, attributes, options) {\n        var $a, self = this, normal = nil, next_line = nil, reftext = nil, current_style = nil, $ret_or_1 = nil, ll = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        if (options == null) options = $hash2([], {});\n        if (($truthy((next_line = reader.$peek_line())) && ($truthy(($truthy(options['$[]'](\"text_only\")) ? (next_line['$start_with?'](\"[\", \"/\")) : ((normal = next_line['$start_with?'](\"[\", \".\", \"/\", \":\")))))))) {\n          if ($truthy(next_line['$start_with?'](\"[\"))) {\n            if ($truthy(next_line['$start_with?'](\"[[\"))) {\n              if (($truthy(next_line['$end_with?'](\"]]\")) && ($truthy($$('BlockAnchorRx')['$=~'](next_line))))) {\n                \n                attributes['$[]='](\"id\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)));\n                if ($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n                  attributes['$[]='](\"reftext\", ($truthy(reftext['$include?']($$('ATTR_REF_HEAD'))) ? (document.$sub_attributes(reftext)) : (reftext)))\n                };\n                return true;\n              }\n            } else if (($truthy(next_line['$end_with?'](\"]\")) && ($truthy($$('BlockAttributeListRx')['$=~'](next_line))))) {\n              \n              current_style = attributes['$[]'](1);\n              if ($truthy(document.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), [], $hash2([\"sub_input\", \"sub_result\", \"into\"], {\"sub_input\": true, \"sub_result\": true, \"into\": attributes}))['$[]'](1))) {\n                attributes['$[]='](1, ($truthy(($ret_or_1 = self.$parse_style_attribute(attributes, reader))) ? ($ret_or_1) : (current_style)))\n              };\n              return true;\n            }\n          } else if (($truthy(normal) && ($truthy(next_line['$start_with?'](\".\"))))) {\n            if ($truthy($$('BlockTitleRx')['$=~'](next_line))) {\n              \n              attributes['$[]='](\"title\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)));\n              return true;\n            }\n          } else if (($not(normal) || ($truthy(next_line['$start_with?'](\"/\"))))) {\n            if ($truthy(next_line['$start_with?'](\"//\"))) {\n              if ($eqeq(next_line, \"//\")) {\n                return true\n              } else if (($truthy(normal) && ($truthy(self['$uniform?'](next_line, \"/\", (ll = next_line.$length())))))) {\n                if (!$eqeq(ll, 3)) {\n                  \n                  reader.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"preserve_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"preserve_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}));\n                  return true;\n                }\n              } else if (!$truthy(next_line['$start_with?'](\"///\"))) {\n                return true\n              }\n            }\n          } else if ((($truthy(normal) && ($truthy(next_line['$start_with?'](\":\")))) && ($truthy($$('AttributeEntryRx')['$=~'](next_line))))) {\n            \n            self.$process_attribute_entry(reader, document, attributes, $gvars[\"~\"]);\n            return true;\n          }\n        };\n        return nil;\n      }, -4);\n      $defs(self, '$process_attribute_entries', function $$process_attribute_entries(reader, document, attributes) {\n        var self = this;\n\n        \n        if (attributes == null) attributes = nil;\n        reader.$skip_comment_lines();\n        while ($truthy(self.$process_attribute_entry(reader, document, attributes))) {\n        \n          reader.$shift();\n          reader.$skip_comment_lines();\n        };\n      }, -3);\n      $defs(self, '$process_attribute_entry', function $$process_attribute_entry(reader, document, attributes, match) {\n        var $a, self = this, value = nil, con = nil, $ret_or_1 = nil, next_line = nil, $ret_or_2 = nil, keep_open = nil;\n\n        \n        if (attributes == null) attributes = nil;\n        if (match == null) match = nil;\n        if (($truthy(match) || ($truthy((match = ($truthy(reader['$has_more_lines?']()) ? ($$('AttributeEntryRx').$match(reader.$peek_line())) : (nil))))))) {\n          \n          if ($truthy((value = match['$[]'](2))['$nil_or_empty?']())) {\n            value = \"\"\n          } else if ($truthy(value['$end_with?']($$('LINE_CONTINUATION'), $$('LINE_CONTINUATION_LEGACY')))) {\n            \n            $a = [value.$slice($rb_minus(value.$length(), 2), 2), value.$slice(0, $rb_minus(value.$length(), 2)).$rstrip()], (con = $a[0]), (value = $a[1]), $a;\n            while ($truthy(($truthy(($ret_or_1 = reader.$advance())) ? ((next_line = ($truthy(($ret_or_2 = reader.$peek_line())) ? ($ret_or_2) : (\"\")))['$empty?']()['$!']()) : ($ret_or_1)))) {\n            \n              next_line = next_line.$lstrip();\n              if ($truthy((keep_open = next_line['$end_with?'](con)))) {\n                next_line = next_line.$slice(0, $rb_minus(next_line.$length(), 2)).$rstrip()\n              };\n              value = \"\" + (value) + (($truthy(value['$end_with?']($$('HARD_LINE_BREAK'))) ? ($$('LF')) : (\" \"))) + (next_line);\n              if (!$truthy(keep_open)) {\n                break\n              };\n            };\n          };\n          self.$store_attribute(match['$[]'](1), value, document, attributes);\n          return true;\n        } else {\n          return nil\n        };\n      }, -3);\n      $defs(self, '$store_attribute', function $$store_attribute(name, value, doc, attrs) {\n        var self = this, resolved_value = nil;\n\n        \n        if (doc == null) doc = nil;\n        if (attrs == null) attrs = nil;\n        if ($truthy(name['$end_with?'](\"!\"))) {\n          \n          name = name.$chop();\n          value = nil;\n        } else if ($truthy(name['$start_with?'](\"!\"))) {\n          \n          name = name.$slice(1, name.$length());\n          value = nil;\n        };\n        if ($eqeq((name = self.$sanitize_attribute_name(name)), \"numbered\")) {\n          name = \"sectnums\"\n        } else if ($eqeq(name, \"hardbreaks\")) {\n          name = \"hardbreaks-option\"\n        } else if ($eqeq(name, \"showtitle\")) {\n          self.$store_attribute(\"notitle\", ($truthy(value) ? (nil) : (\"\")), doc, attrs)\n        };\n        if ($truthy(doc)) {\n          if ($truthy(value)) {\n            \n            if ($eqeq(name, \"leveloffset\")) {\n              if ($truthy(value['$start_with?'](\"+\"))) {\n                value = $rb_plus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()\n              } else if ($truthy(value['$start_with?'](\"-\"))) {\n                value = $rb_minus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()\n              }\n            };\n            if ($truthy((resolved_value = doc.$set_attribute(name, value)))) {\n              \n              value = resolved_value;\n              if ($truthy(attrs)) {\n                $$$($$('Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)\n              };\n            };\n          } else if (($truthy(doc.$delete_attribute(name)) && ($truthy(attrs)))) {\n            $$$($$('Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)\n          }\n        } else if ($truthy(attrs)) {\n          $$$($$('Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)\n        };\n        return [name, value];\n      }, -3);\n      $defs(self, '$resolve_list_marker', function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {\n        var self = this;\n\n        \n        if (ordinal == null) ordinal = 0;\n        if (validate == null) validate = false;\n        if (reader == null) reader = nil;\n        \n        switch (list_type) {\n          case \"ulist\":\n            return marker\n          case \"olist\":\n            return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)['$[]'](0)\n          default:\n            return \"<1>\"\n        };\n      }, -3);\n      $defs(self, '$resolve_ordered_list_marker', function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {\n        var self = this, style = nil, expected = nil, actual = nil;\n\n        \n        if (ordinal == null) ordinal = 0;\n        if (validate == null) validate = false;\n        if (reader == null) reader = nil;\n        if ($truthy(marker['$start_with?'](\".\"))) {\n          return [marker]\n        };\n        \n        switch ((style = $send($$('ORDERED_LIST_STYLES'), 'find', [], function $$30(s){\n          \n          if (s == null) s = nil;\n          return $$('OrderedListMarkerRxMap')['$[]'](s)['$match?'](marker);}))) {\n          case \"arabic\":\n            \n            if ($truthy(validate)) {\n              \n              expected = $rb_plus(ordinal, 1);\n              actual = marker.$to_i();\n            };\n            marker = \"1.\";\n            break;\n          case \"loweralpha\":\n            \n            if ($truthy(validate)) {\n              \n              expected = $rb_plus(\"a\"['$[]'](0).$ord(), ordinal).$chr();\n              actual = marker.$chop();\n            };\n            marker = \"a.\";\n            break;\n          case \"upperalpha\":\n            \n            if ($truthy(validate)) {\n              \n              expected = $rb_plus(\"A\"['$[]'](0).$ord(), ordinal).$chr();\n              actual = marker.$chop();\n            };\n            marker = \"A.\";\n            break;\n          case \"lowerroman\":\n            \n            if ($truthy(validate)) {\n              \n              expected = $$('Helpers').$int_to_roman($rb_plus(ordinal, 1)).$downcase();\n              actual = marker.$chop();\n            };\n            marker = \"i)\";\n            break;\n          case \"upperroman\":\n            \n            if ($truthy(validate)) {\n              \n              expected = $$('Helpers').$int_to_roman($rb_plus(ordinal, 1));\n              actual = marker.$chop();\n            };\n            marker = \"I)\";\n            break;\n          default:\n            nil\n        };\n        if (($truthy(validate) && ($neqeq(expected, actual)))) {\n          self.$logger().$warn(self.$message_with_context(\"list item index: expected \" + (expected) + \", got \" + (actual), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n        };\n        return [marker, style];\n      }, -2);\n      $defs(self, '$is_sibling_list_item?', function $Parser_is_sibling_list_item$ques$31(line, list_type, sibling_trait) {\n        var $a, self = this, $ret_or_1 = nil;\n\n        if ($eqeqeq($$$('Regexp'), sibling_trait)) {\n          return sibling_trait['$match?'](line)\n        } else if ($truthy(($ret_or_1 = $$('ListRxMap')['$[]'](list_type)['$=~'](line)))) {\n          return sibling_trait['$=='](self.$resolve_list_marker(list_type, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))\n        } else {\n          return $ret_or_1\n        }\n      });\n      $defs(self, '$parse_table', function $$parse_table(table_reader, parent, attributes) {\n        var $a, $b, $c, self = this, table = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, $ret_or_1 = nil, implicit_header = nil, parser_ctx = nil, format = nil, loop_idx = nil, implicit_header_boundary = nil, line = nil, beyond_first = nil, next_cellspec = nil, m = nil, pre_match = nil, post_match = nil, cell_text = nil, $logical_op_recvr_tmp_2 = nil;\n\n        \n        table = $$('Table').$new(parent, attributes);\n        if (($truthy(attributes['$key?'](\"cols\")) && ($not((colspecs = self.$parse_colspecs(attributes['$[]'](\"cols\")))['$empty?']())))) {\n          \n          table.$create_columns(colspecs);\n          explicit_colspecs = true;\n        };\n        skipped = ($truthy(($ret_or_1 = table_reader.$skip_blank_lines())) ? ($ret_or_1) : (0));\n        if ($truthy(attributes['$[]'](\"header-option\"))) {\n          table['$has_header_option='](true)\n        } else if (($eqeq(skipped, 0) && ($not(attributes['$[]'](\"noheader-option\"))))) {\n          \n          table['$has_header_option='](\"implicit\");\n          implicit_header = true;\n        };\n        parser_ctx = $$$($$('Table'), 'ParserContext').$new(table_reader, table, attributes);\n        $a = [parser_ctx.$format(), -1, nil], (format = $a[0]), (loop_idx = $a[1]), (implicit_header_boundary = $a[2]), $a;\n        while ($truthy((line = table_reader.$read_line()))) {\n        \n          if (($truthy((beyond_first = $rb_gt((loop_idx = $rb_plus(loop_idx, 1)), 0))) && ($truthy(line['$empty?']())))) {\n            \n            line = nil;\n            if ($truthy(implicit_header_boundary)) {\n              implicit_header_boundary = $rb_plus(implicit_header_boundary, 1)\n            };\n          } else if ($eqeq(format, \"psv\")) {\n            if ($truthy(parser_ctx['$starts_with_delimiter?'](line))) {\n              \n              line = line.$slice(1, line.$length());\n              parser_ctx.$close_open_cell();\n              if ($truthy(implicit_header_boundary)) {\n                implicit_header_boundary = nil\n              };\n            } else {\n              \n              $b = self.$parse_cellspec(line, \"start\", parser_ctx.$delimiter()), $a = $to_ary($b), (next_cellspec = ($a[0] == null ? nil : $a[0])), (line = ($a[1] == null ? nil : $a[1])), $b;\n              if ($truthy(next_cellspec)) {\n                \n                parser_ctx.$close_open_cell(next_cellspec);\n                if ($truthy(implicit_header_boundary)) {\n                  implicit_header_boundary = nil\n                };\n              } else if (($truthy(implicit_header_boundary) && ($eqeq(implicit_header_boundary, loop_idx)))) {\n                table['$has_header_option=']((implicit_header = (implicit_header_boundary = nil)))\n              };\n            }\n          };\n          if (!$truthy(beyond_first)) {\n            \n            table_reader.$mark();\n            if ($truthy(implicit_header)) {\n              if (($truthy(table_reader['$has_more_lines?']()) && ($truthy(table_reader.$peek_line()['$empty?']())))) {\n                implicit_header_boundary = 1\n              } else {\n                table['$has_header_option=']((implicit_header = nil))\n              }\n            };\n          };\n          $a = false;while ($a || $truthy(true)) {$a = false;\n          if (($truthy(line) && ($truthy((m = parser_ctx.$match_delimiter(line)))))) {\n              \n              $b = [m.$pre_match(), m.$post_match()], (pre_match = $b[0]), (post_match = $b[1]), $b;\n              if ($eqeqeq(\"csv\", ($ret_or_1 = format))) {\n                \n                if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?'](pre_match))) {\n                  \n                  parser_ctx.$skip_past_delimiter(pre_match);\n                  if ($truthy((line = post_match)['$empty?']())) {\n                    break\n                  };\n                  $a = true;continue;\n                };\n                parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + (pre_match));\n              } else if ($eqeqeq(\"dsv\", $ret_or_1)) {\n                \n                if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                  \n                  parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                  if ($truthy((line = post_match)['$empty?']())) {\n                    \n                    parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + ($$('LF')));\n                    parser_ctx.$keep_cell_open();\n                    break;\n                  };\n                  $a = true;continue;\n                };\n                parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + (pre_match));\n              } else {\n                \n                if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                  \n                  parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                  if ($truthy((line = post_match)['$empty?']())) {\n                    \n                    parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + ($$('LF')));\n                    parser_ctx.$keep_cell_open();\n                    break;\n                  };\n                  $a = true;continue;\n                };\n                $c = self.$parse_cellspec(pre_match), $b = $to_ary($c), (next_cellspec = ($b[0] == null ? nil : $b[0])), (cell_text = ($b[1] == null ? nil : $b[1])), $c;\n                parser_ctx.$push_cellspec(next_cellspec);\n                parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + (cell_text));\n              };\n              if ($truthy((line = post_match)['$empty?']())) {\n                line = nil\n              };\n              parser_ctx.$close_cell();\n            } else {\n              \n              parser_ctx['$buffer='](\"\" + (parser_ctx.$buffer()) + (line) + ($$('LF')));\n              \n              switch (format) {\n                case \"csv\":\n                  if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?']())) {\n                    \n                    if (($truthy(implicit_header_boundary) && ($eqeq(loop_idx, 0)))) {\n                      table['$has_header_option=']((implicit_header = (implicit_header_boundary = nil)))\n                    };\n                    parser_ctx.$keep_cell_open();\n                  } else {\n                    parser_ctx.$close_cell(true)\n                  }\n                  break;\n                case \"dsv\":\n                  parser_ctx.$close_cell(true)\n                  break;\n                default:\n                  parser_ctx.$keep_cell_open()\n              };\n              break;\n            }\n          };\n          if ($truthy(parser_ctx['$cell_open?']())) {\n            if (!$truthy(table_reader['$has_more_lines?']())) {\n              parser_ctx.$close_cell(true)\n            }\n          } else if ($truthy(($ret_or_1 = table_reader.$skip_blank_lines()))) {\n            $ret_or_1\n          } else {\n            break\n          };\n        };\n        if (!($eqeq((($logical_op_recvr_tmp_2 = table.$attributes()), ($truthy(($ret_or_1 = $logical_op_recvr_tmp_2['$[]'](\"colcount\"))) ? ($ret_or_1) : (($a = [\"colcount\", table.$columns().$size()], $send($logical_op_recvr_tmp_2, '[]=', $a), $a[$a.length - 1])))), 0) || ($truthy(explicit_colspecs)))) {\n          table.$assign_column_widths()\n        };\n        if ($truthy(implicit_header)) {\n          table['$has_header_option='](true)\n        };\n        table.$partition_header_footer(attributes);\n        return table;\n      });\n      $defs(self, '$parse_colspecs', function $$parse_colspecs(records) {\n        var specs = nil;\n\n        \n        if ($truthy(records['$include?'](\" \"))) {\n          records = records.$delete(\" \")\n        };\n        if ($eqeq(records, records.$to_i().$to_s())) {\n          return $send($$$('Array'), 'new', [records.$to_i()], function $$32(){\n            return $hash2([\"width\"], {\"width\": 1})})\n        };\n        specs = [];\n        $send(($truthy(records['$include?'](\",\")) ? (records.$split(\",\", -1)) : (records.$split(\";\", -1))), 'each', [], function $$33(record){var $a, $b, m = nil, spec = nil, colspec = nil, rowspec = nil, width = nil;\n\n          \n          if (record == null) record = nil;\n          if ($truthy(record['$empty?']())) {\n            return specs['$<<']($hash2([\"width\"], {\"width\": 1}))\n          } else if ($truthy((m = $$('ColumnSpecRx').$match(record)))) {\n            \n            spec = $hash2([], {});\n            if ($truthy(m['$[]'](2))) {\n              \n              $b = m['$[]'](2).$split(\".\"), $a = $to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n              if (($not(colspec['$nil_or_empty?']()) && ($truthy($$('TableCellHorzAlignments')['$key?'](colspec))))) {\n                spec['$[]='](\"halign\", $$('TableCellHorzAlignments')['$[]'](colspec))\n              };\n              if (($not(rowspec['$nil_or_empty?']()) && ($truthy($$('TableCellVertAlignments')['$key?'](rowspec))))) {\n                spec['$[]='](\"valign\", $$('TableCellVertAlignments')['$[]'](rowspec))\n              };\n            };\n            if ($truthy((width = m['$[]'](3)))) {\n              spec['$[]='](\"width\", ($eqeq(width, \"~\") ? (-1) : (width.$to_i())))\n            } else {\n              spec['$[]='](\"width\", 1)\n            };\n            if (($truthy(m['$[]'](4)) && ($truthy($$('TableCellStyles')['$key?'](m['$[]'](4)))))) {\n              spec['$[]='](\"style\", $$('TableCellStyles')['$[]'](m['$[]'](4)))\n            };\n            if ($truthy(m['$[]'](1))) {\n              return $send((1), 'upto', [m['$[]'](1).$to_i()], function $$34(){\n                return specs['$<<'](spec.$merge())})\n            } else {\n              return specs['$<<'](spec)\n            };\n          } else {\n            return nil\n          };});\n        return specs;\n      });\n      $defs(self, '$parse_cellspec', function $$parse_cellspec(line, pos, delimiter) {\n        var $a, $b, m = nil, rest = nil, spec_part = nil, _ = nil, spec = nil, colspec = nil, rowspec = nil;\n\n        \n        if (pos == null) pos = \"end\";\n        if (delimiter == null) delimiter = nil;\n        $a = [nil, \"\"], (m = $a[0]), (rest = $a[1]), $a;\n        if ($eqeq(pos, \"start\")) {\n          if ($truthy(line['$include?'](delimiter))) {\n            \n            $b = line.$partition(delimiter), $a = $to_ary($b), (spec_part = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (rest = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy((m = $$('CellSpecStartRx').$match(spec_part)))) {\n              if ($truthy(m['$[]'](0)['$empty?']())) {\n                return [$hash2([], {}), rest]\n              }\n            } else {\n              return [nil, line]\n            };\n          } else {\n            return [nil, line]\n          }\n        } else if ($truthy((m = $$('CellSpecEndRx').$match(line)))) {\n          \n          if ($truthy(m['$[]'](0).$lstrip()['$empty?']())) {\n            return [$hash2([], {}), line.$rstrip()]\n          };\n          rest = m.$pre_match();\n        } else {\n          return [$hash2([], {}), line]\n        };\n        spec = $hash2([], {});\n        if ($truthy(m['$[]'](1))) {\n          \n          $b = m['$[]'](1).$split(\".\"), $a = $to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          colspec = ($truthy(colspec['$nil_or_empty?']()) ? (1) : (colspec.$to_i()));\n          rowspec = ($truthy(rowspec['$nil_or_empty?']()) ? (1) : (rowspec.$to_i()));\n          \n          switch (m['$[]'](2)) {\n            case \"+\":\n              \n              if (!$eqeq(colspec, 1)) {\n                spec['$[]='](\"colspan\", colspec)\n              };\n              if (!$eqeq(rowspec, 1)) {\n                spec['$[]='](\"rowspan\", rowspec)\n              };\n              break;\n            case \"*\":\n              if (!$eqeq(colspec, 1)) {\n                spec['$[]='](\"repeatcol\", colspec)\n              }\n              break;\n            default:\n              nil\n          };\n        };\n        if ($truthy(m['$[]'](3))) {\n          \n          $b = m['$[]'](3).$split(\".\"), $a = $to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          if (($not(colspec['$nil_or_empty?']()) && ($truthy($$('TableCellHorzAlignments')['$key?'](colspec))))) {\n            spec['$[]='](\"halign\", $$('TableCellHorzAlignments')['$[]'](colspec))\n          };\n          if (($not(rowspec['$nil_or_empty?']()) && ($truthy($$('TableCellVertAlignments')['$key?'](rowspec))))) {\n            spec['$[]='](\"valign\", $$('TableCellVertAlignments')['$[]'](rowspec))\n          };\n        };\n        if (($truthy(m['$[]'](4)) && ($truthy($$('TableCellStyles')['$key?'](m['$[]'](4)))))) {\n          spec['$[]='](\"style\", $$('TableCellStyles')['$[]'](m['$[]'](4)))\n        };\n        return [spec, rest];\n      }, -2);\n      $defs(self, '$parse_style_attribute', function $$parse_style_attribute(attributes, reader) {\n        var $a, self = this, raw_style = nil, name = nil, accum = nil, parsed_attrs = nil, parsed_style = nil, existing_role = nil;\n\n        \n        if (reader == null) reader = nil;\n        if ((($truthy((raw_style = attributes['$[]'](1))) && ($not(raw_style['$include?'](\" \")))) && ($truthy($$('Compliance').$shorthand_property_syntax())))) {\n          \n          name = nil;\n          accum = \"\";\n          parsed_attrs = $hash2([], {});\n          $send(raw_style, 'each_char', [], function $$35(c){var self = $$35.$$s == null ? this : $$35.$$s;\n\n            \n            if (c == null) c = nil;\n            \n            switch (c) {\n              case \".\":\n                \n                self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n                accum = \"\";\n                return (name = \"role\");\n              case \"#\":\n                \n                self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n                accum = \"\";\n                return (name = \"id\");\n              case \"%\":\n                \n                self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n                accum = \"\";\n                return (name = \"option\");\n              default:\n                return (accum = $rb_plus(accum, c))\n            };}, {$$s: self});\n          if ($truthy(name)) {\n            \n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            if ($truthy((parsed_style = parsed_attrs['$[]'](\"style\")))) {\n              attributes['$[]='](\"style\", parsed_style)\n            };\n            if ($truthy(parsed_attrs['$key?'](\"id\"))) {\n              attributes['$[]='](\"id\", parsed_attrs['$[]'](\"id\"))\n            };\n            if ($truthy(parsed_attrs['$key?'](\"role\"))) {\n              attributes['$[]='](\"role\", ($truthy((existing_role = attributes['$[]'](\"role\"))['$nil_or_empty?']()) ? (parsed_attrs['$[]'](\"role\").$join(\" \")) : (\"\" + (existing_role) + \" \" + (parsed_attrs['$[]'](\"role\").$join(\" \")))))\n            };\n            if ($truthy(parsed_attrs['$key?'](\"option\"))) {\n              $send(parsed_attrs['$[]'](\"option\"), 'each', [], function $$36(opt){var $a;\n\n                \n                if (opt == null) opt = nil;\n                return ($a = [\"\" + (opt) + \"-option\", \"\"], $send(attributes, '[]=', $a), $a[$a.length - 1]);})\n            };\n            return parsed_style;\n          } else {\n            return ($a = [\"style\", raw_style], $send(attributes, '[]=', $a), $a[$a.length - 1])\n          };\n        } else {\n          return ($a = [\"style\", raw_style], $send(attributes, '[]=', $a), $a[$a.length - 1])\n        };\n      }, -2);\n      $defs(self, '$yield_buffered_attribute', function $$yield_buffered_attribute(attrs, name, value, reader) {\n        var $a, self = this, $ret_or_1 = nil;\n\n        \n        if ($truthy(name)) {\n          if ($truthy(value['$empty?']())) {\n            if ($truthy(reader)) {\n              self.$logger().$warn(self.$message_with_context(\"invalid empty \" + (name) + \" detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n            } else {\n              self.$logger().$warn(\"invalid empty \" + (name) + \" detected in style attribute\")\n            }\n          } else if ($eqeq(name, \"id\")) {\n            \n            if ($truthy(attrs['$key?'](\"id\"))) {\n              if ($truthy(reader)) {\n                self.$logger().$warn(self.$message_with_context(\"multiple ids detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n              } else {\n                self.$logger().$warn(\"multiple ids detected in style attribute\")\n              }\n            };\n            attrs['$[]='](name, value);\n          } else {\n            ($truthy(($ret_or_1 = attrs['$[]'](name))) ? ($ret_or_1) : (($a = [name, []], $send(attrs, '[]=', $a), $a[$a.length - 1])))['$<<'](value)\n          }\n        } else if (!$truthy(value['$empty?']())) {\n          attrs['$[]='](\"style\", value)\n        };\n        return nil;\n      });\n      $defs(self, '$adjust_indentation!', function $Parser_adjust_indentation$excl$37(lines, indent_size, tab_size) {\n        var full_tab_space = nil, block_indent = nil, new_block_indent = nil;\n\n        \n        if (indent_size == null) indent_size = 0;\n        if (tab_size == null) tab_size = 0;\n        if ($truthy(lines['$empty?']())) {\n          return nil\n        };\n        if (($truthy($rb_gt(tab_size, 0)) && ($truthy($send(lines, 'any?', [], function $$38(line){\n          \n          if (line == null) line = nil;\n          return line['$include?']($$('TAB'));}))))) {\n          \n          full_tab_space = $rb_times(\" \", tab_size);\n          $send(lines, 'map!', [], function $$39(line){var tab_idx = nil, leading_tabs = nil, spaces_added = nil, idx = nil, result = nil;\n\n            \n            if (line == null) line = nil;\n            if (($truthy(line['$empty?']()) || ($truthy((tab_idx = line.$index($$('TAB')))['$nil?']())))) {\n              return line\n            } else {\n              \n              if ($eqeq(tab_idx, 0)) {\n                \n                leading_tabs = 0;\n                (function(){try { var $t_break = $thrower('break'); return $send(line, 'each_byte', [], function $$40(b){\n                  \n                  if (b == null) b = nil;\n                  if (!$eqeq(b, 9)) {\n                    $t_break.$throw()\n                  };\n                  return (leading_tabs = $rb_plus(leading_tabs, 1));})} catch($e) {\n                  if ($e === $t_break) return $e.$v;\n                  throw $e;\n                }})();\n                line = \"\" + ($rb_times(full_tab_space, leading_tabs)) + (line.$slice(leading_tabs, line.$length()));\n                if (!$truthy(line['$include?']($$('TAB')))) {\n                  return line\n                };\n              };\n              spaces_added = 0;\n              idx = 0;\n              result = \"\";\n              $send(line, 'each_char', [], function $$41(c){var offset = nil, spaces = nil;\n\n                \n                if (c == null) c = nil;\n                if ($eqeq(c, $$('TAB'))) {\n                  if ($eqeq((offset = $rb_plus(idx, spaces_added))['$%'](tab_size), 0)) {\n                    \n                    spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));\n                    result = $rb_plus(result, full_tab_space);\n                  } else {\n                    \n                    if (!$eqeq((spaces = $rb_minus(tab_size, offset['$%'](tab_size))), 1)) {\n                      spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1))\n                    };\n                    result = $rb_plus(result, $rb_times(\" \", spaces));\n                  }\n                } else {\n                  result = $rb_plus(result, c)\n                };\n                return (idx = $rb_plus(idx, 1));});\n              return result;\n            };});\n        };\n        if ($truthy($rb_lt(indent_size, 0))) {\n          return nil\n        };\n        block_indent = nil;\n        (function(){try { var $t_break = $thrower('break'); return $send(lines, 'each', [], function $$42(line){var line_indent = nil;\n\n          \n          if (line == null) line = nil;\n          if ($truthy(line['$empty?']())) {\n            return nil\n          };\n          if ($eqeq((line_indent = $rb_minus(line.$length(), line.$lstrip().$length())), 0)) {\n            \n            block_indent = nil;\n            $t_break.$throw();\n          };\n          if (($truthy(block_indent) && ($truthy($rb_lt(block_indent, line_indent))))) {\n            return nil\n          } else {\n            return (block_indent = line_indent)\n          };})} catch($e) {\n          if ($e === $t_break) return $e.$v;\n          throw $e;\n        }})();\n        if ($eqeq(indent_size, 0)) {\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], function $$43(line){\n              \n              if (line == null) line = nil;\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                \n                return line.$slice(block_indent, line.$length());\n              };})\n          }\n        } else {\n          \n          new_block_indent = $rb_times(\" \", indent_size);\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], function $$44(line){\n              \n              if (line == null) line = nil;\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line.$slice(block_indent, line.$length()))\n              };})\n          } else {\n            $send(lines, 'map!', [], function $$45(line){\n              \n              if (line == null) line = nil;\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line)\n              };})\n          };\n        };\n        return nil;\n      }, -2);\n      $defs(self, '$uniform?', function $Parser_uniform$ques$46(str, chr, len) {\n        \n        return str.$count(chr)['$=='](len)\n      });\n      return $defs(self, '$sanitize_attribute_name', function $$sanitize_attribute_name(name) {\n        \n        return name.$gsub($$('InvalidAttributeNameCharsRx'), \"\").$downcase()\n      });\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/path_resolver\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $eqeq = Opal.eqeq, $alias = Opal.alias, $rb_plus = Opal.rb_plus, $to_ary = Opal.to_ary, $send = Opal.send, $not = Opal.not, $neqeq = Opal.neqeq, $rb_gt = Opal.rb_gt, $gvars = Opal.gvars, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,attr_accessor,root?,posixify,expand_path,pwd,start_with?,==,match?,absolute_path?,+,length,descends_from?,slice,to_s,relative_path_from,new,include?,tr,partition_path,each,pop,<<,join_path,[],web_root?,unc?,index,split,delete,[]=,join,raise,!,fetch,warn,logger,empty?,nil_or_empty?,chomp,!=,>,size,extract_uri_prefix,end_with?,gsub,private,=~');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.file_separator = $proto._partition_path_web = $proto._partition_path_sys = $proto.working_dir = nil;\n      \n      self.$include($$('Logging'));\n      $const_set($nesting[0], 'DOT', \".\");\n      $const_set($nesting[0], 'DOT_DOT', \"..\");\n      $const_set($nesting[0], 'DOT_SLASH', \"./\");\n      $const_set($nesting[0], 'SLASH', \"/\");\n      $const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      $const_set($nesting[0], 'DOUBLE_SLASH', \"//\");\n      $const_set($nesting[0], 'URI_CLASSLOADER', \"uri:classloader:\");\n      $const_set($nesting[0], 'WindowsRootRx', /^(?:[a-zA-Z]:)?[\\\\\\/]/);\n      self.$attr_accessor(\"file_separator\");\n      self.$attr_accessor(\"working_dir\");\n      \n      $def(self, '$initialize', function $$initialize(file_separator, working_dir) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        \n        if (file_separator == null) file_separator = nil;\n        if (working_dir == null) working_dir = nil;\n        self.file_separator = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = file_separator)) ? ($ret_or_2) : ($$$($$$('File'), 'ALT_SEPARATOR'))))) ? ($ret_or_1) : ($$$($$$('File'), 'SEPARATOR')));\n        self.working_dir = ($truthy(working_dir) ? (($truthy(self['$root?'](working_dir)) ? (self.$posixify(working_dir)) : ($$$('File').$expand_path(working_dir)))) : ($$$('Dir').$pwd()));\n        self._partition_path_sys = $hash2([], {});\n        return (self._partition_path_web = $hash2([], {}));\n      }, -1);\n      \n      $def(self, '$absolute_path?', function $PathResolver_absolute_path$ques$1(path) {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        if ($truthy(($ret_or_1 = path['$start_with?']($$('SLASH'))))) {\n          return $ret_or_1\n        } else {\n          \n          if ($truthy(($ret_or_2 = self.file_separator['$==']($$('BACKSLASH'))))) {\n            \n            return $$('WindowsRootRx')['$match?'](path);\n          } else {\n            return $ret_or_2\n          };\n        }\n      });\n      if (($eqeq($$('RUBY_ENGINE'), \"opal\") && ($eqeq($$$('JAVASCRIPT_IO_MODULE'), \"xmlhttprequest\")))) {\n        \n        $def(self, '$root?', function $PathResolver_root$ques$2(path) {\n          var self = this, $ret_or_1 = nil;\n\n          if ($truthy(($ret_or_1 = self['$absolute_path?'](path)))) {\n            return $ret_or_1\n          } else {\n            \n            return path['$start_with?'](\"file://\", \"http://\", \"https://\");\n          }\n        })\n      } else if ($eqeq($$$('RUBY_ENGINE'), \"jruby\")) {\n        \n        $def(self, '$root?', function $PathResolver_root$ques$3(path) {\n          var self = this, $ret_or_1 = nil;\n\n          if ($truthy(($ret_or_1 = self['$absolute_path?'](path)))) {\n            return $ret_or_1\n          } else {\n            \n            return path['$start_with?']($$('URI_CLASSLOADER'));\n          }\n        })\n      } else {\n        $alias(self, \"root?\", \"absolute_path?\")\n      };\n      \n      $def(self, '$unc?', function $PathResolver_unc$ques$4(path) {\n        \n        return path['$start_with?']($$('DOUBLE_SLASH'))\n      });\n      \n      $def(self, '$web_root?', function $PathResolver_web_root$ques$5(path) {\n        \n        return path['$start_with?']($$('SLASH'))\n      });\n      \n      $def(self, '$descends_from?', function $PathResolver_descends_from$ques$6(path, base) {\n        var $ret_or_1 = nil;\n\n        if ($eqeq(base, path)) {\n          return 0\n        } else if ($eqeq(base, $$('SLASH'))) {\n          if ($truthy(($ret_or_1 = path['$start_with?']($$('SLASH'))))) {\n            return 1\n          } else {\n            return $ret_or_1\n          }\n        } else if ($truthy(($ret_or_1 = path['$start_with?']($rb_plus(base, $$('SLASH')))))) {\n          \n          return $rb_plus(base.$length(), 1);\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$relative_path', function $$relative_path(path, base) {\n        var self = this, offset = nil;\n\n        if ($truthy(self['$root?'](path))) {\n          if ($truthy((offset = self['$descends_from?'](path, base)))) {\n            return path.$slice(offset, path.$length())\n          } else {\n            \n            try {\n              return $$('Pathname').$new(path).$relative_path_from($$('Pathname').$new(base)).$to_s()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  return path\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };\n          }\n        } else {\n          return path\n        }\n      });\n      \n      $def(self, '$posixify', function $$posixify(path) {\n        var self = this;\n\n        if ($truthy(path)) {\n          if (($eqeq(self.file_separator, $$('BACKSLASH')) && ($truthy(path['$include?']($$('BACKSLASH')))))) {\n            \n            return path.$tr($$('BACKSLASH'), $$('SLASH'));\n          } else {\n            return path\n          }\n        } else {\n          return \"\"\n        }\n      });\n      $alias(self, \"posixfy\", \"posixify\");\n      \n      $def(self, '$expand_path', function $$expand_path(path) {\n        var $a, $b, self = this, path_segments = nil, path_root = nil, resolved_segments = nil;\n\n        \n        $b = self.$partition_path(path), $a = $to_ary($b), (path_segments = ($a[0] == null ? nil : $a[0])), (path_root = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(path['$include?']($$('DOT_DOT')))) {\n          \n          resolved_segments = [];\n          $send(path_segments, 'each', [], function $$7(segment){\n            \n            if (segment == null) segment = nil;\n            if ($eqeq(segment, $$('DOT_DOT'))) {\n              return resolved_segments.$pop()\n            } else {\n              return resolved_segments['$<<'](segment)\n            };});\n          return self.$join_path(resolved_segments, path_root);\n        } else {\n          return self.$join_path(path_segments, path_root)\n        };\n      });\n      \n      $def(self, '$partition_path', function $$partition_path(path, web) {\n        var $a, self = this, result = nil, cache = nil, posix_path = nil, root = nil, path_segments = nil;\n\n        \n        if (web == null) web = nil;\n        if ($truthy((result = (cache = ($truthy(web) ? (self._partition_path_web) : (self._partition_path_sys)))['$[]'](path)))) {\n          return result\n        };\n        posix_path = self.$posixify(path);\n        if ($truthy(web)) {\n          if ($truthy(self['$web_root?'](posix_path))) {\n            root = $$('SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$('DOT_SLASH')))) {\n            root = $$('DOT_SLASH')\n          }\n        } else if ($truthy(self['$root?'](posix_path))) {\n          if ($truthy(self['$unc?'](posix_path))) {\n            root = $$('DOUBLE_SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$('SLASH')))) {\n            root = $$('SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$('URI_CLASSLOADER')))) {\n            root = posix_path.$slice(0, $$('URI_CLASSLOADER').$length())\n          } else {\n            root = posix_path.$slice(0, $rb_plus(posix_path.$index($$('SLASH')), 1))\n          }\n        } else if ($truthy(posix_path['$start_with?']($$('DOT_SLASH')))) {\n          root = $$('DOT_SLASH')\n        };\n        path_segments = ($truthy(root) ? (posix_path.$slice(root.$length(), posix_path.$length())) : (posix_path)).$split($$('SLASH'));\n        path_segments.$delete($$('DOT'));\n        return ($a = [path, [path_segments, root]], $send(cache, '[]=', $a), $a[$a.length - 1]);\n      }, -2);\n      \n      $def(self, '$join_path', function $$join_path(segments, root) {\n        \n        \n        if (root == null) root = nil;\n        if ($truthy(root)) {\n          return \"\" + (root) + (segments.$join($$('SLASH')))\n        } else {\n          \n          return segments.$join($$('SLASH'));\n        };\n      }, -2);\n      \n      $def(self, '$system_path', function $$system_path(target, start, jail, opts) {\n        var $a, $b, self = this, target_path = nil, $ret_or_1 = nil, target_segments = nil, jail_segments = nil, jail_root = nil, recheck = nil, start_segments = nil, start_root = nil, resolved_segments = nil, unresolved_segments = nil, warned = nil;\n\n        \n        if (start == null) start = nil;\n        if (jail == null) jail = nil;\n        if (opts == null) opts = $hash2([], {});\n        if ($truthy(jail)) {\n          \n          if (!$truthy(self['$root?'](jail))) {\n            self.$raise($$$('SecurityError'), \"Jail is not an absolute path: \" + (jail))\n          };\n          jail = self.$posixify(jail);\n        };\n        if ($truthy(target)) {\n          if ($truthy(self['$root?'](target))) {\n            \n            target_path = self.$expand_path(target);\n            if (($truthy(jail) && ($not(self['$descends_from?'](target_path, jail))))) {\n              if ($truthy(opts.$fetch(\"recover\", true))) {\n                \n                self.$logger().$warn(\"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" is outside of jail; recovering automatically\");\n                $b = self.$partition_path(target_path), $a = $to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n                $b = self.$partition_path(jail), $a = $to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n                return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n              } else {\n                self.$raise($$$('SecurityError'), \"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n              }\n            };\n            return target_path;\n          } else {\n            $b = self.$partition_path(target), $a = $to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b\n          }\n        } else {\n          target_segments = []\n        };\n        if ($truthy(target_segments['$empty?']())) {\n          if ($truthy(start['$nil_or_empty?']())) {\n            return ($truthy(($ret_or_1 = jail)) ? ($ret_or_1) : (self.working_dir))\n          } else if ($truthy(self['$root?'](start))) {\n            if ($truthy(jail)) {\n              start = self.$posixify(start)\n            } else {\n              return self.$expand_path(start)\n            }\n          } else {\n            \n            $b = self.$partition_path(start), $a = $to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n            start = ($truthy(($ret_or_1 = jail)) ? ($ret_or_1) : (self.working_dir));\n          }\n        } else if ($truthy(start['$nil_or_empty?']())) {\n          start = ($truthy(($ret_or_1 = jail)) ? ($ret_or_1) : (self.working_dir))\n        } else if ($truthy(self['$root?'](start))) {\n          if ($truthy(jail)) {\n            start = self.$posixify(start)\n          }\n        } else {\n          start = \"\" + (($truthy(($ret_or_1 = jail)) ? ($ret_or_1) : (self.working_dir)).$chomp(\"/\")) + \"/\" + (start)\n        };\n        if ((($truthy(jail) && ($truthy((recheck = self['$descends_from?'](start, jail)['$!']())))) && ($eqeq(self.file_separator, $$('BACKSLASH'))))) {\n          \n          $b = self.$partition_path(start), $a = $to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), $b;\n          $b = self.$partition_path(jail), $a = $to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n          if ($neqeq(start_root, jail_root)) {\n            if ($truthy(opts.$fetch(\"recover\", true))) {\n              \n              self.$logger().$warn(\"start path for \" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" is outside of jail root; recovering automatically\");\n              start_segments = jail_segments;\n              recheck = false;\n            } else {\n              self.$raise($$$('SecurityError'), \"start path for \" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" \" + (start) + \" refers to location outside jail root: \" + (jail) + \" (disallowed in safe mode)\")\n            }\n          };\n        } else {\n          $b = self.$partition_path(start), $a = $to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b\n        };\n        if ($truthy((resolved_segments = $rb_plus(start_segments, target_segments))['$include?']($$('DOT_DOT')))) {\n          \n          $a = [resolved_segments, []], (unresolved_segments = $a[0]), (resolved_segments = $a[1]), $a;\n          if ($truthy(jail)) {\n            \n            if (!$truthy(jail_segments)) {\n              $b = self.$partition_path(jail), $a = $to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            warned = false;\n            $send(unresolved_segments, 'each', [], function $$8(segment){var self = $$8.$$s == null ? this : $$8.$$s;\n\n              \n              if (segment == null) segment = nil;\n              if ($eqeq(segment, $$('DOT_DOT'))) {\n                if ($truthy($rb_gt(resolved_segments.$size(), jail_segments.$size()))) {\n                  return resolved_segments.$pop()\n                } else if ($truthy(opts.$fetch(\"recover\", true))) {\n                  if ($truthy(warned)) {\n                    return nil\n                  } else {\n                    \n                    self.$logger().$warn(\"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" has illegal reference to ancestor of jail; recovering automatically\");\n                    return (warned = true);\n                  }\n                } else {\n                  return self.$raise($$$('SecurityError'), \"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" \" + (target) + \" refers to location outside jail: \" + (jail) + \" (disallowed in safe mode)\")\n                }\n              } else {\n                return resolved_segments['$<<'](segment)\n              };}, {$$s: self});\n          } else {\n            $send(unresolved_segments, 'each', [], function $$9(segment){\n              \n              if (segment == null) segment = nil;\n              if ($eqeq(segment, $$('DOT_DOT'))) {\n                return resolved_segments.$pop()\n              } else {\n                return resolved_segments['$<<'](segment)\n              };})\n          };\n        };\n        if ($truthy(recheck)) {\n          \n          target_path = self.$join_path(resolved_segments, jail_root);\n          if ($truthy(self['$descends_from?'](target_path, jail))) {\n            return target_path\n          } else if ($truthy(opts.$fetch(\"recover\", true))) {\n            \n            self.$logger().$warn(\"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" is outside of jail; recovering automatically\");\n            if (!$truthy(jail_segments)) {\n              $b = self.$partition_path(jail), $a = $to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n          } else {\n            return self.$raise($$$('SecurityError'), \"\" + (($truthy(($ret_or_1 = opts['$[]'](\"target_name\"))) ? ($ret_or_1) : (\"path\"))) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n          };\n        } else {\n          return self.$join_path(resolved_segments, jail_root)\n        };\n      }, -2);\n      \n      $def(self, '$web_path', function $$web_path(target, start) {\n        var $a, $b, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, resolved_segments = nil, resolved_path = nil;\n\n        \n        if (start == null) start = nil;\n        target = self.$posixify(target);\n        start = self.$posixify(start);\n        if (!($truthy(start['$nil_or_empty?']()) || ($truthy(self['$web_root?'](target))))) {\n          $b = self.$extract_uri_prefix(\"\" + (start) + (($truthy(start['$end_with?']($$('SLASH'))) ? (\"\") : ($$('SLASH')))) + (target)), $a = $to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (uri_prefix = ($a[1] == null ? nil : $a[1])), $b\n        };\n        $b = self.$partition_path(target, true), $a = $to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), $b;\n        resolved_segments = [];\n        $send(target_segments, 'each', [], function $$10(segment){\n          \n          if (segment == null) segment = nil;\n          if ($eqeq(segment, $$('DOT_DOT'))) {\n            if ($truthy(resolved_segments['$empty?']())) {\n              if (($truthy(target_root) && ($neqeq(target_root, $$('DOT_SLASH'))))) {\n                return nil\n              } else {\n                return resolved_segments['$<<'](segment)\n              }\n            } else if ($eqeq(resolved_segments['$[]'](-1), $$('DOT_DOT'))) {\n              return resolved_segments['$<<'](segment)\n            } else {\n              return resolved_segments.$pop()\n            }\n          } else {\n            return resolved_segments['$<<'](segment)\n          };});\n        if ($truthy((resolved_path = self.$join_path(resolved_segments, target_root))['$include?'](\" \"))) {\n          resolved_path = resolved_path.$gsub(\" \", \"%20\")\n        };\n        if ($truthy(uri_prefix)) {\n          return \"\" + (uri_prefix) + (resolved_path)\n        } else {\n          return resolved_path\n        };\n      }, -2);\n      self.$private();\n      return $def(self, '$extract_uri_prefix', function $$extract_uri_prefix(str) {\n        var $a;\n\n        if (($truthy(str['$include?'](\":\")) && ($truthy($$('UriSniffRx')['$=~'](str))))) {\n          return [str.$slice((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length(), str.$length()), (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))]\n        } else {\n          return str\n        }\n      });\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/reader\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $hash2 = Opal.hash2, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $to_ary = Opal.to_ary, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $send = Opal.send, $rb_minus = Opal.rb_minus, $thrower = Opal.thrower, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $neqeq = Opal.neqeq, $to_a = Opal.to_a, $assign_ivar_val = Opal.assign_ivar_val, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_ge = Opal.rb_ge, $gvars = Opal.gvars, $rb_lt = Opal.rb_lt, $hash = Opal.hash, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('include,attr_reader,+,line_info,attr_accessor,!,===,split,file,dir,dirname,path,basename,lineno,reverse,prepare_lines,empty?,nil_or_empty?,peek_line,[],>,slice,length,process_line,times,shift,read_line,<<,-,unshift_all,has_more_lines?,read_lines,join,unshift,unshift_line,unshift_lines,replace_next_line,start_with?,==,*,read_lines_until,size,clear,cursor,[]=,fetch,!=,cursor_at_mark,warn,logger,message_with_context,pop,push,respond_to?,reverse_each,new,tap,each,instance_variables,instance_variable_get,drop,instance_variable_set,class,object_id,inspect,private,prepare_source_array,prepare_source_string,chomp,valid_encoding?,to_s,raise,to_i,attributes,catalog,pop_include,parse,path=,dup,end_with?,keys,rindex,rootname,key?,attr,reverse!,>=,exceeds_max_depth?,nil?,include_processors?,extensions,extensions?,include_processors,map,skip_front_matter!,adjust_indentation!,include?,=~,preprocess_conditional_directive,preprocess_include_directive,downcase,error,none?,any?,all?,strip,send,resolve_expr_val,rstrip,sub_attributes,attribute_missing,info,parse_attributes,find,handles?,instance,process_method,safe,resolve_include_path,method,split_delimited_value,partition,<,to_a,uniq,sort,call,each_line,infinite?,push_include,delete,first,values,value?,create_include_cursor,delete_at,keep_if,read,uriish?,attr?,require_library,normalize_system_path,file?,relative_path,path_resolver,base_dir,to_f');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Reader');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.file = $proto.lines = $proto.look_ahead = $proto.unescape_next_line = $proto.lineno = $proto.process_lines = $proto.dir = $proto.path = $proto.mark = $proto.source_lines = $proto.saved = nil;\n      \n      self.$include($$('Logging'));\n      (function($base, $super) {\n        var self = $klass($base, $super, 'Cursor');\n\n        var $proto = self.$$prototype;\n\n        $proto.lineno = $proto.path = nil;\n        \n        self.$attr_reader(\"file\", \"dir\", \"path\", \"lineno\");\n        \n        $def(self, '$initialize', function $$initialize(file, dir, path, lineno) {\n          var $a, self = this;\n\n          \n          if (dir == null) dir = nil;\n          if (path == null) path = nil;\n          if (lineno == null) lineno = 1;\n          return $a = [file, dir, path, lineno], (self.file = $a[0]), (self.dir = $a[1]), (self.path = $a[2]), (self.lineno = $a[3]), $a;\n        }, -2);\n        \n        $def(self, '$advance', function $$advance(num) {\n          var self = this;\n\n          return (self.lineno = $rb_plus(self.lineno, num))\n        });\n        \n        $def(self, '$line_info', function $$line_info() {\n          var self = this;\n\n          return \"\" + (self.path) + \": line \" + (self.lineno)\n        });\n        return $alias(self, \"to_s\", \"line_info\");\n      })($nesting[0], null);\n      self.$attr_reader(\"file\");\n      self.$attr_reader(\"dir\");\n      self.$attr_reader(\"path\");\n      self.$attr_reader(\"lineno\");\n      self.$attr_reader(\"source_lines\");\n      self.$attr_accessor(\"process_lines\");\n      self.$attr_accessor(\"unterminated\");\n      \n      $def(self, '$initialize', function $$initialize(data, cursor, opts) {\n        var $a, $b, self = this, $ret_or_1 = nil;\n\n        \n        if (data == null) data = nil;\n        if (cursor == null) cursor = nil;\n        if (opts == null) opts = $hash2([], {});\n        if ($not(cursor)) {\n          \n          self.file = nil;\n          self.dir = \".\";\n          self.path = \"<stdin>\";\n          self.lineno = 1;\n        } else if ($eqeqeq($$$('String'), cursor)) {\n          \n          self.file = cursor;\n          $b = $$$('File').$split(self.file), $a = $to_ary($b), (self.dir = ($a[0] == null ? nil : $a[0])), (self.path = ($a[1] == null ? nil : $a[1])), $b;\n          self.lineno = 1;\n        } else {\n          \n          if ($truthy((self.file = cursor.$file()))) {\n            \n            self.dir = ($truthy(($ret_or_1 = cursor.$dir())) ? ($ret_or_1) : ($$$('File').$dirname(self.file)));\n            self.path = ($truthy(($ret_or_1 = cursor.$path())) ? ($ret_or_1) : ($$$('File').$basename(self.file)));\n          } else {\n            \n            self.dir = ($truthy(($ret_or_1 = cursor.$dir())) ? ($ret_or_1) : (\".\"));\n            self.path = ($truthy(($ret_or_1 = cursor.$path())) ? ($ret_or_1) : (\"<stdin>\"));\n          };\n          self.lineno = ($truthy(($ret_or_1 = cursor.$lineno())) ? ($ret_or_1) : (1));\n        };\n        self.lines = (self.source_lines = self.$prepare_lines(data, opts)).$reverse();\n        self.mark = nil;\n        self.look_ahead = 0;\n        self.process_lines = true;\n        self.unescape_next_line = false;\n        self.unterminated = nil;\n        return (self.saved = nil);\n      }, -1);\n      \n      $def(self, '$has_more_lines?', function $Reader_has_more_lines$ques$1() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return false;\n        } else {\n          return true\n        }\n      });\n      \n      $def(self, '$empty?', function $Reader_empty$ques$2() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return true;\n        } else {\n          return false\n        }\n      });\n      $alias(self, \"eof?\", \"empty?\");\n      \n      $def(self, '$next_line_empty?', function $Reader_next_line_empty$ques$3() {\n        var self = this;\n\n        return self.$peek_line()['$nil_or_empty?']()\n      });\n      \n      $def(self, '$peek_line', function $$peek_line(direct) {\n        var self = this, next_line = nil, line = nil;\n\n        \n        if (direct == null) direct = false;\n        while ($truthy(true)) {\n        \n          next_line = self.lines['$[]'](-1);\n          if (($truthy(direct) || ($truthy($rb_gt(self.look_ahead, 0))))) {\n            return ($truthy(self.unescape_next_line) ? (next_line.$slice(1, next_line.$length())) : (next_line))\n          } else if ($truthy(next_line)) {\n            if ($truthy((line = self.$process_line(next_line)))) {\n              return line\n            }\n          } else {\n            \n            self.look_ahead = 0;\n            return nil;\n          };\n        };\n      }, -1);\n      \n      $def(self, '$peek_lines', function $$peek_lines(num, direct) {\n        var self = this, old_look_ahead = nil, result = nil, $ret_or_1 = nil;\n\n        \n        if (num == null) num = nil;\n        if (direct == null) direct = false;\n        old_look_ahead = self.look_ahead;\n        result = [];\n        (function(){try { var $t_break = $thrower('break'); return $send(($truthy(($ret_or_1 = num)) ? ($ret_or_1) : ($$('MAX_INT'))), 'times', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, line = nil;\n          if (self.lineno == null) self.lineno = nil;\n\n          if ($truthy((line = ($truthy(direct) ? (self.$shift()) : (self.$read_line()))))) {\n            return result['$<<'](line)\n          } else {\n            \n            if ($truthy(direct)) {\n              self.lineno = $rb_minus(self.lineno, 1)\n            };\n            $t_break.$throw();\n          }}, {$$s: self})} catch($e) {\n          if ($e === $t_break) return $e.$v;\n          throw $e;\n        }})();\n        if (!$truthy(result['$empty?']())) {\n          \n          self.$unshift_all(result);\n          if ($truthy(direct)) {\n            self.look_ahead = old_look_ahead\n          };\n        };\n        return result;\n      }, -1);\n      \n      $def(self, '$read_line', function $$read_line() {\n        var self = this;\n\n        if (($truthy($rb_gt(self.look_ahead, 0)) || ($truthy(self['$has_more_lines?']())))) {\n          return self.$shift()\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$read_lines', function $$read_lines() {\n        var self = this, lines = nil;\n\n        \n        lines = [];\n        while ($truthy(self['$has_more_lines?']())) {\n        lines['$<<'](self.$shift())\n        };\n        return lines;\n      });\n      $alias(self, \"readlines\", \"read_lines\");\n      \n      $def(self, '$read', function $$read() {\n        var self = this;\n\n        return self.$read_lines().$join($$('LF'))\n      });\n      \n      $def(self, '$advance', function $$advance() {\n        var self = this;\n\n        if ($truthy(self.$shift())) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$unshift_line', function $$unshift_line(line_to_restore) {\n        var self = this;\n\n        \n        self.$unshift(line_to_restore);\n        return nil;\n      });\n      $alias(self, \"restore_line\", \"unshift_line\");\n      \n      $def(self, '$unshift_lines', function $$unshift_lines(lines_to_restore) {\n        var self = this;\n\n        return self.$unshift_all(lines_to_restore)\n      });\n      $alias(self, \"restore_lines\", \"unshift_lines\");\n      \n      $def(self, '$replace_next_line', function $$replace_next_line(replacement) {\n        var self = this;\n\n        \n        self.$shift();\n        self.$unshift(replacement);\n        return true;\n      });\n      $alias(self, \"replace_line\", \"replace_next_line\");\n      \n      $def(self, '$skip_blank_lines', function $$skip_blank_lines() {\n        var self = this, num_skipped = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil\n        };\n        num_skipped = 0;\n        while ($truthy((next_line = self.$peek_line()))) {\n        if ($truthy(next_line['$empty?']())) {\n            \n            self.$shift();\n            num_skipped = $rb_plus(num_skipped, 1);\n          } else {\n            return num_skipped\n          }\n        };\n      });\n      \n      $def(self, '$skip_comment_lines', function $$skip_comment_lines() {\n        var self = this, $ret_or_1 = nil, next_line = nil, ll = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil\n        };\n        while ($truthy(($truthy(($ret_or_1 = (next_line = self.$peek_line()))) ? (next_line['$empty?']()['$!']()) : ($ret_or_1)))) {\n        if ($truthy(next_line['$start_with?'](\"//\"))) {\n            if ($truthy(next_line['$start_with?'](\"///\"))) {\n              if (($truthy($rb_gt((ll = next_line.$length()), 3)) && ($eqeq(next_line, $rb_times(\"/\", ll))))) {\n                self.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"read_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"read_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}))\n              } else {\n                break\n              }\n            } else {\n              self.$shift()\n            }\n          } else {\n            break\n          }\n        };\n        return nil;\n      });\n      \n      $def(self, '$skip_line_comments', function $$skip_line_comments() {\n        var self = this, comment_lines = nil, $ret_or_1 = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return []\n        };\n        comment_lines = [];\n        while ($truthy(($truthy(($ret_or_1 = (next_line = self.$peek_line()))) ? (next_line['$empty?']()['$!']()) : ($ret_or_1)))) {\n        if ($truthy(next_line['$start_with?'](\"//\"))) {\n            comment_lines['$<<'](self.$shift())\n          } else {\n            break\n          }\n        };\n        return comment_lines;\n      });\n      \n      $def(self, '$terminate', function $$terminate() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, self.lines.$size());\n        self.lines.$clear();\n        self.look_ahead = 0;\n        return nil;\n      });\n      \n      $def(self, '$read_lines_until', function $$read_lines_until(options) {\n        var $a, $yield = $$read_lines_until.$$p || nil, self = this, result = nil, restore_process_lines = nil, terminator = nil, start_cursor = nil, $ret_or_1 = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, line_read = nil, line_restored = nil, line = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, context = nil;\n\n        $$read_lines_until.$$p = null;\n        \n        if (options == null) options = $hash2([], {});\n        result = [];\n        if (($truthy(self.process_lines) && ($truthy(options['$[]'](\"skip_processing\"))))) {\n          \n          self.process_lines = false;\n          restore_process_lines = true;\n        };\n        if ($truthy((terminator = options['$[]'](\"terminator\")))) {\n          \n          start_cursor = ($truthy(($ret_or_1 = options['$[]'](\"cursor\"))) ? ($ret_or_1) : (self.$cursor()));\n          break_on_blank_lines = false;\n          break_on_list_continuation = false;\n        } else {\n          \n          break_on_blank_lines = options['$[]'](\"break_on_blank_lines\");\n          break_on_list_continuation = options['$[]'](\"break_on_list_continuation\");\n        };\n        skip_comments = options['$[]'](\"skip_line_comments\");\n        line_read = (line_restored = nil);\n        if ($truthy(options['$[]'](\"skip_first_line\"))) {\n          self.$shift()\n        };\n        while ($truthy((line = self.$read_line()))) {\n        \n          if ($truthy(($truthy(terminator) ? (line['$=='](terminator)) : (($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = break_on_blank_lines)) ? (line['$empty?']()) : ($ret_or_3)))) ? ($ret_or_2) : (($truthy(($ret_or_3 = ($truthy(($ret_or_4 = ($truthy(($ret_or_5 = break_on_list_continuation)) ? (line_read) : ($ret_or_5)))) ? (line['$==']($$('LIST_CONTINUATION'))) : ($ret_or_4)))) ? (($a = [\"preserve_last_line\", true], $send(options, '[]=', $a), $a[$a.length - 1])) : ($ret_or_3)))))) ? ($ret_or_1) : (($truthy(($ret_or_2 = ($yield !== nil))) ? (Opal.yield1($yield, line)) : ($ret_or_2)))))))) {\n            \n            if ($truthy(options['$[]'](\"read_last_line\"))) {\n              result['$<<'](line)\n            };\n            if ($truthy(options['$[]'](\"preserve_last_line\"))) {\n              \n              self.$unshift(line);\n              line_restored = true;\n            };\n            break;\n          };\n          if (!(($truthy(skip_comments) && ($truthy(line['$start_with?'](\"//\")))) && ($not(line['$start_with?'](\"///\"))))) {\n            \n            result['$<<'](line);\n            line_read = true;\n          };\n        };\n        if ($truthy(restore_process_lines)) {\n          \n          self.process_lines = true;\n          if (($truthy(line_restored) && ($not(terminator)))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)\n          };\n        };\n        if ((($truthy(terminator) && ($neqeq(terminator, line))) && ($truthy((context = options.$fetch(\"context\", terminator)))))) {\n          \n          if ($eqeq(start_cursor, \"at_mark\")) {\n            start_cursor = self.$cursor_at_mark()\n          };\n          self.$logger().$warn(self.$message_with_context(\"unterminated \" + (context) + \" block\", $hash2([\"source_location\"], {\"source_location\": start_cursor})));\n          self.unterminated = true;\n        };\n        return result;\n      }, -1);\n      \n      $def(self, '$shift', function $$shift() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, 1);\n        if (!$eqeq(self.look_ahead, 0)) {\n          self.look_ahead = $rb_minus(self.look_ahead, 1)\n        };\n        return self.lines.$pop();\n      });\n      \n      $def(self, '$unshift', function $$unshift(line) {\n        var self = this;\n\n        \n        self.lineno = $rb_minus(self.lineno, 1);\n        self.look_ahead = $rb_plus(self.look_ahead, 1);\n        self.lines.$push(line);\n        return nil;\n      });\n      if ($eqeq($$$('RUBY_ENGINE'), \"jruby\")) {\n        \n        $def(self, '$unshift_all', function $$unshift_all(lines_to_restore) {\n          var self = this;\n\n          \n          self.lineno = $rb_minus(self.lineno, lines_to_restore.$size());\n          self.look_ahead = $rb_plus(self.look_ahead, lines_to_restore.$size());\n          if ($truthy(lines_to_restore['$respond_to?'](\"reverse\"))) {\n            $send(self.lines, 'push', $to_a(lines_to_restore.$reverse()))\n          } else {\n            $send(lines_to_restore, 'reverse_each', [], function $$5(it){var self = $$5.$$s == null ? this : $$5.$$s;\n              if (self.lines == null) self.lines = nil;\n\n              \n              if (it == null) it = nil;\n              return self.lines.$push(it);}, {$$s: self})\n          };\n          return nil;\n        })\n      } else {\n        \n        $def(self, '$unshift_all', function $$unshift_all(lines_to_restore) {\n          var self = this;\n\n          \n          self.lineno = $rb_minus(self.lineno, lines_to_restore.$size());\n          self.look_ahead = $rb_plus(self.look_ahead, lines_to_restore.$size());\n          $send(self.lines, 'push', $to_a(lines_to_restore.$reverse()));\n          return nil;\n        })\n      };\n      \n      $def(self, '$cursor', function $$cursor() {\n        var self = this;\n\n        return $$('Cursor').$new(self.file, self.dir, self.path, self.lineno)\n      });\n      \n      $def(self, '$cursor_at_line', function $$cursor_at_line(lineno) {\n        var self = this;\n\n        return $$('Cursor').$new(self.file, self.dir, self.path, lineno)\n      });\n      \n      $def(self, '$cursor_at_mark', function $$cursor_at_mark() {\n        var self = this;\n\n        if ($truthy(self.mark)) {\n          return $send($$('Cursor'), 'new', $to_a(self.mark))\n        } else {\n          return self.$cursor()\n        }\n      });\n      \n      $def(self, '$cursor_before_mark', function $$cursor_before_mark() {\n        var $a, $b, self = this, m_file = nil, m_dir = nil, m_path = nil, m_lineno = nil;\n\n        if ($truthy(self.mark)) {\n          \n          $b = self.mark, $a = $to_ary($b), (m_file = ($a[0] == null ? nil : $a[0])), (m_dir = ($a[1] == null ? nil : $a[1])), (m_path = ($a[2] == null ? nil : $a[2])), (m_lineno = ($a[3] == null ? nil : $a[3])), $b;\n          return $$('Cursor').$new(m_file, m_dir, m_path, $rb_minus(m_lineno, 1));\n        } else {\n          return $$('Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n        }\n      });\n      \n      $def(self, '$cursor_at_prev_line', function $$cursor_at_prev_line() {\n        var self = this;\n\n        return $$('Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n      });\n      \n      $def(self, '$mark', function $$mark() {\n        var self = this;\n\n        return (self.mark = [self.file, self.dir, self.path, self.lineno])\n      });\n      \n      $def(self, '$line_info', function $$line_info() {\n        var self = this;\n\n        return \"\" + (self.path) + \": line \" + (self.lineno)\n      });\n      \n      $def(self, '$lines', function $$lines() {\n        var self = this;\n\n        return self.lines.$reverse()\n      });\n      \n      $def(self, '$string', function $$string() {\n        var self = this;\n\n        return self.lines.$reverse().$join($$('LF'))\n      });\n      \n      $def(self, '$source', function $$source() {\n        var self = this;\n\n        return self.source_lines.$join($$('LF'))\n      });\n      \n      $def(self, '$save', function $$save() {\n        var self = this;\n\n        \n        self.saved = $send($hash2([], {}), 'tap', [], function $$6(accum){var self = $$6.$$s == null ? this : $$6.$$s;\n\n          \n          if (accum == null) accum = nil;\n          return $send(self.$instance_variables(), 'each', [], function $$7(name){var $a, self = $$7.$$s == null ? this : $$7.$$s, val = nil;\n\n            \n            if (name == null) name = nil;\n            if (($eqeq(name, \"@saved\") || ($eqeq(name, \"@source_lines\")))) {\n              return nil\n            } else {\n              return ($a = [name, ($eqeqeq($$$('Array'), (val = self.$instance_variable_get(name))) ? (val.$drop(0)) : (val))], $send(accum, '[]=', $a), $a[$a.length - 1])\n            };}, {$$s: self});}, {$$s: self});\n        return nil;\n      });\n      \n      $def(self, '$restore_save', function $$restore_save() {\n        var self = this;\n\n        if ($truthy(self.saved)) {\n          \n          $send(self.saved, 'each', [], function $$8(name, val){var self = $$8.$$s == null ? this : $$8.$$s;\n\n            \n            if (name == null) name = nil;\n            if (val == null) val = nil;\n            return self.$instance_variable_set(name, val);}, {$$s: self});\n          return (self.saved = nil);\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$discard_save', $assign_ivar_val(\"saved\", nil));\n      \n      $def(self, '$to_s', function $$to_s() {\n        var self = this;\n\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \"}>\"\n      });\n      self.$private();\n      \n      $def(self, '$prepare_lines', function $$prepare_lines(data, opts) {\n        var self = this, normalize = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        try {\n          if ($truthy((normalize = opts['$[]'](\"normalize\")))) {\n            if ($eqeqeq($$$('Array'), data)) {\n              \n              return $$('Helpers').$prepare_source_array(data, normalize['$!='](\"chomp\"));\n            } else {\n              \n              return $$('Helpers').$prepare_source_string(data, normalize['$!='](\"chomp\"));\n            }\n          } else if ($eqeqeq($$$('Array'), data)) {\n            return data.$drop(0)\n          } else if ($truthy(data)) {\n            return data.$chomp().$split($$('LF'), -1)\n          } else {\n            return []\n          }\n        } catch ($err) {\n          if (Opal.rescue($err, [$$('StandardError')])) {\n            try {\n              if ($truthy(($eqeqeq($$$('Array'), data) ? (data.$join()) : (data.$to_s()))['$valid_encoding?']())) {\n                return self.$raise()\n              } else {\n                return self.$raise($$$('ArgumentError'), \"source is either binary or contains invalid Unicode data\")\n              }\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };\n      }, -2);\n      return $def(self, '$process_line', function $$process_line(line) {\n        var self = this;\n\n        \n        if ($truthy(self.process_lines)) {\n          self.look_ahead = $rb_plus(self.look_ahead, 1)\n        };\n        return line;\n      });\n    })($nesting[0], null, $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.include_stack = $proto.lines = $proto.file = $proto.dir = $proto.path = $proto.lineno = $proto.maxdepth = $proto.process_lines = $proto.includes = $proto.document = $proto.unescape_next_line = $proto.include_processor_extensions = $proto.look_ahead = $proto.skipping = $proto.conditional_stack = nil;\n      \n      self.$attr_reader(\"include_stack\");\n      \n      $def(self, '$initialize', function $$initialize(document, data, cursor, opts) {\n        var $yield = $$initialize.$$p || nil, self = this, default_include_depth = nil, $ret_or_1 = nil;\n\n        $$initialize.$$p = null;\n        \n        if (data == null) data = nil;\n        if (cursor == null) cursor = nil;\n        if (opts == null) opts = $hash2([], {});\n        self.document = document;\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [data, cursor, opts], null);\n        if ($truthy($rb_gt((default_include_depth = ($truthy(($ret_or_1 = document.$attributes()['$[]'](\"max-include-depth\"))) ? ($ret_or_1) : (64)).$to_i()), 0))) {\n          self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": default_include_depth, \"curr\": default_include_depth, \"rel\": default_include_depth})\n        } else {\n          self.maxdepth = nil\n        };\n        self.include_stack = [];\n        self.includes = document.$catalog()['$[]'](\"includes\");\n        self.skipping = false;\n        self.conditional_stack = [];\n        return (self.include_processor_extensions = nil);\n      }, -2);\n      \n      $def(self, '$has_more_lines?', function $PreprocessorReader_has_more_lines$ques$9() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return true\n        } else {\n          return false\n        }\n      });\n      \n      $def(self, '$empty?', function $PreprocessorReader_empty$ques$10() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return false\n        } else {\n          return true\n        }\n      });\n      $alias(self, \"eof?\", \"empty?\");\n      \n      $def(self, '$peek_line', function $$peek_line(direct) {\n        var $yield = $$peek_line.$$p || nil, self = this, line = nil;\n\n        $$peek_line.$$p = null;\n        \n        if (direct == null) direct = false;\n        if ($truthy((line = $send2(self, $find_super(self, 'peek_line', $$peek_line, false, true), 'peek_line', [direct], $yield)))) {\n          return line\n        } else if ($truthy(self.include_stack['$empty?']())) {\n          return nil\n        } else {\n          \n          self.$pop_include();\n          return self.$peek_line(direct);\n        };\n      }, -1);\n      \n      $def(self, '$push_include', function $$push_include(data, file, path, lineno, attributes) {\n        var self = this, dir = nil, $ret_or_1 = nil, rel_maxdepth = nil, curr_maxdepth = nil, abs_maxdepth = nil, leveloffset = nil;\n\n        \n        if (file == null) file = nil;\n        if (path == null) path = nil;\n        if (lineno == null) lineno = 1;\n        if (attributes == null) attributes = $hash2([], {});\n        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);\n        if ($truthy((self.file = file))) {\n          \n          if ($eqeqeq($$$('String'), file)) {\n            self.dir = $$$('File').$dirname(file)\n          } else if ($truthy($$('RUBY_ENGINE_OPAL'))) {\n            self.dir = $$$('URI').$parse($$$('File').$dirname((file = file.$to_s())))\n          } else {\n            \n            (self.dir = file.$dup())['$path='](($eqeq((dir = $$$('File').$dirname(file.$path())), \"/\") ? (\"\") : (dir)));\n            file = file.$to_s();\n          };\n          self.path = (path = ($truthy(($ret_or_1 = path)) ? ($ret_or_1) : ($$$('File').$basename(file))));\n          if ($truthy((self.process_lines = $send(file, 'end_with?', $to_a($$('ASCIIDOC_EXTENSIONS').$keys()))))) {\n            if ($truthy(($ret_or_1 = self.includes['$[]'](path.$slice(0, path.$rindex(\".\")))))) {\n              $ret_or_1\n            } else {\n              self.includes['$[]='](path.$slice(0, path.$rindex(\".\")), ($truthy(attributes['$[]'](\"partial-option\")) ? (nil) : (true)))\n            }\n          };\n        } else {\n          \n          self.dir = \".\";\n          self.process_lines = true;\n          if ($truthy((self.path = path))) {\n            if ($truthy(($ret_or_1 = self.includes['$[]']($$('Helpers').$rootname(path))))) {\n              $ret_or_1\n            } else {\n              self.includes['$[]=']($$('Helpers').$rootname(path), ($truthy(attributes['$[]'](\"partial-option\")) ? (nil) : (true)))\n            }\n          } else {\n            self.path = \"<stdin>\"\n          };\n        };\n        self.lineno = lineno;\n        if (($truthy(self.maxdepth) && ($truthy(attributes['$key?'](\"depth\"))))) {\n          if ($truthy($rb_gt((rel_maxdepth = attributes['$[]'](\"depth\").$to_i()), 0))) {\n            \n            if ($truthy($rb_gt((curr_maxdepth = $rb_plus(self.include_stack.$size(), rel_maxdepth)), (abs_maxdepth = self.maxdepth['$[]'](\"abs\"))))) {\n              curr_maxdepth = (rel_maxdepth = abs_maxdepth)\n            };\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": abs_maxdepth, \"curr\": curr_maxdepth, \"rel\": rel_maxdepth});\n          } else {\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": self.maxdepth['$[]'](\"abs\"), \"curr\": self.include_stack.$size(), \"rel\": 0})\n          }\n        };\n        if ($truthy((self.lines = self.$prepare_lines(data, $hash2([\"normalize\", \"condense\", \"indent\"], {\"normalize\": ($truthy(($ret_or_1 = self.process_lines)) ? ($ret_or_1) : (\"chomp\")), \"condense\": false, \"indent\": attributes['$[]'](\"indent\")})))['$empty?']())) {\n          self.$pop_include()\n        } else {\n          \n          if ($truthy(attributes['$key?'](\"leveloffset\"))) {\n            \n            self.lines = $rb_plus($rb_plus([($truthy((leveloffset = self.document.$attr(\"leveloffset\"))) ? (\":leveloffset: \" + (leveloffset)) : (\":leveloffset!:\")), \"\"], self.lines.$reverse()), [\"\", \":leveloffset: \" + (attributes['$[]'](\"leveloffset\"))]);\n            self.lineno = $rb_minus(self.lineno, 2);\n          } else {\n            self.lines['$reverse!']()\n          };\n          self.look_ahead = 0;\n        };\n        return self;\n      }, -2);\n      \n      $def(self, '$include_depth', function $$include_depth() {\n        var self = this;\n\n        return self.include_stack.$size()\n      });\n      \n      $def(self, '$exceeds_max_depth?', function $PreprocessorReader_exceeds_max_depth$ques$11() {\n        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.maxdepth)) ? ($rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\"))) : ($ret_or_2))))) {\n          return self.maxdepth['$[]'](\"rel\")\n        } else {\n          return $ret_or_1\n        }\n      });\n      $alias(self, \"exceeded_max_depth?\", \"exceeds_max_depth?\");\n      \n      $def(self, '$shift', function $$shift() {\n        var $yield = $$shift.$$p || nil, self = this, line = nil;\n\n        $$shift.$$p = null;\n        if ($truthy(self.unescape_next_line)) {\n          \n          self.unescape_next_line = false;\n          return (line = $send2(self, $find_super(self, 'shift', $$shift, false, true), 'shift', [], $yield)).$slice(1, line.$length());\n        } else {\n          return $send2(self, $find_super(self, 'shift', $$shift, false, true), 'shift', [], $yield)\n        }\n      });\n      \n      $def(self, '$include_processors?', function $PreprocessorReader_include_processors$ques$12() {\n        var self = this;\n\n        if ($truthy(self.include_processor_extensions['$nil?']())) {\n          if (($truthy(self.document['$extensions?']()) && ($truthy(self.document.$extensions()['$include_processors?']())))) {\n            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()\n          } else {\n            return (self.include_processor_extensions = false)\n          }\n        } else {\n          return self.include_processor_extensions['$!='](false)\n        }\n      });\n      \n      $def(self, '$create_include_cursor', function $$create_include_cursor(file, path, lineno) {\n        var dir = nil;\n\n        \n        if ($eqeqeq($$$('String'), file)) {\n          dir = $$$('File').$dirname(file)\n        } else if ($truthy($$('RUBY_ENGINE_OPAL'))) {\n          dir = $$$('File').$dirname((file = file.$to_s()))\n        } else {\n          \n          dir = ($eqeq((dir = $$$('File').$dirname(file.$path())), \"\") ? (\"/\") : (dir));\n          file = file.$to_s();\n        };\n        return $$('Cursor').$new(file, dir, path, lineno);\n      });\n      \n      $def(self, '$to_s', function $$to_s() {\n        var self = this;\n\n        return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \", include depth: \" + (self.include_stack.$size()) + \", include stack: [\" + ($send(self.include_stack, 'map', [], function $$13(inc){\n          \n          if (inc == null) inc = nil;\n          return inc.$to_s();}).$join(\", \")) + \"]}>\"\n      });\n      self.$private();\n      \n      $def(self, '$prepare_lines', function $$prepare_lines(data, opts) {\n        var $yield = $$prepare_lines.$$p || nil, self = this, result = nil, front_matter = nil, $ret_or_1 = nil, last = nil;\n\n        $$prepare_lines.$$p = null;\n        \n        if (opts == null) opts = $hash2([], {});\n        result = $send2(self, $find_super(self, 'prepare_lines', $$prepare_lines, false, true), 'prepare_lines', [data, opts], $yield);\n        if ((($truthy(self.document) && ($truthy(self.document.$attributes()['$[]'](\"skip-front-matter\")))) && ($truthy((front_matter = self['$skip_front_matter!'](result)))))) {\n          self.document.$attributes()['$[]='](\"front-matter\", front_matter.$join($$('LF')))\n        };\n        if ($truthy(opts.$fetch(\"condense\", true))) {\n          while ($truthy(($truthy(($ret_or_1 = (last = result['$[]'](-1)))) ? (last['$empty?']()) : ($ret_or_1)))) {\n          result.$pop()\n          }\n        };\n        if ($truthy(opts['$[]'](\"indent\"))) {\n          $$('Parser')['$adjust_indentation!'](result, opts['$[]'](\"indent\").$to_i(), self.document.$attr(\"tabsize\").$to_i())\n        };\n        return result;\n      }, -2);\n      \n      $def(self, '$process_line', function $$process_line(line) {\n        var $a, self = this;\n\n        \n        if (!$truthy(self.process_lines)) {\n          return line\n        };\n        if ($truthy(line['$empty?']())) {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;\n        };\n        if ((($truthy(line['$end_with?'](\"]\")) && ($not(line['$start_with?'](\"[\")))) && ($truthy(line['$include?'](\"::\"))))) {\n          if (($truthy(line['$include?'](\"if\")) && ($truthy($$('ConditionalDirectiveRx')['$=~'](line))))) {\n            if ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), \"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_conditional_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](5))))) {\n              \n              self.$shift();\n              return nil;\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else if ($truthy(self.skipping)) {\n            \n            self.$shift();\n            return nil;\n          } else if (($truthy(line['$start_with?'](\"inc\", \"\\\\inc\")) && ($truthy($$('IncludeDirectiveRx')['$=~'](line))))) {\n            if ($eqeq((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), \"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_include_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))))) {\n              return nil\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else {\n            \n            self.look_ahead = $rb_plus(self.look_ahead, 1);\n            return line;\n          }\n        } else if ($truthy(self.skipping)) {\n          \n          self.$shift();\n          return nil;\n        } else {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;\n        };\n      });\n      \n      $def(self, '$preprocess_conditional_directive', function $$preprocess_conditional_directive(keyword, target, delimiter, text) {\n        var $a, self = this, no_target = nil, pair = nil, skip = nil, lhs = nil, op = nil, rhs = nil;\n\n        \n        if (!$truthy((no_target = target['$empty?']()))) {\n          target = target.$downcase()\n        };\n        if ($eqeq(keyword, \"endif\")) {\n          \n          if ($truthy(text)) {\n            self.$logger().$error(self.$message_with_context(\"malformed preprocessor directive - text not permitted: endif::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if ($truthy(self.conditional_stack['$empty?']())) {\n            self.$logger().$error(self.$message_with_context(\"unmatched preprocessor directive: endif::\" + (target) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if (($truthy(no_target) || ($eqeq(target, (pair = self.conditional_stack['$[]'](-1))['$[]'](\"target\"))))) {\n            \n            self.conditional_stack.$pop();\n            self.skipping = ($truthy(self.conditional_stack['$empty?']()) ? (false) : (self.conditional_stack['$[]'](-1)['$[]'](\"skipping\")));\n          } else {\n            self.$logger().$error(self.$message_with_context(\"mismatched preprocessor directive: endif::\" + (target) + \"[], expected endif::\" + (pair['$[]'](\"target\")) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          };\n          return true;\n        } else if ($truthy(self.skipping)) {\n          skip = false\n        } else \n        switch (keyword) {\n          case \"ifdef\":\n            \n            if ($truthy(no_target)) {\n              \n              self.$logger().$error(self.$message_with_context(\"malformed preprocessor directive - missing target: ifdef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return true;\n            };\n            \n            switch (delimiter) {\n              case \",\":\n                skip = $send(target.$split(\",\", -1), 'none?', [], function $$14(name){var self = $$14.$$s == null ? this : $$14.$$s;\n                  if (self.document == null) self.document = nil;\n\n                  \n                  if (name == null) name = nil;\n                  return self.document.$attributes()['$key?'](name);}, {$$s: self})\n                break;\n              case \"+\":\n                skip = $send(target.$split(\"+\", -1), 'any?', [], function $$15(name){var self = $$15.$$s == null ? this : $$15.$$s;\n                  if (self.document == null) self.document = nil;\n\n                  \n                  if (name == null) name = nil;\n                  return self.document.$attributes()['$key?'](name)['$!']();}, {$$s: self})\n                break;\n              default:\n                skip = self.document.$attributes()['$key?'](target)['$!']()\n            };\n            break;\n          case \"ifndef\":\n            \n            if ($truthy(no_target)) {\n              \n              self.$logger().$error(self.$message_with_context(\"malformed preprocessor directive - missing target: ifndef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return true;\n            };\n            \n            switch (delimiter) {\n              case \",\":\n                skip = $send(target.$split(\",\", -1), 'any?', [], function $$16(name){var self = $$16.$$s == null ? this : $$16.$$s;\n                  if (self.document == null) self.document = nil;\n\n                  \n                  if (name == null) name = nil;\n                  return self.document.$attributes()['$key?'](name);}, {$$s: self})\n                break;\n              case \"+\":\n                skip = $send(target.$split(\"+\", -1), 'all?', [], function $$17(name){var self = $$17.$$s == null ? this : $$17.$$s;\n                  if (self.document == null) self.document = nil;\n\n                  \n                  if (name == null) name = nil;\n                  return self.document.$attributes()['$key?'](name);}, {$$s: self})\n                break;\n              default:\n                skip = self.document.$attributes()['$key?'](target)\n            };\n            break;\n          case \"ifeval\":\n            if ($truthy(no_target)) {\n              if (($truthy(text) && ($truthy($$('EvalExpressionRx')['$=~'](text.$strip()))))) {\n                \n                lhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));\n                op = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n                rhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n                skip = (function() { try {\n                  if ($truthy(self.$resolve_expr_val(lhs).$send(op, self.$resolve_expr_val(rhs)))) {\n                    return false\n                  } else {\n                    return true\n                  }\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$('StandardError')])) {\n                    try {\n                      return true\n                    } finally { Opal.pop_exception(); }\n                  } else { throw $err; }\n                }})();\n              } else {\n                \n                self.$logger().$error(self.$message_with_context(\"malformed preprocessor directive - \" + (($truthy(text) ? (\"invalid expression\") : (\"missing expression\"))) + \": ifeval::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                return true;\n              }\n            } else {\n              \n              self.$logger().$error(self.$message_with_context(\"malformed preprocessor directive - target not permitted: ifeval::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return true;\n            }\n            break;\n          default:\n            nil\n        };\n        if (($eqeq(keyword, \"ifeval\") || ($not(text)))) {\n          \n          if ($truthy(skip)) {\n            self.skipping = true\n          };\n          self.conditional_stack['$<<']($hash2([\"target\", \"skip\", \"skipping\"], {\"target\": target, \"skip\": skip, \"skipping\": self.skipping}));\n        } else if (!($truthy(self.skipping) || ($truthy(skip)))) {\n          \n          self.$replace_next_line(text.$rstrip());\n          self.$unshift(\"\");\n          if ($truthy(text['$start_with?'](\"include::\"))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)\n          };\n        };\n        return true;\n      });\n      \n      $def(self, '$preprocess_include_directive', function $$preprocess_include_directive(target, attrlist) {\n        var $a, $b, self = this, doc = nil, expanded_target = nil, attr_missing = nil, $ret_or_1 = nil, ext = nil, parsed_attrs = nil, inc_path = nil, target_type = nil, relpath = nil, reader = nil, read_mode = nil, enc = nil, read_mode_params = nil, inc_linenos = nil, inc_tags = nil, tag = nil, inc_lines = nil, inc_offset = nil, inc_lineno = nil, tag_stack = nil, tags_selected = nil, active_tag = nil, select = nil, base_select = nil, wildcard = nil, missing_tags = nil, inc_content = nil;\n\n        \n        doc = self.document;\n        if (($truthy((expanded_target = target)['$include?']($$('ATTR_REF_HEAD'))) && ($truthy((expanded_target = doc.$sub_attributes(target, $hash2([\"attribute_missing\"], {\"attribute_missing\": ($eqeq((attr_missing = ($truthy(($ret_or_1 = doc.$attributes()['$[]'](\"attribute-missing\"))) ? ($ret_or_1) : ($$('Compliance').$attribute_missing()))), \"warn\") ? (\"drop-line\") : (attr_missing))})))['$empty?']())))) {\n          if (($eqeq(attr_missing, \"drop-line\") && ($truthy(doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']())))) {\n            \n            $send(self.$logger(), 'info', [], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;\n\n              return self.$message_with_context(\"include dropped due to missing attribute: include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, {$$s: self});\n            self.$shift();\n            return true;\n          } else if ($truthy(doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}))['$[]'](\"optional-option\"))) {\n            \n            $send(self.$logger(), 'info', [], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;\n\n              return self.$message_with_context(\"optional include dropped \" + ((($eqeq(attr_missing, \"warn\") && ($truthy(doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']()))) ? (\"due to missing attribute\") : (\"because resolved target is blank\"))) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, {$$s: self});\n            self.$shift();\n            return true;\n          } else {\n            \n            self.$logger().$warn(self.$message_with_context(\"include dropped \" + ((($eqeq(attr_missing, \"warn\") && ($truthy(doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']()))) ? (\"due to missing attribute\") : (\"because resolved target is blank\"))) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return self.$replace_next_line(\"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n          }\n        } else if (($truthy(self['$include_processors?']()) && ($truthy((ext = $send(self.include_processor_extensions, 'find', [], function $$20(candidate){\n          \n          if (candidate == null) candidate = nil;\n          return candidate.$instance()['$handles?'](expanded_target);})))))) {\n          \n          self.$shift();\n          ext.$process_method()['$[]'](doc, self, expanded_target, doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true})));\n          return true;\n        } else if ($truthy($rb_ge(doc.$safe(), $$$($$('SafeMode'), 'SECURE')))) {\n          return self.$replace_next_line(\"link:\" + (expanded_target) + \"[role=include]\")\n        } else if ($truthy(self.maxdepth)) {\n          \n          if ($truthy($rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\")))) {\n            \n            self.$logger().$error(self.$message_with_context(\"maximum include depth of \" + (self.maxdepth['$[]'](\"rel\")) + \" exceeded\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return nil;\n          };\n          parsed_attrs = doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}));\n          $b = self.$resolve_include_path(expanded_target, attrlist, parsed_attrs), $a = $to_ary($b), (inc_path = ($a[0] == null ? nil : $a[0])), (target_type = ($a[1] == null ? nil : $a[1])), (relpath = ($a[2] == null ? nil : $a[2])), $b;\n          \n          switch (target_type) {\n            case \"file\":\n              \n              reader = $$$('File').$method(\"open\");\n              read_mode = $$('FILE_READ_MODE');\n              break;\n            case \"uri\":\n              \n              reader = $$$('OpenURI').$method(\"open_uri\");\n              read_mode = $$('URI_READ_MODE');\n              break;\n            default:\n              return inc_path\n          };\n          if (!$truthy($$('RUBY_ENGINE_OPAL'))) {\n            if (($truthy((enc = parsed_attrs['$[]'](\"encoding\"))) && ($truthy((function() { try {\n              return $$$('Encoding').$find(enc)\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  return nil\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            }})())))) {\n              \n              (read_mode_params = read_mode.$split(\":\"))['$[]='](1, enc);\n              read_mode = read_mode_params.$join(\":\");\n            }\n          };\n          inc_linenos = (inc_tags = nil);\n          if ($truthy(attrlist)) {\n            if ($truthy(parsed_attrs['$key?'](\"lines\"))) {\n              \n              inc_linenos = [];\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"lines\")), 'each', [], function $$21(linedef){var $c, $d, from = nil, _ = nil, to = nil;\n\n                \n                if (linedef == null) linedef = nil;\n                if ($truthy(linedef['$include?'](\"..\"))) {\n                  \n                  $d = linedef.$partition(\"..\"), $c = $to_ary($d), (from = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (to = ($c[2] == null ? nil : $c[2])), $d;\n                  return (inc_linenos = $rb_plus(inc_linenos, (($truthy(to['$empty?']()) || ($truthy($rb_lt((to = to.$to_i()), 0)))) ? ([from.$to_i(), $$$($$$('Float'), 'INFINITY')]) : (Opal.Range.$new(from.$to_i(), to, false).$to_a()))));\n                } else {\n                  return inc_linenos['$<<'](linedef.$to_i())\n                };});\n              inc_linenos = ($truthy(inc_linenos['$empty?']()) ? (nil) : (inc_linenos.$sort().$uniq()));\n            } else if ($truthy(parsed_attrs['$key?'](\"tag\"))) {\n              if (!($truthy((tag = parsed_attrs['$[]'](\"tag\"))['$empty?']()) || ($eqeq(tag, \"!\")))) {\n                inc_tags = ($truthy(tag['$start_with?'](\"!\")) ? ($hash(tag.$slice(1, tag.$length()), false)) : ($hash(tag, true)))\n              }\n            } else if ($truthy(parsed_attrs['$key?'](\"tags\"))) {\n              \n              inc_tags = $hash2([], {});\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"tags\")), 'each', [], function $$22(tagdef){var $c;\n\n                \n                if (tagdef == null) tagdef = nil;\n                if (($truthy(tagdef['$empty?']()) || ($eqeq(tagdef, \"!\")))) {\n                  return nil\n                } else if ($truthy(tagdef['$start_with?'](\"!\"))) {\n                  return ($c = [tagdef.$slice(1, tagdef.$length()), false], $send(inc_tags, '[]=', $c), $c[$c.length - 1])\n                } else {\n                  return ($c = [tagdef, true], $send(inc_tags, '[]=', $c), $c[$c.length - 1])\n                };});\n              if ($truthy(inc_tags['$empty?']())) {\n                inc_tags = nil\n              };\n            }\n          };\n          if ($truthy(inc_linenos)) {\n            \n            $a = [[], nil, 0], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), $a;\n            \n            try {\n              $send(reader, 'call', [inc_path, read_mode], function $$23(f){var select_remaining = nil;\n\n                \n                if (f == null) f = nil;\n                select_remaining = nil;\n                return (function(){try { var $t_break = $thrower('break'); return $send(f, 'each_line', [], function $$24(l){var select = nil;\n\n                  \n                  if (l == null) l = nil;\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if (($truthy(select_remaining) || (($eqeqeq($$$('Float'), (select = inc_linenos['$[]'](0))) && ($truthy((select_remaining = select['$infinite?']()))))))) {\n                    \n                    inc_offset = ($truthy(($ret_or_1 = inc_offset)) ? ($ret_or_1) : (inc_lineno));\n                    return inc_lines['$<<'](l);\n                  } else {\n                    \n                    if ($eqeq(select, inc_lineno)) {\n                      \n                      inc_offset = ($truthy(($ret_or_1 = inc_offset)) ? ($ret_or_1) : (inc_lineno));\n                      inc_lines['$<<'](l);\n                      inc_linenos.$shift();\n                    };\n                    if ($truthy(inc_linenos['$empty?']())) {\n                      $t_break.$throw()\n                    } else {\n                      return nil\n                    };\n                  };})} catch($e) {\n                  if ($e === $t_break) return $e.$v;\n                  throw $e;\n                }})();})\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };;\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              parsed_attrs['$[]='](\"partial-option\", \"\");\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);\n            };\n          } else if ($truthy(inc_tags)) {\n            \n            $a = [[], nil, 0, [], $$$('Set').$new(), nil], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), (tag_stack = $a[3]), (tags_selected = $a[4]), (active_tag = $a[5]), $a;\n            if ($truthy(inc_tags['$key?'](\"**\"))) {\n              \n              select = (base_select = inc_tags.$delete(\"**\"));\n              if ($truthy(inc_tags['$key?'](\"*\"))) {\n                wildcard = inc_tags.$delete(\"*\")\n              } else if (($not(select) && ($eqeq(inc_tags.$values().$first(), false)))) {\n                wildcard = true\n              };\n            } else if ($truthy(inc_tags['$key?'](\"*\"))) {\n              if ($eqeq(inc_tags.$keys().$first(), \"*\")) {\n                select = (base_select = (wildcard = inc_tags.$delete(\"*\"))['$!']())\n              } else {\n                \n                select = (base_select = false);\n                wildcard = inc_tags.$delete(\"*\");\n              }\n            } else {\n              select = (base_select = inc_tags['$value?'](true)['$!']())\n            };\n            \n            try {\n              $send(reader, 'call', [inc_path, read_mode], function $$25(f){var $c, self = $$25.$$s == null ? this : $$25.$$s, dbl_co = nil, dbl_sb = nil;\n\n                \n                if (f == null) f = nil;\n                $c = [\"::\", \"[]\"], (dbl_co = $c[0]), (dbl_sb = $c[1]), $c;\n                return $send(f, 'each_line', [], function $$26(l){var $d, $e, self = $$26.$$s == null ? this : $$26.$$s, this_tag = nil, include_cursor = nil, idx = nil;\n\n                  \n                  if (l == null) l = nil;\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if ((($truthy(l['$include?'](dbl_co)) && ($truthy(l['$include?'](dbl_sb)))) && ($truthy($$('TagDirectiveRx')['$=~'](l))))) {\n                    \n                    this_tag = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2));\n                    if ($truthy((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) {\n                      if ($eqeq(this_tag, active_tag)) {\n                        \n                        tag_stack.$pop();\n                        return $e = ($truthy(tag_stack['$empty?']()) ? ([nil, base_select]) : (tag_stack['$[]'](-1))), $d = $to_ary($e), (active_tag = ($d[0] == null ? nil : $d[0])), (select = ($d[1] == null ? nil : $d[1])), $e;\n                      } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                        \n                        include_cursor = self.$create_include_cursor(inc_path, expanded_target, inc_lineno);\n                        if ($truthy((idx = $send(tag_stack, 'rindex', [], function $$27(key){\n                          \n                          if (key == null) key = nil;\n                          return key['$=='](this_tag);}, {$$has_trailing_comma_in_args: true})))) {\n                          \n                          if ($eqeq(idx, 0)) {\n                            tag_stack.$shift()\n                          } else {\n                            \n                            tag_stack.$delete_at(idx);\n                          };\n                          return self.$logger().$warn(self.$message_with_context(\"mismatched end tag (expected '\" + (active_tag) + \"' but found '\" + (this_tag) + \"') at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})));\n                        } else {\n                          return self.$logger().$warn(self.$message_with_context(\"unexpected end tag '\" + (this_tag) + \"' at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})))\n                        };\n                      } else {\n                        return nil\n                      }\n                    } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                      \n                      if ($truthy((select = inc_tags['$[]'](this_tag)))) {\n                        tags_selected['$<<'](this_tag)\n                      };\n                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);\n                    } else if ($not(wildcard['$nil?']())) {\n                      \n                      select = (($truthy(active_tag) && ($not(select))) ? (false) : (wildcard));\n                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);\n                    } else {\n                      return nil\n                    };\n                  } else if ($truthy(select)) {\n                    \n                    inc_offset = ($truthy(($ret_or_1 = inc_offset)) ? ($ret_or_1) : (inc_lineno));\n                    return inc_lines['$<<'](l);\n                  } else {\n                    return nil\n                  };}, {$$s: self});}, {$$s: self})\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };;\n            if (!$truthy(tag_stack['$empty?']())) {\n              $send(tag_stack, 'each', [], function $$28(tag_name, _, tag_lineno){var self = $$28.$$s == null ? this : $$28.$$s;\n\n                \n                if (tag_name == null) tag_name = nil;\n                if (_ == null) _ = nil;\n                if (tag_lineno == null) tag_lineno = nil;\n                return self.$logger().$warn(self.$message_with_context(\"detected unclosed tag '\" + (tag_name) + \"' starting at line \" + (tag_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": self.$create_include_cursor(inc_path, expanded_target, tag_lineno)})));}, {$$s: self})\n            };\n            if (!$truthy((missing_tags = $rb_minus($send(inc_tags, 'keep_if', [], function $$29(_, v){\n              \n              if (_ == null) _ = nil;\n              if (v == null) v = nil;\n              return v;}).$keys(), tags_selected.$to_a()))['$empty?']())) {\n              self.$logger().$warn(self.$message_with_context(\"tag\" + (($truthy($rb_gt(missing_tags.$size(), 1)) ? (\"s\") : (\"\"))) + \" '\" + (missing_tags.$join(\", \")) + \"' not found in include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n            };\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              if (!(($truthy(base_select) && ($neqeq(wildcard, false))) && ($truthy(inc_tags['$empty?']())))) {\n                parsed_attrs['$[]='](\"partial-option\", \"\")\n              };\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);\n            };\n          } else {\n            \n            inc_content = nil;\n            \n            try {\n              \n              inc_content = $send(reader, 'call', [inc_path, read_mode], function $$30(f){\n                \n                if (f == null) f = nil;\n                return f.$read();});\n              self.$shift();\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };;\n            self.$push_include(inc_content, inc_path, relpath, 1, parsed_attrs);\n          };\n          return true;\n        } else {\n          return nil\n        };\n      });\n      \n      $def(self, '$resolve_include_path', function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, $b, self = this, doc = nil, inc_path = nil, relpath = nil;\n\n        \n        doc = self.document;\n        if (($truthy($$('Helpers')['$uriish?'](target)) || ($truthy(($eqeqeq($$$('String'), self.dir) ? (nil) : ((target = \"\" + (self.dir) + \"/\" + (target)))))))) {\n          \n          if (!$truthy(doc['$attr?'](\"allow-uri-read\"))) {\n            return self.$replace_next_line(\"link:\" + (target) + \"[role=include]\")\n          };\n          if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n            if (!$truthy((($b = $$$('::', 'OpenURI', 'skip_raise')) && ($a = $$$($b, 'Cache', 'skip_raise')) ? 'constant' : nil))) {\n              $$('Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n            }\n          } else if ($not($$('RUBY_ENGINE_OPAL'))) {\n            $$$('OpenURI')\n          };\n          return [$$$('URI').$parse(target), \"uri\", target];\n        } else {\n          \n          inc_path = doc.$normalize_system_path(target, self.dir, nil, $hash2([\"target_name\"], {\"target_name\": \"include file\"}));\n          if (!$truthy($$$('File')['$file?'](inc_path))) {\n            if ($truthy(attributes['$[]'](\"optional-option\"))) {\n              \n              $send(self.$logger(), 'info', [], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s;\n\n                return self.$message_with_context(\"optional include dropped because include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, {$$s: self});\n              self.$shift();\n              return true;\n            } else {\n              \n              self.$logger().$error(self.$message_with_context(\"include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return self.$replace_next_line(\"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n            }\n          };\n          relpath = doc.$path_resolver().$relative_path(inc_path, doc.$base_dir());\n          return [inc_path, \"file\", relpath];\n        };\n      });\n      \n      $def(self, '$pop_include', function $$pop_include() {\n        var $a, $b, self = this;\n\n        if ($truthy(self.include_stack['$empty?']())) {\n          return nil\n        } else {\n          \n          $b = self.include_stack.$pop(), $a = $to_ary($b), (self.lines = ($a[0] == null ? nil : $a[0])), (self.file = ($a[1] == null ? nil : $a[1])), (self.dir = ($a[2] == null ? nil : $a[2])), (self.path = ($a[3] == null ? nil : $a[3])), (self.lineno = ($a[4] == null ? nil : $a[4])), (self.maxdepth = ($a[5] == null ? nil : $a[5])), (self.process_lines = ($a[6] == null ? nil : $a[6])), $b;\n          self.look_ahead = 0;\n          return nil;\n        }\n      });\n      \n      $def(self, '$split_delimited_value', function $$split_delimited_value(val) {\n        \n        if ($truthy(val['$include?'](\",\"))) {\n          \n          return val.$split(\",\");\n        } else {\n          \n          return val.$split(\";\");\n        }\n      });\n      \n      $def(self, '$skip_front_matter!', function $PreprocessorReader_skip_front_matter$excl$32(data, increment_linenos) {\n        var self = this, delim = nil, original_data = nil, front_matter = nil, $ret_or_1 = nil, eof = nil;\n\n        \n        if (increment_linenos == null) increment_linenos = true;\n        if (!$eqeq((delim = data['$[]'](0)), \"---\")) {\n          return nil\n        };\n        original_data = data.$drop(0);\n        data.$shift();\n        front_matter = [];\n        if ($truthy(increment_linenos)) {\n          self.lineno = $rb_plus(self.lineno, 1)\n        };\n        while (!($truthy(($truthy(($ret_or_1 = (eof = data['$empty?']()))) ? ($ret_or_1) : (data['$[]'](0)['$=='](delim)))))) {\n        \n          front_matter['$<<'](data.$shift());\n          if ($truthy(increment_linenos)) {\n            self.lineno = $rb_plus(self.lineno, 1)\n          };\n        };\n        if ($truthy(eof)) {\n          \n          $send(data, 'unshift', $to_a(original_data));\n          if ($truthy(increment_linenos)) {\n            self.lineno = $rb_minus(self.lineno, original_data.$size())\n          };\n          return nil;\n        };\n        data.$shift();\n        if ($truthy(increment_linenos)) {\n          self.lineno = $rb_plus(self.lineno, 1)\n        };\n        return front_matter;\n      }, -2);\n      return $def(self, '$resolve_expr_val', function $$resolve_expr_val(val) {\n        var self = this, quoted = nil;\n\n        \n        if ((($truthy(val['$start_with?'](\"\\\"\")) && ($truthy(val['$end_with?'](\"\\\"\")))) || (($truthy(val['$start_with?'](\"'\")) && ($truthy(val['$end_with?'](\"'\"))))))) {\n          \n          quoted = true;\n          val = val.$slice(1, $rb_minus(val.$length(), 1));\n        } else {\n          quoted = false\n        };\n        if ($truthy(val['$include?']($$('ATTR_REF_HEAD')))) {\n          val = self.document.$sub_attributes(val, $hash2([\"attribute_missing\"], {\"attribute_missing\": \"drop\"}))\n        };\n        if ($truthy(quoted)) {\n          return val\n        } else if ($truthy(val['$empty?']())) {\n          return nil\n        } else if ($eqeq(val, \"true\")) {\n          return true\n        } else if ($eqeq(val, \"false\")) {\n          return false\n        } else if ($truthy(val.$rstrip()['$empty?']())) {\n          return \" \"\n        } else if ($truthy(val['$include?'](\".\"))) {\n          return val.$to_f()\n        } else {\n          return val.$to_i()\n        };\n      });\n    })($nesting[0], $$('Reader'), $nesting);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/section\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $def = Opal.def, $alias = Opal.alias, $rb_gt = Opal.rb_gt, $eqeq = Opal.eqeq, $not = Opal.not, $send = Opal.send, $defs = Opal.defs, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('attr_accessor,attr_reader,===,+,level,special,title,generate_id,>,==,sectnum,!,empty?,reftext,sub_placeholder,sub_quotes,compat_mode,[],attributes,context,assign_numeral,class,object_id,inspect,size,[]=,chr,length,gsub,downcase,delete,tr_s,end_with?,chop,start_with?,slice,key?,catalog,unique_id_start_index');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Section');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.document = $proto.next_section_index = $proto.parent = $proto.level = $proto.numeral = $proto.numbered = $proto.sectname = $proto.title = $proto.blocks = nil;\n      \n      self.$attr_accessor(\"index\");\n      self.$attr_accessor(\"sectname\");\n      self.$attr_accessor(\"special\");\n      self.$attr_accessor(\"numbered\");\n      self.$attr_reader(\"caption\");\n      \n      $def(self, '$initialize', function $$initialize(parent, level, numbered, opts) {\n        var $a, $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;\n\n        $$initialize.$$p = null;\n        \n        if (parent == null) parent = nil;\n        if (level == null) level = nil;\n        if (numbered == null) numbered = false;\n        if (opts == null) opts = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, \"section\", opts], null);\n        if ($eqeqeq($$('Section'), parent)) {\n          $a = [($truthy(($ret_or_1 = level)) ? ($ret_or_1) : ($rb_plus(parent.$level(), 1))), parent.$special()], (self.level = $a[0]), (self.special = $a[1]), $a\n        } else {\n          $a = [($truthy(($ret_or_1 = level)) ? ($ret_or_1) : (1)), false], (self.level = $a[0]), (self.special = $a[1]), $a\n        };\n        self.numbered = numbered;\n        return (self.index = 0);\n      }, -1);\n      $alias(self, \"name\", \"title\");\n      \n      $def(self, '$generate_id', function $$generate_id() {\n        var self = this;\n\n        return $$('Section').$generate_id(self.$title(), self.document)\n      });\n      \n      $def(self, '$sections?', function $Section_sections$ques$1() {\n        var self = this;\n\n        return $rb_gt(self.next_section_index, 0)\n      });\n      \n      $def(self, '$sectnum', function $$sectnum(delimiter, append) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (delimiter == null) delimiter = \".\";\n        if (append == null) append = nil;\n        append = ($truthy(($ret_or_1 = append)) ? ($ret_or_1) : (($eqeq(append, false) ? (\"\") : (delimiter))));\n        if (($truthy($rb_gt(self.level, 1)) && ($eqeqeq($$('Section'), self.parent)))) {\n          return \"\" + (self.parent.$sectnum(delimiter, delimiter)) + (self.numeral) + (append)\n        } else {\n          return \"\" + (self.numeral) + (append)\n        };\n      }, -1);\n      \n      $def(self, '$xreftext', function $$xreftext(xrefstyle) {\n        var self = this, val = nil, type = nil, quoted_title = nil, signifier = nil;\n\n        \n        if (xrefstyle == null) xrefstyle = nil;\n        if (($truthy((val = self.$reftext())) && ($not(val['$empty?']())))) {\n          return val\n        } else if ($truthy(xrefstyle)) {\n          if ($truthy(self.numbered)) {\n            \n            switch (xrefstyle) {\n              case \"full\":\n                \n                if (($eqeq((type = self.sectname), \"chapter\") || ($eqeq(type, \"appendix\")))) {\n                  quoted_title = self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title())\n                } else {\n                  quoted_title = self.$sub_placeholder(self.$sub_quotes(($truthy(self.document.$compat_mode()) ? (\"``%s''\") : (\"\\\"`%s`\\\"\"))), self.$title())\n                };\n                if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (type) + \"-refsig\")))) {\n                  return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n                } else {\n                  return \"\" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n                };\n                break;\n              case \"short\":\n                if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (self.sectname) + \"-refsig\")))) {\n                  return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \"\"))\n                } else {\n                  return self.$sectnum(\".\", \"\")\n                }\n                break;\n              default:\n                if (($eqeq((type = self.sectname), \"chapter\") || ($eqeq(type, \"appendix\")))) {\n                  \n                  return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n                } else {\n                  return self.$title()\n                }\n            }\n          } else if (($eqeq((type = self.sectname), \"chapter\") || ($eqeq(type, \"appendix\")))) {\n            \n            return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n          } else {\n            return self.$title()\n          }\n        } else {\n          return self.$title()\n        };\n      }, -1);\n      \n      $def(self, '$<<', function $Section_$lt$lt$2(block) {\n        var $yield = $Section_$lt$lt$2.$$p || nil, self = this;\n\n        $Section_$lt$lt$2.$$p = null;\n        \n        if ($eqeq(block.$context(), \"section\")) {\n          self.$assign_numeral(block)\n        };\n        return $send2(self, $find_super(self, '<<', $Section_$lt$lt$2, false, true), '<<', [block], $yield);\n      });\n      \n      $def(self, '$to_s', function $$to_s() {\n        var $yield = $$to_s.$$p || nil, self = this, formal_title = nil;\n\n        $$to_s.$$p = null;\n        if ($truthy(self.title)) {\n          \n          formal_title = ($truthy(self.numbered) ? (\"\" + (self.$sectnum()) + \" \" + (self.title)) : (self.title));\n          return \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {level: \" + (self.level) + \", title: \" + (formal_title.$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\";\n        } else {\n          return $send2(self, $find_super(self, 'to_s', $$to_s, false, true), 'to_s', [], $yield)\n        }\n      });\n      return $defs(self, '$generate_id', function $$generate_id(title, document) {\n        var $a, attrs = nil, pre = nil, $ret_or_1 = nil, sep = nil, no_sep = nil, sep_sub = nil, gen_id = nil, ids = nil, cnt = nil, candidate_id = nil;\n\n        \n        attrs = document.$attributes();\n        pre = ($truthy(($ret_or_1 = attrs['$[]'](\"idprefix\"))) ? ($ret_or_1) : (\"_\"));\n        if ($truthy((sep = attrs['$[]'](\"idseparator\")))) {\n          if (($eqeq(sep.$length(), 1) || (($not((no_sep = sep['$empty?']())) && ($truthy((sep = ($a = [\"idseparator\", sep.$chr()], $send(attrs, '[]=', $a), $a[$a.length - 1])))))))) {\n            sep_sub = (($eqeq(sep, \"-\") || ($eqeq(sep, \".\"))) ? (\" .-\") : (\" \" + (sep) + \".-\"))\n          }\n        } else {\n          $a = [\"_\", \" _.-\"], (sep = $a[0]), (sep_sub = $a[1]), $a\n        };\n        gen_id = \"\" + (pre) + (title.$downcase().$gsub($$('InvalidSectionIdCharsRx'), \"\"));\n        if ($truthy(no_sep)) {\n          gen_id = gen_id.$delete(\" \")\n        } else {\n          \n          gen_id = gen_id.$tr_s(sep_sub, sep);\n          if ($truthy(gen_id['$end_with?'](sep))) {\n            gen_id = gen_id.$chop()\n          };\n          if (($truthy(pre['$empty?']()) && ($truthy(gen_id['$start_with?'](sep))))) {\n            gen_id = gen_id.$slice(1, gen_id.$length())\n          };\n        };\n        if ($truthy(document.$catalog()['$[]'](\"refs\")['$key?'](gen_id))) {\n          \n          ids = document.$catalog()['$[]'](\"refs\");\n          cnt = $$('Compliance').$unique_id_start_index();\n          while ($truthy(ids['$[]']((candidate_id = \"\" + (gen_id) + (sep) + (cnt))))) {\n          cnt = $rb_plus(cnt, 1)\n          };\n          return candidate_id;\n        } else {\n          return gen_id\n        };\n      });\n    })($nesting[0], $$('AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/stylesheets\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('join,new,rstrip,read,primary_stylesheet_data,write,primary_stylesheet_name,stylesheet_basename,for,read_stylesheet,coderay_stylesheet_data,coderay_stylesheet_name,pygments_stylesheet_data,pygments_stylesheet_name');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.primary_stylesheet_data = nil;\n      \n      $const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n      $const_set($nesting[0], 'STYLESHEETS_DIR', $$$('File').$join($$('DATA_DIR'), \"stylesheets\"));\n      self.__instance__ = self.$new();\n      $defs(self, '$instance', $return_ivar(\"__instance__\"));\n      \n      $def(self, '$primary_stylesheet_name', function $$primary_stylesheet_name() {\n        \n        return $$('DEFAULT_STYLESHEET_NAME')\n      });\n      \n      $def(self, '$primary_stylesheet_data', function $$primary_stylesheet_data() {\n        var self = this, $ret_or_1 = nil;\n\n        return (self.primary_stylesheet_data = ($truthy(($ret_or_1 = self.primary_stylesheet_data)) ? ($ret_or_1) : ($$$('File').$read($$$('File').$join($$('STYLESHEETS_DIR'), \"asciidoctor-default.css\"), $hash2([\"mode\"], {\"mode\": $$('FILE_READ_MODE')})).$rstrip())))\n      });\n      \n      $def(self, '$embed_primary_stylesheet', function $$embed_primary_stylesheet() {\n        var self = this;\n\n        return \"<style>\\n\" + (self.$primary_stylesheet_data()) + \"\\n\" + \"</style>\"\n      });\n      \n      $def(self, '$write_primary_stylesheet', function $$write_primary_stylesheet(target_dir) {\n        var self = this;\n\n        \n        if (target_dir == null) target_dir = \".\";\n        return $$$('File').$write($$$('File').$join(target_dir, self.$primary_stylesheet_name()), self.$primary_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}));\n      }, -1);\n      \n      $def(self, '$coderay_stylesheet_name', function $$coderay_stylesheet_name() {\n        \n        return $$('SyntaxHighlighter').$for(\"coderay\").$stylesheet_basename()\n      });\n      \n      $def(self, '$coderay_stylesheet_data', function $$coderay_stylesheet_data() {\n        \n        return $$('SyntaxHighlighter').$for(\"coderay\").$read_stylesheet()\n      });\n      \n      $def(self, '$embed_coderay_stylesheet', function $$embed_coderay_stylesheet() {\n        var self = this;\n\n        return \"<style>\\n\" + (self.$coderay_stylesheet_data()) + \"\\n\" + \"</style>\"\n      });\n      \n      $def(self, '$write_coderay_stylesheet', function $$write_coderay_stylesheet(target_dir) {\n        var self = this;\n\n        \n        if (target_dir == null) target_dir = \".\";\n        return $$$('File').$write($$$('File').$join(target_dir, self.$coderay_stylesheet_name()), self.$coderay_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}));\n      }, -1);\n      \n      $def(self, '$pygments_stylesheet_name', function $$pygments_stylesheet_name(style) {\n        \n        \n        if (style == null) style = nil;\n        return $$('SyntaxHighlighter').$for(\"pygments\").$stylesheet_basename(style);\n      }, -1);\n      \n      $def(self, '$pygments_stylesheet_data', function $$pygments_stylesheet_data(style) {\n        \n        \n        if (style == null) style = nil;\n        return $$('SyntaxHighlighter').$for(\"pygments\").$read_stylesheet(style);\n      }, -1);\n      \n      $def(self, '$embed_pygments_stylesheet', function $$embed_pygments_stylesheet(style) {\n        var self = this;\n\n        \n        if (style == null) style = nil;\n        return \"<style>\\n\" + (self.$pygments_stylesheet_data(style)) + \"\\n\" + \"</style>\";\n      }, -1);\n      return $def(self, '$write_pygments_stylesheet', function $$write_pygments_stylesheet(target_dir, style) {\n        var self = this;\n\n        \n        if (target_dir == null) target_dir = \".\";\n        if (style == null) style = nil;\n        return $$$('File').$write($$$('File').$join(target_dir, self.$pygments_stylesheet_name(style)), self.$pygments_stylesheet_data(style), $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}));\n      }, -1);\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/table\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $alias = Opal.alias, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $return_val = Opal.return_val, $to_a = Opal.to_a, $gvars = Opal.gvars, $neqeq = Opal.neqeq, $return_ivar = Opal.return_ivar, $to_ary = Opal.to_ary, $regexp = Opal.regexp, $not = Opal.not, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_accessor,send,attr_reader,new,[],<,>,to_i,==,[]=,attributes,truncate,*,/,to_f,empty?,body,each,<<,size,+,assign_column_widths,warn,logger,-,update_attributes,assign_width,round,head=,map,shift,reinitialize,nil?,unshift,foot=,pop,parent,sourcemap,dup,header_row?,table,style,merge,delete,start_with?,rstrip,slice,length,advance,lstrip,strip,split,include?,readlines,catalog_inline_anchor,=~,apply_subs,attr_writer,convert,text,!=,file,lineno,include,to_set,mark,key?,nested?,document,error,message_with_context,cursor_at_prev_line,nil_or_empty?,escape,columns,match,chop,end_with?,gsub,!,push_cellspec,cell_open?,close_cell,take_cellspec,squeeze,upto,times,cursor_before_mark,rowspan,activate_rowspan,colspan,end_of_row?,close_row,private,rows,effective_column_visits');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Table');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.attributes = $proto.document = $proto.rows = $proto.has_header_option = $proto.columns = nil;\n      \n      $const_set($nesting[0], 'DEFAULT_PRECISION', 4);\n      (function($base, $super) {\n        var self = $klass($base, $super, 'Rows');\n\n        var $proto = self.$$prototype;\n\n        $proto.head = $proto.body = $proto.foot = nil;\n        \n        self.$attr_accessor(\"head\", \"foot\", \"body\");\n        \n        $def(self, '$initialize', function $$initialize(head, foot, body) {\n          var self = this;\n\n          \n          if (head == null) head = [];\n          if (foot == null) foot = [];\n          if (body == null) body = [];\n          self.head = head;\n          self.foot = foot;\n          return (self.body = body);\n        }, -1);\n        $alias(self, \"[]\", \"send\");\n        \n        $def(self, '$by_section', function $$by_section() {\n          var self = this;\n\n          return [[\"head\", self.head], [\"body\", self.body], [\"foot\", self.foot]]\n        });\n        return $def(self, '$to_h', function $$to_h() {\n          var self = this;\n\n          return $hash2([\"head\", \"body\", \"foot\"], {\"head\": self.head, \"body\": self.body, \"foot\": self.foot})\n        });\n      })($nesting[0], null);\n      self.$attr_accessor(\"columns\");\n      self.$attr_accessor(\"rows\");\n      self.$attr_accessor(\"has_header_option\");\n      self.$attr_reader(\"caption\");\n      \n      $def(self, '$initialize', function $$initialize(parent, attributes) {\n        var $a, $yield = $$initialize.$$p || nil, self = this, pcwidth = nil, pcwidth_intval = nil, abswidth_val = nil;\n\n        $$initialize.$$p = null;\n        \n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [parent, \"table\"], null);\n        self.rows = $$('Rows').$new();\n        self.columns = [];\n        self.has_header_option = false;\n        if ($truthy((pcwidth = attributes['$[]'](\"width\")))) {\n          if (($truthy($rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) || ($truthy($rb_lt(pcwidth_intval, 1))))) {\n            if (!($eqeq(pcwidth_intval, 0) && (($eqeq(pcwidth, \"0\") || ($eqeq(pcwidth, \"0%\")))))) {\n              pcwidth_intval = 100\n            }\n          }\n        } else {\n          pcwidth_intval = 100\n        };\n        self.attributes['$[]='](\"tablepcwidth\", pcwidth_intval);\n        if ($truthy(self.document.$attributes()['$[]'](\"pagewidth\"))) {\n          self.attributes['$[]='](\"tableabswidth\", ($eqeq((abswidth_val = $rb_times($rb_divide(pcwidth_intval, 100), self.document.$attributes()['$[]'](\"pagewidth\").$to_f()).$truncate($$('DEFAULT_PRECISION'))), abswidth_val.$to_i()) ? (abswidth_val.$to_i()) : (abswidth_val)))\n        };\n        if ($truthy(attributes['$[]'](\"rotate-option\"))) {\n          return ($a = [\"orientation\", \"landscape\"], $send(self.attributes, '[]=', $a), $a[$a.length - 1])\n        } else {\n          return nil\n        };\n      });\n      \n      $def(self, '$header_row?', function $Table_header_row$ques$1() {\n        var self = this, val = nil;\n\n        if (($truthy((val = self.has_header_option)) && ($truthy(self.rows.$body()['$empty?']())))) {\n          return val\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$create_columns', function $$create_columns(colspecs) {\n        var self = this, cols = nil, autowidth_cols = nil, width_base = nil, num_cols = nil;\n\n        \n        cols = [];\n        autowidth_cols = nil;\n        width_base = 0;\n        $send(colspecs, 'each', [], function $$2(colspec){var self = $$2.$$s == null ? this : $$2.$$s, colwidth = nil, $ret_or_1 = nil;\n\n          \n          if (colspec == null) colspec = nil;\n          colwidth = colspec['$[]'](\"width\");\n          cols['$<<']($$('Column').$new(self, cols.$size(), colspec));\n          if ($truthy($rb_lt(colwidth, 0))) {\n            return (autowidth_cols = ($truthy(($ret_or_1 = autowidth_cols)) ? ($ret_or_1) : ([])))['$<<'](cols['$[]'](-1))\n          } else {\n            return (width_base = $rb_plus(width_base, colwidth))\n          };}, {$$s: self});\n        if ($truthy($rb_gt((num_cols = (self.columns = cols).$size()), 0))) {\n          \n          self.attributes['$[]='](\"colcount\", num_cols);\n          if (!($truthy($rb_gt(width_base, 0)) || ($truthy(autowidth_cols)))) {\n            width_base = nil\n          };\n          self.$assign_column_widths(width_base, autowidth_cols);\n        };\n        return nil;\n      });\n      \n      $def(self, '$assign_column_widths', function $$assign_column_widths(width_base, autowidth_cols) {\n        var self = this, precision = nil, total_width = nil, col_pcwidth = nil, autowidth = nil, autowidth_attrs = nil;\n\n        \n        if (width_base == null) width_base = nil;\n        if (autowidth_cols == null) autowidth_cols = nil;\n        precision = $$('DEFAULT_PRECISION');\n        total_width = (col_pcwidth = 0);\n        if ($truthy(width_base)) {\n          \n          if ($truthy(autowidth_cols)) {\n            \n            if ($truthy($rb_gt(width_base, 100))) {\n              \n              autowidth = 0;\n              self.$logger().$warn(\"total column width must not exceed 100% when using autowidth columns; got \" + (width_base) + \"%\");\n            } else {\n              \n              autowidth = $rb_divide($rb_minus(100, width_base), autowidth_cols.$size()).$truncate(precision);\n              if ($eqeq(autowidth.$to_i(), autowidth)) {\n                autowidth = autowidth.$to_i()\n              };\n              width_base = 100;\n            };\n            autowidth_attrs = $hash2([\"width\", \"autowidth-option\"], {\"width\": autowidth, \"autowidth-option\": \"\"});\n            $send(autowidth_cols, 'each', [], function $$3(col){\n              \n              if (col == null) col = nil;\n              return col.$update_attributes(autowidth_attrs);});\n          };\n          $send(self.columns, 'each', [], function $$4(col){\n            \n            if (col == null) col = nil;\n            return (total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, precision))));});\n        } else {\n          \n          col_pcwidth = $rb_divide(100, self.columns.$size()).$truncate(precision);\n          if ($eqeq(col_pcwidth.$to_i(), col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()\n          };\n          $send(self.columns, 'each', [], function $$5(col){\n            \n            if (col == null) col = nil;\n            return (total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth, nil, precision)));});\n        };\n        if (!$eqeq(total_width, 100)) {\n          self.columns['$[]'](-1).$assign_width($rb_plus($rb_minus(100, total_width), col_pcwidth).$round(precision), nil, precision)\n        };\n        return nil;\n      }, -1);\n      return $def(self, '$partition_header_footer', function $$partition_header_footer(attrs) {\n        var $a, self = this, num_body_rows = nil, body = nil;\n\n        \n        num_body_rows = ($a = [\"rowcount\", (body = self.rows.$body()).$size()], $send(self.attributes, '[]=', $a), $a[$a.length - 1]);\n        if ($truthy($rb_gt(num_body_rows, 0))) {\n          if ($truthy(self.has_header_option)) {\n            \n            self.rows['$head=']([$send(body.$shift(), 'map', [], function $$6(cell){\n              \n              if (cell == null) cell = nil;\n              return cell.$reinitialize(true);})]);\n            num_body_rows = $rb_minus(num_body_rows, 1);\n          } else if ($truthy(self.has_header_option['$nil?']())) {\n            \n            self.has_header_option = false;\n            body.$unshift($send(body.$shift(), 'map', [], function $$7(cell){\n              \n              if (cell == null) cell = nil;\n              return cell.$reinitialize(false);}));\n          }\n        };\n        if (($truthy($rb_gt(num_body_rows, 0)) && ($truthy(attrs['$[]'](\"footer-option\"))))) {\n          self.rows['$foot=']([body.$pop()])\n        };\n        return nil;\n      });\n    })($nesting[0], $$('AbstractBlock'), $nesting);\n    (function($base, $super) {\n      var self = $klass($base, $super, 'Column');\n\n      var $proto = self.$$prototype;\n\n      $proto.attributes = nil;\n      \n      self.$attr_accessor(\"style\");\n      \n      $def(self, '$initialize', function $$initialize(table, index, attributes) {\n        var $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;\n\n        $$initialize.$$p = null;\n        \n        if (attributes == null) attributes = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [table, \"table_column\"], null);\n        self.style = attributes['$[]'](\"style\");\n        attributes['$[]='](\"colnumber\", $rb_plus(index, 1));\n        if ($truthy(($ret_or_1 = attributes['$[]'](\"width\")))) {\n          $ret_or_1\n        } else {\n          attributes['$[]='](\"width\", 1)\n        };\n        if ($truthy(($ret_or_1 = attributes['$[]'](\"halign\")))) {\n          $ret_or_1\n        } else {\n          attributes['$[]='](\"halign\", \"left\")\n        };\n        if ($truthy(($ret_or_1 = attributes['$[]'](\"valign\")))) {\n          $ret_or_1\n        } else {\n          attributes['$[]='](\"valign\", \"top\")\n        };\n        return self.$update_attributes(attributes);\n      }, -3);\n      $alias(self, \"table\", \"parent\");\n      \n      $def(self, '$assign_width', function $$assign_width(col_pcwidth, width_base, precision) {\n        var $a, self = this, col_abswidth = nil;\n\n        \n        if ($truthy(width_base)) {\n          \n          col_pcwidth = $rb_divide($rb_times(self.attributes['$[]'](\"width\").$to_f(), 100), width_base).$truncate(precision);\n          if ($eqeq(col_pcwidth.$to_i(), col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()\n          };\n        };\n        if ($truthy(self.$parent().$attributes()['$[]'](\"tableabswidth\"))) {\n          self.attributes['$[]='](\"colabswidth\", ($eqeq((col_abswidth = $rb_times($rb_divide(col_pcwidth, 100), self.$parent().$attributes()['$[]'](\"tableabswidth\")).$truncate(precision)), col_abswidth.$to_i()) ? (col_abswidth.$to_i()) : (col_abswidth)))\n        };\n        return ($a = [\"colpcwidth\", col_pcwidth], $send(self.attributes, '[]=', $a), $a[$a.length - 1]);\n      });\n      \n      $def(self, '$block?', $return_val(false));\n      return $def(self, '$inline?', $return_val(false));\n    })($$('Table'), $$('AbstractNode'));\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Cell');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.document = $proto.reinitialize_args = $proto.attributes = $proto.cursor = $proto.text = $proto.subs = $proto.style = $proto.inner_document = $proto.source_location = $proto.colspan = $proto.rowspan = nil;\n      \n      $const_set($nesting[0], 'DOUBLE_LF', $rb_times($$('LF'), 2));\n      self.$attr_accessor(\"colspan\");\n      self.$attr_accessor(\"rowspan\");\n      $alias(self, \"column\", \"parent\");\n      self.$attr_reader(\"inner_document\");\n      \n      $def(self, '$initialize', function $$initialize(column, cell_text, attributes, opts) {\n        var $a, $yield = $$initialize.$$p || nil, self = this, in_header_row = nil, cell_style = nil, $ret_or_1 = nil, $ret_or_2 = nil, asciidoc = nil, inner_document_cursor = nil, lines_advanced = nil, literal = nil, normal_psv = nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_line1 = nil, preprocessed_lines = nil;\n\n        $$initialize.$$p = null;\n        \n        if (attributes == null) attributes = $hash2([], {});\n        if (opts == null) opts = $hash2([], {});\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [column, \"table_cell\"], null);\n        self.cursor = (self.reinitialize_args = nil);\n        if ($truthy(self.document.$sourcemap())) {\n          self.source_location = opts['$[]'](\"cursor\").$dup()\n        };\n        if ($truthy(column)) {\n          \n          if ($truthy((in_header_row = column.$table()['$header_row?']()))) {\n            if (($eqeq(in_header_row, \"implicit\") && ($truthy((cell_style = ($truthy(($ret_or_1 = column.$style())) ? ($ret_or_1) : (($truthy(($ret_or_2 = attributes)) ? (attributes['$[]'](\"style\")) : ($ret_or_2))))))))) {\n              \n              if (($eqeq(cell_style, \"asciidoc\") || ($eqeq(cell_style, \"literal\")))) {\n                self.reinitialize_args = [column, cell_text, ($truthy(($ret_or_1 = attributes)) ? (attributes.$merge()) : ($ret_or_1)), opts]\n              };\n              cell_style = nil;\n            }\n          } else {\n            cell_style = column.$style()\n          };\n          self.$update_attributes(column.$attributes());\n        };\n        if ($truthy(attributes)) {\n          \n          if ($truthy(attributes['$empty?']())) {\n            self.colspan = (self.rowspan = nil)\n          } else {\n            \n            $a = [attributes.$delete(\"colspan\"), attributes.$delete(\"rowspan\")], (self.colspan = $a[0]), (self.rowspan = $a[1]), $a;\n            if (!$truthy(in_header_row)) {\n              cell_style = ($truthy(($ret_or_1 = attributes['$[]'](\"style\"))) ? ($ret_or_1) : (cell_style))\n            };\n            self.$update_attributes(attributes);\n          };\n          \n          switch (cell_style) {\n            case \"asciidoc\":\n              \n              asciidoc = true;\n              inner_document_cursor = opts['$[]'](\"cursor\");\n              if ($truthy((cell_text = cell_text.$rstrip())['$start_with?']($$('LF')))) {\n                \n                lines_advanced = 1;\n                while ($truthy((cell_text = cell_text.$slice(1, cell_text.$length()))['$start_with?']($$('LF')))) {\n                lines_advanced = $rb_plus(lines_advanced, 1)\n                };\n                inner_document_cursor.$advance(lines_advanced);\n              } else {\n                cell_text = cell_text.$lstrip()\n              };\n              break;\n            case \"literal\":\n              \n              literal = true;\n              cell_text = cell_text.$rstrip();\n              while ($truthy(cell_text['$start_with?']($$('LF')))) {\n              cell_text = cell_text.$slice(1, cell_text.$length())\n              };\n              break;\n            default:\n              \n              normal_psv = true;\n              cell_text = ($truthy(cell_text) ? (cell_text.$strip()) : (\"\"));\n          };\n        } else {\n          \n          self.colspan = (self.rowspan = nil);\n          if ($eqeq(cell_style, \"asciidoc\")) {\n            \n            asciidoc = true;\n            inner_document_cursor = opts['$[]'](\"cursor\");\n          };\n        };\n        if ($truthy(asciidoc)) {\n          \n          parent_doctitle = self.document.$attributes().$delete(\"doctitle\");\n          inner_document_lines = cell_text.$split($$('LF'), -1);\n          if (!$truthy(inner_document_lines['$empty?']())) {\n            if ($truthy((unprocessed_line1 = inner_document_lines['$[]'](0))['$include?'](\"::\"))) {\n              \n              preprocessed_lines = $$('PreprocessorReader').$new(self.document, [unprocessed_line1]).$readlines();\n              if (!($eqeq(unprocessed_line1, preprocessed_lines['$[]'](0)) && ($truthy($rb_lt(preprocessed_lines.$size(), 2))))) {\n                \n                inner_document_lines.$shift();\n                if (!$truthy(preprocessed_lines['$empty?']())) {\n                  $send(inner_document_lines, 'unshift', $to_a(preprocessed_lines))\n                };\n              };\n            }\n          };\n          self.inner_document = $$('Document').$new(inner_document_lines, $hash2([\"standalone\", \"parent\", \"cursor\"], {\"standalone\": false, \"parent\": self.document, \"cursor\": inner_document_cursor}));\n          if (!$truthy(parent_doctitle['$nil?']())) {\n            self.document.$attributes()['$[]='](\"doctitle\", parent_doctitle)\n          };\n          self.subs = nil;\n        } else if ($truthy(literal)) {\n          \n          self.content_model = \"verbatim\";\n          self.subs = $$('BASIC_SUBS');\n        } else {\n          \n          if ($truthy(normal_psv)) {\n            if ($truthy(in_header_row)) {\n              self.cursor = opts['$[]'](\"cursor\")\n            } else {\n              self.$catalog_inline_anchor(cell_text, opts['$[]'](\"cursor\"))\n            }\n          };\n          self.content_model = \"simple\";\n          self.subs = $$('NORMAL_SUBS');\n        };\n        self.text = cell_text;\n        return (self.style = cell_style);\n      }, -3);\n      \n      $def(self, '$reinitialize', function $$reinitialize(has_header) {\n        var self = this;\n\n        \n        if ($truthy(has_header)) {\n          self.reinitialize_args = nil\n        } else if ($truthy(self.reinitialize_args)) {\n          return $send($$$($$('Table'), 'Cell'), 'new', $to_a(self.reinitialize_args))\n        } else {\n          self.style = self.attributes['$[]'](\"style\")\n        };\n        if ($truthy(self.cursor)) {\n          self.$catalog_inline_anchor()\n        };\n        return self;\n      });\n      \n      $def(self, '$catalog_inline_anchor', function $$catalog_inline_anchor(cell_text, cursor) {\n        var $a, self = this;\n\n        \n        if (cell_text == null) cell_text = self.text;\n        if (cursor == null) cursor = nil;\n        if (!$truthy(cursor)) {\n          $a = [self.cursor, nil], (cursor = $a[0]), (self.cursor = $a[1]), $a\n        };\n        if (($truthy(cell_text['$start_with?'](\"[[\")) && ($truthy($$('LeadingInlineAnchorRx')['$=~'](cell_text))))) {\n          return $$('Parser').$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), self, cursor, self.document)\n        } else {\n          return nil\n        };\n      }, -1);\n      \n      $def(self, '$text', function $$text() {\n        var self = this;\n\n        return self.$apply_subs(self.text, self.subs)\n      });\n      self.$attr_writer(\"text\");\n      \n      $def(self, '$content', function $$content() {\n        var self = this, cell_style = nil, subbed_text = nil;\n\n        if ($eqeq((cell_style = self.style), \"asciidoc\")) {\n          return self.inner_document.$convert()\n        } else if ($truthy(self.text['$include?']($$('DOUBLE_LF')))) {\n          return $send(self.$text().$split($$('BlankLineRx')), 'map', [], function $$8(para){var self = $$8.$$s == null ? this : $$8.$$s;\n\n            \n            if (para == null) para = nil;\n            if (($truthy(cell_style) && ($neqeq(cell_style, \"header\")))) {\n              return $$('Inline').$new(self.$parent(), \"quoted\", para, $hash2([\"type\"], {\"type\": cell_style})).$convert()\n            } else {\n              return para\n            };}, {$$s: self})\n        } else if ($truthy((subbed_text = self.$text())['$empty?']())) {\n          return []\n        } else if (($truthy(cell_style) && ($neqeq(cell_style, \"header\")))) {\n          return [$$('Inline').$new(self.$parent(), \"quoted\", subbed_text, $hash2([\"type\"], {\"type\": cell_style})).$convert()]\n        } else {\n          return [subbed_text]\n        }\n      });\n      \n      $def(self, '$lines', function $$lines() {\n        var self = this;\n\n        return self.text.$split($$('LF'))\n      });\n      \n      $def(self, '$source', $return_ivar(\"text\"));\n      \n      $def(self, '$file', function $$file() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.source_location))) {\n          return self.source_location.$file()\n        } else {\n          return $ret_or_1\n        }\n      });\n      \n      $def(self, '$lineno', function $$lineno() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.source_location))) {\n          return self.source_location.$lineno()\n        } else {\n          return $ret_or_1\n        }\n      });\n      return $def(self, '$to_s', function $$to_s() {\n        var $yield = $$to_s.$$p || nil, self = this, $ret_or_1 = nil;\n\n        $$to_s.$$p = null;\n        return \"\" + ($send2(self, $find_super(self, 'to_s', $$to_s, false, true), 'to_s', [], $yield)) + \" - [text: \" + (self.text) + \", colspan: \" + (($truthy(($ret_or_1 = self.colspan)) ? ($ret_or_1) : (1))) + \", rowspan: \" + (($truthy(($ret_or_1 = self.rowspan)) ? ($ret_or_1) : (1))) + \", attributes: \" + (self.attributes) + \"]\"\n      });\n    })($$('Table'), $$('AbstractBlock'), $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ParserContext');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.delimiter = $proto.delimiter_rx = $proto.buffer = $proto.cellspecs = $proto.cell_open = $proto.format = $proto.start_cursor_data = $proto.reader = $proto.table = $proto.current_row = $proto.colcount = $proto.column_visits = $proto.active_rowspans = $proto.linenum = nil;\n      \n      self.$include($$('Logging'));\n      $const_set($nesting[0], 'FORMATS', [\"psv\", \"csv\", \"dsv\", \"tsv\"].$to_set());\n      $const_set($nesting[0], 'DELIMITERS', $hash2([\"psv\", \"csv\", \"dsv\", \"tsv\", \"!sv\"], {\"psv\": [\"|\", /\\|/], \"csv\": [\",\", /,/], \"dsv\": [\":\", /:/], \"tsv\": [\"\\t\", /\\t/], \"!sv\": [\"!\", /!/]}));\n      self.$attr_accessor(\"table\");\n      self.$attr_accessor(\"format\");\n      self.$attr_reader(\"colcount\");\n      self.$attr_accessor(\"buffer\");\n      self.$attr_reader(\"delimiter\");\n      self.$attr_reader(\"delimiter_re\");\n      \n      $def(self, '$initialize', function $$initialize(reader, table, attributes) {\n        var $a, $b, self = this, xsv = nil, sep = nil;\n\n        \n        if (attributes == null) attributes = $hash2([], {});\n        self.start_cursor_data = (self.reader = reader).$mark();\n        self.table = table;\n        if ($truthy(attributes['$key?'](\"format\"))) {\n          if ($truthy($$('FORMATS')['$include?']((xsv = attributes['$[]'](\"format\"))))) {\n            if ($eqeq(xsv, \"tsv\")) {\n              self.format = \"csv\"\n            } else if (($eqeq((self.format = xsv), \"psv\") && ($truthy(table.$document()['$nested?']())))) {\n              xsv = \"!sv\"\n            }\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"illegal table format: \" + (xsv), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})));\n            $a = [\"psv\", ($truthy(table.$document()['$nested?']()) ? (\"!sv\") : (\"psv\"))], (self.format = $a[0]), (xsv = $a[1]), $a;\n          }\n        } else {\n          $a = [\"psv\", ($truthy(table.$document()['$nested?']()) ? (\"!sv\") : (\"psv\"))], (self.format = $a[0]), (xsv = $a[1]), $a\n        };\n        if ($truthy(attributes['$key?'](\"separator\"))) {\n          if ($truthy((sep = attributes['$[]'](\"separator\"))['$nil_or_empty?']())) {\n            $b = $$('DELIMITERS')['$[]'](xsv), $a = $to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else if ($eqeq(sep, \"\\\\t\")) {\n            $b = $$('DELIMITERS')['$[]'](\"tsv\"), $a = $to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else {\n            $a = [sep, $regexp([$$$('Regexp').$escape(sep)])], (self.delimiter = $a[0]), (self.delimiter_rx = $a[1]), $a\n          }\n        } else {\n          $b = $$('DELIMITERS')['$[]'](xsv), $a = $to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n        };\n        self.colcount = ($truthy(table.$columns()['$empty?']()) ? (-1) : (table.$columns().$size()));\n        self.buffer = \"\";\n        self.cellspecs = [];\n        self.cell_open = false;\n        self.active_rowspans = [0];\n        self.column_visits = 0;\n        self.current_row = [];\n        return (self.linenum = -1);\n      }, -3);\n      \n      $def(self, '$starts_with_delimiter?', function $ParserContext_starts_with_delimiter$ques$9(line) {\n        var self = this;\n\n        return line['$start_with?'](self.delimiter)\n      });\n      \n      $def(self, '$match_delimiter', function $$match_delimiter(line) {\n        var self = this;\n\n        return self.delimiter_rx.$match(line)\n      });\n      \n      $def(self, '$skip_past_delimiter', function $$skip_past_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre) + (self.delimiter);\n        return nil;\n      });\n      \n      $def(self, '$skip_past_escaped_delimiter', function $$skip_past_escaped_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre.$chop()) + (self.delimiter);\n        return nil;\n      });\n      \n      $def(self, '$buffer_has_unclosed_quotes?', function $ParserContext_buffer_has_unclosed_quotes$ques$10(append, q) {\n        var self = this, record = nil, qq = nil, trailing_quote = nil, $ret_or_1 = nil;\n\n        \n        if (append == null) append = nil;\n        if (q == null) q = \"\\\"\";\n        if ($eqeq((record = ($truthy(append) ? ($rb_plus(self.buffer, append).$strip()) : (self.buffer.$strip()))), q)) {\n          return true\n        } else if ($truthy(record['$start_with?'](q))) {\n          \n          qq = $rb_plus(q, q);\n          if ((($truthy((trailing_quote = record['$end_with?'](q))) && ($truthy(record['$end_with?'](qq)))) || ($truthy(record['$start_with?'](qq))))) {\n            if ($truthy(($ret_or_1 = (record = record.$gsub(qq, \"\"))['$start_with?'](q)))) {\n              return record['$end_with?'](q)['$!']()\n            } else {\n              return $ret_or_1\n            }\n          } else {\n            return trailing_quote['$!']()\n          };\n        } else {\n          return false\n        };\n      }, -1);\n      \n      $def(self, '$take_cellspec', function $$take_cellspec() {\n        var self = this;\n\n        return self.cellspecs.$shift()\n      });\n      \n      $def(self, '$push_cellspec', function $$push_cellspec(cellspec) {\n        var self = this, $ret_or_1 = nil;\n\n        \n        if (cellspec == null) cellspec = $hash2([], {});\n        self.cellspecs['$<<'](($truthy(($ret_or_1 = cellspec)) ? ($ret_or_1) : ($hash2([], {}))));\n        return nil;\n      }, -1);\n      \n      $def(self, '$keep_cell_open', function $$keep_cell_open() {\n        var self = this;\n\n        \n        self.cell_open = true;\n        return nil;\n      });\n      \n      $def(self, '$mark_cell_closed', function $$mark_cell_closed() {\n        var self = this;\n\n        \n        self.cell_open = false;\n        return nil;\n      });\n      \n      $def(self, '$cell_open?', $return_ivar(\"cell_open\"));\n      \n      $def(self, '$cell_closed?', function $ParserContext_cell_closed$ques$11() {\n        var self = this;\n\n        return self.cell_open['$!']()\n      });\n      \n      $def(self, '$close_open_cell', function $$close_open_cell(next_cellspec) {\n        var self = this;\n\n        \n        if (next_cellspec == null) next_cellspec = $hash2([], {});\n        self.$push_cellspec(next_cellspec);\n        if ($truthy(self['$cell_open?']())) {\n          self.$close_cell(true)\n        };\n        self.$advance();\n        return nil;\n      }, -1);\n      \n      $def(self, '$close_cell', function $$close_cell(eol) {try { var $t_return = $thrower('return'); \n        var self = this, cell_text = nil, cellspec = nil, repeat = nil, $ret_or_1 = nil, q = nil;\n\n        \n        if (eol == null) eol = false;\n        if ($eqeq(self.format, \"psv\")) {\n          \n          cell_text = self.buffer;\n          self.buffer = \"\";\n          if ($truthy((cellspec = self.$take_cellspec()))) {\n            repeat = ($truthy(($ret_or_1 = cellspec.$delete(\"repeatcol\"))) ? ($ret_or_1) : (1))\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"table missing leading separator; recovering automatically\", $hash2([\"source_location\"], {\"source_location\": $send($$$($$('Reader'), 'Cursor'), 'new', $to_a(self.start_cursor_data))})));\n            cellspec = $hash2([], {});\n            repeat = 1;\n          };\n        } else {\n          \n          cell_text = self.buffer.$strip();\n          self.buffer = \"\";\n          cellspec = nil;\n          repeat = 1;\n          if ((($eqeq(self.format, \"csv\") && ($not(cell_text['$empty?']()))) && ($truthy(cell_text['$include?']((q = \"\\\"\")))))) {\n            if (($truthy(cell_text['$start_with?'](q)) && ($truthy(cell_text['$end_with?'](q))))) {\n              if ($truthy((cell_text = cell_text.$slice(1, $rb_minus(cell_text.$length(), 2))))) {\n                cell_text = cell_text.$strip().$squeeze(q)\n              } else {\n                \n                self.$logger().$error(self.$message_with_context(\"unclosed quote in CSV data; setting cell to empty\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_at_prev_line()})));\n                cell_text = \"\";\n              }\n            } else {\n              cell_text = cell_text.$squeeze(q)\n            }\n          };\n        };\n        $send((1), 'upto', [repeat], function $$12(i){var self = $$12.$$s == null ? this : $$12.$$s, column = nil, extra_cols = nil, offset = nil, cell = nil;\n          if (self.colcount == null) self.colcount = nil;\n          if (self.table == null) self.table = nil;\n          if (self.current_row == null) self.current_row = nil;\n          if (self.reader == null) self.reader = nil;\n          if (self.column_visits == null) self.column_visits = nil;\n          if (self.linenum == null) self.linenum = nil;\n\n          \n          if (i == null) i = nil;\n          if ($eqeq(self.colcount, -1)) {\n            \n            self.table.$columns()['$<<']((column = $$$($$('Table'), 'Column').$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));\n            if ((($truthy(cellspec) && ($truthy(cellspec['$key?'](\"colspan\")))) && ($truthy($rb_gt((extra_cols = $rb_minus(cellspec['$[]'](\"colspan\").$to_i(), 1)), 0))))) {\n              \n              offset = self.table.$columns().$size();\n              $send(extra_cols, 'times', [], function $$13(j){var self = $$13.$$s == null ? this : $$13.$$s;\n                if (self.table == null) self.table = nil;\n\n                \n                if (j == null) j = nil;\n                return self.table.$columns()['$<<']($$$($$('Table'), 'Column').$new(self.table, $rb_plus(offset, j)));}, {$$s: self});\n            };\n          } else if (!$truthy((column = self.table.$columns()['$[]'](self.current_row.$size())))) {\n            \n            self.$logger().$error(self.$message_with_context(\"dropping cell because it exceeds specified number of columns\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_before_mark()})));\n            $t_return.$throw();\n          };\n          cell = $$$($$('Table'), 'Cell').$new(column, cell_text, cellspec, $hash2([\"cursor\"], {\"cursor\": self.reader.$cursor_before_mark()}));\n          self.reader.$mark();\n          if (!($not(cell.$rowspan()) || ($eqeq(cell.$rowspan(), 1)))) {\n            self.$activate_rowspan(cell.$rowspan(), ($truthy(($ret_or_1 = cell.$colspan())) ? ($ret_or_1) : (1)))\n          };\n          self.column_visits = $rb_plus(self.column_visits, ($truthy(($ret_or_1 = cell.$colspan())) ? ($ret_or_1) : (1)));\n          self.current_row['$<<'](cell);\n          if (($truthy(self['$end_of_row?']()) && ((($neqeq(self.colcount, -1) || ($truthy($rb_gt(self.linenum, 0)))) || (($truthy(eol) && ($eqeq(i, repeat)))))))) {\n            return self.$close_row()\n          } else {\n            return nil\n          };}, {$$s: self, $$ret: $t_return});\n        self.cell_open = false;\n        return nil;} catch($e) {\n          if ($e === $t_return) return $e.$v;\n          throw $e;\n        }\n      }, -1);\n      self.$private();\n      \n      $def(self, '$close_row', function $$close_row() {\n        var self = this, $ret_or_1 = nil;\n\n        \n        self.table.$rows().$body()['$<<'](self.current_row);\n        if ($eqeq(self.colcount, -1)) {\n          self.colcount = self.column_visits\n        };\n        self.column_visits = 0;\n        self.current_row = [];\n        self.active_rowspans.$shift();\n        if ($truthy(($ret_or_1 = self.active_rowspans['$[]'](0)))) {\n          $ret_or_1\n        } else {\n          self.active_rowspans['$[]='](0, 0)\n        };\n        return nil;\n      });\n      \n      $def(self, '$activate_rowspan', function $$activate_rowspan(rowspan, colspan) {\n        var self = this;\n\n        \n        $send((1), 'upto', [$rb_minus(rowspan, 1)], function $$14(i){var $a, self = $$14.$$s == null ? this : $$14.$$s, $ret_or_1 = nil;\n          if (self.active_rowspans == null) self.active_rowspans = nil;\n\n          \n          if (i == null) i = nil;\n          return ($a = [i, $rb_plus(($truthy(($ret_or_1 = self.active_rowspans['$[]'](i))) ? ($ret_or_1) : (0)), colspan)], $send(self.active_rowspans, '[]=', $a), $a[$a.length - 1]);}, {$$s: self});\n        return nil;\n      });\n      \n      $def(self, '$end_of_row?', function $ParserContext_end_of_row$ques$15() {\n        var self = this, $ret_or_1 = nil;\n\n        if ($truthy(($ret_or_1 = self.colcount['$=='](-1)))) {\n          return $ret_or_1\n        } else {\n          return self.$effective_column_visits()['$=='](self.colcount)\n        }\n      });\n      \n      $def(self, '$effective_column_visits', function $$effective_column_visits() {\n        var self = this;\n\n        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0))\n      });\n      return $def(self, '$advance', function $$advance() {\n        var self = this;\n\n        return (self.linenum = $rb_plus(self.linenum, 1))\n      });\n    })($$('Table'), null, $nesting);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/writer\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $hash2 = Opal.hash2, $def = Opal.def, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('respond_to?,write,+,chomp,include');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Writer');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      return $def(self, '$write', function $$write(output, target) {\n        \n        \n        if ($truthy(target['$respond_to?'](\"write\"))) {\n          target.$write($rb_plus(output.$chomp(), $$('LF')))\n        } else {\n          $$$('File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}))\n        };\n        return nil;\n      })\n    })($nesting[0], $nesting);\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'VoidWriter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$include($$('Writer'));\n      return $def(self, '$write', $return_val(nil));\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/load\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $neqeq = Opal.neqeq, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $send = Opal.send, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('merge,[],start,!=,logger,key?,logger=,new,!,===,dup,tap,each,partition,[]=,split,gsub,+,respond_to?,keys,raise,join,ancestors,class,==,at,to_i,mtime,absolute_path,path,dirname,basename,extname,read,rewind,drop,record,parse,exception,message,set_backtrace,backtrace,stack_trace=,stack_trace,open,load');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$load', function $$load(input, options) {\n        var $a, $b, $c, $d, self = this, timings = nil, logger = nil, $ret_or_1 = nil, attrs = nil, input_path = nil, source = nil, doc = nil, e = nil, context = nil, wrapped_e = nil;\n\n        \n        if (options == null) options = $hash2([], {});\n        try {\n          \n          options = options.$merge();\n          if ($truthy((timings = options['$[]'](\"timings\")))) {\n            timings.$start(\"read\")\n          };\n          if (($truthy(options['$key?'](\"logger\")) && ($neqeq((logger = options['$[]'](\"logger\")), $$('LoggerManager').$logger())))) {\n            $$('LoggerManager')['$logger='](($truthy(($ret_or_1 = logger)) ? ($ret_or_1) : ($$('NullLogger').$new())))\n          };\n          if ($not((attrs = options['$[]'](\"attributes\")))) {\n            attrs = $hash2([], {})\n          } else if ($eqeqeq($$$('Hash'), attrs)) {\n            attrs = attrs.$merge()\n          } else if (($truthy((($c = $$$('::', 'Java', 'skip_raise')) && ($b = $$$($c, 'JavaUtil', 'skip_raise')) && ($a = $$$($b, 'Map', 'skip_raise')) ? 'constant' : nil)) && ($eqeqeq($$$($$$($$$('Java'), 'JavaUtil'), 'Map'), attrs)))) {\n            attrs = attrs.$dup()\n          } else if ($eqeqeq($$$('Array'), attrs)) {\n            attrs = $send($hash2([], {}), 'tap', [], function $$1(accum){\n              \n              if (accum == null) accum = nil;\n              return $send(attrs, 'each', [], function $$2(entry){var $d, $e, k = nil, _ = nil, v = nil;\n\n                \n                if (entry == null) entry = nil;\n                $e = entry.$partition(\"=\"), $d = $to_ary($e), (k = ($d[0] == null ? nil : $d[0])), (_ = ($d[1] == null ? nil : $d[1])), (v = ($d[2] == null ? nil : $d[2])), $e;\n                return ($d = [k, v], $send(accum, '[]=', $d), $d[$d.length - 1]);});})\n          } else if ($eqeqeq($$$('String'), attrs)) {\n            attrs = $send($hash2([], {}), 'tap', [], function $$3(accum){\n              \n              if (accum == null) accum = nil;\n              return $send(attrs.$gsub($$('SpaceDelimiterRx'), $rb_plus(\"\\\\1\", $$('NULL'))).$gsub($$('EscapedSpaceRx'), \"\\\\1\").$split($$('NULL')), 'each', [], function $$4(entry){var $d, $e, k = nil, _ = nil, v = nil;\n\n                \n                if (entry == null) entry = nil;\n                $e = entry.$partition(\"=\"), $d = $to_ary($e), (k = ($d[0] == null ? nil : $d[0])), (_ = ($d[1] == null ? nil : $d[1])), (v = ($d[2] == null ? nil : $d[2])), $e;\n                return ($d = [k, v], $send(accum, '[]=', $d), $d[$d.length - 1]);});})\n          } else if (($truthy(attrs['$respond_to?'](\"keys\")) && ($truthy(attrs['$respond_to?'](\"[]\"))))) {\n            attrs = $send($hash2([], {}), 'tap', [], function $$5(accum){\n              \n              if (accum == null) accum = nil;\n              return $send(attrs.$keys(), 'each', [], function $$6(k){var $d;\n\n                \n                if (k == null) k = nil;\n                return ($d = [k, attrs['$[]'](k)], $send(accum, '[]=', $d), $d[$d.length - 1]);});})\n          } else {\n            self.$raise($$$('ArgumentError'), \"illegal type for attributes option: \" + (attrs.$class().$ancestors().$join(\" < \")))\n          };\n          if ($eqeqeq($$$('File'), input)) {\n            \n            options['$[]='](\"input_mtime\", ($eqeq($$('RUBY_ENGINE'), \"jruby\") ? ($$$('Time').$at(input.$mtime().$to_i())) : (input.$mtime())));\n            attrs['$[]='](\"docfile\", (input_path = $$$('File').$absolute_path(input.$path())));\n            attrs['$[]='](\"docdir\", $$$('File').$dirname(input_path));\n            attrs['$[]='](\"docname\", $$('Helpers').$basename(input_path, ($d = [\"docfilesuffix\", $$('Helpers').$extname(input_path)], $send(attrs, '[]=', $d), $d[$d.length - 1])));\n            source = input.$read();\n          } else if ($truthy(input['$respond_to?'](\"read\"))) {\n            \n            try {\n              input.$rewind()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$('StandardError')])) {\n                try {\n                  nil\n                } finally { Opal.pop_exception(); }\n              } else { throw $err; }\n            };\n            source = input.$read();\n          } else if ($eqeqeq($$$('String'), input)) {\n            source = input\n          } else if ($eqeqeq($$$('Array'), input)) {\n            source = input.$drop(0)\n          } else if ($truthy(input)) {\n            self.$raise($$$('ArgumentError'), \"unsupported input type: \" + (input.$class()))\n          };\n          if ($truthy(timings)) {\n            \n            timings.$record(\"read\");\n            timings.$start(\"parse\");\n          };\n          options['$[]='](\"attributes\", attrs);\n          doc = ($eqeq(options['$[]'](\"parse\"), false) ? ($$('Document').$new(source, options)) : ($$('Document').$new(source, options).$parse()));\n          if ($truthy(timings)) {\n            timings.$record(\"parse\")\n          };\n          return doc;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$('StandardError')])) {(e = $err)\n            try {\n              \n              \n              try {\n                \n                context = \"asciidoctor: FAILED: \" + (($truthy(($ret_or_1 = attrs['$[]'](\"docfile\"))) ? ($ret_or_1) : (\"<stdin>\"))) + \": Failed to load AsciiDoc document\";\n                if ($truthy(e['$respond_to?'](\"exception\"))) {\n                  \n                  wrapped_e = e.$exception(\"\" + (context) + \" - \" + (e.$message()));\n                  wrapped_e.$set_backtrace(e.$backtrace());\n                } else {\n                  \n                  wrapped_e = e.$class().$new(context, e);\n                  wrapped_e['$stack_trace='](e.$stack_trace());\n                };\n              } catch ($err) {\n                if (Opal.rescue($err, [$$('StandardError')])) {\n                  try {\n                    wrapped_e = e\n                  } finally { Opal.pop_exception(); }\n                } else { throw $err; }\n              };;\n              return self.$raise(wrapped_e);\n            } finally { Opal.pop_exception(); }\n          } else { throw $err; }\n        };\n      }, -2);\n      return $def(self, '$load_file', function $$load_file(filename, options) {\n        var self = this;\n\n        \n        if (options == null) options = $hash2([], {});\n        return $send($$$('File'), 'open', [filename, $$('FILE_READ_MODE')], function $$7(file){var self = $$7.$$s == null ? this : $$7.$$s;\n\n          \n          if (file == null) file = nil;\n          return self.$load(file, options);}, {$$s: self});\n      }, -2);\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/convert\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $hash2 = Opal.hash2, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, $not = Opal.not, $rb_lt = Opal.rb_lt, $neqeq = Opal.neqeq, $def = Opal.def, $send = Opal.send, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('delete,merge,===,absolute_path,path,load,respond_to?,[]=,key?,fetch,[],dirname,expand_path,join,attributes,outfilesuffix,==,raise,pwd,>=,safe,normalize_system_path,mkdir_p,directory?,!,convert,write,attr,uriish?,basebackend?,attr?,<,include?,syntax_highlighter,write_stylesheet?,write_primary_stylesheet,instance,to_s,read_asset,file?,!=,write_stylesheet,open,convert_file');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      \n      $def(self, '$convert', function $$convert(input, options) {\n        var self = this, to_dir = nil, mkdirs = nil, $ret_or_1 = nil, to_file = nil, write_to_target = nil, sibling_path = nil, stream_output = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, output = nil, stylesdir = nil, stylesheet = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, copy_syntax_hl_stylesheet = nil, syntax_hl = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dest = nil, stylesheet_data = nil, stylesheet_outdir = nil;\n\n        \n        if (options == null) options = $hash2([], {});\n        (options = options.$merge()).$delete(\"parse\");\n        to_dir = options.$delete(\"to_dir\");\n        mkdirs = options.$delete(\"mkdirs\");\n        if (($eqeqeq(true, ($ret_or_1 = (to_file = options.$delete(\"to_file\")))) || ($eqeqeq(nil, $ret_or_1)))) {\n          \n          if (!$truthy((write_to_target = to_dir))) {\n            if ($eqeqeq($$$('File'), input)) {\n              sibling_path = $$$('File').$absolute_path(input.$path())\n            }\n          };\n          to_file = nil;\n        } else if ($eqeqeq(false, $ret_or_1)) {\n          to_file = nil\n        } else if ($eqeqeq(\"/dev/null\", $ret_or_1)) {\n          return self.$load(input, options)\n        } else if (!$truthy((stream_output = to_file['$respond_to?'](\"write\")))) {\n          options['$[]='](\"to_file\", (write_to_target = to_file))\n        };\n        if (!$truthy(options['$key?'](\"standalone\"))) {\n          if (($truthy(sibling_path) || ($truthy(write_to_target)))) {\n            options['$[]='](\"standalone\", options.$fetch(\"header_footer\", true))\n          } else if ($truthy(options['$key?'](\"header_footer\"))) {\n            options['$[]='](\"standalone\", options['$[]'](\"header_footer\"))\n          }\n        };\n        if ($truthy(sibling_path)) {\n          options['$[]='](\"to_dir\", (outdir = $$$('File').$dirname(sibling_path)))\n        } else if ($truthy(write_to_target)) {\n          if ($truthy(to_dir)) {\n            if ($truthy(to_file)) {\n              options['$[]='](\"to_dir\", $$$('File').$dirname($$$('File').$expand_path(to_file, to_dir)))\n            } else {\n              options['$[]='](\"to_dir\", $$$('File').$expand_path(to_dir))\n            }\n          } else if ($truthy(to_file)) {\n            options['$[]='](\"to_dir\", $$$('File').$dirname($$$('File').$expand_path(to_file)))\n          }\n        };\n        doc = self.$load(input, options);\n        if ($truthy(sibling_path)) {\n          \n          outfile = $$$('File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()));\n          if ($eqeq(outfile, sibling_path)) {\n            self.$raise($$$('IOError'), \"input file and output file cannot be the same: \" + (outfile))\n          };\n        } else if ($truthy(write_to_target)) {\n          \n          working_dir = ($truthy(options['$key?'](\"base_dir\")) ? ($$$('File').$expand_path(options['$[]'](\"base_dir\"))) : ($$$('Dir').$pwd()));\n          jail = ($truthy($rb_ge(doc.$safe(), $$$($$('SafeMode'), 'SAFE'))) ? (working_dir) : (nil));\n          if ($truthy(to_dir)) {\n            \n            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            if ($truthy(to_file)) {\n              \n              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n              outdir = $$$('File').$dirname(outfile);\n            } else {\n              outfile = $$$('File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()))\n            };\n          } else if ($truthy(to_file)) {\n            \n            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            outdir = $$$('File').$dirname(outfile);\n          };\n          if (($eqeqeq($$$('File'), input) && ($eqeq(outfile, $$$('File').$absolute_path(input.$path()))))) {\n            self.$raise($$$('IOError'), \"input file and output file cannot be the same: \" + (outfile))\n          };\n          if ($truthy(mkdirs)) {\n            $$('Helpers').$mkdir_p(outdir)\n          } else if (!$truthy($$$('File')['$directory?'](outdir))) {\n            self.$raise($$$('IOError'), \"target directory does not exist: \" + (to_dir) + \" (hint: set :mkdirs option)\")\n          };\n        } else {\n          \n          outfile = to_file;\n          outdir = nil;\n        };\n        if (($truthy(outfile) && ($not(stream_output)))) {\n          output = doc.$convert($hash2([\"outfile\", \"outdir\"], {\"outfile\": outfile, \"outdir\": outdir}))\n        } else {\n          output = doc.$convert()\n        };\n        if ($truthy(outfile)) {\n          \n          doc.$write(output, outfile);\n          if (((((($not(stream_output) && ($truthy($rb_lt(doc.$safe(), $$$($$('SafeMode'), 'SECURE'))))) && ($truthy(doc['$attr?'](\"linkcss\")))) && ($truthy(doc['$attr?'](\"copycss\")))) && ($truthy(doc['$basebackend?'](\"html\")))) && ($not(($truthy(($ret_or_1 = (stylesdir = doc.$attr(\"stylesdir\")))) ? ($$('Helpers')['$uriish?'](stylesdir)) : ($ret_or_1)))))) {\n            \n            if ($truthy((stylesheet = doc.$attr(\"stylesheet\")))) {\n              if ($truthy($$('DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet))) {\n                copy_asciidoctor_stylesheet = true\n              } else if ($not($$('Helpers')['$uriish?'](stylesheet))) {\n                copy_user_stylesheet = true\n              }\n            };\n            copy_syntax_hl_stylesheet = ($truthy(($ret_or_1 = (syntax_hl = doc.$syntax_highlighter()))) ? (syntax_hl['$write_stylesheet?'](doc)) : ($ret_or_1));\n            if ((($truthy(copy_asciidoctor_stylesheet) || ($truthy(copy_user_stylesheet))) || ($truthy(copy_syntax_hl_stylesheet)))) {\n              \n              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, ($truthy($rb_ge(doc.$safe(), $$$($$('SafeMode'), 'SAFE'))) ? (outdir) : (nil)));\n              if ($truthy(mkdirs)) {\n                $$('Helpers').$mkdir_p(stylesoutdir)\n              } else if (!$truthy($$$('File')['$directory?'](stylesoutdir))) {\n                self.$raise($$$('IOError'), \"target stylesheet directory does not exist: \" + (stylesoutdir) + \" (hint: set :mkdirs option)\")\n              };\n              if ($truthy(copy_asciidoctor_stylesheet)) {\n                $$('Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)\n              } else if ($truthy(copy_user_stylesheet)) {\n                \n                if (($eqeq((stylesheet_src = doc.$attr(\"copycss\")), \"\") || ($eqeq(stylesheet_src, true)))) {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet)\n                } else {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet_src.$to_s())\n                };\n                stylesheet_dest = doc.$normalize_system_path(stylesheet, stylesoutdir, ($truthy($rb_ge(doc.$safe(), $$$($$('SafeMode'), 'SAFE'))) ? (outdir) : (nil)));\n                if (($neqeq(stylesheet_src, stylesheet_dest) && ($truthy((stylesheet_data = doc.$read_asset(stylesheet_src, $hash2([\"warn_on_failure\", \"label\"], {\"warn_on_failure\": $$$('File')['$file?'](stylesheet_dest)['$!'](), \"label\": \"stylesheet\"}))))))) {\n                  \n                  if (($neqeq((stylesheet_outdir = $$$('File').$dirname(stylesheet_dest)), stylesoutdir) && ($not($$$('File')['$directory?'](stylesheet_outdir))))) {\n                    if ($truthy(mkdirs)) {\n                      $$('Helpers').$mkdir_p(stylesheet_outdir)\n                    } else {\n                      self.$raise($$$('IOError'), \"target stylesheet directory does not exist: \" + (stylesheet_outdir) + \" (hint: set :mkdirs option)\")\n                    }\n                  };\n                  $$$('File').$write(stylesheet_dest, stylesheet_data, $hash2([\"mode\"], {\"mode\": $$('FILE_WRITE_MODE')}));\n                };\n              };\n              if ($truthy(copy_syntax_hl_stylesheet)) {\n                syntax_hl.$write_stylesheet(doc, stylesoutdir)\n              };\n            };\n          };\n          return doc;\n        } else {\n          return output\n        };\n      }, -2);\n      \n      $def(self, '$convert_file', function $$convert_file(filename, options) {\n        var self = this;\n\n        \n        if (options == null) options = $hash2([], {});\n        return $send($$$('File'), 'open', [filename, $$('FILE_READ_MODE')], function $$1(file){var self = $$1.$$s == null ? this : $$1.$$s;\n\n          \n          if (file == null) file = nil;\n          return self.$convert(file, options);}, {$$s: self});\n      }, -2);\n      $alias(self, \"render\", \"convert\");\n      return $alias(self, \"render_file\", \"convert_file\");\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/syntax_highlighter/highlightjs\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $return_val = Opal.return_val, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('register_for,merge,proc,[]=,attr,[],==,attr?,join,map,split,lstrip');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'HighlightJsAdapter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$register_for(\"highlightjs\", \"highlight.js\");\n      \n      $def(self, '$initialize', function $$initialize($a) {\n        var $post_args, args, $yield = $$initialize.$$p || nil, self = this;\n\n        $$initialize.$$p = null;\n        \n        $post_args = $slice(arguments);\n        args = $post_args;\n        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a(args), $yield);\n        return (self.name = (self.pre_class = \"highlightjs\"));\n      }, -1);\n      \n      $def(self, '$format', function $$format(node, lang, opts) {\n        var $yield = $$format.$$p || nil, self = this;\n\n        $$format.$$p = null;\n        return $send2(self, $find_super(self, 'format', $$format, false, true), 'format', [node, lang, opts.$merge($hash2([\"transform\"], {\"transform\": $send(self, 'proc', [], function $$1(_, code){var $a, $ret_or_1 = nil;\n\n          \n          if (_ == null) _ = nil;\n          if (code == null) code = nil;\n          return ($a = [\"class\", \"language-\" + (($truthy(($ret_or_1 = lang)) ? ($ret_or_1) : (\"none\"))) + \" hljs\"], $send(code, '[]=', $a), $a[$a.length - 1]);})}))], null)\n      });\n      \n      $def(self, '$docinfo?', $return_val(true));\n      return $def(self, '$docinfo', function $$docinfo(location, doc, opts) {\n        var base_url = nil;\n\n        \n        base_url = doc.$attr(\"highlightjsdir\", \"\" + (opts['$[]'](\"cdn_base_url\")) + \"/highlight.js/\" + ($$('HIGHLIGHT_JS_VERSION')));\n        if ($eqeq(location, \"head\")) {\n          return \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (base_url) + \"/styles/\" + (doc.$attr(\"highlightjs-theme\", \"github\")) + \".min.css\\\"\" + (opts['$[]'](\"self_closing_tag_slash\")) + \">\"\n        } else {\n          return \"<script src=\\\"\" + (base_url) + \"/highlight.min.js\\\"></script>\\n\" + (($truthy(doc['$attr?'](\"highlightjs-languages\")) ? ($send(doc.$attr(\"highlightjs-languages\").$split(\",\"), 'map', [], function $$2(lang){\n            \n            if (lang == null) lang = nil;\n            return \"<script src=\\\"\" + (base_url) + \"/languages/\" + (lang.$lstrip()) + \".min.js\\\"></script>\\n\";}).$join()) : (\"\"))) + \"<script>\\n\" + \"if (!hljs.initHighlighting.called) {\\n\" + \"  hljs.initHighlighting.called = true\\n\" + \"  ;[].slice.call(document.querySelectorAll('pre.highlight > code[data-lang]')).forEach(function (el) { hljs.highlightBlock(el) })\\n\" + \"}\\n\" + \"</script>\"\n        };\n      });\n    })($$('SyntaxHighlighter'), $$$($$('SyntaxHighlighter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/syntax_highlighter\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $hash2 = Opal.hash2, $def = Opal.def, $return_val = Opal.return_val, $defs = Opal.defs, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Class = Opal.Class, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('attr_reader,raise,class,extend,private_class_method,register,map,to_s,each,[]=,registry,[],for,===,new,name,private,include,delete,join,content');\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      self.$attr_reader(\"name\");\n      \n      $def(self, '$initialize', function $$initialize(name, backend, opts) {\n        var self = this;\n\n        \n        if (backend == null) backend = \"html5\";\n        if (opts == null) opts = $hash2([], {});\n        return (self.name = (self.pre_class = name));\n      }, -2);\n      \n      $def(self, '$docinfo?', $return_val(nil));\n      \n      $def(self, '$docinfo', function $$docinfo(location, doc, opts) {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'), \"\" + ($$('SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"docinfo\") + \" method since #docinfo? returns true\")\n      });\n      \n      $def(self, '$highlight?', $return_val(nil));\n      \n      $def(self, '$highlight', function $$highlight(node, source, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'), \"\" + ($$('SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"highlight\") + \" method since #highlight? returns true\")\n      });\n      \n      $def(self, '$format', function $$format(node, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'), \"\" + ($$('SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"format\") + \" method\")\n      });\n      \n      $def(self, '$write_stylesheet?', $return_val(nil));\n      \n      $def(self, '$write_stylesheet', function $$write_stylesheet(doc, to_dir) {\n        var self = this;\n\n        return self.$raise($$$('NotImplementedError'), \"\" + ($$('SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"write_stylesheet\") + \" method since #write_stylesheet? returns true\")\n      });\n      $defs(self, '$included', function $$included(into) {\n        \n        return into.$extend($$('Config'))\n      });\n      self.$private_class_method(\"included\");\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$register_for', function $$register_for($a) {\n          var $post_args, names, self = this;\n\n          \n          $post_args = $slice(arguments);\n          names = $post_args;\n          return $send($$('SyntaxHighlighter'), 'register', [self].concat($to_a($send(names, 'map', [], function $$1(name){\n            \n            if (name == null) name = nil;\n            return name.$to_s();}))));\n        }, -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        \n        $def(self, '$register', function $$register(syntax_highlighter, $a) {\n          var $post_args, names, self = this;\n\n          \n          $post_args = $slice(arguments, 1);\n          names = $post_args;\n          return $send(names, 'each', [], function $$2(name){var $b, self = $$2.$$s == null ? this : $$2.$$s;\n\n            \n            if (name == null) name = nil;\n            return ($b = [name, syntax_highlighter], $send(self.$registry(), '[]=', $b), $b[$b.length - 1]);}, {$$s: self});\n        }, -2);\n        \n        $def(self, '$for', function $Factory_for$3(name) {\n          var self = this;\n\n          return self.$registry()['$[]'](name)\n        });\n        \n        $def(self, '$create', function $$create(name, backend, opts) {\n          var self = this, syntax_hl = nil;\n\n          \n          if (backend == null) backend = \"html5\";\n          if (opts == null) opts = $hash2([], {});\n          if ($truthy((syntax_hl = self.$for(name)))) {\n            \n            if ($eqeqeq($Class, syntax_hl)) {\n              syntax_hl = syntax_hl.$new(name, backend, opts)\n            };\n            if (!$truthy(syntax_hl.$name())) {\n              self.$raise($$$('NameError'), \"\" + (syntax_hl.$class()) + \" must specify a value for `name'\")\n            };\n            return syntax_hl;\n          } else {\n            return nil\n          };\n        }, -2);\n        self.$private();\n        return $def(self, '$registry', function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        });\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('Factory'));\n        \n        $def(self, '$initialize', function $$initialize(seed_registry) {\n          var self = this, $ret_or_1 = nil;\n\n          \n          if (seed_registry == null) seed_registry = nil;\n          return (self.registry = ($truthy(($ret_or_1 = seed_registry)) ? ($ret_or_1) : ($hash2([], {}))));\n        }, -1);\n        self.$private();\n        return self.$attr_reader(\"registry\");\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('Factory'));\n        $class_variable_set($nesting[0], '@@registry', $hash2([], {}));\n        self.$private();\n        \n        $def(self, '$registry', function $$registry() {\n          \n          return $class_variable_get($nesting[0], '@@registry', false)\n        });\n        return nil;\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('DefaultFactory'));\n        return nil;\n      })($nesting[0], $$('CustomFactory'), $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.pre_class = nil;\n        \n        self.$include($$('SyntaxHighlighter'));\n        return $def(self, '$format', function $$format(node, lang, opts) {\n          var self = this, class_attr_val = nil, transform = nil, pre = nil, code = nil;\n\n          \n          class_attr_val = ($truthy(opts['$[]'](\"nowrap\")) ? (\"\" + (self.pre_class) + \" highlight nowrap\") : (\"\" + (self.pre_class) + \" highlight\"));\n          if ($truthy((transform = opts['$[]'](\"transform\")))) {\n            \n            transform['$[]']((pre = $hash2([\"class\"], {\"class\": class_attr_val})), (code = ($truthy(lang) ? ($hash2([\"data-lang\"], {\"data-lang\": lang})) : ($hash2([], {})))));\n            if ($truthy((lang = code.$delete(\"data-lang\")))) {\n              code['$[]='](\"data-lang\", lang)\n            };\n            return \"<pre\" + ($send(pre, 'map', [], function $$4(k, v){\n              \n              if (k == null) k = nil;\n              if (v == null) v = nil;\n              return \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}).$join()) + \"><code\" + ($send(code, 'map', [], function $$5(k, v){\n              \n              if (k == null) k = nil;\n              if (v == null) v = nil;\n              return \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}).$join()) + \">\" + (node.$content()) + \"</code></pre>\";\n          } else {\n            return \"<pre class=\\\"\" + (class_attr_val) + \"\\\"><code\" + (($truthy(lang) ? (\" data-lang=\\\"\" + (lang) + \"\\\"\") : (\"\"))) + \">\" + (node.$content()) + \"</code></pre>\"\n          };\n        });\n      })($nesting[0], null, $nesting);\n      return self.$extend($$('DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor/syntax_highlighter.rb\"+ '/../' + \"syntax_highlighter/highlightjs\");\n  return nil;\n};\n\nOpal.modules[\"asciidoctor/timings\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $rb_minus = Opal.rb_minus, $slice = Opal.slice, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $gvars = Opal.gvars, $eqeq = Opal.eqeq, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('[]=,now,-,delete,reduce,+,[],>,time,puts,sprintf,to_f,read_parse,convert,read_parse_convert,private,==,const_defined?,clock_gettime');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Timings');\n\n      var $a, $b, $c, $d, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.timers = $proto.log = nil;\n      \n      \n      $def(self, '$initialize', function $$initialize() {\n        var self = this;\n\n        \n        self.log = $hash2([], {});\n        return (self.timers = $hash2([], {}));\n      });\n      \n      $def(self, '$start', function $$start(key) {\n        var $a, self = this;\n\n        return ($a = [key, self.$now()], $send(self.timers, '[]=', $a), $a[$a.length - 1])\n      });\n      \n      $def(self, '$record', function $$record(key) {\n        var $a, self = this;\n\n        return ($a = [key, $rb_minus(self.$now(), self.timers.$delete(key))], $send(self.log, '[]=', $a), $a[$a.length - 1])\n      });\n      \n      $def(self, '$time', function $$time($a) {\n        var $post_args, keys, self = this, time = nil;\n\n        \n        $post_args = $slice(arguments);\n        keys = $post_args;\n        time = $send(keys, 'reduce', [0], function $$1(sum, key){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;\n          if (self.log == null) self.log = nil;\n\n          \n          if (sum == null) sum = nil;\n          if (key == null) key = nil;\n          return $rb_plus(sum, ($truthy(($ret_or_1 = self.log['$[]'](key))) ? ($ret_or_1) : (0)));}, {$$s: self});\n        if ($truthy($rb_gt(time, 0))) {\n          return time\n        } else {\n          return nil\n        };\n      }, -1);\n      \n      $def(self, '$read', function $$read() {\n        var self = this;\n\n        return self.$time(\"read\")\n      });\n      \n      $def(self, '$parse', function $$parse() {\n        var self = this;\n\n        return self.$time(\"parse\")\n      });\n      \n      $def(self, '$read_parse', function $$read_parse() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\")\n      });\n      \n      $def(self, '$convert', function $$convert() {\n        var self = this;\n\n        return self.$time(\"convert\")\n      });\n      \n      $def(self, '$read_parse_convert', function $$read_parse_convert() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\")\n      });\n      \n      $def(self, '$write', function $$write() {\n        var self = this;\n\n        return self.$time(\"write\")\n      });\n      \n      $def(self, '$total', function $$total() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\", \"write\")\n      });\n      \n      $def(self, '$print_report', function $$print_report(to, subject) {\n        var self = this;\n        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n        \n        if (to == null) to = $gvars.stdout;\n        if (subject == null) subject = nil;\n        if ($truthy(subject)) {\n          to.$puts(\"Input file: \" + (subject))\n        };\n        to.$puts(\"  Time to read and parse source: \" + (self.$sprintf(\"%05.5f\", self.$read_parse().$to_f())));\n        to.$puts(\"  Time to convert document: \" + (self.$sprintf(\"%05.5f\", self.$convert().$to_f())));\n        return to.$puts(\"  Total time (read, parse and convert): \" + (self.$sprintf(\"%05.5f\", self.$read_parse_convert().$to_f())));\n      }, -1);\n      self.$private();\n      if (($truthy($$$('Process')['$const_defined?'](\"CLOCK_MONOTONIC\", false)) && ($eqeq(((($a = $$$('::', 'Process', 'skip_raise')) && ($b = $a, $b) && ($c = $b) && ((($d = $c.$clock_gettime) && !$d.$$stub) || $c['$respond_to_missing?']('clock_gettime'))) ? 'method' : nil), \"method\")))) {\n        \n        $const_set($nesting[0], 'CLOCK_ID', $$$($$$('Process'), 'CLOCK_MONOTONIC'));\n        return $def(self, '$now', function $$now() {\n          \n          return $$$('Process').$clock_gettime($$('CLOCK_ID'))\n        });\n      } else {\n        return $def(self, '$now', function $$now() {\n          \n          return $$$('Time').$now()\n        })\n      };\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/converter/html5\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash2 = Opal.hash2, $regexp = Opal.regexp, $eqeq = Opal.eqeq, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $not = Opal.not, $neqeq = Opal.neqeq, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $to_ary = Opal.to_ary, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $gvars = Opal.gvars, $return_val = Opal.return_val, $alias = Opal.alias, $eqeqeq = Opal.eqeqeq, $slice = Opal.slice, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('register_for,default=,==,[],init_backend_traits,node_name,convert_inline_quoted,convert_paragraph,convert_inline_anchor,convert_section,convert_listing,convert_literal,convert_ulist,convert_olist,convert_dlist,convert_admonition,convert_colist,convert_embedded,convert_example,convert_floating_title,convert_image,convert_inline_break,convert_inline_button,convert_inline_callout,convert_inline_footnote,convert_inline_image,convert_inline_indexterm,convert_inline_kbd,convert_inline_menu,convert_open,convert_page_break,convert_preamble,convert_quote,convert_sidebar,convert_stem,convert_table,convert_thematic_break,convert_verse,convert_video,convert_document,convert_toc,convert_pass,convert_audio,empty?,attr,attr?,<<,include?,sub_replacements,gsub,extname,slice,length,doctitle,normalize_web_path,primary_stylesheet_data,instance,read_contents,syntax_highlighter,size,docinfo,id,sections?,doctype,role?,role,join,noheader,convert,converter,generate_manname_section,header?,notitle,title,header,each,authors,>,name,email,sub_macros,+,downcase,concat,content,!,footnotes?,footnotes,index,text,nofooter,docinfo?,[]=,delete_at,inspect,!=,to_i,attributes,document,sections,level,caption,captioned_title,<=,numbered,<,sectname,sectnum,convert_outline,title?,icon_uri,compact,media_uri,option?,append_boolean_attribute,style,items,blocks?,text?,chomp,safe,read_svg_contents,alt,image_uri,encode_attribute_value,append_link_constraint_attrs,highlight?,to_sym,format,*,-,count,end_with?,start_with?,list_marker_keyword,parent,warn,logger,context,error,content_only,new,columns,to_h,rows,colspan,rowspan,unshift,shift,split,pop,nil_or_empty?,type,===,catalog,get_root_document,xreftext,target,reftext,chop,sub,match,private,upcase,nested?,parent_document,handles?,to_s,send');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Html5Converter');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n      $proto.void_element_slash = $proto.xml_mode = $proto.refs = $proto.resolving_xref = nil;\n      \n      self.$register_for(\"html5\");\n      $const_set($nesting[0], 'QUOTE_TAGS', $hash2([\"monospaced\", \"emphasis\", \"strong\", \"double\", \"single\", \"mark\", \"superscript\", \"subscript\", \"asciimath\", \"latexmath\"], {\"monospaced\": [\"<code>\", \"</code>\", true], \"emphasis\": [\"<em>\", \"</em>\", true], \"strong\": [\"<strong>\", \"</strong>\", true], \"double\": [\"&#8220;\", \"&#8221;\"], \"single\": [\"&#8216;\", \"&#8217;\"], \"mark\": [\"<mark>\", \"</mark>\", true], \"superscript\": [\"<sup>\", \"</sup>\", true], \"subscript\": [\"<sub>\", \"</sub>\", true], \"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]}))['$default=']([\"\", \"\"]);\n      $const_set($nesting[0], 'DropAnchorRx', /<(?:a\\b[^>]*|\\/a)>/);\n      $const_set($nesting[0], 'StemBreakRx', / *\\\\\\n(?:\\\\?\\n)*|\\n\\n+/);\n      \n      $const_set($nesting[0], 'SvgPreambleRx', $regexp([\"^\", $$('CC_ALL'), \"*?(?=<svg[\\\\s>])\"]));\n      $const_set($nesting[0], 'SvgStartTagRx', /^<svg(?:\\s[^>]*)?>/);;\n      $const_set($nesting[0], 'DimensionAttributeRx', $regexp([\"\\\\s(?:width|height|style)=([\\\"'])\", $$('CC_ANY'), \"*?\\\\1\"]));\n      \n      $def(self, '$initialize', function $$initialize(backend, opts) {\n        var self = this, syntax = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        self.backend = backend;\n        if ($eqeq(opts['$[]'](\"htmlsyntax\"), \"xml\")) {\n          \n          syntax = \"xml\";\n          self.xml_mode = true;\n          self.void_element_slash = \"/\";\n        } else {\n          \n          syntax = \"html\";\n          self.xml_mode = nil;\n          self.void_element_slash = \"\";\n        };\n        return self.$init_backend_traits($hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\", \"supports_templates\"], {\"basebackend\": \"html\", \"filetype\": \"html\", \"htmlsyntax\": syntax, \"outfilesuffix\": \".html\", \"supports_templates\": true}));\n      }, -2);\n      \n      $def(self, '$convert', function $$convert(node, transform, opts) {\n        var $yield = $$convert.$$p || nil, self = this;\n\n        $$convert.$$p = null;\n        \n        if (transform == null) transform = node.$node_name();\n        if (opts == null) opts = nil;\n        \n        switch (transform) {\n          case \"inline_quoted\":\n            return self.$convert_inline_quoted(node)\n          case \"paragraph\":\n            return self.$convert_paragraph(node)\n          case \"inline_anchor\":\n            return self.$convert_inline_anchor(node)\n          case \"section\":\n            return self.$convert_section(node)\n          case \"listing\":\n            return self.$convert_listing(node)\n          case \"literal\":\n            return self.$convert_literal(node)\n          case \"ulist\":\n            return self.$convert_ulist(node)\n          case \"olist\":\n            return self.$convert_olist(node)\n          case \"dlist\":\n            return self.$convert_dlist(node)\n          case \"admonition\":\n            return self.$convert_admonition(node)\n          case \"colist\":\n            return self.$convert_colist(node)\n          case \"embedded\":\n            return self.$convert_embedded(node)\n          case \"example\":\n            return self.$convert_example(node)\n          case \"floating_title\":\n            return self.$convert_floating_title(node)\n          case \"image\":\n            return self.$convert_image(node)\n          case \"inline_break\":\n            return self.$convert_inline_break(node)\n          case \"inline_button\":\n            return self.$convert_inline_button(node)\n          case \"inline_callout\":\n            return self.$convert_inline_callout(node)\n          case \"inline_footnote\":\n            return self.$convert_inline_footnote(node)\n          case \"inline_image\":\n            return self.$convert_inline_image(node)\n          case \"inline_indexterm\":\n            return self.$convert_inline_indexterm(node)\n          case \"inline_kbd\":\n            return self.$convert_inline_kbd(node)\n          case \"inline_menu\":\n            return self.$convert_inline_menu(node)\n          case \"open\":\n            return self.$convert_open(node)\n          case \"page_break\":\n            return self.$convert_page_break(node)\n          case \"preamble\":\n            return self.$convert_preamble(node)\n          case \"quote\":\n            return self.$convert_quote(node)\n          case \"sidebar\":\n            return self.$convert_sidebar(node)\n          case \"stem\":\n            return self.$convert_stem(node)\n          case \"table\":\n            return self.$convert_table(node)\n          case \"thematic_break\":\n            return self.$convert_thematic_break(node)\n          case \"verse\":\n            return self.$convert_verse(node)\n          case \"video\":\n            return self.$convert_video(node)\n          case \"document\":\n            return self.$convert_document(node)\n          case \"toc\":\n            return self.$convert_toc(node)\n          case \"pass\":\n            return self.$convert_pass(node)\n          case \"audio\":\n            return self.$convert_audio(node)\n          default:\n            return $send2(self, $find_super(self, 'convert', $$convert, false, true), 'convert', [node, transform, opts], $yield)\n        };\n      }, -2);\n      \n      $def(self, '$convert_document', function $$convert_document(node) {\n        var self = this, br = nil, slash = nil, asset_uri_scheme = nil, cdn_base_url = nil, linkcss = nil, max_width_attr = nil, result = nil, lang_attribute = nil, authors = nil, icon_href = nil, icon_type = nil, icon_ext = nil, webfonts = nil, iconfont_stylesheet = nil, syntax_hl = nil, syntax_hl_docinfo_head_idx = nil, docinfo_content = nil, id_attr = nil, sectioned = nil, classes = nil, details = nil, idx = nil, $ret_or_1 = nil, eqnums_val = nil, eqnums_opt = nil;\n\n        \n        br = \"<br\" + ((slash = self.void_element_slash)) + \">\";\n        if (!$truthy((asset_uri_scheme = node.$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        cdn_base_url = \"\" + (asset_uri_scheme) + \"//cdnjs.cloudflare.com/ajax/libs\";\n        linkcss = node['$attr?'](\"linkcss\");\n        max_width_attr = ($truthy(node['$attr?'](\"max-width\")) ? (\" style=\\\"max-width: \" + (node.$attr(\"max-width\")) + \";\\\"\") : (\"\"));\n        result = [\"<!DOCTYPE html>\"];\n        lang_attribute = ($truthy(node['$attr?'](\"nolang\")) ? (\"\") : (\" lang=\\\"\" + (node.$attr(\"lang\", \"en\")) + \"\\\"\"));\n        result['$<<'](\"<html\" + (($truthy(self.xml_mode) ? (\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\") : (\"\"))) + (lang_attribute) + \">\");\n        result['$<<'](\"<head>\\n\" + \"<meta charset=\\\"\" + (node.$attr(\"encoding\", \"UTF-8\")) + \"\\\"\" + (slash) + \">\\n\" + \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"generator\\\" content=\\\"Asciidoctor \" + (node.$attr(\"asciidoctor-version\")) + \"\\\"\" + (slash) + \">\");\n        if ($truthy(node['$attr?'](\"app-name\"))) {\n          result['$<<'](\"<meta name=\\\"application-name\\\" content=\\\"\" + (node.$attr(\"app-name\")) + \"\\\"\" + (slash) + \">\")\n        };\n        if ($truthy(node['$attr?'](\"description\"))) {\n          result['$<<'](\"<meta name=\\\"description\\\" content=\\\"\" + (node.$attr(\"description\")) + \"\\\"\" + (slash) + \">\")\n        };\n        if ($truthy(node['$attr?'](\"keywords\"))) {\n          result['$<<'](\"<meta name=\\\"keywords\\\" content=\\\"\" + (node.$attr(\"keywords\")) + \"\\\"\" + (slash) + \">\")\n        };\n        if ($truthy(node['$attr?'](\"authors\"))) {\n          result['$<<'](\"<meta name=\\\"author\\\" content=\\\"\" + (($truthy((authors = node.$sub_replacements(node.$attr(\"authors\")))['$include?'](\"<\")) ? (authors.$gsub($$('XmlSanitizeRx'), \"\")) : (authors))) + \"\\\"\" + (slash) + \">\")\n        };\n        if ($truthy(node['$attr?'](\"copyright\"))) {\n          result['$<<'](\"<meta name=\\\"copyright\\\" content=\\\"\" + (node.$attr(\"copyright\")) + \"\\\"\" + (slash) + \">\")\n        };\n        if ($truthy(node['$attr?'](\"favicon\"))) {\n          \n          if ($truthy((icon_href = node.$attr(\"favicon\"))['$empty?']())) {\n            \n            icon_href = \"favicon.ico\";\n            icon_type = \"image/x-icon\";\n          } else if ($truthy((icon_ext = $$('Helpers').$extname(icon_href, nil)))) {\n            icon_type = ($eqeq(icon_ext, \".ico\") ? (\"image/x-icon\") : (\"image/\" + (icon_ext.$slice(1, icon_ext.$length()))))\n          } else {\n            icon_type = \"image/x-icon\"\n          };\n          result['$<<'](\"<link rel=\\\"icon\\\" type=\\\"\" + (icon_type) + \"\\\" href=\\\"\" + (icon_href) + \"\\\"\" + (slash) + \">\");\n        };\n        result['$<<'](\"<title>\" + (node.$doctitle($hash2([\"sanitize\", \"use_fallback\"], {\"sanitize\": true, \"use_fallback\": true}))) + \"</title>\");\n        if ($truthy($$('DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr(\"stylesheet\")))) {\n          \n          if ($truthy((webfonts = node.$attr(\"webfonts\")))) {\n            result['$<<'](\"<link rel=\\\"stylesheet\\\" href=\\\"\" + (asset_uri_scheme) + \"//fonts.googleapis.com/css?family=\" + (($truthy(webfonts['$empty?']()) ? (\"Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\") : (webfonts))) + \"\\\"\" + (slash) + \">\")\n          };\n          if ($truthy(linkcss)) {\n            result['$<<'](\"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path($$('DEFAULT_STYLESHEET_NAME'), node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"<style>\\n\" + ($$('Stylesheets').$instance().$primary_stylesheet_data()) + \"\\n\" + \"</style>\")\n          };\n        } else if ($truthy(node['$attr?'](\"stylesheet\"))) {\n          if ($truthy(linkcss)) {\n            result['$<<'](\"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(node.$attr(\"stylesheet\"), node.$attr(\"stylesdir\", \"\"))) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"<style>\\n\" + (node.$read_contents(node.$attr(\"stylesheet\"), $hash2([\"start\", \"warn_on_failure\", \"label\"], {\"start\": node.$attr(\"stylesdir\"), \"warn_on_failure\": true, \"label\": \"stylesheet\"}))) + \"\\n\" + \"</style>\")\n          }\n        };\n        if ($truthy(node['$attr?'](\"icons\", \"font\"))) {\n          if ($truthy(node['$attr?'](\"iconfont-remote\"))) {\n            result['$<<'](\"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$attr(\"iconfont-cdn\", \"\" + (cdn_base_url) + \"/font-awesome/\" + ($$('FONT_AWESOME_VERSION')) + \"/css/font-awesome.min.css\")) + \"\\\"\" + (slash) + \">\")\n          } else {\n            \n            iconfont_stylesheet = \"\" + (node.$attr(\"iconfont-name\", \"font-awesome\")) + \".css\";\n            result['$<<'](\"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(iconfont_stylesheet, node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\");\n          }\n        };\n        if ($truthy((syntax_hl = node.$syntax_highlighter()))) {\n          result['$<<']((syntax_hl_docinfo_head_idx = result.$size()))\n        };\n        if (!$truthy((docinfo_content = node.$docinfo())['$empty?']())) {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</head>\");\n        id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        if (((($truthy((sectioned = node['$sections?']())) && ($truthy(node['$attr?'](\"toc-class\")))) && ($truthy(node['$attr?'](\"toc\")))) && ($truthy(node['$attr?'](\"toc-placement\", \"auto\"))))) {\n          classes = [node.$doctype(), node.$attr(\"toc-class\"), \"toc-\" + (node.$attr(\"toc-position\", \"header\"))]\n        } else {\n          classes = [node.$doctype()]\n        };\n        if ($truthy(node['$role?']())) {\n          classes['$<<'](node.$role())\n        };\n        result['$<<'](\"<body\" + (id_attr) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\");\n        if (!$truthy((docinfo_content = node.$docinfo(\"header\"))['$empty?']())) {\n          result['$<<'](docinfo_content)\n        };\n        if (!$truthy(node.$noheader())) {\n          \n          result['$<<'](\"<div id=\\\"header\\\"\" + (max_width_attr) + \">\");\n          if ($eqeq(node.$doctype(), \"manpage\")) {\n            \n            result['$<<'](\"<h1>\" + (node.$doctitle()) + \" Manual Page</h1>\");\n            if ((($truthy(sectioned) && ($truthy(node['$attr?'](\"toc\")))) && ($truthy(node['$attr?'](\"toc-placement\", \"auto\"))))) {\n              result['$<<'](\"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")\n            };\n            if ($truthy(node['$attr?'](\"manpurpose\"))) {\n              result['$<<'](self.$generate_manname_section(node))\n            };\n          } else {\n            \n            if ($truthy(node['$header?']())) {\n              \n              if (!$truthy(node.$notitle())) {\n                result['$<<'](\"<h1>\" + (node.$header().$title()) + \"</h1>\")\n              };\n              details = [];\n              idx = 1;\n              $send(node.$authors(), 'each', [], function $$1(author){\n                \n                if (author == null) author = nil;\n                details['$<<'](\"<span id=\\\"author\" + (($truthy($rb_gt(idx, 1)) ? (idx) : (\"\"))) + \"\\\" class=\\\"author\\\">\" + (node.$sub_replacements(author.$name())) + \"</span>\" + (br));\n                if ($truthy(author.$email())) {\n                  details['$<<'](\"<span id=\\\"email\" + (($truthy($rb_gt(idx, 1)) ? (idx) : (\"\"))) + \"\\\" class=\\\"email\\\">\" + (node.$sub_macros(author.$email())) + \"</span>\" + (br))\n                };\n                return (idx = $rb_plus(idx, 1));});\n              if ($truthy(node['$attr?'](\"revnumber\"))) {\n                details['$<<'](\"<span id=\\\"revnumber\\\">\" + (($truthy(($ret_or_1 = node.$attr(\"version-label\"))) ? ($ret_or_1) : (\"\")).$downcase()) + \" \" + (node.$attr(\"revnumber\")) + (($truthy(node['$attr?'](\"revdate\")) ? (\",\") : (\"\"))) + \"</span>\")\n              };\n              if ($truthy(node['$attr?'](\"revdate\"))) {\n                details['$<<'](\"<span id=\\\"revdate\\\">\" + (node.$attr(\"revdate\")) + \"</span>\")\n              };\n              if ($truthy(node['$attr?'](\"revremark\"))) {\n                details['$<<'](\"\" + (br) + \"<span id=\\\"revremark\\\">\" + (node.$attr(\"revremark\")) + \"</span>\")\n              };\n              if (!$truthy(details['$empty?']())) {\n                \n                result['$<<'](\"<div class=\\\"details\\\">\");\n                result.$concat(details);\n                result['$<<'](\"</div>\");\n              };\n            };\n            if ((($truthy(sectioned) && ($truthy(node['$attr?'](\"toc\")))) && ($truthy(node['$attr?'](\"toc-placement\", \"auto\"))))) {\n              result['$<<'](\"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")\n            };\n          };\n          result['$<<'](\"</div>\");\n        };\n        result['$<<'](\"<div id=\\\"content\\\"\" + (max_width_attr) + \">\\n\" + (node.$content()) + \"\\n\" + \"</div>\");\n        if (($truthy(node['$footnotes?']()) && ($not(node['$attr?'](\"nofootnotes\"))))) {\n          \n          result['$<<'](\"<div id=\\\"footnotes\\\"\" + (max_width_attr) + \">\\n\" + \"<hr\" + (slash) + \">\");\n          $send(node.$footnotes(), 'each', [], function $$2(footnote){\n            \n            if (footnote == null) footnote = nil;\n            return result['$<<'](\"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");});\n          result['$<<'](\"</div>\");\n        };\n        if (!$truthy(node.$nofooter())) {\n          \n          result['$<<'](\"<div id=\\\"footer\\\"\" + (max_width_attr) + \">\");\n          result['$<<'](\"<div id=\\\"footer-text\\\">\");\n          if ($truthy(node['$attr?'](\"revnumber\"))) {\n            result['$<<'](\"\" + (node.$attr(\"version-label\")) + \" \" + (node.$attr(\"revnumber\")) + (br))\n          };\n          if (($truthy(node['$attr?'](\"last-update-label\")) && ($not(node['$attr?'](\"reproducible\"))))) {\n            result['$<<'](\"\" + (node.$attr(\"last-update-label\")) + \" \" + (node.$attr(\"docdatetime\")))\n          };\n          result['$<<'](\"</div>\");\n          result['$<<'](\"</div>\");\n        };\n        if ($truthy(syntax_hl)) {\n          \n          if ($truthy(syntax_hl['$docinfo?'](\"head\"))) {\n            result['$[]='](syntax_hl_docinfo_head_idx, syntax_hl.$docinfo(\"head\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash})))\n          } else {\n            result.$delete_at(syntax_hl_docinfo_head_idx)\n          };\n          if ($truthy(syntax_hl['$docinfo?'](\"footer\"))) {\n            result['$<<'](syntax_hl.$docinfo(\"footer\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash})))\n          };\n        };\n        if ($truthy(node['$attr?'](\"stem\"))) {\n          \n          eqnums_val = node.$attr(\"eqnums\", \"none\");\n          if ($truthy(eqnums_val['$empty?']())) {\n            eqnums_val = \"AMS\"\n          };\n          eqnums_opt = \" equationNumbers: { autoNumber: \\\"\" + (eqnums_val) + \"\\\" } \";\n          result['$<<'](\"<script type=\\\"text/x-mathjax-config\\\">\\n\" + \"MathJax.Hub.Config({\\n\" + \"  messageStyle: \\\"none\\\",\\n\" + \"  tex2jax: {\\n\" + \"    inlineMath: [\" + ($$('INLINE_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    displayMath: [\" + ($$('BLOCK_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|nolatexmath\\\"\\n\" + \"  },\\n\" + \"  asciimath2jax: {\\n\" + \"    delimiters: [\" + ($$('BLOCK_MATH_DELIMITERS')['$[]'](\"asciimath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|noasciimath\\\"\\n\" + \"  },\\n\" + \"  TeX: {\" + (eqnums_opt) + \"}\\n\" + \"})\\n\" + \"MathJax.Hub.Register.StartupHook(\\\"AsciiMath Jax Ready\\\", function () {\\n\" + \"  MathJax.InputJax.AsciiMath.postfilterHooks.Add(function (data, node) {\\n\" + \"    if ((node = data.script.parentNode) && (node = node.parentNode) && node.classList.contains(\\\"stemblock\\\")) {\\n\" + \"      data.math.root.display = \\\"block\\\"\\n\" + \"    }\\n\" + \"    return data\\n\" + \"  })\\n\" + \"})\\n\" + \"</script>\\n\" + \"<script src=\\\"\" + (cdn_base_url) + \"/mathjax/\" + ($$('MATHJAX_VERSION')) + \"/MathJax.js?config=TeX-MML-AM_HTMLorMML\\\"></script>\");\n        };\n        if (!$truthy((docinfo_content = node.$docinfo(\"footer\"))['$empty?']())) {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</body>\");\n        result['$<<'](\"</html>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_embedded', function $$convert_embedded(node) {\n        var self = this, result = nil, id_attr = nil, toc_p = nil;\n\n        \n        result = [];\n        if ($eqeq(node.$doctype(), \"manpage\")) {\n          \n          if (!$truthy(node.$notitle())) {\n            \n            id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n            result['$<<'](\"<h1\" + (id_attr) + \">\" + (node.$doctitle()) + \" Manual Page</h1>\");\n          };\n          if ($truthy(node['$attr?'](\"manpurpose\"))) {\n            result['$<<'](self.$generate_manname_section(node))\n          };\n        } else if (($truthy(node['$header?']()) && ($not(node.$notitle())))) {\n          \n          id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n          result['$<<'](\"<h1\" + (id_attr) + \">\" + (node.$header().$title()) + \"</h1>\");\n        };\n        if (((($truthy(node['$sections?']()) && ($truthy(node['$attr?'](\"toc\")))) && ($neqeq((toc_p = node.$attr(\"toc-placement\")), \"macro\"))) && ($neqeq(toc_p, \"preamble\")))) {\n          result['$<<'](\"<div id=\\\"toc\\\" class=\\\"toc\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")\n        };\n        result['$<<'](node.$content());\n        if (($truthy(node['$footnotes?']()) && ($not(node['$attr?'](\"nofootnotes\"))))) {\n          \n          result['$<<'](\"<div id=\\\"footnotes\\\">\\n\" + \"<hr\" + (self.void_element_slash) + \">\");\n          $send(node.$footnotes(), 'each', [], function $$3(footnote){\n            \n            if (footnote == null) footnote = nil;\n            return result['$<<'](\"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");});\n          result['$<<'](\"</div>\");\n        };\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_outline', function $$convert_outline(node, opts) {\n        var self = this, sectnumlevels = nil, $ret_or_1 = nil, $ret_or_2 = nil, toclevels = nil, sections = nil, result = nil;\n\n        \n        if (opts == null) opts = $hash2([], {});\n        if (!$truthy(node['$sections?']())) {\n          return nil\n        };\n        sectnumlevels = ($truthy(($ret_or_1 = opts['$[]'](\"sectnumlevels\"))) ? ($ret_or_1) : (($truthy(($ret_or_2 = node.$document().$attributes()['$[]'](\"sectnumlevels\"))) ? ($ret_or_2) : (3)).$to_i()));\n        toclevels = ($truthy(($ret_or_1 = opts['$[]'](\"toclevels\"))) ? ($ret_or_1) : (($truthy(($ret_or_2 = node.$document().$attributes()['$[]'](\"toclevels\"))) ? ($ret_or_2) : (2)).$to_i()));\n        sections = node.$sections();\n        result = [\"<ul class=\\\"sectlevel\" + (sections['$[]'](0).$level()) + \"\\\">\"];\n        $send(sections, 'each', [], function $$4(section){var self = $$4.$$s == null ? this : $$4.$$s, slevel = nil, stitle = nil, signifier = nil, child_toc_level = nil;\n\n          \n          if (section == null) section = nil;\n          slevel = section.$level();\n          if ($truthy(section.$caption())) {\n            stitle = section.$captioned_title()\n          } else if (($truthy(section.$numbered()) && ($truthy($rb_le(slevel, sectnumlevels))))) {\n            if (($truthy($rb_lt(slevel, 2)) && ($eqeq(node.$document().$doctype(), \"book\")))) {\n              \n              switch (section.$sectname()) {\n                case \"chapter\":\n                  stitle = \"\" + (($truthy((signifier = node.$document().$attributes()['$[]'](\"chapter-signifier\"))) ? (\"\" + (signifier) + \" \") : (\"\"))) + (section.$sectnum()) + \" \" + (section.$title())\n                  break;\n                case \"part\":\n                  stitle = \"\" + (($truthy((signifier = node.$document().$attributes()['$[]'](\"part-signifier\"))) ? (\"\" + (signifier) + \" \") : (\"\"))) + (section.$sectnum(nil, \":\")) + \" \" + (section.$title())\n                  break;\n                default:\n                  stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())\n              }\n            } else {\n              stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())\n            }\n          } else {\n            stitle = section.$title()\n          };\n          if ($truthy(stitle['$include?'](\"<a\"))) {\n            stitle = stitle.$gsub($$('DropAnchorRx'), \"\")\n          };\n          if (($truthy($rb_lt(slevel, toclevels)) && ($truthy((child_toc_level = self.$convert_outline(section, $hash2([\"toclevels\", \"sectnumlevels\"], {\"toclevels\": toclevels, \"sectnumlevels\": sectnumlevels}))))))) {\n            \n            result['$<<'](\"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a>\");\n            result['$<<'](child_toc_level);\n            return result['$<<'](\"</li>\");\n          } else {\n            return result['$<<'](\"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a></li>\")\n          };}, {$$s: self});\n        result['$<<'](\"</ul>\");\n        return result.$join($$('LF'));\n      }, -2);\n      \n      $def(self, '$convert_section', function $$convert_section(node) {\n        var doc_attrs = nil, level = nil, title = nil, $ret_or_1 = nil, signifier = nil, id_attr = nil, id = nil, role = nil;\n\n        \n        doc_attrs = node.$document().$attributes();\n        level = node.$level();\n        if ($truthy(node.$caption())) {\n          title = node.$captioned_title()\n        } else if (($truthy(node.$numbered()) && ($truthy($rb_le(level, ($truthy(($ret_or_1 = doc_attrs['$[]'](\"sectnumlevels\"))) ? ($ret_or_1) : (3)).$to_i()))))) {\n          if (($truthy($rb_lt(level, 2)) && ($eqeq(node.$document().$doctype(), \"book\")))) {\n            \n            switch (node.$sectname()) {\n              case \"chapter\":\n                title = \"\" + (($truthy((signifier = doc_attrs['$[]'](\"chapter-signifier\"))) ? (\"\" + (signifier) + \" \") : (\"\"))) + (node.$sectnum()) + \" \" + (node.$title())\n                break;\n              case \"part\":\n                title = \"\" + (($truthy((signifier = doc_attrs['$[]'](\"part-signifier\"))) ? (\"\" + (signifier) + \" \") : (\"\"))) + (node.$sectnum(nil, \":\")) + \" \" + (node.$title())\n                break;\n              default:\n                title = \"\" + (node.$sectnum()) + \" \" + (node.$title())\n            }\n          } else {\n            title = \"\" + (node.$sectnum()) + \" \" + (node.$title())\n          }\n        } else {\n          title = node.$title()\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \" id=\\\"\" + ((id = node.$id())) + \"\\\"\";\n          if ($truthy(doc_attrs['$[]'](\"sectlinks\"))) {\n            title = \"<a class=\\\"link\\\" href=\\\"#\" + (id) + \"\\\">\" + (title) + \"</a>\"\n          };\n          if ($truthy(doc_attrs['$[]'](\"sectanchors\"))) {\n            if ($eqeq(doc_attrs['$[]'](\"sectanchors\"), \"after\")) {\n              title = \"\" + (title) + \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\"\n            } else {\n              title = \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\" + (title)\n            }\n          };\n        } else {\n          id_attr = \"\"\n        };\n        if ($eqeq(level, 0)) {\n          return \"<h1\" + (id_attr) + \" class=\\\"sect0\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\" + (title) + \"</h1>\\n\" + (node.$content())\n        } else {\n          return \"<div class=\\\"sect\" + (level) + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + \"<h\" + ($rb_plus(level, 1)) + (id_attr) + \">\" + (title) + \"</h\" + ($rb_plus(level, 1)) + \">\\n\" + (($eqeq(level, 1) ? (\"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\") : (node.$content()))) + \"\\n\" + \"</div>\"\n        };\n      });\n      \n      $def(self, '$convert_admonition', function $$convert_admonition(node) {\n        var self = this, id_attr = nil, name = nil, title_element = nil, label = nil, role = nil;\n\n        \n        id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        name = node.$attr(\"name\");\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          if (($truthy(node.$document()['$attr?'](\"icons\", \"font\")) && ($not(node['$attr?'](\"icon\"))))) {\n            label = \"<i class=\\\"fa icon-\" + (name) + \"\\\" title=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"></i>\"\n          } else {\n            label = \"<img src=\\\"\" + (node.$icon_uri(name)) + \"\\\" alt=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"\" + (self.void_element_slash) + \">\"\n          }\n        } else {\n          label = \"<div class=\\\"title\\\">\" + (node.$attr(\"textlabel\")) + \"</div>\"\n        };\n        return \"<div\" + (id_attr) + \" class=\\\"admonitionblock \" + (name) + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + \"<table>\\n\" + \"<tr>\\n\" + \"<td class=\\\"icon\\\">\\n\" + (label) + \"\\n\" + \"</td>\\n\" + \"<td class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</td>\\n\" + \"</tr>\\n\" + \"</table>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_audio', function $$convert_audio(node) {\n        var self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, start_t = nil, end_t = nil, time_anchor = nil, $ret_or_1 = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"audioblock\", node.$role()].$compact();\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n        start_t = node.$attr(\"start\");\n        end_t = node.$attr(\"end\");\n        time_anchor = (($truthy(start_t) || ($truthy(end_t))) ? (\"#t=\" + (($truthy(($ret_or_1 = start_t)) ? ($ret_or_1) : (\"\"))) + (($truthy(end_t) ? (\",\" + (end_t)) : (\"\")))) : (\"\"));\n        return \"<div\" + (id_attribute) + (class_attribute) + \">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<audio src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + (($truthy(node['$option?'](\"autoplay\")) ? (self.$append_boolean_attribute(\"autoplay\", xml)) : (\"\"))) + (($truthy(node['$option?'](\"nocontrols\")) ? (\"\") : (self.$append_boolean_attribute(\"controls\", xml)))) + (($truthy(node['$option?'](\"loop\")) ? (self.$append_boolean_attribute(\"loop\", xml)) : (\"\"))) + \">\\n\" + \"Your browser does not support the audio tag.\\n\" + \"</audio>\\n\" + \"</div>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_colist', function $$convert_colist(node) {\n        var $a, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil, num = nil;\n\n        \n        result = [];\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"colist\", node.$style(), node.$role()].$compact();\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")\n        };\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          result['$<<'](\"<table>\");\n          $a = [node.$document()['$attr?'](\"icons\", \"font\"), 0], (font_icons = $a[0]), (num = $a[1]), $a;\n          $send(node.$items(), 'each', [], function $$5(item){var self = $$5.$$s == null ? this : $$5.$$s, num_label = nil;\n            if (self.void_element_slash == null) self.void_element_slash = nil;\n\n            \n            if (item == null) item = nil;\n            num = $rb_plus(num, 1);\n            if ($truthy(font_icons)) {\n              num_label = \"<i class=\\\"conum\\\" data-value=\\\"\" + (num) + \"\\\"></i><b>\" + (num) + \"</b>\"\n            } else {\n              num_label = \"<img src=\\\"\" + (node.$icon_uri(\"callouts/\" + (num))) + \"\\\" alt=\\\"\" + (num) + \"\\\"\" + (self.void_element_slash) + \">\"\n            };\n            return result['$<<'](\"<tr>\\n\" + \"<td>\" + (num_label) + \"</td>\\n\" + \"<td>\" + (item.$text()) + (($truthy(item['$blocks?']()) ? ($rb_plus($$('LF'), item.$content())) : (\"\"))) + \"</td>\\n\" + \"</tr>\");}, {$$s: self});\n          result['$<<'](\"</table>\");\n        } else {\n          \n          result['$<<'](\"<ol>\");\n          $send(node.$items(), 'each', [], function $$6(item){\n            \n            if (item == null) item = nil;\n            return result['$<<'](\"<li>\\n\" + \"<p>\" + (item.$text()) + \"</p>\" + (($truthy(item['$blocks?']()) ? ($rb_plus($$('LF'), item.$content())) : (\"\"))) + \"\\n\" + \"</li>\");});\n          result['$<<'](\"</ol>\");\n        };\n        result['$<<'](\"</div>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_dlist', function $$convert_dlist(node) {\n        var self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;\n\n        \n        result = [];\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        \n        switch (node.$style()) {\n          case \"qanda\":\n            classes = [\"qlist\", \"qanda\", node.$role()]\n            break;\n          case \"horizontal\":\n            classes = [\"hdlist\", node.$role()]\n            break;\n          default:\n            classes = [\"dlist\", node.$style(), node.$role()]\n        };\n        class_attribute = \" class=\\\"\" + (classes.$compact().$join(\" \")) + \"\\\"\";\n        result['$<<'](\"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")\n        };\n        \n        switch (node.$style()) {\n          case \"qanda\":\n            \n            result['$<<'](\"<ol>\");\n            $send(node.$items(), 'each', [], function $$7(terms, dd){\n              \n              if (terms == null) terms = nil;\n              if (dd == null) dd = nil;\n              result['$<<'](\"<li>\");\n              $send(terms, 'each', [], function $$8(dt){\n                \n                if (dt == null) dt = nil;\n                return result['$<<'](\"<p><em>\" + (dt.$text()) + \"</em></p>\");});\n              if ($truthy(dd)) {\n                \n                if ($truthy(dd['$text?']())) {\n                  result['$<<'](\"<p>\" + (dd.$text()) + \"</p>\")\n                };\n                if ($truthy(dd['$blocks?']())) {\n                  result['$<<'](dd.$content())\n                };\n              };\n              return result['$<<'](\"</li>\");});\n            result['$<<'](\"</ol>\");\n            break;\n          case \"horizontal\":\n            \n            slash = self.void_element_slash;\n            result['$<<'](\"<table>\");\n            if (($truthy(node['$attr?'](\"labelwidth\")) || ($truthy(node['$attr?'](\"itemwidth\"))))) {\n              \n              result['$<<'](\"<colgroup>\");\n              col_style_attribute = ($truthy(node['$attr?'](\"labelwidth\")) ? (\" style=\\\"width: \" + (node.$attr(\"labelwidth\").$chomp(\"%\")) + \"%;\\\"\") : (\"\"));\n              result['$<<'](\"<col\" + (col_style_attribute) + (slash) + \">\");\n              col_style_attribute = ($truthy(node['$attr?'](\"itemwidth\")) ? (\" style=\\\"width: \" + (node.$attr(\"itemwidth\").$chomp(\"%\")) + \"%;\\\"\") : (\"\"));\n              result['$<<'](\"<col\" + (col_style_attribute) + (slash) + \">\");\n              result['$<<'](\"</colgroup>\");\n            };\n            $send(node.$items(), 'each', [], function $$9(terms, dd){var first_term = nil;\n\n              \n              if (terms == null) terms = nil;\n              if (dd == null) dd = nil;\n              result['$<<'](\"<tr>\");\n              result['$<<'](\"<td class=\\\"hdlist1\" + (($truthy(node['$option?'](\"strong\")) ? (\" strong\") : (\"\"))) + \"\\\">\");\n              first_term = true;\n              $send(terms, 'each', [], function $$10(dt){\n                \n                if (dt == null) dt = nil;\n                if (!$truthy(first_term)) {\n                  result['$<<'](\"<br\" + (slash) + \">\")\n                };\n                result['$<<'](dt.$text());\n                return (first_term = nil);});\n              result['$<<'](\"</td>\");\n              result['$<<'](\"<td class=\\\"hdlist2\\\">\");\n              if ($truthy(dd)) {\n                \n                if ($truthy(dd['$text?']())) {\n                  result['$<<'](\"<p>\" + (dd.$text()) + \"</p>\")\n                };\n                if ($truthy(dd['$blocks?']())) {\n                  result['$<<'](dd.$content())\n                };\n              };\n              result['$<<'](\"</td>\");\n              return result['$<<'](\"</tr>\");});\n            result['$<<'](\"</table>\");\n            break;\n          default:\n            \n            result['$<<'](\"<dl>\");\n            dt_style_attribute = ($truthy(node.$style()) ? (\"\") : (\" class=\\\"hdlist1\\\"\"));\n            $send(node.$items(), 'each', [], function $$11(terms, dd){\n              \n              if (terms == null) terms = nil;\n              if (dd == null) dd = nil;\n              $send(terms, 'each', [], function $$12(dt){\n                \n                if (dt == null) dt = nil;\n                return result['$<<'](\"<dt\" + (dt_style_attribute) + \">\" + (dt.$text()) + \"</dt>\");});\n              if (!$truthy(dd)) {\n                return nil\n              };\n              result['$<<'](\"<dd>\");\n              if ($truthy(dd['$text?']())) {\n                result['$<<'](\"<p>\" + (dd.$text()) + \"</p>\")\n              };\n              if ($truthy(dd['$blocks?']())) {\n                result['$<<'](dd.$content())\n              };\n              return result['$<<'](\"</dd>\");});\n            result['$<<'](\"</dl>\");\n        };\n        result['$<<'](\"</div>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_example', function $$convert_example(node) {\n        var id_attribute = nil, class_attribute = nil, summary_element = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        if ($truthy(node['$option?'](\"collapsible\"))) {\n          \n          class_attribute = ($truthy(node.$role()) ? (\" class=\\\"\" + (node.$role()) + \"\\\"\") : (\"\"));\n          summary_element = ($truthy(node['$title?']()) ? (\"<summary class=\\\"title\\\">\" + (node.$title()) + \"</summary>\") : (\"<summary class=\\\"title\\\">Details</summary>\"));\n          return \"<details\" + (id_attribute) + (class_attribute) + (($truthy(node['$option?'](\"open\")) ? (\" open\") : (\"\"))) + \">\\n\" + (summary_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</details>\";\n        } else {\n          \n          title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\") : (\"\"));\n          return \"<div\" + (id_attribute) + \" class=\\\"exampleblock\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        };\n      });\n      \n      $def(self, '$convert_floating_title', function $$convert_floating_title(node) {\n        var tag_name = nil, id_attribute = nil, classes = nil;\n\n        \n        tag_name = \"h\" + ($rb_plus(node.$level(), 1));\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [node.$style(), node.$role()].$compact();\n        return \"<\" + (tag_name) + (id_attribute) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\" + (node.$title()) + \"</\" + (tag_name) + \">\";\n      });\n      \n      $def(self, '$convert_image', function $$convert_image(node) {\n        var self = this, target = nil, width_attr = nil, height_attr = nil, img = nil, $ret_or_1 = nil, fallback = nil, id_attr = nil, classes = nil, class_attr = nil, title_el = nil;\n\n        \n        target = node.$attr(\"target\");\n        width_attr = ($truthy(node['$attr?'](\"width\")) ? (\" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\") : (\"\"));\n        height_attr = ($truthy(node['$attr?'](\"height\")) ? (\" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\") : (\"\"));\n        if ((($truthy(node['$attr?'](\"format\", \"svg\")) || ($truthy(target['$include?'](\".svg\")))) && ($truthy($rb_lt(node.$document().$safe(), $$$($$('SafeMode'), 'SECURE')))))) {\n          if ($truthy(node['$option?'](\"inline\"))) {\n            img = ($truthy(($ret_or_1 = self.$read_svg_contents(node, target))) ? ($ret_or_1) : (\"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"))\n          } else if ($truthy(node['$option?'](\"interactive\"))) {\n            \n            fallback = ($truthy(node['$attr?'](\"fallback\")) ? (\"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\") : (\"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"));\n            img = \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (width_attr) + (height_attr) + \">\" + (fallback) + \"</object>\";\n          } else {\n            img = \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n          }\n        } else {\n          img = \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n        };\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"\n        };\n        id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"imageblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))\n        };\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"text-\" + (node.$attr(\"align\")))\n        };\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())\n        };\n        class_attr = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_el = ($truthy(node['$title?']()) ? (\"\\n<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\") : (\"\"));\n        return \"<div\" + (id_attr) + (class_attr) + \">\\n\" + \"<div class=\\\"content\\\">\\n\" + (img) + \"\\n\" + \"</div>\" + (title_el) + \"\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_listing', function $$convert_listing(node) {\n        var nowrap = nil, $ret_or_1 = nil, lang = nil, syntax_hl = nil, opts = nil, doc_attrs = nil, pre_open = nil, pre_close = nil, id_attribute = nil, title_element = nil, role = nil;\n\n        \n        nowrap = ($truthy(($ret_or_1 = node['$option?'](\"nowrap\"))) ? ($ret_or_1) : (node.$document()['$attr?'](\"prewrap\")['$!']()));\n        if ($eqeq(node.$style(), \"source\")) {\n          \n          lang = node.$attr(\"language\");\n          if ($truthy((syntax_hl = node.$document().$syntax_highlighter()))) {\n            \n            opts = ($truthy(syntax_hl['$highlight?']()) ? ($hash2([\"css_mode\", \"style\"], {\"css_mode\": ($truthy(($ret_or_1 = (doc_attrs = node.$document().$attributes())['$[]'](\"\" + (syntax_hl.$name()) + \"-css\"))) ? ($ret_or_1) : (\"class\")).$to_sym(), \"style\": doc_attrs['$[]'](\"\" + (syntax_hl.$name()) + \"-style\")})) : ($hash2([], {})));\n            opts['$[]='](\"nowrap\", nowrap);\n          } else {\n            \n            pre_open = \"<pre class=\\\"highlight\" + (($truthy(nowrap) ? (\" nowrap\") : (\"\"))) + \"\\\"><code\" + (($truthy(lang) ? (\" class=\\\"language-\" + (lang) + \"\\\" data-lang=\\\"\" + (lang) + \"\\\"\") : (\"\"))) + \">\";\n            pre_close = \"</code></pre>\";\n          };\n        } else {\n          \n          pre_open = \"<pre\" + (($truthy(nowrap) ? (\" class=\\\"nowrap\\\"\") : (\"\"))) + \">\";\n          pre_close = \"</pre>\";\n        };\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\") : (\"\"));\n        return \"<div\" + (id_attribute) + \" class=\\\"listingblock\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (($truthy(syntax_hl) ? (syntax_hl.$format(node, lang, opts)) : ($rb_plus($rb_plus(pre_open, node.$content()), pre_close)))) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_literal', function $$convert_literal(node) {\n        var id_attribute = nil, title_element = nil, nowrap = nil, $ret_or_1 = nil, role = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n        nowrap = ($truthy(($ret_or_1 = node.$document()['$attr?'](\"prewrap\")['$!']())) ? ($ret_or_1) : (node['$option?'](\"nowrap\")));\n        return \"<div\" + (id_attribute) + \" class=\\\"literalblock\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<pre\" + (($truthy(nowrap) ? (\" class=\\\"nowrap\\\"\") : (\"\"))) + \">\" + (node.$content()) + \"</pre>\\n\" + \"</div>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_stem', function $$convert_stem(node) {\n        var $a, $b, self = this, id_attribute = nil, title_element = nil, style = nil, open = nil, close = nil, equation = nil, br = nil, role = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n        $b = $$('BLOCK_MATH_DELIMITERS')['$[]']((style = node.$style().$to_sym())), $a = $to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy((equation = node.$content()))) {\n          \n          if (($eqeq(style, \"asciimath\") && ($truthy(equation['$include?']($$('LF')))))) {\n            \n            br = \"\" + ($$('LF')) + \"<br\" + (self.void_element_slash) + \">\";\n            equation = $send(equation, 'gsub', [$$('StemBreakRx')], function $$13(){var $c;\n\n              return \"\" + (close) + ($rb_times(br, $rb_minus((($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$count($$('LF')), 1))) + ($$('LF')) + (open)});\n          };\n          if (!($truthy(equation['$start_with?'](open)) && ($truthy(equation['$end_with?'](close))))) {\n            equation = \"\" + (open) + (equation) + (close)\n          };\n        } else {\n          equation = \"\"\n        };\n        return \"<div\" + (id_attribute) + \" class=\\\"stemblock\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (equation) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_olist', function $$convert_olist(node) {\n        var self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;\n\n        \n        result = [];\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"olist\", node.$style(), node.$role()].$compact();\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")\n        };\n        type_attribute = ($truthy((keyword = node.$list_marker_keyword())) ? (\" type=\\\"\" + (keyword) + \"\\\"\") : (\"\"));\n        start_attribute = ($truthy(node['$attr?'](\"start\")) ? (\" start=\\\"\" + (node.$attr(\"start\")) + \"\\\"\") : (\"\"));\n        reversed_attribute = ($truthy(node['$option?'](\"reversed\")) ? (self.$append_boolean_attribute(\"reversed\", self.xml_mode)) : (\"\"));\n        result['$<<'](\"<ol class=\\\"\" + (node.$style()) + \"\\\"\" + (type_attribute) + (start_attribute) + (reversed_attribute) + \">\");\n        $send(node.$items(), 'each', [], function $$14(item){\n          \n          if (item == null) item = nil;\n          if ($truthy(item.$id())) {\n            result['$<<'](\"<li id=\\\"\" + (item.$id()) + \"\\\"\" + (($truthy(item.$role()) ? (\" class=\\\"\" + (item.$role()) + \"\\\"\") : (\"\"))) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          result['$<<'](\"<p>\" + (item.$text()) + \"</p>\");\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())\n          };\n          return result['$<<'](\"</li>\");});\n        result['$<<'](\"</ol>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_open', function $$convert_open(node) {\n        var self = this, style = nil, id_attr = nil, title_el = nil, role = nil;\n\n        if ($eqeq((style = node.$style()), \"abstract\")) {\n          if (($eqeq(node.$parent(), node.$document()) && ($eqeq(node.$document().$doctype(), \"book\")))) {\n            \n            self.$logger().$warn(\"abstract block cannot be used in a document without a title when doctype is book. Excluding block content.\");\n            return \"\";\n          } else {\n            \n            id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n            title_el = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n            return \"<div\" + (id_attr) + \" class=\\\"quoteblock abstract\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_el) + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\\n\" + \"</div>\";\n          }\n        } else if (($eqeq(style, \"partintro\") && ((($truthy($rb_gt(node.$level(), 0)) || ($neqeq(node.$parent().$context(), \"section\"))) || ($neqeq(node.$document().$doctype(), \"book\")))))) {\n          \n          self.$logger().$error(\"partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.\");\n          return \"\";\n        } else {\n          \n          id_attr = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n          title_el = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n          return \"<div\" + (id_attr) + \" class=\\\"openblock\" + ((($truthy(style) && ($neqeq(style, \"open\"))) ? (\" \" + (style)) : (\"\"))) + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + (title_el) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        }\n      });\n      \n      $def(self, '$convert_page_break', $return_val(\"<div style=\\\"page-break-after: always;\\\"></div>\"));\n      \n      $def(self, '$convert_paragraph', function $$convert_paragraph(node) {\n        var attributes = nil;\n\n        \n        if ($truthy(node.$role())) {\n          attributes = \"\" + (($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"))) + \" class=\\\"paragraph \" + (node.$role()) + \"\\\"\"\n        } else if ($truthy(node.$id())) {\n          attributes = \" id=\\\"\" + (node.$id()) + \"\\\" class=\\\"paragraph\\\"\"\n        } else {\n          attributes = \" class=\\\"paragraph\\\"\"\n        };\n        if ($truthy(node['$title?']())) {\n          return \"<div\" + (attributes) + \">\\n\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        } else {\n          return \"<div\" + (attributes) + \">\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        };\n      });\n      $alias(self, \"convert_pass\", \"content_only\");\n      \n      $def(self, '$convert_preamble', function $$convert_preamble(node) {\n        var doc = nil, toc = nil;\n\n        \n        if ((($truthy((doc = node.$document())['$attr?'](\"toc-placement\", \"preamble\")) && ($truthy(doc['$sections?']()))) && ($truthy(doc['$attr?'](\"toc\"))))) {\n          toc = \"\\n\" + \"<div id=\\\"toc\\\" class=\\\"\" + (doc.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (doc.$attr(\"toc-title\")) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\")) + \"\\n\" + \"</div>\"\n        } else {\n          toc = \"\"\n        };\n        return \"<div id=\\\"preamble\\\">\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\" + (toc) + \"\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_quote', function $$convert_quote(node) {\n        var self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"quoteblock\", node.$role()].$compact();\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = ($truthy(node['$title?']()) ? (\"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\") : (\"\"));\n        attribution = ($truthy(node['$attr?'](\"attribution\")) ? (node.$attr(\"attribution\")) : (nil));\n        citetitle = ($truthy(node['$attr?'](\"citetitle\")) ? (node.$attr(\"citetitle\")) : (nil));\n        if (($truthy(attribution) || ($truthy(citetitle)))) {\n          \n          cite_element = ($truthy(citetitle) ? (\"<cite>\" + (citetitle) + \"</cite>\") : (\"\"));\n          attribution_text = ($truthy(attribution) ? (\"&#8212; \" + (attribution) + (($truthy(citetitle) ? (\"<br\" + (self.void_element_slash) + \">\\n\") : (\"\")))) : (\"\"));\n          attribution_element = \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_thematic_break', function $$convert_thematic_break(node) {\n        var self = this;\n\n        return \"<hr\" + (self.void_element_slash) + \">\"\n      });\n      \n      $def(self, '$convert_sidebar', function $$convert_sidebar(node) {\n        var id_attribute = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        title_element = ($truthy(node['$title?']()) ? (\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\") : (\"\"));\n        return \"<div\" + (id_attribute) + \" class=\\\"sidebarblock\" + (($truthy((role = node.$role())) ? (\" \" + (role)) : (\"\"))) + \"\\\">\\n\" + \"<div class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_table', function $$convert_table(node) {\n        var self = this, result = nil, id_attribute = nil, frame = nil, classes = nil, stripes = nil, style_attribute = nil, autowidth = nil, tablewidth = nil, role = nil, class_attribute = nil, slash = nil;\n\n        \n        result = [];\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        if ($eqeq((frame = node.$attr(\"frame\", \"all\", \"table-frame\")), \"topbot\")) {\n          frame = \"ends\"\n        };\n        classes = [\"tableblock\", \"frame-\" + (frame), \"grid-\" + (node.$attr(\"grid\", \"all\", \"table-grid\"))];\n        if ($truthy((stripes = node.$attr(\"stripes\", nil, \"table-stripes\")))) {\n          classes['$<<'](\"stripes-\" + (stripes))\n        };\n        style_attribute = \"\";\n        if (($truthy((autowidth = node['$option?'](\"autowidth\"))) && ($not(node['$attr?'](\"width\"))))) {\n          classes['$<<'](\"fit-content\")\n        } else if ($eqeq((tablewidth = node.$attr(\"tablepcwidth\")), 100)) {\n          classes['$<<'](\"stretch\")\n        } else {\n          style_attribute = \" style=\\\"width: \" + (tablewidth) + \"%;\\\"\"\n        };\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))\n        };\n        if ($truthy((role = node.$role()))) {\n          classes['$<<'](role)\n        };\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"<table\" + (id_attribute) + (class_attribute) + (style_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"<caption class=\\\"title\\\">\" + (node.$captioned_title()) + \"</caption>\")\n        };\n        if ($truthy($rb_gt(node.$attr(\"rowcount\"), 0))) {\n          \n          slash = self.void_element_slash;\n          result['$<<'](\"<colgroup>\");\n          if ($truthy(autowidth)) {\n            result = $rb_plus(result, $$('Array').$new(node.$columns().$size(), \"<col\" + (slash) + \">\"))\n          } else {\n            $send(node.$columns(), 'each', [], function $$15(col){\n              \n              if (col == null) col = nil;\n              return result['$<<'](($truthy(col['$option?'](\"autowidth\")) ? (\"<col\" + (slash) + \">\") : (\"<col style=\\\"width: \" + (col.$attr(\"colpcwidth\")) + \"%;\\\"\" + (slash) + \">\")));})\n          };\n          result['$<<'](\"</colgroup>\");\n          $send(node.$rows().$to_h(), 'each', [], function $$16(tsec, rows){\n            \n            if (tsec == null) tsec = nil;\n            if (rows == null) rows = nil;\n            if ($truthy(rows['$empty?']())) {\n              return nil\n            };\n            result['$<<'](\"<t\" + (tsec) + \">\");\n            $send(rows, 'each', [], function $$17(row){\n              \n              if (row == null) row = nil;\n              result['$<<'](\"<tr>\");\n              $send(row, 'each', [], function $$18(cell){var cell_content = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;\n\n                \n                if (cell == null) cell = nil;\n                if ($eqeq(tsec, \"head\")) {\n                  cell_content = cell.$text()\n                } else \n                switch (cell.$style()) {\n                  case \"asciidoc\":\n                    cell_content = \"<div class=\\\"content\\\">\" + (cell.$content()) + \"</div>\"\n                    break;\n                  case \"literal\":\n                    cell_content = \"<div class=\\\"literal\\\"><pre>\" + (cell.$text()) + \"</pre></div>\"\n                    break;\n                  default:\n                    cell_content = ($truthy((cell_content = cell.$content())['$empty?']()) ? (\"\") : (\"<p class=\\\"tableblock\\\">\" + (cell_content.$join(\"</p>\\n\" + \"<p class=\\\"tableblock\\\">\")) + \"</p>\"))\n                };\n                cell_tag_name = (($eqeq(tsec, \"head\") || ($eqeq(cell.$style(), \"header\"))) ? (\"th\") : (\"td\"));\n                cell_class_attribute = \" class=\\\"tableblock halign-\" + (cell.$attr(\"halign\")) + \" valign-\" + (cell.$attr(\"valign\")) + \"\\\"\";\n                cell_colspan_attribute = ($truthy(cell.$colspan()) ? (\" colspan=\\\"\" + (cell.$colspan()) + \"\\\"\") : (\"\"));\n                cell_rowspan_attribute = ($truthy(cell.$rowspan()) ? (\" rowspan=\\\"\" + (cell.$rowspan()) + \"\\\"\") : (\"\"));\n                cell_style_attribute = ($truthy(node.$document()['$attr?'](\"cellbgcolor\")) ? (\" style=\\\"background-color: \" + (node.$document().$attr(\"cellbgcolor\")) + \";\\\"\") : (\"\"));\n                return result['$<<'](\"<\" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + \">\" + (cell_content) + \"</\" + (cell_tag_name) + \">\");});\n              return result['$<<'](\"</tr>\");});\n            return result['$<<'](\"</t\" + (tsec) + \">\");});\n        };\n        result['$<<'](\"</table>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_toc', function $$convert_toc(node) {\n        var doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;\n\n        \n        if (!(($truthy((doc = node.$document())['$attr?'](\"toc-placement\", \"macro\")) && ($truthy(doc['$sections?']()))) && ($truthy(doc['$attr?'](\"toc\"))))) {\n          return \"<!-- toc disabled -->\"\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \" id=\\\"\" + (node.$id()) + \"\\\"\";\n          title_id_attr = \" id=\\\"\" + (node.$id()) + \"title\\\"\";\n        } else {\n          \n          id_attr = \" id=\\\"toc\\\"\";\n          title_id_attr = \" id=\\\"toctitle\\\"\";\n        };\n        title = ($truthy(node['$title?']()) ? (node.$title()) : (doc.$attr(\"toc-title\")));\n        levels = ($truthy(node['$attr?'](\"levels\")) ? (node.$attr(\"levels\").$to_i()) : (nil));\n        role = ($truthy(node['$role?']()) ? (node.$role()) : (doc.$attr(\"toc-class\", \"toc\")));\n        return \"<div\" + (id_attr) + \" class=\\\"\" + (role) + \"\\\">\\n\" + \"<div\" + (title_id_attr) + \" class=\\\"title\\\">\" + (title) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\", $hash2([\"toclevels\"], {\"toclevels\": levels}))) + \"\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_ulist', function $$convert_ulist(node) {\n        var self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;\n\n        \n        result = [];\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        div_classes = [\"ulist\", node.$style(), node.$role()].$compact();\n        marker_checked = (marker_unchecked = \"\");\n        if ($truthy((checklist = node['$option?'](\"checklist\")))) {\n          \n          div_classes.$unshift(div_classes.$shift(), \"checklist\");\n          ul_class_attribute = \" class=\\\"checklist\\\"\";\n          if ($truthy(node['$option?'](\"interactive\"))) {\n            if ($truthy(self.xml_mode)) {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked=\\\"checked\\\"/> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"/> \";\n            } else {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"> \";\n            }\n          } else if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n            \n            marker_checked = \"<i class=\\\"fa fa-check-square-o\\\"></i> \";\n            marker_unchecked = \"<i class=\\\"fa fa-square-o\\\"></i> \";\n          } else {\n            \n            marker_checked = \"&#10003; \";\n            marker_unchecked = \"&#10063; \";\n          };\n        } else {\n          ul_class_attribute = ($truthy(node.$style()) ? (\" class=\\\"\" + (node.$style()) + \"\\\"\") : (\"\"))\n        };\n        result['$<<'](\"<div\" + (id_attribute) + \" class=\\\"\" + (div_classes.$join(\" \")) + \"\\\">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")\n        };\n        result['$<<'](\"<ul\" + (ul_class_attribute) + \">\");\n        $send(node.$items(), 'each', [], function $$19(item){\n          \n          if (item == null) item = nil;\n          if ($truthy(item.$id())) {\n            result['$<<'](\"<li id=\\\"\" + (item.$id()) + \"\\\"\" + (($truthy(item.$role()) ? (\" class=\\\"\" + (item.$role()) + \"\\\"\") : (\"\"))) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          if (($truthy(checklist) && ($truthy(item['$attr?'](\"checkbox\"))))) {\n            result['$<<'](\"<p>\" + (($truthy(item['$attr?'](\"checked\")) ? (marker_checked) : (marker_unchecked))) + (item.$text()) + \"</p>\")\n          } else {\n            result['$<<'](\"<p>\" + (item.$text()) + \"</p>\")\n          };\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())\n          };\n          return result['$<<'](\"</li>\");});\n        result['$<<'](\"</ul>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$('LF'));\n      });\n      \n      $def(self, '$convert_verse', function $$convert_verse(node) {\n        var self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"verseblock\", node.$role()].$compact();\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = ($truthy(node['$title?']()) ? (\"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\") : (\"\"));\n        attribution = ($truthy(node['$attr?'](\"attribution\")) ? (node.$attr(\"attribution\")) : (nil));\n        citetitle = ($truthy(node['$attr?'](\"citetitle\")) ? (node.$attr(\"citetitle\")) : (nil));\n        if (($truthy(attribution) || ($truthy(citetitle)))) {\n          \n          cite_element = ($truthy(citetitle) ? (\"<cite>\" + (citetitle) + \"</cite>\") : (\"\"));\n          attribution_text = ($truthy(attribution) ? (\"&#8212; \" + (attribution) + (($truthy(citetitle) ? (\"<br\" + (self.void_element_slash) + \">\\n\") : (\"\")))) : (\"\"));\n          attribution_element = \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<pre class=\\\"content\\\">\" + (node.$content()) + \"</pre>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$convert_video', function $$convert_video(node) {\n        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, target = nil, hash = nil, hash_param = nil, $ret_or_2 = nil, autoplay_param = nil, loop_param = nil, muted_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, has_loop_param = nil, mute_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, val = nil, preload_attribute = nil, start_t = nil, end_t = nil, time_anchor = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = ($truthy(node.$id()) ? (\" id=\\\"\" + (node.$id()) + \"\\\"\") : (\"\"));\n        classes = [\"videoblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))\n        };\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"text-\" + (node.$attr(\"align\")))\n        };\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())\n        };\n        class_attribute = \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = ($truthy(node['$title?']()) ? (\"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\") : (\"\"));\n        width_attribute = ($truthy(node['$attr?'](\"width\")) ? (\" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\") : (\"\"));\n        height_attribute = ($truthy(node['$attr?'](\"height\")) ? (\" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\") : (\"\"));\n        \n        switch (node.$attr(\"poster\")) {\n          case \"vimeo\":\n            \n            if (!$truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n              asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n            };\n            start_anchor = ($truthy(node['$attr?'](\"start\")) ? (\"#at=\" + (node.$attr(\"start\"))) : (\"\"));\n            delimiter = [\"?\"];\n            $b = node.$attr(\"target\").$split(\"/\", 2), $a = $to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (hash = ($a[1] == null ? nil : $a[1])), $b;\n            hash_param = ($truthy((hash = ($truthy(($ret_or_2 = hash)) ? ($ret_or_2) : (node.$attr(\"hash\"))))) ? (\"\" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : (\"&amp;\"))) + \"h=\" + (hash)) : (\"\"));\n            autoplay_param = ($truthy(node['$option?'](\"autoplay\")) ? (\"\" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : (\"&amp;\"))) + \"autoplay=1\") : (\"\"));\n            loop_param = ($truthy(node['$option?'](\"loop\")) ? (\"\" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : (\"&amp;\"))) + \"loop=1\") : (\"\"));\n            muted_param = ($truthy(node['$option?'](\"muted\")) ? (\"\" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : (\"&amp;\"))) + \"muted=1\") : (\"\"));\n            return \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//player.vimeo.com/video/\" + (target) + (hash_param) + (autoplay_param) + (loop_param) + (muted_param) + (start_anchor) + \"\\\" frameborder=\\\"0\\\"\" + (($truthy(node['$option?'](\"nofullscreen\")) ? (\"\") : (self.$append_boolean_attribute(\"allowfullscreen\", xml)))) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";\n          case \"youtube\":\n            \n            if (!$truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n              asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n            };\n            rel_param_val = ($truthy(node['$option?'](\"related\")) ? (1) : (0));\n            start_param = ($truthy(node['$attr?'](\"start\")) ? (\"&amp;start=\" + (node.$attr(\"start\"))) : (\"\"));\n            end_param = ($truthy(node['$attr?'](\"end\")) ? (\"&amp;end=\" + (node.$attr(\"end\"))) : (\"\"));\n            autoplay_param = ($truthy(node['$option?'](\"autoplay\")) ? (\"&amp;autoplay=1\") : (\"\"));\n            loop_param = ($truthy((has_loop_param = node['$option?'](\"loop\"))) ? (\"&amp;loop=1\") : (\"\"));\n            mute_param = ($truthy(node['$option?'](\"muted\")) ? (\"&amp;mute=1\") : (\"\"));\n            controls_param = ($truthy(node['$option?'](\"nocontrols\")) ? (\"&amp;controls=0\") : (\"\"));\n            if ($truthy(node['$option?'](\"nofullscreen\"))) {\n              \n              fs_param = \"&amp;fs=0\";\n              fs_attribute = \"\";\n            } else {\n              \n              fs_param = \"\";\n              fs_attribute = self.$append_boolean_attribute(\"allowfullscreen\", xml);\n            };\n            modest_param = ($truthy(node['$option?'](\"modest\")) ? (\"&amp;modestbranding=1\") : (\"\"));\n            theme_param = ($truthy(node['$attr?'](\"theme\")) ? (\"&amp;theme=\" + (node.$attr(\"theme\"))) : (\"\"));\n            hl_param = ($truthy(node['$attr?'](\"lang\")) ? (\"&amp;hl=\" + (node.$attr(\"lang\"))) : (\"\"));\n            $b = node.$attr(\"target\").$split(\"/\", 2), $a = $to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (list = ($a[1] == null ? nil : $a[1])), $b;\n            if ($truthy((list = ($truthy(($ret_or_2 = list)) ? ($ret_or_2) : (node.$attr(\"list\")))))) {\n              list_param = \"&amp;list=\" + (list)\n            } else {\n              \n              $b = target.$split(\",\", 2), $a = $to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (playlist = ($a[1] == null ? nil : $a[1])), $b;\n              if ($truthy((playlist = ($truthy(($ret_or_2 = playlist)) ? ($ret_or_2) : (node.$attr(\"playlist\")))))) {\n                list_param = \"&amp;playlist=\" + (target) + \",\" + (playlist)\n              } else {\n                list_param = ($truthy(has_loop_param) ? (\"&amp;playlist=\" + (target)) : (\"\"))\n              };\n            };\n            return \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//www.youtube.com/embed/\" + (target) + \"?rel=\" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (mute_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + \"\\\" frameborder=\\\"0\\\"\" + (fs_attribute) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";\n          default:\n            \n            poster_attribute = ($truthy((val = node.$attr(\"poster\"))['$nil_or_empty?']()) ? (\"\") : (\" poster=\\\"\" + (node.$media_uri(val)) + \"\\\"\"));\n            preload_attribute = ($truthy((val = node.$attr(\"preload\"))['$nil_or_empty?']()) ? (\"\") : (\" preload=\\\"\" + (val) + \"\\\"\"));\n            start_t = node.$attr(\"start\");\n            end_t = node.$attr(\"end\");\n            time_anchor = (($truthy(start_t) || ($truthy(end_t))) ? (\"#t=\" + (($truthy(($ret_or_2 = start_t)) ? ($ret_or_2) : (\"\"))) + (($truthy(end_t) ? (\",\" + (end_t)) : (\"\")))) : (\"\"));\n            return \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<video src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + (width_attribute) + (height_attribute) + (poster_attribute) + (($truthy(node['$option?'](\"autoplay\")) ? (self.$append_boolean_attribute(\"autoplay\", xml)) : (\"\"))) + (($truthy(node['$option?'](\"muted\")) ? (self.$append_boolean_attribute(\"muted\", xml)) : (\"\"))) + (($truthy(node['$option?'](\"nocontrols\")) ? (\"\") : (self.$append_boolean_attribute(\"controls\", xml)))) + (($truthy(node['$option?'](\"loop\")) ? (self.$append_boolean_attribute(\"loop\", xml)) : (\"\"))) + (preload_attribute) + \">\\n\" + \"Your browser does not support the video tag.\\n\" + \"</video>\\n\" + \"</div>\\n\" + \"</div>\";\n        };\n      });\n      \n      $def(self, '$convert_inline_anchor', function $$convert_inline_anchor(node) {\n        var self = this, path = nil, attrs = nil, text = nil, $ret_or_2 = nil, ref = nil, $ret_or_3 = nil, refid = nil, top = nil, outer = nil;\n\n        \n        switch (node.$type()) {\n          case \"xref\":\n            \n            if ($truthy((path = node.$attributes()['$[]'](\"path\")))) {\n              \n              attrs = self.$append_link_constraint_attrs(node, ($truthy(node.$role()) ? ([\" class=\\\"\" + (node.$role()) + \"\\\"\"]) : ([]))).$join();\n              text = ($truthy(($ret_or_2 = node.$text())) ? ($ret_or_2) : (path));\n            } else {\n              \n              attrs = ($truthy(node.$role()) ? (\" class=\\\"\" + (node.$role()) + \"\\\"\") : (\"\"));\n              if (!$truthy((text = node.$text()))) {\n                if ($eqeqeq($$('AbstractNode'), (ref = ($truthy(($ret_or_2 = (self.refs = ($truthy(($ret_or_3 = self.refs)) ? ($ret_or_3) : (node.$document().$catalog()['$[]'](\"refs\"))))['$[]']((refid = node.$attributes()['$[]'](\"refid\"))))) ? ($ret_or_2) : (($truthy(refid['$nil_or_empty?']()) ? ((top = self.$get_root_document(node))) : (nil))))))) {\n                  if (($truthy((self.resolving_xref = ($truthy(($ret_or_2 = self.resolving_xref)) ? ($ret_or_2) : ((outer = true))))) && ($truthy(outer)))) {\n                    \n                    if ($truthy((text = ref.$xreftext(node.$attr(\"xrefstyle\", nil, true))))) {\n                      if ($truthy(text['$include?'](\"<a\"))) {\n                        text = text.$gsub($$('DropAnchorRx'), \"\")\n                      }\n                    } else {\n                      text = ($truthy(top) ? (\"[^top]\") : (\"[\" + (refid) + \"]\"))\n                    };\n                    self.resolving_xref = nil;\n                  } else {\n                    text = ($truthy(top) ? (\"[^top]\") : (\"[\" + (refid) + \"]\"))\n                  }\n                } else {\n                  text = \"[\" + (refid) + \"]\"\n                }\n              };\n            };\n            return \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (attrs) + \">\" + (text) + \"</a>\";\n          case \"ref\":\n            return \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>\"\n          case \"link\":\n            \n            attrs = ($truthy(node.$id()) ? ([\" id=\\\"\" + (node.$id()) + \"\\\"\"]) : ([]));\n            if ($truthy(node.$role())) {\n              attrs['$<<'](\" class=\\\"\" + (node.$role()) + \"\\\"\")\n            };\n            if ($truthy(node['$attr?'](\"title\"))) {\n              attrs['$<<'](\" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\")\n            };\n            return \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (self.$append_link_constraint_attrs(node, attrs).$join()) + \">\" + (node.$text()) + \"</a>\";\n          case \"bibref\":\n            return \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>[\" + (($truthy(($ret_or_2 = node.$reftext())) ? ($ret_or_2) : (node.$id()))) + \"]\"\n          default:\n            \n            self.$logger().$warn(\"unknown anchor type: \" + (node.$type().$inspect()));\n            return nil;\n        }\n      });\n      \n      $def(self, '$convert_inline_break', function $$convert_inline_break(node) {\n        var self = this;\n\n        return \"\" + (node.$text()) + \"<br\" + (self.void_element_slash) + \">\"\n      });\n      \n      $def(self, '$convert_inline_button', function $$convert_inline_button(node) {\n        \n        return \"<b class=\\\"button\\\">\" + (node.$text()) + \"</b>\"\n      });\n      \n      $def(self, '$convert_inline_callout', function $$convert_inline_callout(node) {\n        var self = this, src = nil, guard = nil;\n\n        if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n          return \"<i class=\\\"conum\\\" data-value=\\\"\" + (node.$text()) + \"\\\"></i><b>(\" + (node.$text()) + \")</b>\"\n        } else if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          src = node.$icon_uri(\"callouts/\" + (node.$text()));\n          return \"<img src=\\\"\" + (src) + \"\\\" alt=\\\"\" + (node.$text()) + \"\\\"\" + (self.void_element_slash) + \">\";\n        } else if ($eqeqeq($$$('Array'), (guard = node.$attributes()['$[]'](\"guard\")))) {\n          return \"&lt;!--<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>--&gt;\"\n        } else {\n          return \"\" + (guard) + \"<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>\"\n        }\n      });\n      \n      $def(self, '$convert_inline_footnote', function $$convert_inline_footnote(node) {\n        var index = nil, id_attr = nil;\n\n        if ($truthy((index = node.$attr(\"index\")))) {\n          if ($eqeq(node.$type(), \"xref\")) {\n            return \"<sup class=\\\"footnoteref\\\">[<a class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\"\n          } else {\n            \n            id_attr = ($truthy(node.$id()) ? (\" id=\\\"_footnote_\" + (node.$id()) + \"\\\"\") : (\"\"));\n            return \"<sup class=\\\"footnote\\\"\" + (id_attr) + \">[<a id=\\\"_footnoteref_\" + (index) + \"\\\" class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\";\n          }\n        } else if ($eqeq(node.$type(), \"xref\")) {\n          return \"<sup class=\\\"footnoteref red\\\" title=\\\"Unresolved footnote reference.\\\">[\" + (node.$text()) + \"]</sup>\"\n        } else {\n          return nil\n        }\n      });\n      \n      $def(self, '$convert_inline_image', function $$convert_inline_image(node) {\n        var self = this, target = nil, type = nil, $ret_or_1 = nil, icons = nil, i_class_attr_val = nil, attrs = nil, img = nil, fallback = nil, class_attr_val = nil, role = nil;\n\n        \n        target = node.$target();\n        if ($eqeq((type = ($truthy(($ret_or_1 = node.$type())) ? ($ret_or_1) : (\"image\"))), \"icon\")) {\n          if ($eqeq((icons = node.$document().$attr(\"icons\")), \"font\")) {\n            \n            i_class_attr_val = \"fa fa-\" + (target);\n            if ($truthy(node['$attr?'](\"size\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-\" + (node.$attr(\"size\"))\n            };\n            if ($truthy(node['$attr?'](\"flip\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-flip-\" + (node.$attr(\"flip\"))\n            } else if ($truthy(node['$attr?'](\"rotate\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-rotate-\" + (node.$attr(\"rotate\"))\n            };\n            attrs = ($truthy(node['$attr?'](\"title\")) ? (\" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\") : (\"\"));\n            img = \"<i class=\\\"\" + (i_class_attr_val) + \"\\\"\" + (attrs) + \"></i>\";\n          } else if ($truthy(icons)) {\n            \n            attrs = ($truthy(node['$attr?'](\"width\")) ? (\" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\") : (\"\"));\n            if ($truthy(node['$attr?'](\"height\"))) {\n              attrs = \"\" + (attrs) + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n            };\n            if ($truthy(node['$attr?'](\"title\"))) {\n              attrs = \"\" + (attrs) + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"\n            };\n            img = \"<img src=\\\"\" + (node.$icon_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\";\n          } else {\n            img = \"[\" + (node.$alt()) + \"&#93;\"\n          }\n        } else {\n          \n          attrs = ($truthy(node['$attr?'](\"width\")) ? (\" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\") : (\"\"));\n          if ($truthy(node['$attr?'](\"height\"))) {\n            attrs = \"\" + (attrs) + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n          };\n          if ($truthy(node['$attr?'](\"title\"))) {\n            attrs = \"\" + (attrs) + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"\n          };\n          if ((($truthy(node['$attr?'](\"format\", \"svg\")) || ($truthy(target['$include?'](\".svg\")))) && ($truthy($rb_lt(node.$document().$safe(), $$$($$('SafeMode'), 'SECURE')))))) {\n            if ($truthy(node['$option?'](\"inline\"))) {\n              img = ($truthy(($ret_or_1 = self.$read_svg_contents(node, target))) ? ($ret_or_1) : (\"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"))\n            } else if ($truthy(node['$option?'](\"interactive\"))) {\n              \n              fallback = ($truthy(node['$attr?'](\"fallback\")) ? (\"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\") : (\"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"));\n              img = \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (attrs) + \">\" + (fallback) + \"</object>\";\n            } else {\n              img = \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n            }\n          } else {\n            img = \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n          };\n        };\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"\n        };\n        class_attr_val = type;\n        if ($truthy((role = node.$role()))) {\n          class_attr_val = ($truthy(node['$attr?'](\"float\")) ? (\"\" + (class_attr_val) + \" \" + (node.$attr(\"float\")) + \" \" + (role)) : (\"\" + (class_attr_val) + \" \" + (role)))\n        } else if ($truthy(node['$attr?'](\"float\"))) {\n          class_attr_val = \"\" + (class_attr_val) + \" \" + (node.$attr(\"float\"))\n        };\n        return \"<span class=\\\"\" + (class_attr_val) + \"\\\">\" + (img) + \"</span>\";\n      });\n      \n      $def(self, '$convert_inline_indexterm', function $$convert_inline_indexterm(node) {\n        \n        if ($eqeq(node.$type(), \"visible\")) {\n          return node.$text()\n        } else {\n          return \"\"\n        }\n      });\n      \n      $def(self, '$convert_inline_kbd', function $$convert_inline_kbd(node) {\n        var keys = nil;\n\n        if ($eqeq((keys = node.$attr(\"keys\")).$size(), 1)) {\n          return \"<kbd>\" + (keys['$[]'](0)) + \"</kbd>\"\n        } else {\n          return \"<span class=\\\"keyseq\\\"><kbd>\" + (keys.$join(\"</kbd>+<kbd>\")) + \"</kbd></span>\"\n        }\n      });\n      \n      $def(self, '$convert_inline_menu', function $$convert_inline_menu(node) {\n        var caret = nil, submenu_joiner = nil, menu = nil, submenus = nil, menuitem = nil;\n\n        \n        caret = ($truthy(node.$document()['$attr?'](\"icons\", \"font\")) ? (\"&#160;<i class=\\\"fa fa-angle-right caret\\\"></i> \") : (\"&#160;<b class=\\\"caret\\\">&#8250;</b> \"));\n        submenu_joiner = \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\";\n        menu = node.$attr(\"menu\");\n        if ($truthy((submenus = node.$attr(\"submenus\"))['$empty?']())) {\n          if ($truthy((menuitem = node.$attr(\"menuitem\")))) {\n            return \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (menuitem) + \"</b></span>\"\n          } else {\n            return \"<b class=\\\"menuref\\\">\" + (menu) + \"</b>\"\n          }\n        } else {\n          return \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\" + (submenus.$join(submenu_joiner)) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (node.$attr(\"menuitem\")) + \"</b></span>\"\n        };\n      });\n      \n      $def(self, '$convert_inline_quoted', function $$convert_inline_quoted(node) {\n        var $a, $b, open = nil, close = nil, tag = nil, class_attr = nil;\n\n        \n        $b = $$('QUOTE_TAGS')['$[]'](node.$type()), $a = $to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (tag = ($a[2] == null ? nil : $a[2])), $b;\n        if ($truthy(node.$id())) {\n          \n          class_attr = ($truthy(node.$role()) ? (\" class=\\\"\" + (node.$role()) + \"\\\"\") : (\"\"));\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (node.$text()) + (close)\n          } else {\n            return \"<span id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          };\n        } else if ($truthy(node.$role())) {\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" class=\\\"\" + (node.$role()) + \"\\\">\" + (node.$text()) + (close)\n          } else {\n            return \"<span class=\\\"\" + (node.$role()) + \"\\\">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          }\n        } else {\n          return \"\" + (open) + (node.$text()) + (close)\n        };\n      });\n      \n      $def(self, '$read_svg_contents', function $$read_svg_contents(node, target) {\n        var svg = nil, old_start_tag = nil, new_start_tag = nil, start_tag_match = nil;\n\n        \n        if ($truthy((svg = node.$read_contents(target, $hash2([\"start\", \"normalize\", \"label\", \"warn_if_empty\"], {\"start\": node.$document().$attr(\"imagesdir\"), \"normalize\": true, \"label\": \"SVG\", \"warn_if_empty\": true}))))) {\n          \n          if ($truthy(svg['$empty?']())) {\n            return nil\n          };\n          if (!$truthy(svg['$start_with?'](\"<svg\"))) {\n            svg = svg.$sub($$('SvgPreambleRx'), \"\")\n          };\n          old_start_tag = (new_start_tag = (start_tag_match = nil));\n          $send([\"width\", \"height\"], 'each', [], function $$20(dim){var $ret_or_1 = nil, $ret_or_2 = nil;\n\n            \n            if (dim == null) dim = nil;\n            if (!$truthy(node['$attr?'](dim))) {\n              return nil\n            };\n            if (!$truthy(new_start_tag)) {\n              \n              if ($eqeq((start_tag_match = ($truthy(($ret_or_1 = start_tag_match)) ? ($ret_or_1) : ($truthy(($ret_or_2 = svg.$match($$('SvgStartTagRx')))) ? ($ret_or_2) : (\"no_match\")))), \"no_match\")) {\n                return nil\n              };\n              new_start_tag = (old_start_tag = start_tag_match['$[]'](0)).$gsub($$('DimensionAttributeRx'), \"\");\n            };\n            return (new_start_tag = \"\" + (new_start_tag.$chop()) + \" \" + (dim) + \"=\\\"\" + (node.$attr(dim)) + \"\\\">\");});\n          if ($truthy(new_start_tag)) {\n            svg = \"\" + (new_start_tag) + (svg['$[]'](Opal.Range.$new(old_start_tag.$length(), -1, false)))\n          };\n        };\n        return svg;\n      });\n      self.$private();\n      \n      $def(self, '$append_boolean_attribute', function $$append_boolean_attribute(name, xml) {\n        \n        if ($truthy(xml)) {\n          return \" \" + (name) + \"=\\\"\" + (name) + \"\\\"\"\n        } else {\n          return \" \" + (name)\n        }\n      });\n      \n      $def(self, '$append_link_constraint_attrs', function $$append_link_constraint_attrs(node, attrs) {\n        var rel = nil, window = nil;\n\n        \n        if (attrs == null) attrs = [];\n        if ($truthy(node['$option?'](\"nofollow\"))) {\n          rel = \"nofollow\"\n        };\n        if ($truthy((window = node.$attributes()['$[]'](\"window\")))) {\n          \n          attrs['$<<'](\" target=\\\"\" + (window) + \"\\\"\");\n          if (($eqeq(window, \"_blank\") || ($truthy(node['$option?'](\"noopener\"))))) {\n            attrs['$<<'](($truthy(rel) ? (\" rel=\\\"\" + (rel) + \" noopener\\\"\") : (\" rel=\\\"noopener\\\"\")))\n          };\n        } else if ($truthy(rel)) {\n          attrs['$<<'](\" rel=\\\"\" + (rel) + \"\\\"\")\n        };\n        return attrs;\n      }, -2);\n      \n      $def(self, '$encode_attribute_value', function $$encode_attribute_value(val) {\n        \n        if ($truthy(val['$include?'](\"\\\"\"))) {\n          \n          return val.$gsub(\"\\\"\", \"&quot;\");\n        } else {\n          return val\n        }\n      });\n      \n      $def(self, '$generate_manname_section', function $$generate_manname_section(node) {\n        var manname_title = nil, next_section_title = nil, next_section = nil, manname_id_attr = nil, manname_id = nil;\n\n        \n        manname_title = node.$attr(\"manname-title\", \"Name\");\n        if (($truthy((next_section = node.$sections()['$[]'](0))) && ($eqeq((next_section_title = next_section.$title()), next_section_title.$upcase())))) {\n          manname_title = manname_title.$upcase()\n        };\n        manname_id_attr = ($truthy((manname_id = node.$attr(\"manname-id\"))) ? (\" id=\\\"\" + (manname_id) + \"\\\"\") : (\"\"));\n        return \"<h2\" + (manname_id_attr) + \">\" + (manname_title) + \"</h2>\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + \"<p>\" + (node.$attr(\"mannames\").$join(\", \")) + \" - \" + (node.$attr(\"manpurpose\")) + \"</p>\\n\" + \"</div>\";\n      });\n      \n      $def(self, '$get_root_document', function $$get_root_document(node) {\n        \n        \n        while ($truthy((node = node.$document())['$nested?']())) {\n        node = node.$parent_document()\n        };\n        return node;\n      });\n      \n      $def(self, '$method_missing', function $$method_missing(id, $a) {\n        var $post_args, args, $yield = $$method_missing.$$p || nil, self = this, name = nil;\n\n        $$method_missing.$$p = null;\n        \n        $post_args = $slice(arguments, 1);\n        args = $post_args;\n        if (($not((name = id.$to_s())['$start_with?'](\"convert_\")) && ($truthy(self['$handles?'](name))))) {\n          \n          return $send(self, 'send', [\"convert_\" + (name)].concat($to_a(args)));\n        } else {\n          return $send2(self, $find_super(self, 'method_missing', $$method_missing, false, true), 'method_missing', [id].concat($to_a(args)), $yield)\n        };\n      }, -2);\n      return $def(self, '$respond_to_missing?', function $Html5Converter_respond_to_missing$ques$21(id, $a) {\n        var $post_args, options, self = this, $ret_or_1 = nil, name = nil;\n\n        \n        $post_args = $slice(arguments, 1);\n        options = $post_args;\n        if ($truthy(($ret_or_1 = (name = id.$to_s())['$start_with?'](\"convert_\")['$!']()))) {\n          \n          return self['$handles?'](name);\n        } else {\n          return $ret_or_1\n        };\n      }, -2);\n    })($$('Converter'), $$$($$('Converter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/extensions\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $alias = Opal.alias, $slice = Opal.slice, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_gt = Opal.rb_gt, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $to_ary = Opal.to_ary, $const_set = Opal.const_set, $return_val = Opal.return_val, $send2 = Opal.send2, $find_super = Opal.find_super, $NilClass = Opal.NilClass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $regexp = Opal.regexp, $Class = Opal.Class, $return_ivar = Opal.return_ivar, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $hash = Opal.hash, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('[]=,config,const_defined?,singleton_class?,include,const_get,extend,enable_dsl,attr_reader,merge,class,update,raise,document,==,doctype,[],+,level,delete,>,casecmp,new,title=,sectname=,special=,fetch,numbered=,attr?,!,key?,special,numbered,id=,generate_id,title,update_attributes,tr,basename,create_block,assign_caption,===,parse_blocks,empty?,include?,sub_attributes,parse,each,define_method,unshift,shift,send,size,receiver,binding,define_singleton_method,instance_exec,to_proc,call,option,content_model,flatten,positional_attributes,default_attributes,respond_to?,to_s,partition,to_i,<<,compact,inspect,resolve_attributes,attr_accessor,to_set,contexts,match?,resolve_regexp,format,method,register,reset,values,groups,arity,activate,add_document_processor,tree_processor,tree_processors?,tree_processors,any?,select,add_syntax_processor,to_sym,instance_variable_get,kind,private,join,map,split,capitalize,instance_variable_set,resolve_args,singleton_class,process_block_given?,source_location,freeze,resolve_class,<,update_config,as_symbol,name,name=,pop,-,-@,next_auto_id,generate_name,each_with_object');\n  \n  nil;\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Extensions');\n\n      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n      \n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Processor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.config = nil;\n        \n        (function(self, $parent_nesting) {\n          \n          \n          \n          $def(self, '$config', function $$config() {\n            var self = this, $ret_or_1 = nil;\n            if (self.config == null) self.config = nil;\n\n            return (self.config = ($truthy(($ret_or_1 = self.config)) ? ($ret_or_1) : ($hash2([], {}))))\n          });\n          \n          $def(self, '$option', function $$option(key, default_value) {\n            var $a, self = this;\n\n            return ($a = [key, default_value], $send(self.$config(), '[]=', $a), $a[$a.length - 1])\n          });\n          \n          $def(self, '$enable_dsl', function $$enable_dsl() {\n            var self = this;\n\n            if ($truthy(self['$const_defined?'](\"DSL\"))) {\n              if ($truthy(self['$singleton_class?']())) {\n                return self.$include(self.$const_get(\"DSL\"))\n              } else {\n                return self.$extend(self.$const_get(\"DSL\"))\n              }\n            } else {\n              return nil\n            }\n          });\n          return $alias(self, \"use_dsl\", \"enable_dsl\");\n        })(Opal.get_singleton_class(self), $nesting);\n        self.$attr_reader(\"config\");\n        \n        $def(self, '$initialize', function $$initialize(config) {\n          var self = this;\n\n          \n          if (config == null) config = $hash2([], {});\n          return (self.config = self.$class().$config().$merge(config));\n        }, -1);\n        \n        $def(self, '$update_config', function $$update_config(config) {\n          var self = this;\n\n          return self.config.$update(config)\n        });\n        \n        $def(self, '$process', function $$process($a) {\n          var $post_args, args, self = this;\n\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('Processor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\");\n        }, -1);\n        \n        $def(self, '$create_section', function $$create_section(parent, title, attrs, opts) {\n          var $a, $b, doc = nil, book = nil, doctype = nil, level = nil, $ret_or_1 = nil, style = nil, sectname = nil, special = nil, sect = nil, id = nil;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          doc = parent.$document();\n          book = (doctype = doc.$doctype())['$=='](\"book\");\n          level = ($truthy(($ret_or_1 = opts['$[]'](\"level\"))) ? ($ret_or_1) : ($rb_plus(parent.$level(), 1)));\n          if ($truthy((style = attrs.$delete(\"style\")))) {\n            if (($truthy(book) && ($eqeq(style, \"abstract\")))) {\n              $a = [\"chapter\", 1], (sectname = $a[0]), (level = $a[1]), $a\n            } else {\n              \n              $a = [style, true], (sectname = $a[0]), (special = $a[1]), $a;\n              if ($eqeq(level, 0)) {\n                level = 1\n              };\n            }\n          } else if ($truthy(book)) {\n            sectname = ($eqeq(level, 0) ? (\"part\") : (($truthy($rb_gt(level, 1)) ? (\"section\") : (\"chapter\"))))\n          } else if (($eqeq(doctype, \"manpage\") && ($eqeq(title.$casecmp(\"synopsis\"), 0)))) {\n            $a = [\"synopsis\", true], (sectname = $a[0]), (special = $a[1]), $a\n          } else {\n            sectname = \"section\"\n          };\n          sect = $$('Section').$new(parent, level);\n          $a = [title, sectname], ($b = [$a[0]], $send(sect, 'title=', $b), $b[$b.length - 1]), ($b = [$a[1]], $send(sect, 'sectname=', $b), $b[$b.length - 1]), $a;\n          if ($truthy(special)) {\n            \n            sect['$special='](true);\n            if ($truthy(opts.$fetch(\"numbered\", style['$=='](\"appendix\")))) {\n              sect['$numbered='](true)\n            } else if (($not(opts['$key?'](\"numbered\")) && ($truthy(doc['$attr?'](\"sectnums\", \"all\"))))) {\n              sect['$numbered=']((($truthy(book) && ($eqeq(level, 1))) ? (\"chapter\") : (true)))\n            };\n          } else if ($truthy($rb_gt(level, 0))) {\n            if ($truthy(opts.$fetch(\"numbered\", doc['$attr?'](\"sectnums\")))) {\n              sect['$numbered='](($truthy(sect.$special()) ? (($truthy(($ret_or_1 = parent.$numbered())) || ($ret_or_1))) : (true)))\n            }\n          } else if ($truthy(opts.$fetch(\"numbered\", ($truthy(($ret_or_1 = book)) ? (doc['$attr?'](\"partnums\")) : ($ret_or_1))))) {\n            sect['$numbered='](true)\n          };\n          if ($eqeq((id = attrs['$[]'](\"id\")), false)) {\n            attrs.$delete(\"id\")\n          } else {\n            sect['$id='](($a = [\"id\", ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : (($truthy(doc['$attr?'](\"sectids\")) ? ($$('Section').$generate_id(sect.$title(), doc)) : (nil))))], $send(attrs, '[]=', $a), $a[$a.length - 1]))\n          };\n          sect.$update_attributes(attrs);\n          return sect;\n        }, -4);\n        \n        $def(self, '$create_block', function $$create_block(parent, context, source, attrs, opts) {\n          \n          \n          if (opts == null) opts = $hash2([], {});\n          return $$('Block').$new(parent, context, $hash2([\"source\", \"attributes\"], {\"source\": source, \"attributes\": attrs}).$merge(opts));\n        }, -5);\n        \n        $def(self, '$create_list', function $$create_list(parent, context, attrs) {\n          var list = nil;\n\n          \n          if (attrs == null) attrs = nil;\n          list = $$('List').$new(parent, context);\n          if ($truthy(attrs)) {\n            list.$update_attributes(attrs)\n          };\n          return list;\n        }, -3);\n        \n        $def(self, '$create_list_item', function $$create_list_item(parent, text) {\n          \n          \n          if (text == null) text = nil;\n          return $$('ListItem').$new(parent, text);\n        }, -2);\n        \n        $def(self, '$create_image_block', function $$create_image_block(parent, attrs, opts) {\n          var $a, self = this, target = nil, $ret_or_1 = nil, title = nil, block = nil;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          if (!$truthy((target = attrs['$[]'](\"target\")))) {\n            self.$raise($$$('ArgumentError'), \"Unable to create an image block, target attribute is required\")\n          };\n          if ($truthy(($ret_or_1 = attrs['$[]'](\"alt\")))) {\n            $ret_or_1\n          } else {\n            attrs['$[]='](\"alt\", ($a = [\"default-alt\", $$('Helpers').$basename(target, true).$tr(\"_-\", \" \")], $send(attrs, '[]=', $a), $a[$a.length - 1]))\n          };\n          title = ($truthy(attrs['$key?'](\"title\")) ? (attrs.$delete(\"title\")) : (nil));\n          block = self.$create_block(parent, \"image\", nil, attrs, opts);\n          if ($truthy(title)) {\n            \n            block['$title='](title);\n            block.$assign_caption(attrs.$delete(\"caption\"), \"figure\");\n          };\n          return block;\n        }, -3);\n        \n        $def(self, '$create_inline', function $$create_inline(parent, context, text, opts) {\n          \n          \n          if (opts == null) opts = $hash2([], {});\n          return $$('Inline').$new(parent, context, text, ($eqeq(context, \"quoted\") ? ($hash2([\"type\"], {\"type\": \"unquoted\"}).$merge(opts)) : (opts)));\n        }, -4);\n        \n        $def(self, '$parse_content', function $$parse_content(parent, content, attributes) {\n          var reader = nil;\n\n          \n          if (attributes == null) attributes = nil;\n          reader = ($eqeqeq($$('Reader'), content) ? (content) : ($$('Reader').$new(content)));\n          $$('Parser').$parse_blocks(reader, parent, attributes);\n          return parent;\n        }, -3);\n        \n        $def(self, '$parse_attributes', function $$parse_attributes(block, attrlist, opts) {\n          var $ret_or_1 = nil;\n\n          \n          if (opts == null) opts = $hash2([], {});\n          if ($truthy(($truthy(attrlist) ? (attrlist['$empty?']()) : (true)))) {\n            return $hash2([], {})\n          };\n          if (($truthy(opts['$[]'](\"sub_attributes\")) && ($truthy(attrlist['$include?']($$('ATTR_REF_HEAD')))))) {\n            attrlist = block.$sub_attributes(attrlist)\n          };\n          return $$('AttributeList').$new(attrlist).$parse(($truthy(($ret_or_1 = opts['$[]'](\"positional_attributes\"))) ? ($ret_or_1) : ([])));\n        }, -3);\n        return $send([[\"create_paragraph\", \"create_block\", \"paragraph\"], [\"create_open_block\", \"create_block\", \"open\"], [\"create_example_block\", \"create_block\", \"example\"], [\"create_pass_block\", \"create_block\", \"pass\"], [\"create_listing_block\", \"create_block\", \"listing\"], [\"create_literal_block\", \"create_block\", \"literal\"], [\"create_anchor\", \"create_inline\", \"anchor\"], [\"create_inline_pass\", \"create_inline\", \"quoted\"]], 'each', [], function $Processor$1(method_name, delegate_method_name, context){var self = $Processor$1.$$s == null ? this : $Processor$1.$$s;\n\n          \n          if (method_name == null) method_name = nil;\n          if (delegate_method_name == null) delegate_method_name = nil;\n          if (context == null) context = nil;\n          return $send(self, 'define_method', [method_name], function $$2($a){var $post_args, args, self = $$2.$$s == null ? this : $$2.$$s;\n\n            \n            $post_args = $slice(arguments);\n            args = $post_args;\n            args.$unshift(args.$shift(), context);\n            return $send(self, 'send', [delegate_method_name].concat($to_a(args)));}, {$$arity: -1, $$s: self});}, {$$s: self});\n      })($nesting[0], null, $nesting);\n      (function($base) {\n        var self = $module($base, 'ProcessorDsl');\n\n        \n        \n        \n        $def(self, '$option', function $$option(key, value) {\n          var $a, self = this;\n\n          return ($a = [key, value], $send(self.$config(), '[]=', $a), $a[$a.length - 1])\n        });\n        \n        $def(self, '$process', function $$process($a) {\n          var block = $$process.$$p || nil, $post_args, args, $b, self = this, context = nil;\n          if (self.process_block == null) self.process_block = nil;\n\n          $$process.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          if ((block !== nil)) {\n            \n            if (!$truthy(args['$empty?']())) {\n              self.$raise($$$('ArgumentError'), \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            if (!($truthy(block.$binding()) && ($eqeq(self, block.$binding().$receiver())))) {\n              \n              context = self;\n              $send(block, 'define_singleton_method', [\"call\"], function $$3($b){var $post_args, m_args;\n\n                \n                $post_args = $slice(arguments);\n                m_args = $post_args;\n                return $send(context, 'instance_exec', $to_a(m_args), block.$to_proc());}, -1);\n            };\n            return (self.process_block = block);\n          } else if ($truthy((($b = self['process_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return $send(self.process_block, 'call', $to_a(args))\n          } else {\n            return self.$raise($$$('NotImplementedError'), \"\" + (self.$class()) + \" #\" + (\"process\") + \" method called before being registered\")\n          };\n        }, -1);\n        return $def(self, '$process_block_given?', function $ProcessorDsl_process_block_given$ques$4() {\n          var $a, self = this;\n\n          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil)\n        });\n      })($nesting[0]);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocumentProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('ProcessorDsl'));\n        return $def(self, '$prefer', function $$prefer() {\n          var self = this;\n\n          return self.$option(\"position\", \">>\")\n        });\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'SyntaxProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('ProcessorDsl'));\n        \n        $def(self, '$named', function $$named(value) {\n          var self = this;\n\n          if ($eqeqeq($$('Processor'), self)) {\n            return (self.name = value)\n          } else {\n            return self.$option(\"name\", value)\n          }\n        });\n        \n        $def(self, '$content_model', function $$content_model(value) {\n          var self = this;\n\n          return self.$option(\"content_model\", value)\n        });\n        $alias(self, \"parse_content_as\", \"content_model\");\n        \n        $def(self, '$positional_attributes', function $$positional_attributes($a) {\n          var $post_args, value, self = this;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          return self.$option(\"positional_attrs\", value.$flatten());\n        }, -1);\n        $alias(self, \"name_positional_attributes\", \"positional_attributes\");\n        $alias(self, \"positional_attrs\", \"positional_attributes\");\n        \n        $def(self, '$default_attributes', function $$default_attributes(value) {\n          var self = this;\n\n          return self.$option(\"default_attrs\", value)\n        });\n        $alias(self, \"default_attrs\", \"default_attributes\");\n        \n        $def(self, '$resolve_attributes', function $$resolve_attributes($a) {\n          var $post_args, args, $b, self = this, $ret_or_1 = nil, names = nil, defaults = nil;\n\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          if (!$truthy($rb_gt(args.$size(), 1))) {\n            if ($truthy((args = args.$fetch(0, true))['$respond_to?'](\"to_sym\"))) {\n              args = [args]\n            }\n          };\n          if ($eqeqeq(true, ($ret_or_1 = args))) {\n            \n            self.$option(\"positional_attrs\", []);\n            return self.$option(\"default_attrs\", $hash2([], {}));\n          } else if ($eqeqeq($$$('Array'), $ret_or_1)) {\n            \n            $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n            $send(args, 'each', [], function $$5(arg){var $c, $d, name = nil, _ = nil, value = nil, idx = nil;\n\n              \n              if (arg == null) arg = nil;\n              if ($truthy((arg = arg.$to_s())['$include?'](\"=\"))) {\n                \n                $d = arg.$partition(\"=\"), $c = $to_ary($d), (name = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (value = ($c[2] == null ? nil : $c[2])), $d;\n                if ($truthy(name['$include?'](\":\"))) {\n                  \n                  $d = name.$partition(\":\"), $c = $to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n                  idx = ($eqeq(idx, \"@\") ? (names.$size()) : (idx.$to_i()));\n                  names['$[]='](idx, name);\n                };\n                return ($c = [name, value], $send(defaults, '[]=', $c), $c[$c.length - 1]);\n              } else if ($truthy(arg['$include?'](\":\"))) {\n                \n                $d = arg.$partition(\":\"), $c = $to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n                idx = ($eqeq(idx, \"@\") ? (names.$size()) : (idx.$to_i()));\n                return ($c = [idx, name], $send(names, '[]=', $c), $c[$c.length - 1]);\n              } else {\n                return names['$<<'](arg)\n              };});\n            self.$option(\"positional_attrs\", names.$compact());\n            return self.$option(\"default_attrs\", defaults);\n          } else if ($eqeqeq($$$('Hash'), $ret_or_1)) {\n            \n            $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n            $send(args, 'each', [], function $$6(key, val){var $c, $d, name = nil, idx = nil, _ = nil;\n\n              \n              if (key == null) key = nil;\n              if (val == null) val = nil;\n              if ($truthy((name = key.$to_s())['$include?'](\":\"))) {\n                \n                $d = name.$partition(\":\"), $c = $to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n                idx = ($eqeq(idx, \"@\") ? (names.$size()) : (idx.$to_i()));\n                names['$[]='](idx, name);\n              };\n              if ($truthy(val)) {\n                return ($c = [name, val], $send(defaults, '[]=', $c), $c[$c.length - 1])\n              } else {\n                return nil\n              };});\n            self.$option(\"positional_attrs\", names.$compact());\n            return self.$option(\"default_attrs\", defaults);\n          } else {\n            return self.$raise($$$('ArgumentError'), \"unsupported attributes specification for macro: \" + (args.$inspect()))\n          };\n        }, -1);\n        return $alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Preprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$process', function $$process(document, reader) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('Preprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        })\n      })($nesting[0], $$('Processor'), $nesting);\n      $const_set($$('Preprocessor'), 'DSL', $$('DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'TreeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$process', function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('TreeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        })\n      })($nesting[0], $$('Processor'), $nesting);\n      $const_set($$('TreeProcessor'), 'DSL', $$('DocumentProcessorDsl'));\n      $const_set($nesting[0], 'Treeprocessor', $$('TreeProcessor'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Postprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$process', function $$process(document, output) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('Postprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        })\n      })($nesting[0], $$('Processor'), $nesting);\n      $const_set($$('Postprocessor'), 'DSL', $$('DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'IncludeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        \n        $def(self, '$process', function $$process(document, reader, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('IncludeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        });\n        return $def(self, '$handles?', $return_val(true));\n      })($nesting[0], $$('Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'IncludeProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('DocumentProcessorDsl'));\n        return $def(self, '$handles?', function $IncludeProcessorDsl_handles$ques$7($a) {\n          var block = $IncludeProcessorDsl_handles$ques$7.$$p || nil, $post_args, args, $b, self = this;\n          if (self.handles_block == null) self.handles_block = nil;\n\n          $IncludeProcessorDsl_handles$ques$7.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          if ((block !== nil)) {\n            \n            if (!$truthy(args['$empty?']())) {\n              self.$raise($$$('ArgumentError'), \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            return (self.handles_block = block);\n          } else if ($truthy((($b = self['handles_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return self.handles_block.$call(args['$[]'](0))\n          } else {\n            return true\n          };\n        }, -1);\n      })($nesting[0], $nesting);\n      $const_set($$('IncludeProcessor'), 'DSL', $$('IncludeProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DocinfoProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.config = nil;\n        \n        \n        $def(self, '$initialize', function $$initialize(config) {\n          var $a, $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;\n\n          $$initialize.$$p = null;\n          \n          if (config == null) config = $hash2([], {});\n          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [config], null);\n          if ($truthy(($ret_or_1 = self.config['$[]'](\"location\")))) {\n            return $ret_or_1\n          } else {\n            return ($a = [\"location\", \"head\"], $send(self.config, '[]=', $a), $a[$a.length - 1])\n          };\n        }, -1);\n        return $def(self, '$process', function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('DocinfoProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        });\n      })($nesting[0], $$('Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocinfoProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('DocumentProcessorDsl'));\n        return $def(self, '$at_location', function $$at_location(value) {\n          var self = this;\n\n          return self.$option(\"location\", value)\n        });\n      })($nesting[0], $nesting);\n      $const_set($$('DocinfoProcessor'), 'DSL', $$('DocinfoProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        $def(self, '$initialize', function $$initialize(name, config) {\n          var $a, $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil, $ret_or_2 = nil;\n\n          $$initialize.$$p = null;\n          \n          if (name == null) name = nil;\n          if (config == null) config = $hash2([], {});\n          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [config], null);\n          self.name = ($truthy(($ret_or_1 = name)) ? ($ret_or_1) : (self.config['$[]'](\"name\")));\n          if ($eqeqeq($NilClass, ($ret_or_1 = self.config['$[]'](\"contexts\")))) {\n            if ($truthy(($ret_or_2 = self.config['$[]'](\"contexts\")))) {\n              $ret_or_2\n            } else {\n              self.config['$[]='](\"contexts\", [\"open\", \"paragraph\"].$to_set())\n            }\n          } else if ($eqeqeq($$$('Symbol'), $ret_or_1)) {\n            self.config['$[]='](\"contexts\", [self.config['$[]'](\"contexts\")].$to_set())\n          } else {\n            self.config['$[]='](\"contexts\", self.config['$[]'](\"contexts\").$to_set())\n          };\n          if ($truthy(($ret_or_1 = self.config['$[]'](\"content_model\")))) {\n            return $ret_or_1\n          } else {\n            return ($a = [\"content_model\", \"compound\"], $send(self.config, '[]=', $a), $a[$a.length - 1])\n          };\n        }, -1);\n        return $def(self, '$process', function $$process(parent, reader, attributes) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('BlockProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        });\n      })($nesting[0], $$('Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BlockProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('SyntaxProcessorDsl'));\n        \n        $def(self, '$contexts', function $$contexts($a) {\n          var $post_args, value, self = this;\n\n          \n          $post_args = $slice(arguments);\n          value = $post_args;\n          return self.$option(\"contexts\", value.$flatten().$to_set());\n        }, -1);\n        $alias(self, \"on_contexts\", \"contexts\");\n        $alias(self, \"on_context\", \"contexts\");\n        return $alias(self, \"bind_to\", \"contexts\");\n      })($nesting[0], $nesting);\n      $const_set($$('BlockProcessor'), 'DSL', $$('BlockProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'MacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        $def(self, '$initialize', function $$initialize(name, config) {\n          var $a, $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;\n\n          $$initialize.$$p = null;\n          \n          if (name == null) name = nil;\n          if (config == null) config = $hash2([], {});\n          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [config], null);\n          self.name = ($truthy(($ret_or_1 = name)) ? ($ret_or_1) : (self.config['$[]'](\"name\")));\n          if ($truthy(($ret_or_1 = self.config['$[]'](\"content_model\")))) {\n            return $ret_or_1\n          } else {\n            return ($a = [\"content_model\", \"attributes\"], $send(self.config, '[]=', $a), $a[$a.length - 1])\n          };\n        }, -1);\n        return $def(self, '$process', function $$process(parent, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'), \"\" + ($$('MacroProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        });\n      })($nesting[0], $$('Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'MacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('SyntaxProcessorDsl'));\n        \n        $def(self, '$resolve_attributes', function $$resolve_attributes($a) {\n          var $post_args, args, $yield = $$resolve_attributes.$$p || nil, self = this;\n\n          $$resolve_attributes.$$p = null;\n          \n          $post_args = $slice(arguments);\n          args = $post_args;\n          if (($eqeq(args.$size(), 1) && ($not(args['$[]'](0))))) {\n            return self.$option(\"content_model\", \"text\")\n          } else {\n            \n            $send2(self, $find_super(self, 'resolve_attributes', $$resolve_attributes, false, true), 'resolve_attributes', $to_a(args), $yield);\n            return self.$option(\"content_model\", \"attributes\");\n          };\n        }, -1);\n        return $alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.name = nil;\n        return $def(self, '$name', function $$name() {\n          var self = this;\n\n          \n          if (!$truthy($$('MacroNameRx')['$match?'](self.name.$to_s()))) {\n            self.$raise($$$('ArgumentError'), \"invalid name for block macro: \" + (self.name))\n          };\n          return self.name;\n        })\n      })($nesting[0], $$('MacroProcessor'), $nesting);\n      $const_set($$('BlockMacroProcessor'), 'DSL', $$('MacroProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'InlineMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.config = $proto.name = nil;\n        \n        $class_variable_set($nesting[0], '@@rx_cache', $hash2([], {}));\n        \n        $def(self, '$regexp', function $$regexp() {\n          var $a, self = this, $ret_or_1 = nil;\n\n          if ($truthy(($ret_or_1 = self.config['$[]'](\"regexp\")))) {\n            return $ret_or_1\n          } else {\n            return ($a = [\"regexp\", self.$resolve_regexp(self.name.$to_s(), self.config['$[]'](\"format\"))], $send(self.config, '[]=', $a), $a[$a.length - 1])\n          }\n        });\n        return $def(self, '$resolve_regexp', function $$resolve_regexp(name, format) {\n          var $a, self = this, $ret_or_1 = nil;\n\n          \n          if (!$truthy($$('MacroNameRx')['$match?'](name))) {\n            self.$raise($$$('ArgumentError'), \"invalid name for inline macro: \" + (name))\n          };\n          if ($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@rx_cache', false)['$[]']([name, format])))) {\n            return $ret_or_1\n          } else {\n            return ($a = [[name, format], $regexp([\"\\\\\\\\?\", name, \":\", ($eqeq(format, \"short\") ? (\"(){0}\") : (\"(\\\\S+?)\")), \"\\\\[(|\", $$('CC_ANY'), \"*?[^\\\\\\\\])\\\\]\"])], $send($class_variable_get($nesting[0], '@@rx_cache', false), '[]=', $a), $a[$a.length - 1])\n          };\n        });\n      })($nesting[0], $$('MacroProcessor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'InlineMacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        self.$include($$('MacroProcessorDsl'));\n        \n        $def(self, '$format', function $$format(value) {\n          var self = this;\n\n          return self.$option(\"format\", value)\n        });\n        $alias(self, \"match_format\", \"format\");\n        $alias(self, \"using_format\", \"format\");\n        return $def(self, '$match', function $$match(value) {\n          var self = this;\n\n          return self.$option(\"regexp\", value)\n        });\n      })($nesting[0], $nesting);\n      $const_set($$('InlineMacroProcessor'), 'DSL', $$('InlineMacroProcessorDsl'));\n      (function($base, $super) {\n        var self = $klass($base, $super, 'Extension');\n\n        \n        \n        self.$attr_reader(\"kind\");\n        self.$attr_reader(\"config\");\n        self.$attr_reader(\"instance\");\n        return $def(self, '$initialize', function $$initialize(kind, instance, config) {\n          var self = this;\n\n          \n          self.kind = kind;\n          self.instance = instance;\n          return (self.config = config);\n        });\n      })($nesting[0], null);\n      (function($base, $super) {\n        var self = $klass($base, $super, 'ProcessorExtension');\n\n        \n        \n        self.$attr_reader(\"process_method\");\n        return $def(self, '$initialize', function $$initialize(kind, instance, process_method) {\n          var $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;\n\n          $$initialize.$$p = null;\n          \n          if (process_method == null) process_method = nil;\n          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [kind, instance, instance.$config()], null);\n          return (self.process_method = ($truthy(($ret_or_1 = process_method)) ? ($ret_or_1) : (instance.$method(\"process\"))));\n        }, -3);\n      })($nesting[0], $$('Extension'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Group');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n          return $def(self, '$register', function $$register(name) {\n            var self = this;\n\n            \n            if (name == null) name = nil;\n            return $$('Extensions').$register(name, self);\n          }, -1)\n        })(Opal.get_singleton_class(self), $nesting);\n        return $def(self, '$activate', function $$activate(registry) {\n          var self = this;\n\n          return self.$raise($$$('NotImplementedError'))\n        });\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Registry');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n        $proto.document = $proto.groups = $proto.preprocessor_extensions = $proto.tree_processor_extensions = $proto.postprocessor_extensions = $proto.include_processor_extensions = $proto.docinfo_processor_extensions = $proto.block_extensions = $proto.block_macro_extensions = $proto.inline_macro_extensions = nil;\n        \n        self.$attr_reader(\"document\");\n        self.$attr_reader(\"groups\");\n        \n        $def(self, '$initialize', function $$initialize(groups) {\n          var self = this;\n\n          \n          if (groups == null) groups = $hash2([], {});\n          self.groups = groups;\n          self.$reset();\n          self.preprocessor_extensions = (self.tree_processor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = (self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil)))))));\n          return (self.document = nil);\n        }, -1);\n        \n        $def(self, '$activate', function $$activate(document) {\n          var self = this, ext_groups = nil;\n\n          \n          if ($truthy(self.document)) {\n            self.$reset()\n          };\n          self.document = document;\n          if (!$truthy((ext_groups = $rb_plus($$('Extensions').$groups().$values(), self.groups.$values()))['$empty?']())) {\n            $send(ext_groups, 'each', [], function $$8(group){var self = $$8.$$s == null ? this : $$8.$$s, $ret_or_1 = nil;\n\n              \n              if (group == null) group = nil;\n              if ($eqeqeq($$$('Proc'), ($ret_or_1 = group))) {\n                \n                switch (group.$arity()) {\n                  case 0:\n                  case -1:\n                    return $send(self, 'instance_exec', [], group.$to_proc())\n                  case 1:\n                    return group.$call(self)\n                  default:\n                    return nil\n                }\n              } else if ($eqeqeq($Class, $ret_or_1)) {\n                return group.$new().$activate(self)\n              } else {\n                return group.$activate(self)\n              };}, {$$s: self})\n          };\n          return self;\n        });\n        \n        $def(self, '$preprocessor', function $$preprocessor($a) {\n          var block = $$preprocessor.$$p || nil, $post_args, args, self = this;\n\n          $$preprocessor.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_document_processor', [\"preprocessor\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$preprocessors?', function $Registry_preprocessors$ques$9() {\n          var self = this;\n\n          return self.preprocessor_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$preprocessors', $return_ivar(\"preprocessor_extensions\"));\n        \n        $def(self, '$tree_processor', function $$tree_processor($a) {\n          var block = $$tree_processor.$$p || nil, $post_args, args, self = this;\n\n          $$tree_processor.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_document_processor', [\"tree_processor\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$tree_processors?', function $Registry_tree_processors$ques$10() {\n          var self = this;\n\n          return self.tree_processor_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$tree_processors', $return_ivar(\"tree_processor_extensions\"));\n        $alias(self, \"treeprocessor\", \"tree_processor\");\n        $alias(self, \"treeprocessors?\", \"tree_processors?\");\n        $alias(self, \"treeprocessors\", \"tree_processors\");\n        \n        $def(self, '$postprocessor', function $$postprocessor($a) {\n          var block = $$postprocessor.$$p || nil, $post_args, args, self = this;\n\n          $$postprocessor.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_document_processor', [\"postprocessor\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$postprocessors?', function $Registry_postprocessors$ques$11() {\n          var self = this;\n\n          return self.postprocessor_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$postprocessors', $return_ivar(\"postprocessor_extensions\"));\n        \n        $def(self, '$include_processor', function $$include_processor($a) {\n          var block = $$include_processor.$$p || nil, $post_args, args, self = this;\n\n          $$include_processor.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_document_processor', [\"include_processor\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$include_processors?', function $Registry_include_processors$ques$12() {\n          var self = this;\n\n          return self.include_processor_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$include_processors', $return_ivar(\"include_processor_extensions\"));\n        \n        $def(self, '$docinfo_processor', function $$docinfo_processor($a) {\n          var block = $$docinfo_processor.$$p || nil, $post_args, args, self = this;\n\n          $$docinfo_processor.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_document_processor', [\"docinfo_processor\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$docinfo_processors?', function $Registry_docinfo_processors$ques$13(location) {\n          var self = this;\n\n          \n          if (location == null) location = nil;\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'any?', [], function $$14(ext){\n                \n                if (ext == null) ext = nil;\n                return ext.$config()['$[]'](\"location\")['$=='](location);})\n            } else {\n              return true\n            }\n          } else {\n            return false\n          };\n        }, -1);\n        \n        $def(self, '$docinfo_processors', function $$docinfo_processors(location) {\n          var self = this;\n\n          \n          if (location == null) location = nil;\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'select', [], function $$15(ext){\n                \n                if (ext == null) ext = nil;\n                return ext.$config()['$[]'](\"location\")['$=='](location);})\n            } else {\n              return self.docinfo_processor_extensions\n            }\n          } else {\n            return nil\n          };\n        }, -1);\n        \n        $def(self, '$block', function $$block($a) {\n          var block = $$block.$$p || nil, $post_args, args, self = this;\n\n          $$block.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_syntax_processor', [\"block\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$blocks?', function $Registry_blocks$ques$16() {\n          var self = this;\n\n          return self.block_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$registered_for_block?', function $Registry_registered_for_block$ques$17(name, context) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_extensions['$[]'](name.$to_sym())))) {\n            if ($truthy(ext.$config()['$[]'](\"contexts\")['$include?'](context))) {\n              return ext\n            } else {\n              return false\n            }\n          } else {\n            return false\n          }\n        });\n        \n        $def(self, '$find_block_extension', function $$find_block_extension(name) {\n          var self = this;\n\n          return self.block_extensions['$[]'](name.$to_sym())\n        });\n        \n        $def(self, '$block_macro', function $$block_macro($a) {\n          var block = $$block_macro.$$p || nil, $post_args, args, self = this;\n\n          $$block_macro.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_syntax_processor', [\"block_macro\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$block_macros?', function $Registry_block_macros$ques$18() {\n          var self = this;\n\n          return self.block_macro_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$registered_for_block_macro?', function $Registry_registered_for_block_macro$ques$19(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        });\n        \n        $def(self, '$find_block_macro_extension', function $$find_block_macro_extension(name) {\n          var self = this;\n\n          return self.block_macro_extensions['$[]'](name.$to_sym())\n        });\n        \n        $def(self, '$inline_macro', function $$inline_macro($a) {\n          var block = $$inline_macro.$$p || nil, $post_args, args, self = this;\n\n          $$inline_macro.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          return $send(self, 'add_syntax_processor', [\"inline_macro\", args], block.$to_proc());\n        }, -1);\n        \n        $def(self, '$inline_macros?', function $Registry_inline_macros$ques$20() {\n          var self = this;\n\n          return self.inline_macro_extensions['$!']()['$!']()\n        });\n        \n        $def(self, '$registered_for_inline_macro?', function $Registry_registered_for_inline_macro$ques$21(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.inline_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        });\n        \n        $def(self, '$find_inline_macro_extension', function $$find_inline_macro_extension(name) {\n          var self = this;\n\n          return self.inline_macro_extensions['$[]'](name.$to_sym())\n        });\n        \n        $def(self, '$inline_macros', function $$inline_macros() {\n          var self = this;\n\n          return self.inline_macro_extensions.$values()\n        });\n        \n        $def(self, '$prefer', function $$prefer($a) {\n          var block = $$prefer.$$p || nil, $post_args, args, self = this, extension = nil, arg0 = nil, extensions_store = nil;\n\n          $$prefer.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          extension = ($eqeqeq($$('ProcessorExtension'), (arg0 = args.$shift())) ? (arg0) : ($send(self, 'send', [arg0].concat($to_a(args)), block.$to_proc())));\n          extensions_store = self.$instance_variable_get((((\"@\") + (extension.$kind())) + \"_extensions\").$to_sym());\n          extensions_store.$unshift(extensions_store.$delete(extension));\n          return extension;\n        }, -1);\n        self.$private();\n        \n        $def(self, '$add_document_processor', function $$add_document_processor(kind, args) {\n          var block = $$add_document_processor.$$p || nil, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, $ret_or_1 = nil, config = nil, processor = nil, extension = nil, processor_class = nil, processor_instance = nil;\n\n          $$add_document_processor.$$p = null;\n          \n          ;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], function $$22(it){\n            \n            if (it == null) it = nil;\n            return it.$capitalize();}).$join().$to_sym();\n          kind_class = $$('Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil)) ? ($$$($$$('AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false)) : (nil));\n          kind_store = ($truthy(($ret_or_1 = self.$instance_variable_get((((\"@\") + (kind)) + \"_extensions\").$to_sym()))) ? ($ret_or_1) : (self.$instance_variable_set((((\"@\") + (kind)) + \"_extensions\").$to_sym(), [])));\n          if ((block !== nil)) {\n            \n            config = self.$resolve_args(args, 1);\n            (processor = kind_class.$new(config)).$singleton_class().$enable_dsl();\n            if ($eqeq(block.$arity(), 0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if (!$truthy(processor['$process_block_given?']())) {\n              self.$raise($$$('NoMethodError'), \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location().$join(\":\")))\n            };\n            processor.$freeze();\n            extension = $$('ProcessorExtension').$new(kind, processor);\n          } else {\n            \n            $c = self.$resolve_args(args, 2), $b = $to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            if ($truthy((processor_class = $$('Helpers').$resolve_class(processor)))) {\n              \n              if (!($truthy($rb_lt(processor_class, kind_class)) || (($truthy(kind_java_class) && ($truthy($rb_lt(processor_class, kind_java_class))))))) {\n                self.$raise($$$('ArgumentError'), \"Invalid type for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance = processor_class.$new(config);\n              processor_instance.$freeze();\n              extension = $$('ProcessorExtension').$new(kind, processor_instance);\n            } else if (($eqeqeq(kind_class, processor) || (($truthy(kind_java_class) && ($eqeqeq(kind_java_class, processor)))))) {\n              \n              processor.$update_config(config);\n              processor.$freeze();\n              extension = $$('ProcessorExtension').$new(kind, processor);\n            } else {\n              self.$raise($$$('ArgumentError'), \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          };\n          if ($eqeq(extension.$config()['$[]'](\"position\"), \">>\")) {\n            \n            kind_store.$unshift(extension);\n          } else {\n            \n            kind_store['$<<'](extension);\n          };\n          return extension;\n        });\n        \n        $def(self, '$add_syntax_processor', function $$add_syntax_processor(kind, args) {\n          var block = $$add_syntax_processor.$$p || nil, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, $ret_or_1 = nil, name = nil, config = nil, processor = nil, processor_class = nil, processor_instance = nil;\n\n          $$add_syntax_processor.$$p = null;\n          \n          ;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], function $$23(it){\n            \n            if (it == null) it = nil;\n            return it.$capitalize();})['$<<'](\"Processor\").$join().$to_sym();\n          kind_class = $$('Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil)) ? ($$$($$$('AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false)) : (nil));\n          kind_store = ($truthy(($ret_or_1 = self.$instance_variable_get((((\"@\") + (kind)) + \"_extensions\").$to_sym()))) ? ($ret_or_1) : (self.$instance_variable_set((((\"@\") + (kind)) + \"_extensions\").$to_sym(), $hash2([], {}))));\n          if ((block !== nil)) {\n            \n            $c = self.$resolve_args(args, 2), $b = $to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            (processor = kind_class.$new(self.$as_symbol(name), config)).$singleton_class().$enable_dsl();\n            if ($eqeq(block.$arity(), 0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if (!$truthy((name = self.$as_symbol(processor.$name())))) {\n              self.$raise($$$('ArgumentError'), \"No name specified for \" + (kind_name) + \" extension at \" + (block.$source_location().$join(\":\")))\n            };\n            if (!$truthy(processor['$process_block_given?']())) {\n              self.$raise($$$('NoMethodError'), \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location().$join(\":\")))\n            };\n            processor.$freeze();\n            return ($b = [name, $$('ProcessorExtension').$new(kind, processor)], $send(kind_store, '[]=', $b), $b[$b.length - 1]);\n          } else {\n            \n            $c = self.$resolve_args(args, 3), $b = $to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (config = ($b[2] == null ? nil : $b[2])), $c;\n            if ($truthy((processor_class = $$('Helpers').$resolve_class(processor)))) {\n              \n              if (!($truthy($rb_lt(processor_class, kind_class)) || (($truthy(kind_java_class) && ($truthy($rb_lt(processor_class, kind_java_class))))))) {\n                self.$raise($$$('ArgumentError'), \"Class specified for \" + (kind_name) + \" extension does not inherit from \" + (kind_class) + \": \" + (processor))\n              };\n              processor_instance = processor_class.$new(self.$as_symbol(name), config);\n              if (!$truthy((name = self.$as_symbol(processor_instance.$name())))) {\n                self.$raise($$$('ArgumentError'), \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance.$freeze();\n              return ($b = [name, $$('ProcessorExtension').$new(kind, processor_instance)], $send(kind_store, '[]=', $b), $b[$b.length - 1]);\n            } else if (($eqeqeq(kind_class, processor) || (($truthy(kind_java_class) && ($eqeqeq(kind_java_class, processor)))))) {\n              \n              processor.$update_config(config);\n              if (!$truthy((name = ($truthy(name) ? (($b = [self.$as_symbol(name)], $send(processor, 'name=', $b), $b[$b.length - 1])) : (self.$as_symbol(processor.$name())))))) {\n                self.$raise($$$('ArgumentError'), \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor.$freeze();\n              return ($b = [name, $$('ProcessorExtension').$new(kind, processor)], $send(kind_store, '[]=', $b), $b[$b.length - 1]);\n            } else {\n              return self.$raise($$$('ArgumentError'), \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          };\n        });\n        \n        $def(self, '$reset', function $$reset() {\n          var self = this;\n\n          \n          self.preprocessor_extensions = (self.tree_processor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = (self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil)))))));\n          return (self.document = nil);\n        });\n        \n        $def(self, '$resolve_args', function $$resolve_args(args, expect) {\n          var opts = nil, missing = nil;\n\n          \n          opts = ($eqeqeq($$$('Hash'), args['$[]'](-1)) ? (args.$pop()) : ($hash2([], {})));\n          if ($eqeq(expect, 1)) {\n            return opts\n          };\n          if ($truthy($rb_gt((missing = $rb_minus($rb_minus(expect, 1), args.$size())), 0))) {\n            args = $rb_plus(args, $$$('Array').$new(missing))\n          } else if ($truthy($rb_lt(missing, 0))) {\n            args.$pop(missing['$-@']())\n          };\n          args['$<<'](opts);\n          return args;\n        });\n        return $def(self, '$as_symbol', function $$as_symbol(name) {\n          \n          if ($truthy(name)) {\n            return name.$to_sym()\n          } else {\n            return nil\n          }\n        });\n      })($nesting[0], null, $nesting);\n      return (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        \n        \n        $def(self, '$generate_name', function $$generate_name() {\n          var self = this;\n\n          return \"extgrp\" + (self.$next_auto_id())\n        });\n        \n        $def(self, '$next_auto_id', function $$next_auto_id() {\n          var self = this, $ret_or_1 = nil;\n          if (self.auto_id == null) self.auto_id = nil;\n\n          \n          self.auto_id = ($truthy(($ret_or_1 = self.auto_id)) ? ($ret_or_1) : (-1));\n          return (self.auto_id = $rb_plus(self.auto_id, 1));\n        });\n        \n        $def(self, '$groups', function $$groups() {\n          var self = this, $ret_or_1 = nil;\n          if (self.groups == null) self.groups = nil;\n\n          return (self.groups = ($truthy(($ret_or_1 = self.groups)) ? ($ret_or_1) : ($hash2([], {}))))\n        });\n        \n        $def(self, '$create', function $$create(name) {\n          var block = $$create.$$p || nil, self = this, $ret_or_1 = nil;\n\n          $$create.$$p = null;\n          \n          ;\n          if (name == null) name = nil;\n          if ((block !== nil)) {\n            return $$('Registry').$new($hash(($truthy(($ret_or_1 = name)) ? ($ret_or_1) : (self.$generate_name())), block))\n          } else {\n            return $$('Registry').$new()\n          };\n        }, -1);\n        \n        $def(self, '$register', function $$register($a) {\n          var block = $$register.$$p || nil, $post_args, args, $b, self = this, argc = nil, resolved_group = nil, group = nil, $ret_or_1 = nil, name = nil;\n\n          $$register.$$p = null;\n          \n          ;\n          $post_args = $slice(arguments);\n          args = $post_args;\n          argc = args.$size();\n          if ((block !== nil)) {\n            resolved_group = block\n          } else if ($truthy((group = args.$pop()))) {\n            resolved_group = ($truthy(($ret_or_1 = $$('Helpers').$resolve_class(group))) ? ($ret_or_1) : (group))\n          } else {\n            self.$raise($$$('ArgumentError'), \"Extension group to register not specified\")\n          };\n          name = ($truthy(($ret_or_1 = args.$pop())) ? ($ret_or_1) : (self.$generate_name()));\n          if (!$truthy(args['$empty?']())) {\n            self.$raise($$$('ArgumentError'), \"Wrong number of arguments (\" + (argc) + \" for 1..2)\")\n          };\n          return ($b = [name.$to_sym(), resolved_group], $send(self.$groups(), '[]=', $b), $b[$b.length - 1]);\n        }, -1);\n        \n        $def(self, '$unregister_all', function $$unregister_all() {\n          var self = this;\n\n          \n          self.groups = $hash2([], {});\n          return nil;\n        });\n        return $def(self, '$unregister', function $$unregister($a) {\n          var $post_args, names, self = this;\n\n          \n          $post_args = $slice(arguments);\n          names = $post_args;\n          $send(names, 'each_with_object', [self.$groups()], function $$24(group, catalog){\n            \n            if (group == null) group = nil;\n            if (catalog == null) catalog = nil;\n            return catalog.$delete(group.$to_sym());});\n          return nil;\n        }, -1);\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/stylesheet\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('rstrip,read,join');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $proto = self.$$prototype;\n\n      $proto.primary_stylesheet_data = nil;\n      return $def(self, '$primary_stylesheet_data', function $$primary_stylesheet_data() {\n        var self = this, $ret_or_1 = nil;\n\n        return (self.primary_stylesheet_data = ($truthy(($ret_or_1 = self.primary_stylesheet_data)) ? ($ret_or_1) : ($$$('IO').$read($$$('File').$join(\"css\", \"asciidoctor.css\")).$rstrip())))\n      })\n    })($nesting[0], null)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/document\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Document');\n\n      \n      return $def(self, '$fill_datetime_attributes', function $$fill_datetime_attributes(attrs, input_mtime) {\n        \n        \n      var $truthy = Opal.truthy\n      var $falsy = Opal.falsy\n      var nil = Opal.nil\n      var utc_offset\n      var source_date_epoch\n      var localdate\n      var localyear\n      var localtime\n      var localdatetime\n      var docdate\n      var doctime\n\n      var getYear = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCFullYear() : time.getFullYear()\n      }\n      var getMonth = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCMonth() : time.getMonth()\n      }\n      var getDay = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCDate() : time.getDate()\n      }\n      var getHours = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCHours() : time.getHours()\n      }\n\n      var now = new Date()\n      // See https://reproducible-builds.org/specs/source-date-epoch/\n      if (Opal.const_get_qualified('::', 'ENV')['$key?']('SOURCE_DATE_EPOCH')) {\n        now.setTime(parseInt(Opal.const_get_qualified('::', 'ENV')['$[]']('SOURCE_DATE_EPOCH')) * 1000)\n        source_date_epoch = now\n        utc_offset = 0  // utc\n      } else {\n        utc_offset = -now.getTimezoneOffset() / 60 // local date\n      }\n      // localdate and localyear\n      if ($truthy((localdate = attrs['$[]']('localdate')))) {\n        if ($falsy(localyear = attrs['$[]']('localyear'))) {\n          localyear = localdate.indexOf('-') === 4 ? localdate.substring(0, 4) : nil\n          attrs['$[]=']('localyear', localyear)\n        }\n      } else {\n        var now_year = getYear(now, utc_offset).toString()\n        var now_month = ('0' + (getMonth(now, utc_offset) + 1)).slice(-2)\n        var now_day = ('0' + getDay(now, utc_offset)).slice(-2)\n        localdate = now_year + '-' + now_month + '-' + now_day\n        attrs['$[]=']('localdate', localdate)\n        localyear = now_year\n        attrs['$[]=']('localyear', now_year)\n      }\n      // localtime\n      if ($falsy((localtime = attrs['$[]']('localtime')))) {\n        var hours = ('0' + (getHours(now, utc_offset))).slice(-2)\n        var minutes = ('0' + (now.getMinutes())).slice(-2)\n        var seconds = ('0' + (now.getSeconds())).slice(-2)\n        var utc_offset_format\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        localtime = hours + ':' + minutes + ':' + seconds + ' ' + utc_offset_format\n        attrs['$[]=']('localtime', localtime)\n      }\n      // localdatetime\n      if ($falsy((localdatetime = attrs['$[]']('localdatetime')))) {\n        localdatetime = localdate + ' ' + localtime\n        attrs['$[]=']('localdatetime', localdatetime)\n      }\n\n      // docdate, doctime and docdatetime should default to localdate, localtime and localdatetime if not otherwise set\n      if ($truthy(source_date_epoch)) {\n        input_mtime = source_date_epoch\n      } else if ($truthy(input_mtime)) {\n        utc_offset = -input_mtime.getTimezoneOffset() / 60\n      } else {\n        input_mtime = now\n      }\n\n      // docdate and docyear\n      if ($truthy(docdate = attrs['$[]']('docdate'))) {\n        attrs['$[]=']('docyear', docdate.indexOf('-') === 4 ? docdate.substring(0, 4) : nil)\n      } else {\n        var mtime_year = getYear(input_mtime, utc_offset).toString()\n        var mtime_month = ('0' + (getMonth(input_mtime, utc_offset) + 1)).slice(-2)\n        var mtime_day = ('0' + (getDay(input_mtime, utc_offset))).slice(-2)\n        docdate = mtime_year + '-' + mtime_month + '-' + mtime_day\n        attrs['$[]=']('docdate', docdate)\n        if ($falsy(attrs['$[]']('docyear'))) {\n          attrs['$[]=']('docyear', mtime_year)\n        }\n      }\n      // doctime\n      if ($falsy(doctime = attrs['$[]']('doctime'))) {\n        var mtime_hours = ('0' + (getHours(input_mtime, utc_offset))).slice(-2)\n        var mtime_minutes = ('0' + (input_mtime.getMinutes())).slice(-2)\n        var mtime_seconds = ('0' + (input_mtime.getSeconds())).slice(-2)\n        var utc_offset_format\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        doctime = mtime_hours + ':' + mtime_minutes + ':' + mtime_seconds + ' ' + utc_offset_format\n        attrs['$[]=']('doctime', doctime)\n      }\n      // docdatetime\n      if ($falsy(attrs['$[]']('docdatetime'))) {\n        attrs['$[]=']('docdatetime', docdate + ' ' + doctime)\n      }\n      return nil\n    \n      })\n    })($nesting[0], $$('AbstractBlock'))\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/substitutors\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base) {\n      var self = $module($base, 'Substitutors');\n\n      \n      return $def(self, '$sub_placeholder', function $$sub_placeholder(format_string, replacement) {\n        \n        return format_string.replace('%s', replacement);\n      })\n    })($nesting[0])\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/parser\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $defs = Opal.defs, $nesting = [], nil = Opal.nil;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $super) {\n      var self = $klass($base, $super, 'Parser');\n\n      \n      if ($truthy(String.prototype.repeat)) {\n        return $defs(self, '$uniform?', function $Parser_uniform$ques$1(str, chr, len) {\n          \n          return chr.repeat(len) === str;\n        })\n      } else {\n        return $defs(self, '$uniform?', function $Parser_uniform$ques$2(str, chr, len) {\n          \n          return Array.apply(null, { length: len }).map(function () { return chr }).join('') === str;\n        })\n      }\n    })($nesting[0], null)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('key?,registry,[],include?,include,empty?,debug,logger,join,keys');\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);\n\n        return $def(self, '$for', function $Factory_for$1(name) {\n          var self = this;\n\n          if ($truthy(self.$registry()['$key?'](name))) {\n            return self.$registry()['$[]'](name)\n          } else {\n            \n            if (!$truthy(self['$include?']($$('Logging')))) {\n              self.$include($$('Logging'))\n            };\n            if ($truthy(self.$registry()['$empty?']())) {\n              self.$logger().$debug(\"no syntax highlighter available, functionality disabled.\")\n            } else {\n              self.$logger().$debug(\"syntax highlighter named '\" + (name) + \"' is not available, must be one of: '\" + (self.$registry().$keys().$join(\"', '\")) + \"'.\")\n            };\n            return nil;\n          }\n        })\n      })($nesting[0], $nesting)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/asciidoctor_ext\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var self = Opal.top, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  self.$require(\"asciidoctor/js/asciidoctor_ext/stylesheet\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/document\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/substitutors\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/parser\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\");\n  \n// Load specific runtime\nself.$require(\"asciidoctor/js/asciidoctor_ext/browser\");\n;\n};\n\nOpal.modules[\"asciidoctor/js/opal_ext/logger\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $nesting = [], nil = Opal.nil;\n\n  Opal.add_stubs('chr,rjust,message_as_string,<,write,call,[]');\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;\n\n    $proto.level = $proto.progname = $proto.pipe = $proto.formatter = nil;\n    \n    (function($base, $super) {\n      var self = $klass($base, $super, 'Formatter');\n\n      \n      return $def(self, '$call', function $$call(severity, time, progname, msg) {\n        var self = this, time_format = nil;\n\n        \n        time_format = time.getFullYear() + '-' + ('0'+(time.getMonth()+1)).slice(-2) + '-' + ('0'+time.getDate()).slice(-2) + 'T' + ('0'+time.getHours()).slice(-2) + ':' + ('0'+time.getMinutes()).slice(-2) + ':' + ('0'+time.getSeconds()).slice(-2) + '.' + ('00' + new Date().getMilliseconds() * 1000).slice(-6);\n        return \"\" + (severity.$chr()) + \", [\" + (time_format) + \"] \" + (severity.$rjust(5)) + \" -- \" + (progname) + \": \" + (self.$message_as_string(msg));\n      })\n    })($nesting[0], null);\n    return $def(self, '$add', function $$add(severity, message, progname) {\n      var block = $$add.$$p || nil, self = this, $ret_or_1 = nil;\n\n      $$add.$$p = null;\n      \n      ;\n      if (message == null) message = nil;\n      if (progname == null) progname = nil;\n      if ($truthy($rb_lt((severity = ($truthy(($ret_or_1 = severity)) ? ($ret_or_1) : ($$('UNKNOWN')))), self.level))) {\n        return true\n      };\n      progname = ($truthy(($ret_or_1 = progname)) ? ($ret_or_1) : (self.progname));\n      if (!$truthy(message)) {\n        if ((block !== nil)) {\n          message = Opal.yieldX(block, [])\n        } else {\n          \n          message = progname;\n          progname = self.progname;\n        }\n      };\n      self.pipe.$write(self.formatter.$call(($truthy(($ret_or_1 = $$('SEVERITY_LABELS')['$[]'](severity))) ? ($ret_or_1) : (\"ANY\")), new Date(), progname, message));\n      return true;\n    }, -2);\n  })($nesting[0], null, $nesting)\n};\n\nOpal.modules[\"asciidoctor/js/postscript\"] = function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var self = Opal.top, nil = Opal.nil;\n\n  Opal.add_stubs('require');\n  \n  self.$require(\"asciidoctor/converter/composite\");\n  self.$require(\"asciidoctor/converter/html5\");\n  self.$require(\"asciidoctor/extensions\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext\");\n  return self.$require(\"asciidoctor/js/opal_ext/logger\");\n};\n\nOpal.queue(function(Opal) {/* Generated by Opal 1.7.3 */\n  \"use strict\";\n  var $module = Opal.module, $const_set = Opal.const_set, $send = Opal.send, $to_ary = Opal.to_ary, $defs = Opal.defs, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $regexp = Opal.regexp, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;\n\n  Opal.add_stubs('require,==,to_h,sort,map,constants,const_get,downcase,to_s,<=>,upcase,[],values,new,attr_reader,instance_variable_set,send,singleton_class,<<,define,dirname,absolute_path,join,home,pwd,to_set,tap,each,chr,each_key,[]=,slice,length,-,merge,default=,drop,insert');\n  \n  self.$require(\"set\");\n  self.$require(\"asciidoctor/js\");\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $ret_or_1 = nil;\n\n    \n    $const_set($nesting[0], 'RUBY_ENGINE_OPAL', $const_set($nesting[0], 'RUBY_ENGINE', $$$('RUBY_ENGINE'))['$=='](\"opal\"));\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SafeMode');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      $const_set($nesting[0], 'UNSAFE', 0);\n      $const_set($nesting[0], 'SAFE', 1);\n      $const_set($nesting[0], 'SERVER', 10);\n      $const_set($nesting[0], 'SECURE', 20);\n      self.names_by_value = $send($send(self.$constants(false), 'map', [], function $SafeMode$1(sym){var self = $SafeMode$1.$$s == null ? this : $SafeMode$1.$$s;\n\n        \n        if (sym == null) sym = nil;\n        return [self.$const_get(sym), sym.$to_s().$downcase()];}, {$$s: self}), 'sort', [], function $SafeMode$2($mlhs_tmp1, $mlhs_tmp2){var $a, $b, a = nil, b = nil;\n\n        \n        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;\n        if ($mlhs_tmp2 == null) $mlhs_tmp2 = nil;\n        $b = $mlhs_tmp1, $a = $to_ary($b), (a = ($a[0] == null ? nil : $a[0])), $b;\n        $b = $mlhs_tmp2, $a = $to_ary($b), (b = ($a[0] == null ? nil : $a[0])), $b;\n        return a['$<=>'](b);}, {$$has_top_level_mlhs_arg: true}).$to_h();\n      $defs(self, '$value_for_name', function $$value_for_name(name) {\n        var self = this;\n\n        return self.$const_get(name.$upcase(), false)\n      });\n      $defs(self, '$name_for_value', function $$name_for_value(value) {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value['$[]'](value)\n      });\n      return $defs(self, '$names', function $$names() {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value.$values()\n      });\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Compliance');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      self.keys = $$$('Set').$new();\n      (function(self, $parent_nesting) {\n        \n        \n        self.$attr_reader(\"keys\");\n        return $def(self, '$define', function $$define(key, value) {\n          var self = this;\n          if (self.keys == null) self.keys = nil;\n\n          \n          self.$instance_variable_set(\"@\" + (key), value);\n          self.$singleton_class().$send(\"attr_accessor\", key);\n          self.keys['$<<'](key);\n          return nil;\n        });\n      })(Opal.get_singleton_class(self), $nesting);\n      self.$define(\"block_terminates_paragraph\", true);\n      self.$define(\"strict_verbatim_paragraphs\", true);\n      self.$define(\"underline_style_section_titles\", true);\n      self.$define(\"unwrap_standalone_preamble\", true);\n      self.$define(\"attribute_missing\", \"skip\");\n      self.$define(\"attribute_undefined\", \"drop-line\");\n      self.$define(\"shorthand_property_syntax\", true);\n      self.$define(\"natural_xrefs\", true);\n      self.$define(\"unique_id_start_index\", 2);\n      return self.$define(\"markdown_syntax\", true);\n    })($nesting[0], $nesting);\n    if (!$truthy((($a = $$('ROOT_DIR', 'skip_raise')) ? 'constant' : nil))) {\n      $const_set($nesting[0], 'ROOT_DIR', $$$('File').$dirname($$$('File').$absolute_path(\".\")))\n    };\n    $const_set($nesting[0], 'LIB_DIR', $$$('File').$join($$('ROOT_DIR'), \"lib\"));\n    $const_set($nesting[0], 'DATA_DIR', $$$('File').$join($$('ROOT_DIR'), \"data\"));\n    $const_set($nesting[0], 'USER_HOME', (function() { try {\n      return $$$('Dir').$home()\n    } catch ($err) {\n      if (Opal.rescue($err, [$$('StandardError')])) {\n        try {\n          \n          if ($truthy(($ret_or_1 = $$$('ENV')['$[]'](\"HOME\")))) {\n            return $ret_or_1\n          } else {\n            return $$$('Dir').$pwd()\n          };\n        } finally { Opal.pop_exception(); }\n      } else { throw $err; }\n    }})());\n    $const_set($nesting[0], 'LF', \"\\n\");\n    $const_set($nesting[0], 'NULL', \"\\x00\");\n    $const_set($nesting[0], 'TAB', \"\\t\");\n    $const_set($nesting[0], 'MAX_INT', 9007199254740991);\n    $const_set($nesting[0], 'UTF_8', $$$($$$('Encoding'), 'UTF_8'));\n    $const_set($nesting[0], 'BOM_BYTES_UTF_8', [239, 187, 191]);\n    $const_set($nesting[0], 'BOM_BYTES_UTF_16LE', [255, 254]);\n    $const_set($nesting[0], 'BOM_BYTES_UTF_16BE', [254, 255]);\n    $const_set($nesting[0], 'FILE_READ_MODE', ($truthy($$('RUBY_ENGINE_OPAL')) ? (\"r\") : (\"rb:utf-8:utf-8\")));\n    $const_set($nesting[0], 'URI_READ_MODE', $$('FILE_READ_MODE'));\n    $const_set($nesting[0], 'FILE_WRITE_MODE', ($truthy($$('RUBY_ENGINE_OPAL')) ? (\"w\") : (\"w:utf-8\")));\n    $const_set($nesting[0], 'DEFAULT_DOCTYPE', \"article\");\n    $const_set($nesting[0], 'DEFAULT_BACKEND', \"html5\");\n    $const_set($nesting[0], 'DEFAULT_STYLESHEET_KEYS', [\"\", \"DEFAULT\"].$to_set());\n    $const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n    $const_set($nesting[0], 'BACKEND_ALIASES', $hash2([\"html\", \"docbook\"], {\"html\": \"html5\", \"docbook\": \"docbook5\"}));\n    $const_set($nesting[0], 'DEFAULT_PAGE_WIDTHS', $hash2([\"docbook\"], {\"docbook\": 425}));\n    $const_set($nesting[0], 'DEFAULT_EXTENSIONS', $hash2([\"html\", \"docbook\", \"pdf\", \"epub\", \"manpage\", \"asciidoc\"], {\"html\": \".html\", \"docbook\": \".xml\", \"pdf\": \".pdf\", \"epub\": \".epub\", \"manpage\": \".man\", \"asciidoc\": \".adoc\"}));\n    $const_set($nesting[0], 'ASCIIDOC_EXTENSIONS', $hash2([\".adoc\", \".asciidoc\", \".asc\", \".ad\", \".txt\"], {\".adoc\": true, \".asciidoc\": true, \".asc\": true, \".ad\": true, \".txt\": true}));\n    $const_set($nesting[0], 'SETEXT_SECTION_LEVELS', $hash2([\"=\", \"-\", \"~\", \"^\", \"+\"], {\"=\": 0, \"-\": 1, \"~\": 2, \"^\": 3, \"+\": 4}));\n    $const_set($nesting[0], 'ADMONITION_STYLES', [\"NOTE\", \"TIP\", \"IMPORTANT\", \"WARNING\", \"CAUTION\"].$to_set());\n    $const_set($nesting[0], 'ADMONITION_STYLE_HEADS', $send($$$('Set').$new(), 'tap', [], function $Asciidoctor$3(accum){\n      \n      if (accum == null) accum = nil;\n      return $send($$('ADMONITION_STYLES'), 'each', [], function $$4(s){\n        \n        if (s == null) s = nil;\n        return accum['$<<'](s.$chr());});}));\n    $const_set($nesting[0], 'PARAGRAPH_STYLES', [\"comment\", \"example\", \"literal\", \"listing\", \"normal\", \"open\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"abstract\", \"partintro\"].$to_set());\n    $const_set($nesting[0], 'VERBATIM_STYLES', [\"literal\", \"listing\", \"source\", \"verse\"].$to_set());\n    $const_set($nesting[0], 'DELIMITED_BLOCKS', $hash2([\"--\", \"----\", \"....\", \"====\", \"****\", \"____\", \"++++\", \"|===\", \",===\", \":===\", \"!===\", \"////\", \"```\"], {\"--\": [\"open\", [\"comment\", \"example\", \"literal\", \"listing\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"admonition\", \"abstract\", \"partintro\"].$to_set()], \"----\": [\"listing\", [\"literal\", \"source\"].$to_set()], \"....\": [\"literal\", [\"listing\", \"source\"].$to_set()], \"====\": [\"example\", [\"admonition\"].$to_set()], \"****\": [\"sidebar\", $$$('Set').$new()], \"____\": [\"quote\", [\"verse\"].$to_set()], \"++++\": [\"pass\", [\"stem\", \"latexmath\", \"asciimath\"].$to_set()], \"|===\": [\"table\", $$$('Set').$new()], \",===\": [\"table\", $$$('Set').$new()], \":===\": [\"table\", $$$('Set').$new()], \"!===\": [\"table\", $$$('Set').$new()], \"////\": [\"comment\", $$$('Set').$new()], \"```\": [\"fenced_code\", $$$('Set').$new()]}));\n    $const_set($nesting[0], 'DELIMITED_BLOCK_HEADS', $send($hash2([], {}), 'tap', [], function $Asciidoctor$5(accum){\n      \n      if (accum == null) accum = nil;\n      return $send($$('DELIMITED_BLOCKS'), 'each_key', [], function $$6(k){var $b;\n\n        \n        if (k == null) k = nil;\n        return ($b = [k.$slice(0, 2), true], $send(accum, '[]=', $b), $b[$b.length - 1]);});}));\n    $const_set($nesting[0], 'DELIMITED_BLOCK_TAILS', $send($hash2([], {}), 'tap', [], function $Asciidoctor$7(accum){\n      \n      if (accum == null) accum = nil;\n      return $send($$('DELIMITED_BLOCKS'), 'each_key', [], function $$8(k){var $b;\n\n        \n        if (k == null) k = nil;\n        if ($eqeq(k.$length(), 4)) {\n          return ($b = [k, k['$[]']($rb_minus(k.$length(), 1))], $send(accum, '[]=', $b), $b[$b.length - 1])\n        } else {\n          return nil\n        };});}));\n    $const_set($nesting[0], 'CAPTION_ATTRIBUTE_NAMES', $hash2([\"example\", \"figure\", \"listing\", \"table\"], {\"example\": \"example-caption\", \"figure\": \"figure-caption\", \"listing\": \"listing-caption\", \"table\": \"table-caption\"}));\n    $const_set($nesting[0], 'LAYOUT_BREAK_CHARS', $hash2([\"'\", \"<\"], {\"'\": \"thematic_break\", \"<\": \"page_break\"}));\n    $const_set($nesting[0], 'MARKDOWN_THEMATIC_BREAK_CHARS', $hash2([\"-\", \"*\", \"_\"], {\"-\": \"thematic_break\", \"*\": \"thematic_break\", \"_\": \"thematic_break\"}));\n    $const_set($nesting[0], 'HYBRID_LAYOUT_BREAK_CHARS', $$('LAYOUT_BREAK_CHARS').$merge($$('MARKDOWN_THEMATIC_BREAK_CHARS')));\n    $const_set($nesting[0], 'NESTABLE_LIST_CONTEXTS', [\"ulist\", \"olist\", \"dlist\"]);\n    $const_set($nesting[0], 'ORDERED_LIST_STYLES', [\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"]);\n    $const_set($nesting[0], 'ORDERED_LIST_KEYWORDS', $hash2([\"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"loweralpha\": \"a\", \"lowerroman\": \"i\", \"upperalpha\": \"A\", \"upperroman\": \"I\"}));\n    $const_set($nesting[0], 'ATTR_REF_HEAD', \"{\");\n    $const_set($nesting[0], 'LIST_CONTINUATION', \"+\");\n    $const_set($nesting[0], 'HARD_LINE_BREAK', \" +\");\n    $const_set($nesting[0], 'LINE_CONTINUATION', \" \\\\\");\n    $const_set($nesting[0], 'LINE_CONTINUATION_LEGACY', \" +\");\n    $const_set($nesting[0], 'BLOCK_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\[\", \"\\\\]\"]}));\n    $const_set($nesting[0], 'INLINE_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]}));\n    $const_set($nesting[0], 'STEM_TYPE_ALIASES', $hash2([\"latexmath\", \"latex\", \"tex\"], {\"latexmath\": \"latexmath\", \"latex\": \"latexmath\", \"tex\": \"latexmath\"}))['$default='](\"asciimath\");\n    $const_set($nesting[0], 'FONT_AWESOME_VERSION', \"4.7.0\");\n    $const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', \"9.18.3\");\n    $const_set($nesting[0], 'MATHJAX_VERSION', \"2.7.9\");\n    $const_set($nesting[0], 'DEFAULT_ATTRIBUTES', $hash2([\"appendix-caption\", \"appendix-refsig\", \"caution-caption\", \"chapter-refsig\", \"example-caption\", \"figure-caption\", \"important-caption\", \"last-update-label\", \"note-caption\", \"part-refsig\", \"prewrap\", \"sectids\", \"section-refsig\", \"table-caption\", \"tip-caption\", \"toc-placement\", \"toc-title\", \"untitled-label\", \"version-label\", \"warning-caption\"], {\"appendix-caption\": \"Appendix\", \"appendix-refsig\": \"Appendix\", \"caution-caption\": \"Caution\", \"chapter-refsig\": \"Chapter\", \"example-caption\": \"Example\", \"figure-caption\": \"Figure\", \"important-caption\": \"Important\", \"last-update-label\": \"Last updated\", \"note-caption\": \"Note\", \"part-refsig\": \"Part\", \"prewrap\": \"\", \"sectids\": \"\", \"section-refsig\": \"Section\", \"table-caption\": \"Table\", \"tip-caption\": \"Tip\", \"toc-placement\": \"auto\", \"toc-title\": \"Table of Contents\", \"untitled-label\": \"Untitled\", \"version-label\": \"Version\", \"warning-caption\": \"Warning\"}));\n    $const_set($nesting[0], 'FLEXIBLE_ATTRIBUTES', [\"sectnums\"]);\n    $const_set($nesting[0], 'INTRINSIC_ATTRIBUTES', $hash2([\"startsb\", \"endsb\", \"vbar\", \"caret\", \"asterisk\", \"tilde\", \"plus\", \"backslash\", \"backtick\", \"blank\", \"empty\", \"sp\", \"two-colons\", \"two-semicolons\", \"nbsp\", \"deg\", \"zwsp\", \"quot\", \"apos\", \"lsquo\", \"rsquo\", \"ldquo\", \"rdquo\", \"wj\", \"brvbar\", \"pp\", \"cpp\", \"amp\", \"lt\", \"gt\"], {\"startsb\": \"[\", \"endsb\": \"]\", \"vbar\": \"|\", \"caret\": \"^\", \"asterisk\": \"*\", \"tilde\": \"~\", \"plus\": \"&#43;\", \"backslash\": \"\\\\\", \"backtick\": \"`\", \"blank\": \"\", \"empty\": \"\", \"sp\": \" \", \"two-colons\": \"::\", \"two-semicolons\": \";;\", \"nbsp\": \"&#160;\", \"deg\": \"&#176;\", \"zwsp\": \"&#8203;\", \"quot\": \"&#34;\", \"apos\": \"&#39;\", \"lsquo\": \"&#8216;\", \"rsquo\": \"&#8217;\", \"ldquo\": \"&#8220;\", \"rdquo\": \"&#8221;\", \"wj\": \"&#8288;\", \"brvbar\": \"&#166;\", \"pp\": \"&#43;&#43;\", \"cpp\": \"C&#43;&#43;\", \"amp\": \"&\", \"lt\": \"<\", \"gt\": \">\"}));\n    nil;\n    $const_set($nesting[0], 'QUOTE_SUBS', $send($hash2([], {}), 'tap', [], function $Asciidoctor$9(accum){var normal = nil, compat = nil;\n\n      \n      if (accum == null) accum = nil;\n      accum['$[]='](false, (normal = [[\"strong\", \"unconstrained\", $regexp([\"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\*\\\\*(\", $$('CC_ALL'), \"+?)\\\\*\\\\*\"], 'm')], [\"strong\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\*(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)\\\\*(?!\", $$('CG_WORD'), \")\"], 'm')], [\"double\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\"`(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)`\\\"(?!\", $$('CG_WORD'), \")\"], 'm')], [\"single\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:`}])(?:\\\\[([^\\\\]]+)\\\\])?'`(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)`'(?!\", $$('CG_WORD'), \")\"], 'm')], [\"monospaced\", \"unconstrained\", $regexp([\"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?``(\", $$('CC_ALL'), \"+?)``\"], 'm')], [\"monospaced\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:\\\"'`}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)`(?![\", $$('CC_WORD'), \"\\\"'`])\"], 'm')], [\"emphasis\", \"unconstrained\", $regexp([\"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?__(\", $$('CC_ALL'), \"+?)__\"], 'm')], [\"emphasis\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?_(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)_(?!\", $$('CG_WORD'), \")\"], 'm')], [\"mark\", \"unconstrained\", $regexp([\"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?##(\", $$('CC_ALL'), \"+?)##\"], 'm')], [\"mark\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \"&;:}])(?:\\\\[([^\\\\]]+)\\\\])?#(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)#(?!\", $$('CG_WORD'), \")\"], 'm')], [\"superscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?\\^(\\S+?)\\^/], [\"subscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?~(\\S+?)~/]]));\n      accum['$[]='](true, (compat = normal.$drop(0)));\n      compat['$[]='](2, [\"double\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?``(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)''(?!\", $$('CG_WORD'), \")\"], 'm')]);\n      compat['$[]='](3, [\"single\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)'(?!\", $$('CG_WORD'), \")\"], 'm')]);\n      compat['$[]='](4, [\"monospaced\", \"unconstrained\", $regexp([\"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\+\\\\+(\", $$('CC_ALL'), \"+?)\\\\+\\\\+\"], 'm')]);\n      compat['$[]='](5, [\"monospaced\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\+(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)\\\\+(?!\", $$('CG_WORD'), \")\"], 'm')]);\n      return compat.$insert(3, [\"emphasis\", \"constrained\", $regexp([\"(^|[^\", $$('CC_WORD'), \";:}])(?:\\\\[([^\\\\]]+)\\\\])?'(\\\\S|\\\\S\", $$('CC_ALL'), \"*?\\\\S)'(?!\", $$('CG_WORD'), \")\"], 'm')]);}));\n    $const_set($nesting[0], 'REPLACEMENTS', [[/\\\\?\\(C\\)/, \"&#169;\", \"none\"], [/\\\\?\\(R\\)/, \"&#174;\", \"none\"], [/\\\\?\\(TM\\)/, \"&#8482;\", \"none\"], [/(?: |\\n|^|\\\\)--(?: |\\n|$)/, \"&#8201;&#8212;&#8201;\", \"none\"], [$regexp([\"(\", $$('CG_WORD'), \")\\\\\\\\?--(?=\", $$('CG_WORD'), \")\"]), \"&#8212;&#8203;\", \"leading\"], [/\\\\?\\.\\.\\./, \"&#8230;&#8203;\", \"none\"], [/\\\\?`'/, \"&#8217;\", \"none\"], [$regexp([\"(\", $$('CG_ALNUM'), \")\\\\\\\\?'(?=\", $$('CG_ALPHA'), \")\"]), \"&#8217;\", \"leading\"], [/\\\\?-&gt;/, \"&#8594;\", \"none\"], [/\\\\?=&gt;/, \"&#8658;\", \"none\"], [/\\\\?&lt;-/, \"&#8592;\", \"none\"], [/\\\\?&lt;=/, \"&#8656;\", \"none\"], [/\\\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-fA-F][\\da-fA-F][\\da-fA-F]{0,3});)/, \"\", \"bounding\"]]);\n    nil;\n    return nil;\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/core_ext\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/helpers\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/logging\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/rx\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/substitutors\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/version\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_node\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/attribute_list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/callouts\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/converter\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/document\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/inline\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/parser\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/path_resolver\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/reader\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/section\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/stylesheets\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/table\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/writer\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/load\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/convert\");\n  \n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/syntax_highlighter\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/timings\");\n  return self.$require(\"asciidoctor/js/postscript\");;\n});\n\n\n/* global Opal */\n\n/**\n * Convert a JSON to an (Opal) Hash.\n * @private\n */\nconst toHash = function (object) {\n  return object && !object.$$is_hash ? Opal.hash2(Object.keys(object), object) : object\n}\n\n/**\n * Convert an (Opal) Hash to JSON.\n * @private\n */\nconst fromHash = function (hash) {\n  const object = {}\n  if (hash) {\n    const stringMap = hash.$$smap\n    for (const key in stringMap) {\n      const value = stringMap[key]\n      object[key] = value === Opal.nil ? undefined : value\n    }\n    const numericMap = hash.$$map\n    if (numericMap) {\n      const positional = []\n      for (const key in numericMap) {\n        const entry = numericMap[key]\n        const value = entry.value\n        const index = entry.key - 1\n        positional[index] = value === Opal.nil ? undefined : value\n      }\n      if (positional.length > 0) {\n        object.$positional = positional\n      }\n    }\n  }\n  return object\n}\n\nconst fromHashKeys = function (hash) {\n  const object = {}\n  if (hash) {\n    const data = hash.$$keys\n    for (const key in data) {\n      const value = data[key].value\n      object[key.toString()] = value === Opal.nil ? undefined : value\n    }\n  }\n  return object\n}\n\n/**\n * @private\n */\nconst prepareOptions = function (options) {\n  options = toHash(options)\n  if (options) {\n    const converter = options['$[]']('converter')\n    if (converter && converter !== Opal.nil) {\n      options['$[]=']('converter', bridgeConverter(converter))\n    }\n    const attrs = options['$[]']('attributes')\n    if (attrs && typeof attrs === 'object' && attrs.constructor.name === 'Object') {\n      options = options.$dup()\n      options['$[]=']('attributes', toHash(attrs))\n    }\n  }\n  return options\n}\n\nconst bridgeConverter = function (converter) {\n  const buildBackendTraitsFromObject = function (obj) {\n    return Object.assign({},\n      obj.basebackend ? { basebackend: obj.basebackend } : {},\n      obj.outfilesuffix ? { outfilesuffix: obj.outfilesuffix } : {},\n      obj.filetype ? { filetype: obj.filetype } : {},\n      obj.htmlsyntax ? { htmlsyntax: obj.htmlsyntax } : {},\n      obj.supports_templates ? { supports_templates: obj.supports_templates } : {}\n    )\n  }\n  const assignBackendTraitsToInstance = function (obj, instance) {\n    if (obj.backend_traits) {\n      instance.backend_traits = toHash(obj.backend_traits)\n    } else if (obj.backendTraits) {\n      instance.backend_traits = toHash(obj.backendTraits)\n    } else if (obj.basebackend || obj.outfilesuffix || obj.filetype || obj.htmlsyntax || obj.supports_templates) {\n      instance.backend_traits = toHash(buildBackendTraitsFromObject(obj))\n    }\n  }\n  const bridgeHandlesMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$handles?', 'handles', function () {\n      return true\n    })\n  }\n  const bridgeComposedMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$composed', 'composed')\n  }\n  const bridgeEqEqMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$==', '==', function (other) {\n      return instance === other\n    })\n  }\n  const bridgeSendMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$send', 'send', function (symbol) {\n      const [, ...args] = Array.from(arguments)\n      const func = instance['$' + symbol]\n      if (func) {\n        return func.apply(instance, args)\n      }\n      throw new Error(`undefined method \\`${symbol}\\` for \\`${instance.toString()}\\``)\n    })\n  }\n  const bridgeMethodToInstance = function (obj, instance, methodName, functionName, defaultImplementation) {\n    if (typeof obj[methodName] === 'undefined') {\n      if (typeof obj[functionName] === 'function') {\n        instance[methodName] = obj[functionName]\n      } else if (defaultImplementation) {\n        instance[methodName] = defaultImplementation\n      }\n    }\n  }\n  const addRespondToMethod = function (instance) {\n    if (typeof instance['$respond_to?'] !== 'function') {\n      instance['$respond_to?'] = function (name) {\n        return typeof this[name] === 'function'\n      }\n    }\n  }\n  if (typeof converter === 'function') {\n    // Class\n    const object = initializeClass(ConverterBase, converter.constructor.name, {\n      initialize: function (backend, opts) {\n        const self = this\n        const result = new converter(backend, opts) // eslint-disable-line\n        Object.assign(this, result)\n        assignBackendTraitsToInstance(result, self)\n        const propertyNames = Object.getOwnPropertyNames(converter.prototype)\n        for (let i = 0; i < propertyNames.length; i++) {\n          const propertyName = propertyNames[i]\n          if (propertyName !== 'constructor') {\n            self[propertyName] = result[propertyName]\n          }\n        }\n        if (typeof result.$convert === 'undefined' && typeof result.convert === 'function') {\n          self.$convert = result.convert\n        }\n        bridgeHandlesMethodToInstance(result, self)\n        bridgeComposedMethodToInstance(result, self)\n        addRespondToMethod(self)\n        self.super(backend, opts)\n      }\n    })\n    object.$extend(ConverterBackendTraits)\n    return object\n  }\n  if (typeof converter === 'object') {\n    // Instance\n    if (typeof converter.$convert === 'undefined' && typeof converter.convert === 'function') {\n      converter.$convert = converter.convert\n    }\n    assignBackendTraitsToInstance(converter, converter)\n    if (converter.backend_traits) {\n      // \"extends\" ConverterBackendTraits\n      const converterBackendTraitsFunctionNames = [\n        'basebackend',\n        'filetype',\n        'htmlsyntax',\n        'outfilesuffix',\n        'supports_templates',\n        'supports_templates?',\n        'init_backend_traits',\n        'backend_traits'\n      ]\n      for (const functionName of converterBackendTraitsFunctionNames) {\n        converter['$' + functionName] = ConverterBackendTraits.prototype['$' + functionName]\n      }\n      converter.$$meta = ConverterBackendTraits\n    }\n    bridgeHandlesMethodToInstance(converter, converter)\n    bridgeComposedMethodToInstance(converter, converter)\n    bridgeEqEqMethodToInstance(converter, converter)\n    bridgeSendMethodToInstance(converter, converter)\n    addRespondToMethod(converter)\n    return converter\n  }\n  return converter\n}\n\nfunction initializeClass (superClass, className, functions, defaultFunctions, argProxyFunctions) {\n  const scope = Opal.klass(Opal.Object, superClass, className, function () { })\n  let postConstructFunction\n  let initializeFunction\n  let constructorFunction\n  const defaultFunctionsOverridden = {}\n  for (const functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        const userFunction = functions[functionName]\n        if (functionName === 'postConstruct') {\n          postConstructFunction = userFunction\n        } else if (functionName === 'initialize') {\n          initializeFunction = userFunction\n        } else if (functionName === 'constructor') {\n          constructorFunction = userFunction\n        } else {\n          if (defaultFunctions && Object.prototype.hasOwnProperty.call(defaultFunctions, functionName)) {\n            defaultFunctionsOverridden[functionName] = true\n          }\n          let $function\n          Opal.def(scope, '$' + functionName, ($function = function () {\n            let args\n            if (argProxyFunctions && Object.prototype.hasOwnProperty.call(argProxyFunctions, functionName)) {\n              args = argProxyFunctions[functionName](arguments)\n            } else {\n              args = arguments\n            }\n            // append Ruby block as the final argument\n            const $block = $function.$$p\n            if ($block) {\n              args[args.length] = function () { return Opal.yield1($block) }\n              args.length += 1\n              $function.$$p = null\n            }\n            return userFunction.apply(this, args)\n          }))\n        }\n      }(functionName))\n    }\n  }\n  let initialize\n  if (typeof constructorFunction === 'function') {\n    initialize = function () {\n      const args = Array.from(arguments)\n      for (let i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      args.unshift(null)\n      const result = new (Function.prototype.bind.apply(constructorFunction, args)) // eslint-disable-line\n      Object.assign(this, result)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else if (typeof initializeFunction === 'function') {\n    initialize = function () {\n      const args = Array.from(arguments)\n      for (let i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      initializeFunction.apply(this, args)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else {\n    initialize = function () {\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize))\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  }\n  Opal.def(scope, '$initialize', initialize)\n  let $superFunction\n  Opal.def(scope, 'super', ($superFunction = function (func) {\n    if (typeof func === 'function') {\n      Opal.send(this, Opal.find_super_dispatcher(this, func.name, func))\n    } else {\n      // Bind the initialize function to super();\n      const argumentsList = Array.from(arguments)\n      for (let i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object') {\n          argumentsList[i] = toHash(argumentsList[i])\n        }\n      }\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize), argumentsList)\n    }\n  }))\n  for (const functionName in functions) {\n    $superFunction[functionName] = function () {\n      const argumentsList = Array.from(arguments)\n      for (let i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object' && typeof argumentsList[i].constructor === 'function' && argumentsList[i].constructor.name === 'Object') {\n          argumentsList[i] = toHash(argumentsList[i])\n        }\n      }\n      const self = scope.$$prototype\n      return Opal.send(self, Opal.find_super_dispatcher(self, functionName, self[`$${functionName}`]), argumentsList)\n    }\n  }\n  if (defaultFunctions) {\n    for (const defaultFunctionName in defaultFunctions) {\n      if (Object.prototype.hasOwnProperty.call(defaultFunctions, defaultFunctionName) && !Object.prototype.hasOwnProperty.call(defaultFunctionsOverridden, defaultFunctionName)) {\n        (function (defaultFunctionName) {\n          const defaultFunction = defaultFunctions[defaultFunctionName]\n          Opal.def(scope, '$' + defaultFunctionName, function () {\n            return defaultFunction.apply(this, arguments)\n          })\n        }(defaultFunctionName))\n      }\n    }\n  }\n  return scope\n}\n\n// Asciidoctor API\n\n/**\n * @namespace\n * @description\n * The main application interface (API) for Asciidoctor.\n * This API provides methods to parse AsciiDoc content and convert it to various output formats using built-in or third-party converters.\n *\n * An AsciiDoc document can be as simple as a single line of content,\n * though it more commonly starts with a document header that declares the document title and document attribute definitions.\n * The document header is then followed by zero or more section titles, optionally nested, to organize the paragraphs, blocks, lists, etc. of the document.\n *\n * By default, the processor converts the AsciiDoc document to HTML 5 using a built-in converter.\n * However, this behavior can be changed by specifying a different backend (e.g., +docbook+).\n * A backend is a keyword for an output format (e.g., DocBook).\n * That keyword, in turn, is used to select a converter, which carries out the request to convert the document to that format.\n *\n * @example\n * asciidoctor.convertFile('document.adoc', { 'safe': 'safe' }) // Convert an AsciiDoc file\n *\n * asciidoctor.convert(\"I'm using *Asciidoctor* version {asciidoctor-version}.\", { 'safe': 'safe' }) // Convert an AsciiDoc string\n *\n * const doc = asciidoctor.loadFile('document.adoc', { 'safe': 'safe' }) // Parse an AsciiDoc file into a document object\n *\n * const doc = asciidoctor.load(\"= Document Title\\n\\nfirst paragraph\\n\\nsecond paragraph\", { 'safe': 'safe' }) // Parse an AsciiDoc string into a document object\n */\nconst Asciidoctor = Opal.Asciidoctor.$$class\n\n/**\n * Get Asciidoctor core version number.\n *\n * @returns {string} - the version number of Asciidoctor core.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getCoreVersion = function () {\n  return this.$$const.VERSION\n}\n\n/**\n * Get Asciidoctor.js runtime environment information.\n *\n * @returns {Object} - the runtime environment including the ioModule, the platform, the engine and the framework.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getRuntime = function () {\n  return {\n    ioModule: Opal.const_get_qualified('::', 'JAVASCRIPT_IO_MODULE'),\n    platform: Opal.const_get_qualified('::', 'JAVASCRIPT_PLATFORM'),\n    engine: Opal.const_get_qualified('::', 'JAVASCRIPT_ENGINE'),\n    framework: Opal.const_get_qualified('::', 'JAVASCRIPT_FRAMEWORK')\n  }\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * const input = `= Hello, AsciiDoc!\n * Guillaume Grossetie <ggrossetie@example.com>\n *\n * An introduction to http://asciidoc.org[AsciiDoc].\n *\n * == First Section\n *\n * * item 1\n * * item 2`\n *\n * const html = asciidoctor.convert(input)\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convert = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  const toFile = options && options.to_file\n  if (typeof toFile === 'object' && toFile.constructor.name === 'Writable' && typeof toFile.write === 'function') {\n    toFile['$respond_to?'] = (name) => name === 'write'\n    toFile.$object_id = () => ''\n    toFile.$write = function (data) {\n      this.write(data)\n    }\n  }\n  const opts = prepareOptions(options)\n  const result = this.$convert(input, opts)\n  if (typeof toFile === 'object' && toFile.constructor.name === 'Writable' && typeof toFile.end === 'function') {\n    toFile.end()\n  }\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * const html = asciidoctor.convertFile('./document.adoc')\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convertFile = function (filename, options) {\n  return this.$convert_file(filename, prepareOptions(options))\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document}\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.load = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  return this.$load(input, prepareOptions(options))\n}\n\n/**\n * Parse the contents of the AsciiDoc source file into an {@link Document}\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.loadFile = function (filename, options) {\n  return this.$load_file(filename, prepareOptions(options))\n}\n\n// AbstractBlock API\n\n/**\n * @namespace\n * @extends AbstractNode\n */\nconst AbstractBlock = Opal.Asciidoctor.AbstractBlock\n\n/**\n *  Describes the type of content this block accepts and how it should be converted.\n * @returns {string} - the type of content this block accepts.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getContentModel = function () {\n  const contentModel = this.content_model\n  return contentModel === Opal.nil ? undefined : contentModel\n}\n\n/**\n *  Set the type of content this block accepts. Acceptable values are:\n *  - compound - this block contains other blocks\n *  - simple - this block holds a paragraph of prose that receives normal substitutions\n *  - verbatim - this block holds verbatim text (displayed \"as is\") that receives verbatim substitutions\n *  - raw - this block holds unprocessed content passed directly to the output with no substitutions applied\n *  - empty - this block has no content\n * @param {string} contentModel - type of content, one of: compound, simple, verbatim, raw or empty.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setContentModel = function (contentModel) {\n  this.content_model = contentModel\n}\n\n/**\n * Append a block to this block's list of child blocks.\n * @param {AbstractBlock} block - the block to append\n * @returns {AbstractBlock} - the parent block to which this block was appended.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.append = function (block) {\n  this.$append(block)\n  return this\n}\n\n/**\n * Get the String title of this Block with title substitutions applied\n *\n * The following substitutions are applied to block and section titles:\n *\n * <code>specialcharacters</code>, <code>quotes</code>, <code>replacements</code>, <code>macros</code>, <code>attributes</code> and <code>post_replacements</code>\n *\n * @returns {string} - the converted String title for this Block, or undefined if the title is not set.\n * @example\n * block.title // \"Foo 3^ # {two-colons} Bar(1)\"\n * block.getTitle(); // \"Foo 3^ # :: Bar(1)\"\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getTitle = function () {\n  const title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the String block title.\n *\n * @param {string} title - The block title\n * @returns {string} - the new String title assigned to this Block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setTitle = function (title) {\n  title = typeof title === 'undefined' ? Opal.nil : title\n  return this['$title='](title)\n}\n\n/**\n * Generate and assign caption to block if not already assigned.\n *\n * If the block has a title and a caption prefix is available for this block,\n * then build a caption from this information, assign it a number and store it\n * to the caption attribute on the block.\n *\n * If a caption has already been assigned to this block, do nothing.\n *\n * The parts of a complete caption are: `<prefix> <number>. <title>`\n * This partial caption represents the part the precedes the title.\n *\n * @param {string} value - the String caption to assign to this block or nil to use document attribute.\n * @param {string} captionContext - the String context to use when resolving caption-related attributes.\n * If not provided, the name of the context for this block is used. Only certain contexts allow the caption to be looked up.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.assignCaption = function (value, captionContext) {\n  value = typeof value === 'undefined' ? Opal.nil : value\n  captionContext = typeof captionContext === 'undefined' ? null : captionContext\n  this.$assign_caption(value, captionContext)\n}\n\n/**\n * Convenience method that returns the interpreted title of the Block\n * with the caption prepended.\n * Concatenates the value of this Block's caption instance variable and the\n * return value of this Block's title method. No space is added between the\n * two values. If the Block does not have a caption, the interpreted title is\n * returned.\n *\n * @returns {string} - the converted String title prefixed with the caption, or just the converted String title if no caption is set\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaptionedTitle = function () {\n  return this.$captioned_title()\n}\n\n/**\n * Get the style (block type qualifier) for this block.\n *\n * @returns {string} - the style for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getStyle = function () {\n  const style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Set the style for this block.\n *\n * @param {string} style - Style\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setStyle = function (style) {\n  this.style = style\n}\n\n/**\n * Get the location in the AsciiDoc source where this block begins.\n *\n * @returns {Cursor} - the location in the AsciiDoc source where this block begins\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSourceLocation = function () {\n  const sourceLocation = this.source_location\n  if (sourceLocation === Opal.nil) {\n    return undefined\n  }\n  sourceLocation.getFile = function () {\n    const file = this.file\n    return file === Opal.nil ? undefined : file\n  }\n  sourceLocation.getDirectory = function () {\n    const dir = this.dir\n    return dir === Opal.nil ? undefined : dir\n  }\n  sourceLocation.getPath = function () {\n    const path = this.path\n    return path === Opal.nil ? undefined : path\n  }\n  sourceLocation.getLineNumber = function () {\n    const lineno = this.lineno\n    return lineno === Opal.nil ? undefined : lineno\n  }\n  return sourceLocation\n}\n\n/**\n * Get the caption for this block.\n *\n * @returns {string} - the caption for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaption = function () {\n  const caption = this.$caption()\n  return caption === Opal.nil ? undefined : caption\n}\n\n/**\n * Set the caption for this block.\n *\n * @param {string} caption - Caption\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setCaption = function (caption) {\n  this.caption = typeof caption === 'undefined' ? Opal.nil : caption\n}\n\n/**\n * Get the level of this section or the section level in which this block resides.\n *\n * @returns {number} - the level (Integer) of this section\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLevel = function () {\n  const level = this.level\n  return level === Opal.nil ? undefined : level\n}\n\n/**\n * Get the substitution keywords to be applied to the contents of this block.\n *\n * @returns {Array<string>} - the list of {string} substitution keywords associated with this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSubstitutions = function () {\n  return this.subs\n}\n\n/**\n * Check whether a given substitution keyword is present in the substitutions for this block.\n *\n * @returns {boolean} - whether the substitution is present on this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSubstitution = function (substitution) {\n  return this['$sub?'](substitution)\n}\n\n/**\n * Remove the specified substitution keyword from the list of substitutions for this block.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.removeSubstitution = function (substitution) {\n  this.$remove_sub(substitution)\n}\n\n/**\n * Checks if the {@link AbstractBlock} contains any child blocks.\n *\n * @returns {boolean} - whether the {@link AbstractBlock} has child blocks.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasBlocks = function () {\n  return this.blocks.length > 0\n}\n\n/**\n * Get the list of {@link AbstractBlock} sub-blocks for this block.\n *\n * @returns {Array<AbstractBlock>} - a list of {@link AbstractBlock} sub-blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getBlocks = function () {\n  return this.blocks\n}\n\n/**\n * Get the converted result of the child blocks by converting the children appropriate to content model that this block supports.\n *\n * @returns {string} - the converted result of the child blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getContent = function () {\n  const content = this.$content()\n  return content === Opal.nil ? undefined : content\n}\n\n/**\n * Get the converted content for this block.\n * If the block has child blocks, the content method should cause them to be converted\n * and returned as content that can be included in the parent block's template.\n *\n * @returns {string} - the converted String content for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Query for all descendant block-level nodes in the document tree\n * that match the specified selector (context, style, id, and/or role).\n * If a function block is given, it's used as an additional filter.\n * If no selector or function block is supplied, all block-level nodes in the tree are returned.\n * @param {Object} [selector]\n * @param {function} [block]\n * @example\n * doc.findBy({'context': 'section'});\n * // => { level: 0, title: \"Hello, AsciiDoc!\", blocks: 0 }\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'section'}, function (section) { return section.getLevel() === 1; });\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'listing', 'style': 'source'});\n * // => { context: :listing, content_model: :verbatim, style: \"source\", lines: 1 }\n *\n * @returns {Array<AbstractBlock>} - a list of block-level nodes that match the filter or an empty list if no matches are found\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.findBy = function (selector, block) {\n  if (typeof block === 'undefined' && typeof selector === 'function') {\n    return Opal.send(this, 'find_by', null, selector)\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'find_by', [toHash(selector)], block)\n  } else {\n    return this.$find_by(toHash(selector))\n  }\n}\n\n/**\n * Get the source line number where this block started.\n * @returns {number} - the source line number where this block started\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLineNumber = function () {\n  const lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Check whether this block has any child Section objects.\n * Only applies to Document and Section instances.\n * @returns {boolean} - true if this block has child Section objects, otherwise false\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSections = function () {\n  // REMIND: call directly the underlying method \"$sections?\"\n  // once https://github.com/asciidoctor/asciidoctor/pull/3591 is merged and a new version is released.\n  // return this['$sections?']()\n  return this.next_section_index !== Opal.nil && this.next_section_index > 0\n}\n\n/**\n * Get the Array of child Section objects.\n * Only applies to Document and Section instances.\n * @memberof AbstractBlock\n * @returns {Array<Section>} - an {Array} of {@link Section} objects\n */\nAbstractBlock.prototype.getSections = function () {\n  return this.$sections()\n}\n\n/**\n * Get the numeral of this block (if section, relative to parent, otherwise absolute).\n * Only assigned to section if automatic section numbering is enabled.\n * Only assigned to formal block (block with title) if corresponding caption attribute is present.\n * If the section is an appendix, the numeral is a letter (starting with A).\n * @returns {string} - the numeral\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getNumeral = function () {\n  const numeral = this.$numeral()\n  return numeral === Opal.nil ? undefined : numeral\n}\n\n/**\n * Set the numeral of this block.\n * @param {string} value - The numeral value\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setNumeral = function (value) {\n  this['$numeral='](value)\n}\n\n/**\n * A convenience method that checks whether the title of this block is defined.\n *\n * @returns {boolean} - a {boolean} indicating whether this block has a title.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasTitle = function () {\n  return this['$title?']()\n}\n\n/**\n * Returns the converted alt text for this block image.\n * @returns {string} - the {string} value of the alt attribute with XML special character and replacement substitutions applied.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getAlt = function () {\n  return this.$alt()\n}\n\n// Section API\n\n/**\n * @description\n * Methods for managing sections of AsciiDoc content in a document.\n *\n * @example\n * <pre>\n *   section = asciidoctor.Section.create()\n *   section.setTitle('Section 1')\n *   section.setId('sect1')\n *   section.getBlocks().length // 0\n *   section.getId() // \"sect1\"\n *   section.append(newBlock)\n *   section.getBlocks().length // 1\n * </pre>\n * @namespace\n * @extends AbstractBlock\n */\nconst Section = Opal.Asciidoctor.Section\n\n/**\n * Create a {Section} object.\n * @param {AbstractBlock} [parent] - The parent AbstractBlock. If set, must be a Document or Section object (default: undefined)\n * @param {number} [level] - The Integer level of this section (default: 1 more than parent level or 1 if parent not defined)\n * @param {boolean} [numbered] - A Boolean indicating whether numbering is enabled for this Section (default: false)\n * @param {Object} [opts] - An optional JSON of options (default: {})\n * @returns {Section} - a new {Section} object\n * @memberof Section\n */\nSection.create = function (parent, level, numbered, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, level, numbered, toHash(opts))\n}\n\n/**\n * Set the level of this section or the section level in which this block resides.\n * @param {number} level - Level (Integer)\n * @memberof AbstractBlock\n */\nSection.prototype.setLevel = function (level) {\n  this.level = level\n}\n\n/**\n * Get the 0-based index order of this section within the parent block.\n * @returns {number}\n * @memberof Section\n */\nSection.prototype.getIndex = function () {\n  return this.index\n}\n\n/**\n * Set the 0-based index order of this section within the parent block.\n * @param {string} index - The index order of this section\n * @memberof Section\n */\nSection.prototype.setIndex = function (index) {\n  this.index = index\n}\n\n/**\n * Get the section name of this section.\n * @returns {string|undefined}\n * @memberof Section\n */\nSection.prototype.getSectionName = function () {\n  const sectname = this.sectname\n  return sectname === Opal.nil ? undefined : sectname\n}\n\n/**\n * Set the section name of this section.\n * @param {string} value - The section name\n * @memberof Section\n */\nSection.prototype.setSectionName = function (value) {\n  this.sectname = value\n}\n\n/**\n * Get the section numeral of this section.\n * @returns {string}\n * @memberof Section\n */\nSection.prototype.getSectionNumeral = function () {\n  return this.$sectnum()\n}\n\nSection.prototype.getSectionNumber = Section.prototype.getSectionNumeral\n\n/**\n * Get the flag to indicate whether this is a special section or a child of one.\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isSpecial = function () {\n  return this.special\n}\n\n/**\n * Set the flag to indicate whether this is a special section or a child of one.\n * @param {boolean} value - A flag to indicated if this is a special section\n * @memberof Section\n */\nSection.prototype.setSpecial = function (value) {\n  this.special = value\n}\n\n/**\n * Get the state of the numbered attribute at this section (need to preserve for creating TOC).\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isNumbered = function () {\n  return this.numbered\n}\n\n/**\n * Get the caption for this section (only relevant for appendices).\n * @returns {string}\n * @memberof Section\n */\nSection.prototype.getCaption = function () {\n  const value = this.caption\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the name of the Section (title)\n * @returns {string}\n * @see {@link AbstractBlock#getTitle}\n * @memberof Section\n */\nSection.prototype.getName = function () {\n  return this.getTitle()\n}\n\n/**\n * @description\n * Methods for managing AsciiDoc content blocks.\n *\n * @example\n * block = asciidoctor.Block.create(parent, 'paragraph', {source: '_This_ is a <test>'})\n * block.getContent()\n * // \"<em>This</em> is a &lt;test&gt;\"\n *\n * @namespace\n * @extends AbstractBlock\n */\nconst Block = Opal.Asciidoctor.Block\n\n/**\n * Create a {Block} object.\n * @param {AbstractBlock} parent - The parent {AbstractBlock} with a compound content model to which this {Block} will be appended.\n * @param {string} context - The context name for the type of content (e.g., \"paragraph\").\n * @param {Object} [opts] - a JSON of options to customize block initialization: (default: {})\n * @param {string} opts.content_model - indicates whether blocks can be nested in this {Block} (\"compound\"),\n * otherwise how the lines should be processed (\"simple\", \"verbatim\", \"raw\", \"empty\"). (default: \"simple\")\n * @param {Object} opts.attributes - a JSON of attributes (key/value pairs) to assign to this {Block}. (default: {})\n * @param {string|Array<string>} opts.source - a String or {Array} of raw source for this {Block}. (default: undefined)\n *\n * IMPORTANT: If you don't specify the `subs` option, you must explicitly call the `commit_subs` method to resolve and assign the substitutions\n * to this block (which are resolved from the `subs` attribute, if specified, or the default substitutions based on this block's context).\n * If you want to use the default subs for a block, pass the option `subs: \"default\"`.\n * You can override the default subs using the `default_subs` option.\n *\n * @returns {Block} - a new {Block} object\n * @memberof Block\n */\nBlock.create = function (parent, context, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, context, toHash(opts))\n}\n\n/**\n * Get the source of this block.\n * @returns {string} - the String source of this block.\n * @memberof Block\n */\nBlock.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the source lines of this block.\n * @returns {Array<string>} - the String {Array} of source lines for this block.\n * @memberof Block\n */\nBlock.prototype.getSourceLines = function () {\n  return this.lines\n}\n\n// AbstractNode API\n\n/**\n * @namespace\n * @description\n * An abstract base class that provides state and methods for managing a node of AsciiDoc content.\n * The state and methods on this class are common to all content segments in an AsciiDoc document.\n */\nconst AbstractNode = Opal.Asciidoctor.AbstractNode\n\n/**\n * Apply the specified substitutions to the text.\n * If no substitutions are specified, the following substitutions are applied:\n * <code>specialcharacters</code>, <code>quotes</code>, <code>attributes</code>, <code>replacements</code>, <code>macros</code>, and <code>post_replacements</code>.\n *\n * @param {string|Array<string>} text - The String or String Array of text to process; must not be undefined.\n * @param {Array<string>} [subs] - The substitutions to perform; must be an Array or undefined.\n * @returns {string|Array<string>} - a String or String Array to match the type of the text argument with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.applySubstitutions = function (text, subs) {\n  return this.$apply_subs(text, subs)\n}\n\n/**\n * Resolve the list of comma-delimited subs against the possible options.\n *\n * @param {string} subs - The comma-delimited String of substitution names or aliases.\n * @param {string} [type] - A String representing the context for which the subs are being resolved (default: 'block').\n * @param {Array<string>} [defaults] - An Array of substitutions to start with when computing incremental substitutions (default: undefined).\n * @param {string} [subject] - The String to use in log messages to communicate the subject for which subs are being resolved (default: undefined)\n *\n * @returns {Array<string>} - An Array of Strings representing the substitution operation or nothing if no subs are found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.resolveSubstitutions = function (subs, type, defaults, subject) {\n  if (typeof type === 'undefined') {\n    type = 'block'\n  }\n  if (typeof defaults === 'undefined') {\n    defaults = Opal.nil\n  }\n  if (typeof subject === 'undefined') {\n    subject = Opal.nil\n  }\n  const value = this.$resolve_subs(subs, type, defaults, subject)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'block' type.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolveBlockSubstitutions = function (subs, defaults, subject) {\n  return this.resolveSubstitutions(subs, 'block', defaults, subject)\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'inline' type with the subject set as passthrough macro.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolvePassSubstitutions = function (subs) {\n  return this.resolveSubstitutions(subs, 'inline', undefined, 'passthrough macro')\n}\n\n/**\n * @returns {string} - the String name of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getNodeName = function () {\n  return this.node_name\n}\n\n/**\n * @returns {Object} - the JSON of attributes for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttributes = function () {\n  return fromHash(this.attributes)\n}\n\n/**\n * Get the value of the specified attribute.\n * If the attribute is not found on this node, fallback_name is set, and this node is not the Document node, get the value of the specified attribute from the Document node.\n *\n * Look for the specified attribute in the attributes on this node and return the value of the attribute, if found.\n * Otherwise, if fallback_name is set (default: same as name) and this node is not the Document node, look for that attribute on the Document node and return its value, if found.\n * Otherwise, return the default value (default: undefined).\n *\n * @param {string} name - The String of the attribute to resolve.\n * @param {*} [defaultValue] - The {Object} value to return if the attribute is not found (default: undefined).\n * @param {string} [fallbackName] - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {*} - the {Object} value (typically a String) of the attribute or defaultValue if the attribute is not found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttribute = function (name, defaultValue, fallbackName) {\n  const value = this.$attr(name, defaultValue, fallbackName)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Check whether the specified attribute is present on this node.\n *\n * @param {string} name - The String of the attribute to resolve.\n * @returns {boolean} - true if the attribute is present, otherwise false\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasAttribute = function (name) {\n  return name in this.attributes.$$smap\n}\n\n/**\n * Check if the specified attribute is defined using the same logic as {AbstractNode#getAttribute}, optionally performing acomparison with the expected value if specified.\n *\n * Look for the specified attribute in the attributes on this node.\n * If not found, fallback_name is specified (default: same as name), and this node is not the Document node, look for that attribute on the Document node.\n * In either case, if the attribute is found, and the comparison value is truthy, return whether the two values match.\n * Otherwise, return whether the attribute was found.\n *\n * @param {string} name - The String name of the attribute to resolve.\n * @param {*} [expectedValue] - The expected Object value of the attribute (default: undefined).\n * @param {string} fallbackName - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {boolean} - a Boolean indicating whether the attribute exists and, if a truthy comparison value is specified, whether the value of the attribute matches the comparison value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isAttribute = function (name, expectedValue, fallbackName) {\n  return this['$attr?'](name, expectedValue, fallbackName)\n}\n\n/**\n * Assign the value to the attribute name for the current node.\n *\n * @param {string} name - The String attribute name to assign\n * @param {*} value - The Object value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A Boolean indicating whether to assign the attribute if currently present in the attributes JSON (default: true)\n *\n * @returns {boolean} - a Boolean indicating whether the assignment was performed\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  return this.$set_attr(name, value, overwrite)\n}\n\n/**\n * Remove the attribute from the current node.\n * @param {string} name - The String attribute name to remove\n * @returns {string} - the previous {string} value, or undefined if the attribute was not present.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeAttribute = function (name) {\n  const value = this.$remove_attr(name)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the {@link Document} to which this node belongs.\n *\n * @returns {Document} - the {@link Document} object to which this node belongs.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getDocument = function () {\n  return this.document\n}\n\n/**\n * Get the {@link AbstractNode} to which this node is attached.\n *\n * @memberof AbstractNode\n * @returns {AbstractNode} - the {@link AbstractNode} object to which this node is attached,\n * or undefined if this node has no parent.\n */\nAbstractNode.prototype.getParent = function () {\n  const parent = this.parent\n  return parent === Opal.nil ? undefined : parent\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Inline}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isInline = function () {\n  return this['$inline?']()\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Block}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isBlock = function () {\n  return this['$block?']()\n}\n\n/**\n * Checks if the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n *\n * @param {string} expectedValue - The expected String value of the role (optional, default: undefined)\n *\n * @returns {boolean} - a Boolean indicating whether the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isRole = function (expectedValue) {\n  return this['$role?'](expectedValue)\n}\n\n/**\n * Retrieves the space-separated String role for this node.\n *\n * @returns {string} - the role as a space-separated String.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRole = function () {\n  const role = this.$role()\n  return role === Opal.nil ? undefined : role\n}\n\n/**\n * Sets the value of the role attribute on this node.\n *\n * @param {...string|Array<string>} names - A single role name, a space-separated String of role names, an Array of role names or a list of role names\n *\n * @returns {string} - the value of the role attribute\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setRole = function (names) {\n  if (Array.isArray(names) || (typeof names === 'string' && arguments.length === 1)) {\n    return this['$role='](names)\n  }\n  return this['$role='](Array.from(arguments))\n}\n\n/**\n * Checks if the specified role is present in the list of roles for this node.\n *\n * @param {string} name - The String name of the role to find.\n *\n * @returns {boolean} - a Boolean indicating whether this node has the specified role.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasRole = function (name) {\n  return this['$has_role?'](name)\n}\n\n/**\n * Retrieves the String role names for this node as an Array.\n *\n * @returns {Array<string>} - the role names as a String {Array}, which is empty if the role attribute is absent on this node.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRoles = function () {\n  return this.$roles()\n}\n\n/**\n * Adds the given role directly to this node.\n *\n * @param {string} name - The name of the role to add\n *\n * @returns {boolean} - a Boolean indicating whether the role was added.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.addRole = function (name) {\n  return this.$add_role(name)\n}\n\n/**\n * Public: Removes the given role directly from this node.\n *\n * @param {string} name - The name of the role to remove\n *\n * @returns {boolean} - a Boolean indicating whether the role was removed.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeRole = function (name) {\n  return this.$remove_role(name)\n}\n\n/**\n * A convenience method that checks if the reftext attribute is defined.\n * @returns {boolean} - A Boolean indicating whether the reftext attribute is defined\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isReftext = function () {\n  return this['$reftext?']()\n}\n\n/**\n * A convenience method that returns the value of the reftext attribute with substitutions applied.\n * @returns {string|undefined} - the value of the reftext attribute with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getReftext = function () {\n  const reftext = this.$reftext()\n  return reftext === Opal.nil ? undefined : reftext\n}\n\n/**\n * @returns {string} - Get the context name for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getContext = function () {\n  const context = this.context\n  // Automatically convert Opal pseudo-symbol to String\n  return typeof context === 'string' ? context : context.toString()\n}\n\n/**\n * @returns {string} - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getId = function () {\n  const id = this.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @param {string} id - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setId = function (id) {\n  this.id = id\n}\n\n/**\n * A convenience method to check if the specified option attribute is enabled on the current node.\n * Check if the option is enabled. This method simply checks to see if the <name>-option attribute is defined on the current node.\n *\n * @param {string} name - the String name of the option\n *\n * @return {boolean} - a Boolean indicating whether the option has been specified\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isOption = function (name) {\n  return this['$option?'](name)\n}\n\n/**\n * Set the specified option on this node.\n * This method sets the specified option on this node by setting the <name>-option attribute.\n *\n * @param {string} name - the String name of the option\n *\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setOption = function (name) {\n  return this.$set_option(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getIconUri = function (name) {\n  return this.$icon_uri(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getMediaUri = function (target, assetDirKey) {\n  return this.$media_uri(target, assetDirKey)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getImageUri = function (targetImage, assetDirKey) {\n  return this.$image_uri(targetImage, assetDirKey)\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getConverter = function () {\n  return this.$converter()\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readContents = function (target, options) {\n  return this.$read_contents(target, toHash(options))\n}\n\n/**\n * Read the contents of the file at the specified path.\n * This method assumes that the path is safe to read.\n * It checks that the file is readable before attempting to read it.\n *\n * @param path - the {string} path from which to read the contents\n * @param {Object} options - a JSON {Object} of options to control processing (default: {})\n * @param {boolean} options.warn_on_failure - a {boolean} that controls whether a warning is issued if the file cannot be read (default: false)\n * @param {boolean} options.normalize - a {boolean} that controls whether the lines are normalized and coerced to UTF-8 (default: false)\n *\n * @returns {string} - the String content of the file at the specified path, or undefined if the file does not exist.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readAsset = function (path, options) {\n  const result = this.$read_asset(path, toHash(options))\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeWebPath = function (target, start, preserveTargetUri) {\n  return this.$normalize_web_path(target, start, preserveTargetUri)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeSystemPath = function (target, start, jail, options) {\n  return this.$normalize_system_path(target, start, jail, toHash(options))\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeAssetPath = function (assetRef, assetName, autoCorrect) {\n  return this.$normalize_asset_path(assetRef, assetName, autoCorrect)\n}\n\n// Document API\n\n/**\n * The {@link Document} class represents a parsed AsciiDoc document.\n *\n * Document is the root node of a parsed AsciiDoc document.<br/>\n * It provides an abstract syntax tree (AST) that represents the structure of the AsciiDoc document\n * from which the Document object was parsed.\n *\n * Although the constructor can be used to create an empty document object,\n * more commonly, you'll load the document object from AsciiDoc source\n * using the primary API methods on {@link Asciidoctor}.\n * When using one of these APIs, you almost always want to set the safe mode to 'safe' (or 'unsafe')\n * to enable all of Asciidoctor's features.\n *\n * <pre>\n *   const doc = Asciidoctor.load('= Hello, AsciiDoc!', { 'safe': 'safe' })\n *   // => Asciidoctor::Document { doctype: \"article\", doctitle: \"Hello, AsciiDoc!\", blocks: 0 }\n * </pre>\n *\n * Instances of this class can be used to extract information from the document or alter its structure.\n * As such, the Document object is most often used in extensions and by integrations.\n *\n * The most basic usage of the Document object is to retrieve the document's title.\n *\n * <pre>\n *  const source = '= Document Title'\n *  const doc = asciidoctor.load(source, { 'safe': 'safe' })\n *  console.log(doc.getTitle()) // 'Document Title'\n * </pre>\n *\n * You can also use the Document object to access document attributes defined in the header, such as the author and doctype.\n * @namespace\n * @extends AbstractBlock\n */\nconst Document = Opal.Asciidoctor.Document\n\n/**\n * Append a content Block to this Document.\n * If the child block is a Section, assign an index to it.\n * @param {AbstractBlock} block - the child Block to append to this parent Block\n * @returns {AbstractBlock} - the parent block to which this block was appended.\n * @memberof Document\n */\nDocument.prototype.append = function (block) {\n  this['$<<'](block)\n  return this\n}\n\n/**\n * Returns the SyntaxHighlighter associated with this document.\n *\n * @returns {SyntaxHighlighter} - the SyntaxHighlighter associated with this document.\n * @memberof Document\n */\nDocument.prototype.getSyntaxHighlighter = function () {\n  const syntaxHighlighter = this.syntax_highlighter\n  // eslint-disable-next-line no-proto\n  const prototype = syntaxHighlighter.__proto__\n  if (prototype) {\n    if (typeof prototype['$highlight?'] === 'function') {\n      prototype.handlesHighlighting = function () {\n        const value = prototype['$highlight?']()\n        return value === Opal.nil ? false : value\n      }\n    }\n    if (typeof prototype['$docinfo?'] === 'function') {\n      prototype.hasDocinfo = prototype['$docinfo?']\n    }\n    if (typeof prototype.$format === 'function') {\n      prototype.format = function (node, lang, opts) {\n        return this.$format(node, lang, toHash(opts))\n      }\n    }\n    if (typeof prototype.$docinfo === 'function') {\n      prototype.docinfo = function (location, doc, opts) {\n        return this.$docinfo(location, doc, toHash(opts))\n      }\n    }\n  }\n  return syntaxHighlighter\n}\n\n/**\n * Returns a JSON {Object} of references captured by the processor.\n *\n * @returns {Object} - a JSON {Object} of {AbstractNode} in the document.\n * @memberof Document\n */\nDocument.prototype.getRefs = function () {\n  return fromHash(this.catalog.$$smap.refs)\n}\n\n/**\n * Returns an {Array} of {Document/ImageReference} captured by the processor.\n *\n * @returns {Array<ImageReference>} - an {Array} of {Document/ImageReference} in the document.\n * Will return an empty array if the option \"catalog_assets: true\" was not defined on the processor.\n * @memberof Document\n */\nDocument.prototype.getImages = function () {\n  return this.catalog.$$smap.images\n}\n\n/**\n * Returns an {Array} of links captured by the processor.\n *\n * @returns {Array<string>} - an {Array} of links in the document.\n * Will return an empty array if:\n * - the function was called before the document was converted\n * - the option \"catalog_assets: true\" was not defined on the processor\n * @memberof Document\n */\nDocument.prototype.getLinks = function () {\n  return this.catalog.$$smap.links\n}\n\n/**\n * @returns {boolean} - true if the document has footnotes otherwise false\n * @memberof Document\n */\nDocument.prototype.hasFootnotes = function () {\n  return this['$footnotes?']()\n}\n\n/**\n * Returns an {Array} of {Document/Footnote} captured by the processor.\n *\n * @returns {Array<Footnote>} - an {Array} of {Document/Footnote} in the document.\n * Will return an empty array if the function was called before the document was converted.\n * @memberof Document\n */\nDocument.prototype.getFootnotes = function () {\n  return this.$footnotes()\n}\n\n/**\n * Returns the level-0 {Section} (i.e. the document title).\n * Only stores the title, not the header attributes.\n *\n * @returns {string} - the level-0 {Section}.\n * @memberof Document\n */\nDocument.prototype.getHeader = function () {\n  return this.header\n}\n\n/**\n * @memberof Document\n */\nDocument.prototype.setAttribute = function (name, value) {\n  return this.$set_attribute(name, value)\n}\n\n/**\n\n * @memberof Document\n */\nDocument.prototype.removeAttribute = function (name) {\n  this.attributes.$delete(name)\n  this.attribute_overrides.$delete(name)\n}\n\n/**\n * Convert the AsciiDoc document using the templates loaded by the Converter.\n * If a \"template_dir\" is not specified, or a template is missing, the converter will fall back to using the appropriate built-in template.\n *\n * @param {Object} [options] - a JSON of options to control processing (default: {})\n *\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.convert = function (options) {\n  const result = this.$convert(toHash(options))\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Write the output to the specified file.\n *\n * If the converter responds to \"write\", delegate the work of writing the file to that method.\n * Otherwise, write the output the specified file.\n *\n * @param {string} output\n * @param {string} target\n *\n * @memberof Document\n */\nDocument.prototype.write = function (output, target) {\n  return this.$write(output, target)\n}\n\n/**\n * @returns {string} - the full name of the author as a String\n * @memberof Document\n */\nDocument.prototype.getAuthor = function () {\n  return this.$author()\n}\n\n/**\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * @returns {Array<string>}\n * @memberof Document\n */\nDocument.prototype.getSourceLines = function () {\n  return this.$source_lines()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isNested = function () {\n  return this['$nested?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isEmbedded = function () {\n  return this['$embedded?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasExtensions = function () {\n  return this['$extensions?']()\n}\n\n/**\n * Get the value of the doctype attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getDoctype = function () {\n  return this.doctype\n}\n\n/**\n * Get the value of the backend attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBackend = function () {\n  return this.backend\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isBasebackend = function (base) {\n  return this['$basebackend?'](base)\n}\n\n/**\n * Get the title explicitly defined in the document attributes.\n * @returns {string}\n * @see {@link AbstractNode#getAttributes}\n * @memberof Document\n */\nDocument.prototype.getTitle = function () {\n  const title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the title on the document header\n *\n * Set the title of the document header to the specified value.\n * If the header does not exist, it is first created.\n *\n * @param {string} title - the String title to assign as the title of the document header\n *\n * @returns {string} - the new String title assigned to the document header\n * @memberof Document\n */\nDocument.prototype.setTitle = function (title) {\n  return this['$title='](title)\n}\n\n/**\n * @returns {Document/Title} - a {@link Document/Title}\n * @memberof Document\n */\nDocument.prototype.getDocumentTitle = function (options) {\n  const doctitle = this.$doctitle(toHash(options))\n  return doctitle === Opal.nil ? undefined : doctitle\n}\n\n/**\n * @see {@link Document#getDocumentTitle}\n * @memberof Document\n */\nDocument.prototype.getDoctitle = Document.prototype.getDocumentTitle\n\n/**\n * Get the document catalog JSON object.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCatalog = function () {\n  return fromHash(this.catalog)\n}\n\n/**\n *\n * @returns {Object}\n * @see Document#getCatalog\n * @memberof Document\n */\nDocument.prototype.getReferences = Document.prototype.getCatalog\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionDate = function () {\n  return this.getAttribute('revdate')\n}\n\n/**\n * @see Document#getRevisionDate\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevdate = function () {\n  return this.getRevisionDate()\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionNumber = function () {\n  return this.getAttribute('revnumber')\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionRemark = function () {\n  return this.getAttribute('revremark')\n}\n\n/**\n *  Assign a value to the specified attribute in the document header.\n *\n *  The assignment will be visible when the header attributes are restored,\n *  typically between processor phases (e.g., between parse and convert).\n *\n * @param {string} name - The {string} attribute name to assign\n * @param {Object} value - The {Object} value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A {boolean} indicating whether to assign the attribute\n * if already present in the attributes Hash (default: true)\n *\n * @returns {boolean} - true if the assignment was performed otherwise false\n * @memberof Document\n */\nDocument.prototype.setHeaderAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  if (typeof value === 'undefined') value = ''\n  return this.$set_header_attribute(name, value, overwrite)\n}\n\n/**\n * Convenience method to retrieve the authors of this document as an {Array} of {Document/Author} objects.\n *\n * This method is backed by the author-related attributes on the document.\n *\n * @returns {Array<Author>} - an {Array} of {Document/Author} objects.\n * @memberof Document\n */\nDocument.prototype.getAuthors = function () {\n  return this.$authors()\n}\n\n// Document.Footnote API\n\n/**\n * @namespace\n * @module Document/Footnote\n */\nconst Footnote = Document.Footnote\n\n/**\n * @returns {number} - the footnote's index\n * @memberof Document/Footnote\n */\nFootnote.prototype.getIndex = function () {\n  const index = this.$$data.index\n  return index === Opal.nil ? undefined : index\n}\n\n/**\n * @returns {number} - the footnote's id\n * @memberof Document/Footnote\n */\nFootnote.prototype.getId = function () {\n  const id = this.$$data.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @returns {string} - the footnote's text\n * @memberof Document/Footnote\n */\nFootnote.prototype.getText = function () {\n  const text = this.$$data.text\n  return text === Opal.nil ? undefined : text\n}\n\n// Document.ImageReference API\n\n/**\n * @class\n * @module Document/ImageReference\n */\nconst ImageReference = Document.ImageReference\n\n/**\n * @returns {string} - the image's target\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getTarget = function () {\n  return this.$$data.target\n}\n\n/**\n * @returns {string} - the image's directory (imagesdir attribute)\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getImagesDirectory = function () {\n  const value = this.$$data.imagesdir\n  return value === Opal.nil ? undefined : value\n}\n\n// Document.Author API\n\n/**\n * The Author class represents information about an author extracted from document attributes.\n * @namespace\n * @module Document/Author\n */\nconst Author = Document.Author\n\n/**\n * @returns {string} - the author's full name\n * @memberof Document/Author\n */\nAuthor.prototype.getName = function () {\n  const name = this.$$data.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {string} - the author's first name\n * @memberof Document/Author\n */\nAuthor.prototype.getFirstName = function () {\n  const firstName = this.$$data.firstname\n  return firstName === Opal.nil ? undefined : firstName\n}\n\n/**\n * @returns {string} - the author's middle name (or undefined if the author has no middle name)\n * @memberof Document/Author\n */\nAuthor.prototype.getMiddleName = function () {\n  const middleName = this.$$data.middlename\n  return middleName === Opal.nil ? undefined : middleName\n}\n\n/**\n * @returns {string} - the author's last name\n * @memberof Document/Author\n */\nAuthor.prototype.getLastName = function () {\n  const lastName = this.$$data.lastname\n  return lastName === Opal.nil ? undefined : lastName\n}\n\n/**\n * @returns {string} - the author's initials (by default based on the author's name)\n * @memberof Document/Author\n */\nAuthor.prototype.getInitials = function () {\n  const initials = this.$$data.initials\n  return initials === Opal.nil ? undefined : initials\n}\n\n/**\n * @returns {string} - the author's email\n * @memberof Document/Author\n */\nAuthor.prototype.getEmail = function () {\n  const email = this.$$data.email\n  return email === Opal.nil ? undefined : email\n}\n\n// private constructor\nDocument.RevisionInfo = function (date, number, remark) {\n  this.date = date\n  this.number = number\n  this.remark = remark\n}\n\n/**\n * @class\n * @namespace\n * @module Document/RevisionInfo\n */\nconst RevisionInfo = Document.RevisionInfo\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getDate = function () {\n  return this.date\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getNumber = function () {\n  return this.number\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * A short summary of changes in this document revision.\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getRemark = function () {\n  return this.remark\n}\n\n/**\n * @returns {boolean} - true if the revision info is empty (ie. not defined), otherwise false\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.isEmpty = function () {\n  return this.date === undefined && this.number === undefined && this.remark === undefined\n}\n\n// SafeMode API\n\n/**\n * @namespace\n */\nconst SafeMode = Opal.Asciidoctor.SafeMode\n\n/**\n * @param {string} name - the name of the security level\n * @returns {number} - the integer value of the corresponding security level\n */\nSafeMode.getValueForName = function (name) {\n  return this.$value_for_name(name)\n}\n\n/**\n * @param {number} value - the integer value of the security level\n * @returns {string} - the name of the corresponding security level\n */\nSafeMode.getNameForValue = function (value) {\n  const name = this.$name_for_value(value)\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {Array<string>} - the String {Array} of security levels\n */\nSafeMode.getNames = function () {\n  return this.$names()\n}\n\n// Callouts API\n\n/**\n * Maintains a catalog of callouts and their associations.\n * @namespace\n */\nconst Callouts = Opal.Asciidoctor.Callouts\n\n/**\n * Create a new Callouts.\n * @returns {Callouts} - a new Callouts\n * @memberof Callouts\n */\nCallouts.create = function () {\n  return this.$new()\n}\n\n/**\n * Register a new callout for the given list item ordinal.\n * Generates a unique id for this callout based on the index of the next callout list in the document and the index of this callout since the end of the last callout list.\n *\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item to which this callout is to be associated\n * @returns {string} - The unique String id of this callout\n * @example\n *  callouts = asciidoctor.Callouts.create()\n *  callouts.register(1)\n *  // => \"CO1-1\"\n *  callouts.nextList()\n *  callouts.register(2)\n *  // => \"CO2-1\"\n * @memberof Callouts\n */\n\nCallouts.prototype.register = function (ordinal) {\n  return this.$register(ordinal)\n}\n/**\n * Get the next callout index in the document.\n *\n * Reads the next callout index in the document and advances the pointer.\n * This method is used during conversion to retrieve the unique id of the callout that was generated during parsing.\n *\n * @returns {string} - The unique String id of the next callout in the document\n * @memberof Callouts\n */\nCallouts.prototype.readNextId = function () {\n  return this.$read_next_id()\n}\n\n/**\n * et a space-separated list of callout ids for the specified list item.\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item for which to retrieve the callouts\n * @returns {string} - a space-separated String of callout ids associated with the specified list item\n * @memberof Callouts\n */\nCallouts.prototype.getCalloutIds = function (ordinal) {\n  return this.$callout_ids(ordinal)\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getLists = function () {\n  const lists = this.lists\n  if (lists && lists.length > 0) {\n    for (let i = 0; i < lists.length; i++) {\n      const list = lists[i]\n      if (list && list.length > 0) {\n        for (let j = 0; j < list.length; j++) {\n          if (typeof list[j] === 'object' && '$$smap' in list[j]) {\n            list[j] = fromHash(list[j])\n          }\n        }\n      }\n    }\n  }\n  return lists\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getListIndex = function () {\n  return this.list_index\n}\n\n/**\n * The current list for which callouts are being collected.\n * @returns {Array} - The Array of callouts at the position of the list index pointer\n * @memberof Callouts\n */\nCallouts.prototype.getCurrentList = function () {\n  const currentList = this.$current_list()\n  if (currentList && currentList.length > 0) {\n    for (let i = 0; i < currentList.length; i++) {\n      if (typeof currentList[i] === 'object' && '$$smap' in currentList[i]) {\n        currentList[i] = fromHash(currentList[i])\n      }\n    }\n  }\n  return currentList\n}\n\n/**\n * Advance to the next callout list in the document.\n * @memberof Callouts\n */\nCallouts.prototype.nextList = function () {\n  return this.$nextList()\n}\n\n/**\n * Rewind the list index pointer, intended to be used when switching from the parsing to conversion phase.\n * @memberof Callouts\n */\nCallouts.prototype.rewind = function () {\n  return this.$rewind()\n}\n\n/**\n * @returns {Document/RevisionInfo} - a {@link Document/RevisionInfo}\n * @memberof Document\n */\nDocument.prototype.getRevisionInfo = function () {\n  return new Document.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark())\n}\n\n/**\n * @returns {boolean} - true if the document contains revision info, otherwise false\n * @memberof Document\n */\nDocument.prototype.hasRevisionInfo = function () {\n  const revisionInfo = this.getRevisionInfo()\n  return !revisionInfo.isEmpty()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNotitle = function () {\n  return this.$notitle()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNoheader = function () {\n  return this.$noheader()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNofooter = function () {\n  return this.$nofooter()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasHeader = function () {\n  return this['$header?']()\n}\n\n/**\n * Replay attribute assignments at the block level.\n *\n * <i>This method belongs to an internal API that deals with how attributes are managed by the processor.</i>\n * If you understand why this group of methods are necessary, and what they do, feel free to use them.\n * <strong>However, keep in mind they are subject to change at any time.</strong>\n *\n * @param {Object} blockAttributes - A JSON of attributes\n * @memberof Document\n */\nDocument.prototype.playbackAttributes = function (blockAttributes) {\n  blockAttributes = toHash(blockAttributes)\n  if (blockAttributes) {\n    const attrEntries = blockAttributes['$[]']('attribute_entries')\n    if (attrEntries && Array.isArray(attrEntries)) {\n      const result = []\n      for (let i = 0; i < attrEntries.length; i++) {\n        const attrEntryObject = attrEntries[i]\n        if (attrEntryObject && typeof attrEntryObject === 'object' && attrEntryObject.constructor.name === 'Object') {\n          attrEntryObject.$name = function () {\n            return this.name\n          }\n          attrEntryObject.$value = function () {\n            return this.value\n          }\n          attrEntryObject.$negate = function () {\n            return this.negate\n          }\n        }\n        result.push(attrEntryObject)\n      }\n      blockAttributes['$[]=']('attribute_entries', result)\n    }\n  }\n  this.$playback_attributes(blockAttributes)\n}\n\n/**\n * Delete the specified attribute from the document if the name is not locked.\n * If the attribute is locked, false is returned.\n * Otherwise, the attribute is deleted.\n *\n * @param {string} name - the String attribute name\n *\n * @returns {boolean} - true if the attribute was deleted, false if it was not because it's locked\n * @memberof Document\n */\nDocument.prototype.deleteAttribute = function (name) {\n  return this.$delete_attribute(name)\n}\n\n/**\n * Determine if the attribute has been locked by being assigned in document options.\n *\n * @param {string} key - The attribute key to check\n *\n * @returns {boolean} - true if the attribute is locked, false otherwise\n * @memberof Document\n */\nDocument.prototype.isAttributeLocked = function (key) {\n  return this['$attribute_locked?'](key)\n}\n\n/**\n * Restore the attributes to the previously saved state (attributes in header).\n *\n * @memberof Document\n */\nDocument.prototype.restoreAttributes = function () {\n  return this.$restore_attributes()\n}\n\n/**\n * Parse the AsciiDoc source stored in the {Reader} into an abstract syntax tree.\n *\n * If the data parameter is not nil, create a new {PreprocessorReader} and assigned it to the reader property of this object.\n * Otherwise, continue with the reader that was created when the {Document} was instantiated.\n * Pass the reader to {Parser.parse} to parse the source data into an abstract syntax tree.\n *\n * If parsing has already been performed, this method returns without performing any processing.\n *\n * @param {string|Array<string>} [data] - The optional replacement AsciiDoc source data as a String or String Array. (default: undefined)\n *\n * @returns {Document} - this {Document}\n * @memberof Document\n */\nDocument.prototype.parse = function (data) {\n  return this.$parse(data)\n}\n\n/**\n * Read the docinfo file(s) for inclusion in the document template\n *\n * If the docinfo1 attribute is set, read the docinfo.ext file.\n * If the docinfo attribute is set, read the doc-name.docinfo.ext file.\n * If the docinfo2 attribute is set, read both files in that order.\n *\n * @param {string} docinfoLocation - The Symbol location of the docinfo (e.g., head, footer, etc). (default: head)\n * @param {string|undefined} suffix - The suffix of the docinfo file(s).\n * If not set, the extension will be set to the outfilesuffix. (default: undefined)\n *\n * @returns {string} - the contents of the docinfo file(s) or empty string if no files are found or the safe mode is secure or greater.\n * @memberof Document\n */\nDocument.prototype.getDocinfo = function (docinfoLocation, suffix) {\n  return this.$docinfo(docinfoLocation, suffix)\n}\n\n/**\n * @param {string} [docinfoLocation] - A {string} for checking docinfo extensions at a given location (head or footer) (default: head)\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasDocinfoProcessors = function (docinfoLocation) {\n  return this['$docinfo_processors?'](docinfoLocation)\n}\n\n/**\n * Increment the specified counter and store it in the block's attributes.\n *\n * @param {string} counterName - the String name of the counter attribute\n * @param {Block} block - the {Block} on which to save the counter\n *\n * @returns {number} - the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.incrementAndStoreCounter = function (counterName, block) {\n  return this.$increment_and_store_counter(counterName, block)\n}\n\n/**\n * @deprecated Please use {Document#incrementAndStoreCounter} method.\n * @memberof Document\n */\nDocument.prototype.counterIncrement = Document.prototype.incrementAndStoreCounter\n\n/**\n * Get the named counter and take the next number in the sequence.\n *\n * @param {string} name - the String name of the counter\n * @param {string|number} seed - the initial value as a String or Integer\n *\n * @returns {number} the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.counter = function (name, seed) {\n  return this.$counter(name, seed)\n}\n\n/**\n * A read-only integer value indicating the level of security that should be enforced while processing this document.\n * The value must be set in the Document constructor using the \"safe\" option.\n *\n * A value of 0 (UNSAFE) disables any of the security features enforced by Asciidoctor.\n *\n * A value of 1 (SAFE) closely parallels safe mode in AsciiDoc.\n * In particular, it prevents access to files which reside outside of the parent directory of the source file and disables any macro other than the include directive.\n *\n * A value of 10 (SERVER) disallows the document from setting attributes that would affect the conversion of the document,\n * in addition to all the security features of SafeMode.SAFE.\n * For instance, this level forbids changing the backend or source-highlighter using an attribute defined in the source document header.\n * This is the most fundamental level of security for server deployments (hence the name).\n *\n * A value of 20 (SECURE) disallows the document from attempting to read files from the file system and including the contents of them into the document,\n * in addition to all the security features of SafeMode.SECURE.\n * In particular, it disallows use of the include::[] directive and the embedding of binary content (data uri), stylesheets and JavaScripts referenced by the document.\n * (Asciidoctor and trusted extensions may still be allowed to embed trusted content into the document).\n *\n * Since Asciidoctor is aiming for wide adoption, 20 (SECURE) is the default value and is recommended for server deployments.\n *\n * A value of 100 (PARANOID) is planned to disallow the use of passthrough macros and prevents the document from setting any known attributes,\n * in addition to all the security features of SafeMode.SECURE.\n * Please note that this level is not currently implemented (and therefore not enforced)!\n *\n * @returns {number} - An integer value indicating the level of security\n * @memberof Document\n */\nDocument.prototype.getSafe = function () {\n  return this.safe\n}\n\n/**\n * Get the Boolean AsciiDoc compatibility mode.\n * Enabling this attribute activates the following syntax changes:\n *\n *   * single quotes as constrained emphasis formatting marks\n *   * single backticks parsed as inline literal, formatted as monospace\n *   * single plus parsed as constrained, monospaced inline formatting\n *   * double plus parsed as constrained, monospaced inline formatting\n *\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getCompatMode = function () {\n  return this.compat_mode\n}\n\n/**\n * Get the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getSourcemap = function () {\n  const sourcemap = this.sourcemap\n  return sourcemap === Opal.nil ? false : sourcemap\n}\n\n/**\n * Set the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @param {boolean} value\n * @memberof Document\n */\nDocument.prototype.setSourcemap = function (value) {\n  this.sourcemap = value\n}\n\n/**\n * Get the JSON of document counters.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCounters = function () {\n  return fromHash(this.counters)\n}\n\n/**\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCallouts = function () {\n  return this.$callouts()\n}\n\n/**\n * Get the String base directory for converting this document.\n *\n * Defaults to directory of the source file.\n * If the source is a string, defaults to the current directory.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBaseDir = function () {\n  return this.base_dir\n}\n\n/**\n * Get the JSON of resolved options used to initialize this {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getOptions = function () {\n  return fromHash(this.options)\n}\n\n/**\n * Get the outfilesuffix defined at the end of the header.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getOutfilesuffix = function () {\n  return this.outfilesuffix\n}\n\n/**\n * Get a reference to the parent Document of this nested document.\n * @returns {Document|undefined}\n * @memberof Document\n */\nDocument.prototype.getParentDocument = function () {\n  const parentDocument = this.parent_document\n  return parentDocument === Opal.nil ? undefined : parentDocument\n}\n\n/**\n * Get the {Reader} associated with this document.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getReader = function () {\n  return this.reader\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getConverter = function () {\n  return this.converter\n}\n\n/**\n * Get the activated {Extensions.Registry} associated with this document.\n * @returns {Extensions/Registry}\n * @memberof Document\n */\nDocument.prototype.getExtensions = function () {\n  const extensions = this.extensions\n  return extensions === Opal.nil ? undefined : extensions\n}\n\n// Document.Title API\n\n/**\n * A partitioned title (i.e., title & subtitle).\n * @namespace\n * @module Document/Title\n */\nconst Title = Document.Title\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getMain = function () {\n  return this.main\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getCombined = function () {\n  return this.combined\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getSubtitle = function () {\n  const subtitle = this.subtitle\n  return subtitle === Opal.nil ? undefined : subtitle\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.isSanitized = function () {\n  const sanitized = this['$sanitized?']()\n  return sanitized === Opal.nil ? false : sanitized\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.hasSubtitle = function () {\n  return this['$subtitle?']()\n}\n\n// Inline API\n\n/**\n * Methods for managing inline elements in AsciiDoc block.\n * @namespace\n * @extends AbstractNode\n */\nconst Inline = Opal.Asciidoctor.Inline\n\n/**\n * Create a new Inline element.\n * @param {AbstractBlock} parent\n * @param {string} context\n * @param {string|undefined} text\n * @param {Object|undefined} opts\n * @returns {Inline} - a new Inline element\n * @memberof Inline\n */\nInline.create = function (parent, context, text, opts) {\n  return this.$new(parent, context, text, prepareOptions(opts))\n}\n\n/**\n * Get the converted content for this inline node.\n *\n * @returns {string} - the converted String content for this inline node\n * @memberof Inline\n */\nInline.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Get the converted String text of this Inline node, if applicable.\n *\n * @returns {string|undefined} - the converted String text for this Inline node, or undefined if not applicable for this node.\n * @memberof Inline\n */\nInline.prototype.getText = function () {\n  const text = this.$text()\n  return text === Opal.nil ? undefined : text\n}\n\n/**\n * Get the String sub-type (aka qualifier) of this Inline node.\n *\n * This value is used to distinguish different variations of the same node\n * category, such as different types of anchors.\n *\n * @returns {string} - the string sub-type of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getType = function () {\n  return this.$type()\n}\n\n/**\n * Get the primary String target of this Inline node.\n *\n * @returns {string|undefined} - the string target of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getTarget = function () {\n  const target = this.$target()\n  return target === Opal.nil ? undefined : target\n}\n\n/**\n * Returns the converted alt text for this inline image.\n *\n * @returns {string} - the String value of the alt attribute.\n * @memberof Inline\n */\nInline.prototype.getAlt = function () {\n  return this.$alt()\n}\n\n// List API\n\n/**\n * Methods for managing AsciiDoc lists (ordered, unordered and description lists).\n * @namespace\n * @extends AbstractBlock\n */\nconst List = Opal.Asciidoctor.List\n\n/**\n * Checks if the {@link List} contains any child {@link ListItem}.\n *\n * @memberof List\n * @returns {boolean} - whether the {@link List} has child {@link ListItem}.\n */\nList.prototype.hasItems = function () {\n  return this['$items?']()\n}\n\n/**\n * Get the Array of {@link ListItem} nodes for this {@link List}.\n *\n * @returns {Array<ListItem>} - an Array of {@link ListItem} nodes.\n * @memberof List\n */\nList.prototype.getItems = function () {\n  return this.blocks\n}\n\n// ListItem API\n\n/**\n * Methods for managing items for AsciiDoc olists, ulist, and dlists.\n *\n * In a description list (dlist), each item is a tuple that consists of a 2-item Array of ListItem terms and a ListItem description (i.e., [[term, term, ...], desc].\n * If a description is not set, then the second entry in the tuple is nil.\n * @namespace\n * @extends AbstractBlock\n */\nconst ListItem = Opal.Asciidoctor.ListItem\n\n/**\n * Get the converted String text of this {@link ListItem} node.\n *\n * @returns {string} - the converted String text for this {@link ListItem} node.\n * @memberof ListItem\n */\nListItem.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Set the String source text of this {@link ListItem} node.\n *\n * @returns {string} - the new String text assigned to this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setText = function (text) {\n  return this['$text='](text)\n}\n\n/**\n * A convenience method that checks whether the text of this {@link ListItem} is not blank (i.e. not undefined or empty string).\n *\n * @returns {boolean} - whether the text is not blank\n * @memberof ListItem\n */\nListItem.prototype.hasText = function () {\n  return this['$text?']()\n}\n\n/**\n * Get the {string} used to mark this {@link ListItem}.\n *\n * @returns {string}\n * @memberof ListItem\n */\nListItem.prototype.getMarker = function () {\n  return this.marker\n}\n\n/**\n * Set the {string} used to mark this {@link ListItem}.\n *\n * @param {string} marker - the {string} used to mark this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setMarker = function (marker) {\n  this.marker = marker\n}\n\n/**\n * Get the {@link List} to which this {@link ListItem} is attached.\n *\n * @returns {List} - the {@link List} object to which this {@link ListItem} is attached,\n * or undefined if this node has no parent.\n * @memberof ListItem\n */\nListItem.prototype.getList = function () {\n  return this.$list()\n}\n\n/**\n * @see {@link ListItem#getList}\n * @memberof ListItem\n */\nListItem.prototype.getParent = ListItem.prototype.getList\n\n// Reader API\n\n/** @namespace */\nconst Reader = Opal.Asciidoctor.Reader\n\n/**\n * Push source onto the front of the reader and switch the context based on the file, document-relative path and line information given.\n *\n * This method is typically used in an IncludeProcessor to add source read from the target specified.\n *\n * @param {string} data\n * @param {string|undefined} file\n * @param {string|undefined} path\n * @param {number} lineno - The line number\n * @param {Object} attributes - a JSON of attributes\n * @returns {Reader} - this {Reader} object.\n * @memberof Reader\n */\nReader.prototype.pushInclude = function (data, file, path, lineno, attributes) {\n  return this.$push_include(data, file, path, lineno, toHash(attributes))\n}\n\n/**\n * Get the current location of the reader's cursor, which encapsulates the file, dir, path, and lineno of the file being read.\n *\n * @returns {Cursor}\n * @memberof Reader\n */\nReader.prototype.getCursor = function () {\n  return this.$cursor()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as an {Array} of {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {Array<string>} - the remaining unprocessed lines as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as a {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {string} - the remaining unprocessed lines as a {string} (joined by linefeed characters).\n * @memberof Reader\n */\nReader.prototype.getString = function () {\n  return this.$string()\n}\n\n/**\n * Check whether there are any lines left to read.\n * If a previous call to this method resulted in a value of false, immediately returned the cached value.\n * Otherwise, delegate to peekLine to determine if there is a next line available.\n *\n * @returns {boolean} - true if there are more lines, false if there are not.\n * @memberof Reader\n */\nReader.prototype.hasMoreLines = function () {\n  return this['$has_more_lines?']()\n}\n\n/**\n * Check whether this reader is empty (contains no lines).\n *\n * @returns {boolean} - true if there are no more lines to peek, otherwise false.\n * @memberof Reader\n */\nReader.prototype.isEmpty = function () {\n  return this['$empty?']()\n}\n\n/**\n * Peek at the next line.\n * Processes the line if not already marked as processed, but does not consume it (ie. you will be able to read this line again).\n *\n * This method will probe the reader for more lines.\n * If there is a next line that has not previously been visited, the line is passed to the Reader#processLine method to be initialized.\n * This call gives sub-classes the opportunity to do preprocessing.\n * If the return value of the Reader#processLine is undefined, the data is assumed to be changed and Reader#peekLine is invoked again to perform further processing.\n *\n * If hasMoreLines is called immediately before peekLine, the direct flag is implicitly true (since the line is flagged as visited).\n *\n * @param {boolean} direct - A {boolean} flag to bypasses the check for more lines and immediately returns the first element of the internal lines {Array}. (default: false)\n * @returns {string} - the next line as a {string} if there are lines remaining.\n * @memberof Reader\n */\nReader.prototype.peekLine = function (direct) {\n  direct = direct || false\n  const line = this.$peek_line(direct)\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the next line.\n *\n * Line will be consumed from the Reader (ie. you won't be able to read this line again).\n *\n * @returns {string} - the next line as a {string} if data is present.\n * @memberof Reader\n */\nReader.prototype.readLine = function () {\n  const line = this.$read_line()\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the remaining lines.\n *\n * This method calls Reader#readLine repeatedly until all lines are consumed and returns the lines as an {Array} of {string}.\n * This method differs from Reader#getLines in that it processes each line in turn, hence triggering any preprocessors implemented in sub-classes.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {Array<string>} - the lines read as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.readLines = function () {\n  return this.$read_lines()\n}\n\n/**\n * Consume, preprocess, and return the remaining lines joined as a {string}.\n *\n * Delegates to Reader#readLines, then joins the result.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {string} - the lines read joined as a {string}\n * @memberof Reader\n */\nReader.prototype.read = function () {\n  return this.$read()\n}\n\n/**\n * Advance to the next line by discarding the line at the front of the stack.\n *\n * @returns {boolean} - a Boolean indicating whether there was a line to discard.\n * @memberof Reader\n */\nReader.prototype.advance = function () {\n  return this.$advance()\n}\n\n// Cursor API\n\n/** @namespace */\nconst Cursor = Opal.Asciidoctor.Reader.Cursor\n\n/**\n * Get the file associated to the cursor.\n * @returns {string|undefined}\n * @memberof Cursor\n */\nCursor.prototype.getFile = function () {\n  const file = this.file\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the directory associated to the cursor.\n * @returns {string|undefined} - the directory associated to the cursor\n * @memberof Cursor\n */\nCursor.prototype.getDirectory = function () {\n  const dir = this.dir\n  return dir === Opal.nil ? undefined : dir\n}\n\n/**\n * Get the path associated to the cursor.\n * @returns {string|undefined} - the path associated to the cursor (or '<stdin>')\n * @memberof Cursor\n */\nCursor.prototype.getPath = function () {\n  const path = this.path\n  return path === Opal.nil ? undefined : path\n}\n\n/**\n * Get the line number of the cursor.\n * @returns {number|undefined} - the line number of the cursor\n * @memberof Cursor\n */\nCursor.prototype.getLineNumber = function () {\n  return this.lineno\n}\n\n// Logger API (available in Asciidoctor 1.5.7+)\n\nfunction initializeLoggerFormatterClass (className, functions) {\n  const superclass = Opal.const_get_qualified(Opal.Logger, 'Formatter')\n  return initializeClass(superclass, className, functions, {}, {\n    call: function (args) {\n      for (let i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      return args\n    }\n  })\n}\n\nfunction initializeLoggerClass (className, functions) {\n  const superClass = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger')\n  return initializeClass(superClass, className, functions, {}, {\n    add: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        const message = args[2]\n        const messageObject = fromHash(message)\n        messageObject.getText = function () {\n          return this.text\n        }\n        messageObject.getSourceLocation = function () {\n          return this.source_location\n        }\n        messageObject.$inspect = function () {\n          const sourceLocation = this.getSourceLocation()\n          if (sourceLocation) {\n            return sourceLocation.getPath() + ': line ' + sourceLocation.getLineNumber() + ': ' + this.getText()\n          } else {\n            return this.getText()\n          }\n        }\n        args[2] = messageObject\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    }\n  })\n}\n\n/**\n * @namespace\n */\nconst LoggerManager = Opal.const_get_qualified(Opal.Asciidoctor, 'LoggerManager', true)\n\n// Alias\nOpal.Asciidoctor.LoggerManager = LoggerManager\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.getLogger = function () {\n  return this.$logger()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.setLogger = function (logger) {\n  this['$logger='](logger)\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newLogger = function (name, functions) {\n  return initializeLoggerClass(name, functions).$new()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newFormatter = function (name, functions) {\n  return initializeLoggerFormatterClass(name, functions).$new()\n}\n\n/**\n * @namespace\n */\nconst LoggerSeverity = Opal.const_get_qualified(Opal.Logger, 'Severity', true)\n\n// Alias\nOpal.Asciidoctor.LoggerSeverity = LoggerSeverity\n\n/**\n * @memberof LoggerSeverity\n */\nLoggerSeverity.get = function (severity) {\n  return LoggerSeverity.$constants()[severity]\n}\n\n/**\n * @namespace\n */\nconst LoggerFormatter = Opal.const_get_qualified(Opal.Logger, 'Formatter', true)\n\n// Alias\nOpal.Asciidoctor.LoggerFormatter = LoggerFormatter\n\n/**\n * @memberof LoggerFormatter\n */\nLoggerFormatter.prototype.call = function (severity, time, programName, message) {\n  return this.$call(LoggerSeverity.get(severity), time, programName, message)\n}\n\n/**\n * @namespace\n */\nconst MemoryLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'MemoryLogger', true)\n\n// Alias\nOpal.Asciidoctor.MemoryLogger = MemoryLogger\n\n/**\n * Create a new MemoryLogger.\n * @returns {MemoryLogger} - a MemoryLogger\n * @memberof MemoryLogger\n */\nMemoryLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {Array<Object>} - a list of messages\n * @memberof MemoryLogger\n */\nMemoryLogger.prototype.getMessages = function () {\n  const messages = this.messages\n  const result = []\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i]\n    const messageObject = fromHash(message)\n    if (typeof messageObject.message === 'string') {\n      messageObject.getText = function () {\n        return this.message\n      }\n    } else {\n      // also convert the message attribute\n      messageObject.message = fromHash(messageObject.message)\n      messageObject.getText = function () {\n        return this.message.text\n      }\n    }\n    messageObject.getSeverity = function () {\n      return this.severity.toString()\n    }\n    messageObject.getSourceLocation = function () {\n      return this.message.source_location\n    }\n    result.push(messageObject)\n  }\n  return result\n}\n\nconst Logging = Opal.const_get_qualified(Opal.Asciidoctor, 'Logging', true)\n\nOpal.Asciidoctor.Logging = Logging\n\nLogging.getLogger = function () {\n  return LoggerManager.$logger()\n}\n\nLogging.createLogMessage = function (text, context) {\n  return Logging.prototype.$message_with_context(text, toHash(context))\n}\n\n// alias\n\n/**\n * @memberof Reader\n */\nReader.prototype.getLogger = Logging.getLogger\n/**\n * @memberof Reader\n */\nReader.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getLogger = Logging.getLogger\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @namespace\n */\nconst Logger = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger', true)\n\n// Alias\nOpal.Asciidoctor.Logger = Logger\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof Logger\n */\nLogger.prototype.getMaxSeverity = function () {\n  const result = this.max_severity\n  return result === Opal.nil ? undefined : result\n}\n/**\n * @returns {LoggerFormatter} - the formatter\n * @memberof Logger\n */\nLogger.prototype.getFormatter = function () {\n  return this.formatter\n}\n/**\n * @param {LoggerFormatter} formatter - the formatter\n * @memberof Logger\n */\nLogger.prototype.setFormatter = function (formatter) {\n  this.formatter = formatter\n}\n/**\n * @returns {number} - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.getLevel = function () {\n  return this.level\n}\n/**\n * @param {number} level - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.setLevel = function (level) {\n  this.level = level\n}\n/**\n * @returns {string} - the program name\n * @memberof Logger\n */\nLogger.prototype.getProgramName = function () {\n  return this.progname\n}\n/**\n * @param {string} programName - the program name\n * @memberof Logger\n */\nLogger.prototype.setProgramName = function (programName) {\n  this.progname = programName\n}\n\nconst RubyLogger = Opal.const_get_qualified('::', 'Logger')\n\nconst log = function (logger, level, message) {\n  logger['$' + level](message)\n}\nRubyLogger.prototype.add = function (severity, message, programName) {\n  const severityValue = typeof severity === 'string' ? LoggerSeverity[severity.toUpperCase()] : severity\n  this.$add(severityValue, message, programName)\n}\nRubyLogger.prototype.log = RubyLogger.prototype.add\nRubyLogger.prototype.debug = function (message) {\n  log(this, 'debug', message)\n}\nRubyLogger.prototype.info = function (message) {\n  log(this, 'info', message)\n}\nRubyLogger.prototype.warn = function (message) {\n  log(this, 'warn', message)\n}\nRubyLogger.prototype.error = function (message) {\n  log(this, 'error', message)\n}\nRubyLogger.prototype.fatal = function (message) {\n  log(this, 'fatal', message)\n}\nRubyLogger.prototype.isDebugEnabled = function () {\n  return this['$debug?']()\n}\nRubyLogger.prototype.isInfoEnabled = function () {\n  return this['$info?']()\n}\nRubyLogger.prototype.isWarnEnabled = function () {\n  return this['$warn?']()\n}\nRubyLogger.prototype.isErrorEnabled = function () {\n  return this['$error?']()\n}\nRubyLogger.prototype.isFatalEnabled = function () {\n  return this['$fatal?']()\n}\n\n/**\n * @namespace\n */\nconst NullLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'NullLogger', true)\n\n// Alias\nOpal.Asciidoctor.NullLogger = NullLogger\n\n/**\n * Create a new NullLogger.\n * @returns {NullLogger} - a NullLogger\n * @memberof NullLogger\n */\nNullLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof NullLogger\n */\nNullLogger.prototype.getMaxSeverity = function () {\n  return this.max_severity\n}\n\n// Alias\nOpal.Asciidoctor.StopIteration = Opal.StopIteration\n\n/**\n * @namespace\n */\nconst Timings = Opal.const_get_qualified(Opal.Asciidoctor, 'Timings', true)\n\n// Alias\nOpal.Asciidoctor.Timings = Timings\n\n/**\n * Create a new Timings.\n * @returns {Timings} - a Timings\n * @memberof Timings\n */\nTimings.create = function () {\n  return this.$new()\n}\n\n/**\n * Print a report to the specified output.\n * The report will include:\n * - the time to read and parse source\n * - the time to convert document\n * - the total time (read, parse and convert)\n * @param {RubyLogger|console|Object} [to] - an optional output (by default stdout)\n * @param {string} [subject] - an optional subject (usually the file name)\n * @memberof Timings\n */\nTimings.prototype.printReport = function (to, subject) {\n  let outputFunction\n  if (to) {\n    if (typeof to.$add === 'function') {\n      outputFunction = function (message) {\n        to.$add(1, message)\n      }\n    } else if (typeof to.log === 'function') {\n      outputFunction = to.log\n    } else if (typeof to.write === 'function') {\n      outputFunction = function (message) {\n        to.write(message, 'utf-8')\n      }\n    } else {\n      throw new Error('The output should be a Stream (with a write function), an object with a log function or a Ruby Logger (with a add function)')\n    }\n  } else {\n    outputFunction = function (message) {\n      Opal.gvars.stdout.$write(message)\n    }\n  }\n  if (subject) {\n    outputFunction('Input file: ' + subject)\n  }\n  outputFunction(' Time to read and parse source: ' + this.$read_parse().toFixed(2))\n  outputFunction(' Time to convert document: ' + this.$convert().toFixed(2))\n  outputFunction(' Total time (read, parse and convert): ' + this.$read_parse_convert().toFixed(2))\n}\n\n/**\n * @namespace\n * @description\n * This API is experimental and subject to change.\n *\n * A pluggable adapter for integrating a syntax (aka code) highlighter into AsciiDoc processing.\n *\n * There are two types of syntax highlighter adapters. The first performs syntax highlighting during the convert phase.\n * This adapter type must define a \"handlesHighlighting\" method that returns true.\n * The companion \"highlight\" method will then be called to handle the \"specialcharacters\" substitution for source blocks.\n *\n * The second assumes syntax highlighting is performed on the client (e.g., when the HTML document is loaded).\n * This adapter type must define a \"hasDocinfo\" method that returns true.\n * The companion \"docinfo\" method will then be called to insert markup into the output document.\n * The docinfo functionality is available to both adapter types.\n *\n * Asciidoctor.js provides several a built-in adapter for highlight.js.\n * Additional adapters can be registered using SyntaxHighlighter.register.\n */\nconst SyntaxHighlighter = Opal.const_get_qualified(Opal.Asciidoctor, 'SyntaxHighlighter', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighter = SyntaxHighlighter\n\n/**\n * Associates the syntax highlighter class or object with the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array} names - A {string} name or an {Array} of {string} names\n * @param functions - A list of functions representing a {SyntaxHighlighter} or a {SyntaxHighlighter} class to instantiate\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.register = function (names, functions) {\n  const name = typeof names === 'string' ? names : names[0]\n  if (typeof functions === 'function') {\n    const classObject = functions\n    const prototype = classObject.prototype\n    const properties = Object.getOwnPropertyNames(prototype)\n    functions = {}\n    for (const propertyIdx in properties) {\n      const propertyName = properties[propertyIdx]\n      functions[propertyName] = prototype[propertyName]\n    }\n  }\n  const scope = initializeClass(SyntaxHighlighterBase, name, functions, {}, {\n    format: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        args[2] = fromHash(args[2])\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    },\n    highlight: function (args) {\n      if (args.length >= 3 && typeof args[3] === 'object' && '$$smap' in args[3]) {\n        let opts = args[3]\n        opts = fromHash(opts)\n        for (const key in opts) {\n          const value = opts[key]\n          if (key === 'callouts') {\n            const callouts = fromHashKeys(value)\n            for (const idx in callouts) {\n              const callout = callouts[idx]\n              for (let i = 0; i < callout.length; i++) {\n                const items = callout[i]\n                for (let j = 0; j < items.length; j++) {\n                  items[j] = items[j] === Opal.nil ? undefined : items[j]\n                }\n              }\n            }\n            opts[key] = callouts\n          } else {\n            opts[key] = value === Opal.nil ? undefined : value\n          }\n        }\n        args[3] = opts\n      }\n      if (args.length >= 2) {\n        args[2] = args[2] === Opal.nil ? undefined : args[2]\n      }\n      return args\n    }\n  })\n  for (const functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        const userFunction = functions[functionName]\n        if (functionName === 'handlesHighlighting') {\n          Opal.def(scope, '$highlight?', function () {\n            return userFunction.call()\n          })\n        } else if (functionName === 'hasDocinfo') {\n          Opal.def(scope, '$docinfo?', function (location) {\n            return userFunction.apply(this, [location])\n          })\n        }\n      }(functionName))\n    }\n  }\n  Opal.def(scope, '$name', function () {\n    return name\n  })\n  SyntaxHighlighter.$register(scope, names)\n  return scope\n}\n\n/**\n * Retrieves the syntax highlighter class or object registered for the specified name.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string} name - The {string} name of the syntax highlighter to retrieve.\n * @returns {SyntaxHighlighter} - the {SyntaxHighlighter} registered for this name.\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.get = function (name) {\n  const result = SyntaxHighlighter.$for(name)\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @deprecated Please use {SyntaxHighlighter#get} method as \"for\" is a reserved keyword.\n */\nSyntaxHighlighter.for = SyntaxHighlighter.get\n\n/**\n * @namespace\n */\nconst SyntaxHighlighterBase = Opal.const_get_qualified(SyntaxHighlighter, 'Base', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighterBase = SyntaxHighlighterBase\n\n/**\n * Statically register the current class in the registry for the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array<string>} names - A {string} name or an {Array} of {string} names\n * @memberof SyntaxHighlighterBase\n */\nSyntaxHighlighterBase.prototype.registerFor = function (names) {\n  SyntaxHighlighter.$register(this, names)\n}\n\n// Table API\n\n/**\n * Methods for managing AsciiDoc tables.\n * @namespace\n * @extends AbstractBlock\n */\nconst Table = Opal.Asciidoctor.Table\n\n/**\n * Create a new Table element.\n * @param {AbstractBlock} parent\n * @param {Object|undefined} attributes\n * @returns {Table} - a new {Table} object\n */\nTable.create = function (parent, attributes) {\n  return this.$new(parent, toHash(attributes))\n}\n\n/**\n * Get the caption of the table.\n * @returns {string}\n * @memberof Table\n */\nTable.prototype.getCaption = function () {\n  return this.caption\n}\n\n/**\n * Get the rows of this table.\n * @returns {Table.Rows} - an {Table.Rows} object with the members \"head\", \"body\" and \"foot\"\n * @memberof Table\n */\nTable.prototype.getRows = function () {\n  return this.rows\n}\n\n/**\n * Get the columns of this table.\n * @returns {Array<Column>}\n * @memberof Table\n */\nTable.prototype.getColumns = function () {\n  return this.columns\n}\n\n/**\n * Get the head rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getHeadRows = function () {\n  return this.rows.head\n}\n\n/**\n * Check if the table has a head rows.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeadRows = function () {\n  return this.rows !== Opal.nil && this.rows.head.length > 0\n}\n\n/**\n * Get the body rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getBodyRows = function () {\n  return this.rows.body\n}\n\n/**\n * Check if the table has a body rows.\n * @returns {boolean}\n */\nTable.prototype.hasBodyRows = function () {\n  return this.rows !== Opal.nil && this.rows.body.length > 0\n}\n\n/**\n * Get the foot rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getFootRows = function () {\n  return this.rows.foot\n}\n\n/**\n * Check if the table has a foot rows.\n * @returns {boolean}\n */\nTable.prototype.hasFootRows = function () {\n  return this.rows !== Opal.nil && this.rows.foot.length > 0\n}\n\n/**\n * Check if the table has a header option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeaderOption = function () {\n  return this.has_header_option\n}\n\n/**\n * Check if the table has the footer option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasFooterOption = function () {\n  return this.isOption('footer')\n}\n\n/**\n * Check if the table has the autowidth option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasAutowidthOption = function () {\n  return this.isOption('autowidth')\n}\n\n/**\n * Get the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getRowCount = function () {\n  return this.getAttribute('rowcount')\n}\n\n/**\n * Set the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setRowCount = function (value) {\n  this.setAttribute('rowcount', value)\n}\n\n/**\n * Get the number of columns in the table.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getColumnCount = function () {\n  return this.getAttribute('colcount')\n}\n\n/**\n * Set the number of columns in the table.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setColumnCount = function (value) {\n  this.setAttribute('colcount', value)\n}\n\n// Rows\n\n/**\n * @namespace\n */\nconst Rows = Opal.Asciidoctor.Table.Rows\n\n/**\n * Create a new Rows element.\n * @param {array<array<Cell>>} head\n * @param {array<array<Cell>>} foot\n * @param {array<array<Cell>>} body\n * @returns Rows\n */\nRows.create = function (head, foot, body) {\n  return this.$new(head, foot, body)\n}\n\n/**\n * Get head rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getHead = function () {\n  return this.head\n}\n\n/**\n * Get foot rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getFoot = function () {\n  return this.foot\n}\n\n/**\n * Get body rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getBody = function () {\n  return this.body\n}\n\n/**\n * Retrieve the rows grouped by section as a nested Array.\n *\n * Creates a 2-dimensional array of two element entries.\n * The first element is the section name as a string.\n * The second element is the Array of rows in that section.\n * The entries are in document order (head, foot, body).\n * @returns {[[string, array<array<Cell>>], [string, array<array<Cell>>], [string, array<array<Cell>>]]}\n */\nRows.prototype.bySection = function () {\n  return [['head', this.head], ['body', this.body], ['foot', this.foot]]\n}\n\n// Table Column\n\n/**\n * Methods to manage the columns of an AsciiDoc table.\n * In particular, it keeps track of the column specs.\n * @namespace\n * @extends AbstractNode\n */\nconst Column = Opal.Asciidoctor.Table.Column\n\n/**\n * Create a new Column element.\n * @param {Table} table\n * @param {number} index\n * @param {Object|undefined} attributes\n * @returns Column\n */\nColumn.create = function (table, index, attributes) {\n  return this.$new(table, index, toHash(attributes))\n}\n\n/**\n * Get the column number of this cell.\n * @returns {number|undefined}\n * @memberof Column\n */\nColumn.prototype.getColumnNumber = function () {\n  return this.getAttribute('colnumber')\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the horizontal align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getHorizontalAlign = function () {\n  return this.getAttribute('halign')\n}\n\n/**\n * Get the vertical align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getVerticalAlign = function () {\n  return this.getAttribute('valign')\n}\n\n/**\n * Get the style of this cell.\n * @returns {string}\n * @memberof Column\n */\nColumn.prototype.getStyle = function () {\n  const style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n// Table Cell\n\n/**\n * Methods for managing the cells in an AsciiDoc table.\n * @namespace\n * @extends AbstractBlock\n */\nconst Cell = Opal.Asciidoctor.Table.Cell\n\n/**\n * Create a new Cell element\n * @param {Column} column\n * @param {string} cellText\n * @param {Object|undefined} attributes\n * @param {Object|undefined} opts\n * @returns {Cell}\n */\nCell.create = function (column, cellText, attributes, opts) {\n  return this.$new(column, cellText, toHash(attributes), toHash(opts))\n}\n\n/**\n * Get the column span of this {@link Cell} node.\n * @returns {number} - An Integer of the number of columns this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getColumnSpan = function () {\n  const colspan = this.colspan\n  return colspan === Opal.nil ? undefined : colspan\n}\n\n/**\n * Set the column span of this {@link Cell} node.\n * @param {number} value\n * @returns {number} - The new colspan value\n * @memberof Cell\n */\nCell.prototype.setColumnSpan = function (value) {\n  return this['$colspan='](value)\n}\n\n/**\n * Get the row span of this {@link Cell} node\n * @returns {number|undefined} - An Integer of the number of rows this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getRowSpan = function () {\n  const rowspan = this.rowspan\n  return rowspan === Opal.nil ? undefined : rowspan\n}\n\n/**\n * Set the row span of this {@link Cell} node\n * @param {number} value\n * @returns {number} - The new rowspan value\n * @memberof Cell\n */\nCell.prototype.setRowSpan = function (value) {\n  return this['$rowspan='](value)\n}\n\n/**\n * Get the content of the cell.\n * This method should not be used for cells in the head row or that have the literal style.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getContent = function () {\n  return this.$content()\n}\n\n/**\n * Get the text of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Get the source of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the lines of the cell.\n * @returns {Array<string>}\n * @memberof Cell\n */\nCell.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the line number of the cell.\n * @returns {number|undefined}\n * @memberof Cell\n */\nCell.prototype.getLineNumber = function () {\n  const lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Get the source file of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getFile = function () {\n  const file = this.$file()\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the style of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getStyle = function () {\n  const style = this.$style()\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Get the column of this cell.\n * @returns {Column|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumn = function () {\n  const column = this.$column()\n  return column === Opal.nil ? undefined : column\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the column width in percentage of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumnPercentageWidth = function () {\n  return this.getAttribute('colpcwidth')\n}\n\n/**\n * Get the nested {Document} of this cell when style is 'asciidoc'.\n * @returns {Document|undefined} - the nested {Document}\n * @memberof Cell\n */\nCell.prototype.getInnerDocument = function () {\n  const innerDocument = this.inner_document\n  return innerDocument === Opal.nil ? undefined : innerDocument\n}\n\n// Templates\n\n/**\n * @description\n * This API is experimental and subject to change.\n *\n * Please note that this API is currently only available in a Node environment.\n * We recommend to use a custom converter if you are running in the browser.\n *\n * @namespace\n * @module Converter/TemplateConverter\n */\nconst TemplateConverter = Opal.Asciidoctor.Converter.TemplateConverter\n\nif (TemplateConverter) {\n  // Alias\n  Opal.Asciidoctor.TemplateConverter = TemplateConverter\n\n  /**\n   * Create a new TemplateConverter.\n   * @param {string} backend - the backend name\n   * @param templateDirectories - a list of template directories\n   * @param {Object} opts - a JSON of options\n   * @param {string} opts.template_engine - the name of the template engine\n   * @param {Object} [opts.template_cache] - an optional template cache\n   * @param {Object} [opts.template_cache.scans] - a JSON of template objects keyed by template name keyed by path patterns\n   * @param {Object} [opts.template_cache.templates] - a JSON of template objects keyed by file paths\n   * @returns {TemplateConverter}\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.create = function (backend, templateDirectories, opts) {\n    if (opts && opts.template_cache) {\n      opts.template_cache = toHash(opts.template_cache)\n    }\n    this.$new(backend, templateDirectories, toHash(opts))\n  }\n\n  /**\n   * @returns {Object} - The global cache\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.getCache = function () {\n    const caches = fromHash(this.caches)\n    if (caches) {\n      if (caches.scans) {\n        caches.scans = fromHash(caches.scans)\n        for (const key in caches.scans) {\n          caches.scans[key] = fromHash(caches.scans[key])\n        }\n      }\n      if (caches.templates) {\n        caches.templates = fromHash(caches.templates)\n      }\n    }\n    return caches\n  }\n\n  /**\n   * Clear the global cache.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.clearCache = function () {\n    this.$clear_caches()\n  }\n\n  /**\n   * Convert an {AbstractNode} to the backend format using the named template.\n   *\n   * Looks for a template that matches the value of the template name or,\n   * if the template name is not specified, the value of the {@see AbstractNode.getNodeName} function.\n   *\n   * @param {AbstractNode} node - the AbstractNode to convert\n   * @param {string} templateName - the {string} name of the template to use, or the node name of the node if a template name is not specified. (optional, default: undefined)\n   * @param {Object} opts - an optional JSON that is passed as local variables to the template. (optional, default: undefined)\n   * @returns {string} - The {string} result from rendering the template\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.convert = function (node, templateName, opts) {\n    return this.$convert(node, templateName, toHash(opts))\n  }\n\n  /**\n   * Checks whether there is a template registered with the specified name.\n   *\n   * @param {string} name - the {string} template name\n   * @returns {boolean} - a {boolean} that indicates whether a template is registered for the specified template name.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.handles = function (name) {\n    return this['$handles?'](name)\n  }\n\n  /**\n   * Converts the {AbstractNode} using only its converted content.\n   *\n   * @param {AbstractNode} node\n   * @returns {string} - the converted {string} content.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.getContentOnly = function (node) {\n    return this.$content_only(node)\n  }\n\n  /**\n   * Skips conversion of the {AbstractNode}.\n   *\n   * @param {AbstractNode} node\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.skip = function (node) {\n    this.$skip(node)\n  }\n\n  /**\n   * Retrieves the templates that this converter manages.\n   *\n   * @returns {Object} - a JSON of template objects keyed by template name\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.getTemplates = function () {\n    return fromHash(this.$templates())\n  }\n\n  /**\n   * Registers a template with this converter.\n   *\n   * @param {string} name - the {string} template name\n   * @param {Object} template - the template object to register\n   * @returns {Object} - the template object\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.register = function (name, template) {\n    return this.$register(name, template)\n  }\n\n  /**\n   * @namespace\n   * @description\n   * This API is experimental and subject to change.\n   *\n   * Please note that this API is currently only available in a Node environment.\n   * We recommend to use a custom converter if you are running in the browser.\n   *\n   * A pluggable adapter for integrating a template engine into the built-in template converter.\n   */\n  const TemplateEngine = {}\n  TemplateEngine.registry = {}\n\n  // Alias\n  Opal.Asciidoctor.TemplateEngine = TemplateEngine\n\n  /**\n   * Register a template engine adapter for the given names.\n   * @param {string|Array} names - a {string} name or an {Array} of {string} names\n   * @param {Object} templateEngineAdapter - a template engine adapter instance\n   * @example\n   *  const fs = require('fs')\n   *  class DotTemplateEngineAdapter {\n   *    constructor () {\n   *      this.doT = require('dot')\n   *    }\n   *    compile (file, _) {\n   *      const templateFn = this.doT.template(fs.readFileSync(file, 'utf8'))\n   *      return {\n   *        render: templateFn\n   *      }\n   *    }\n   *  }\n   *  asciidoctor.TemplateEngine.register('dot, new DotTemplateEngineAdapter())\n   * @memberof TemplateEngine\n   */\n  TemplateEngine.register = function (names, templateEngineAdapter) {\n    if (typeof names === 'string') {\n      this.registry[names] = templateEngineAdapter\n    } else {\n      // array\n      for (let i = 0; i < names.length; i++) {\n        const name = names[i]\n        this.registry[name] = templateEngineAdapter\n      }\n    }\n  }\n}\n\n/**\n * @namespace\n * @module Converter/CompositeConverter\n */\nconst CompositeConverter = Opal.Asciidoctor.Converter.CompositeConverter\n\nif (CompositeConverter) {\n  // Alias\n  Opal.Asciidoctor.CompositeConverter = CompositeConverter\n\n  /**\n   * Delegates to the first converter that identifies itself as the handler for the given transform.\n   * The optional Hash is passed as the last option to the delegate's convert method.\n   *\n   * @param node - the AbstractNode to convert\n   * @param [transform] - the optional {string} transform, or the name of the node if no transform is specified. (optional, default: undefined)\n   * @param [opts] - an optional JSON that is passed as local variables to the template. (optional, default: undefined)\n   * @returns The {string} result from the delegate's convert method\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.convert = function (node, transform, opts) {\n    return this.$convert(node, transform, toHash(opts))\n  }\n\n  /**\n   * Converts the {AbstractNode} using only its converted content.\n   *\n   * @param {AbstractNode} node\n   * @returns {string} - the converted {string} content.\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.getContentOnly = function (node) {\n    return this.$content_only(node)\n  }\n\n  /**\n   * Skips conversion of the {AbstractNode}.\n   *\n   * @param {AbstractNode} node\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.skip = function (node) {\n    this.$skip(node)\n  }\n\n  /**\n   * Get the Array of Converter objects in the chain.\n   * @returns {[Converter]}\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.getConverters = function () {\n    return this.converters\n  }\n\n  /**\n   * Retrieve the converter for the specified transform.\n   * @param transform\n   * @returns {Converter|undefined}\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.getConverter = function (transform) {\n    const converter = this.$converter_for(transform)\n    return converter === Opal.nil ? undefined : converter\n  }\n\n  /**\n   * Find the converter for the specified transform.\n   * Throw an exception if no converter is found.\n   *\n   * @param transform\n   * @returns {Converter} - the matching converter\n   * @throws Error if no converter is found\n   * @memberof Converter/CompositeConverter\n   */\n  CompositeConverter.prototype.findConverter = function (transform) {\n    return this.$find_converter(transform)\n  }\n}\n\n// Converter API\n\n/**\n * @namespace\n * @module Converter\n */\nconst Converter = Opal.const_get_qualified(Opal.Asciidoctor, 'Converter')\n\n// Alias\nOpal.Asciidoctor.Converter = Converter\n\n/**\n * Convert the specified node.\n *\n * @param {AbstractNode} node - the AbstractNode to convert\n * @param {string} transform - an optional String transform that hints at\n * which transformation should be applied to this node.\n * @param {Object} opts - a JSON of options that provide additional hints about how to convert the node (default: {})\n * @returns the {Object} result of the conversion, typically a {string}.\n * @memberof Converter\n */\nConverter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, toHash(opts))\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter\n */\nConverter.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n// Converter Factory API\n\n/**\n * @namespace\n * @module Converter/Factory\n */\nconst ConverterFactory = Opal.Asciidoctor.Converter.Factory\n\nconst ConverterBase = Opal.Asciidoctor.Converter.Base\n\n// Alias\nOpal.Asciidoctor.ConverterFactory = ConverterFactory\n\nconst ConverterBackendTraits = Opal.Asciidoctor.Converter.BackendTraits\n\n// Alias\nOpal.Asciidoctor.ConverterBackendTraits = ConverterBackendTraits\n\n/**\n * Register a custom converter in the global converter factory to handle conversion to the specified backends.\n * If the backend value is an asterisk, the converter is used to handle any backend that does not have an explicit converter.\n *\n * @param converter - The Converter instance to register\n * @param backends {Array} - A {string} {Array} of backend names that this converter should be registered to handle (optional, default: ['*'])\n * @return {*} - Returns nothing\n * @memberof Converter/Factory\n */\nConverterFactory.register = function (converter, backends) {\n  const args = [bridgeConverter(converter)].concat(backends)\n  return Converter.$register.apply(Converter, args)\n}\n\n/**\n * Retrieves the singleton instance of the converter factory.\n *\n * @param {boolean} initialize - instantiate the singleton if it has not yet\n * been instantiated. If this value is false and the singleton has not yet been\n * instantiated, this method returns a fresh instance.\n * @returns {Converter/Factory} an instance of the converter factory.\n * @memberof Converter/Factory\n */\nConverterFactory.getDefault = function (initialize) {\n  return this.$default(initialize)\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter/Factory\n */\nConverterFactory.prototype.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n/**\n * Get the converter registry.\n * @returns the registry of converter instances or classes keyed by backend name\n * @memberof Converter/Factory\n */\nConverterFactory.getRegistry = function () {\n  return fromHash(Converter.$registry())\n}\n\n/**\n * Lookup the custom converter registered with this factory to handle the specified backend.\n *\n * @param {string} backend - The {string} backend name.\n * @returns the {Converter} class or instance registered to convert the specified backend or undefined if no match is found.\n * @memberof Converter/Factory\n */\nConverterFactory.for = function (backend) {\n  const converter = Converter.$for(backend)\n  return converter === Opal.nil ? undefined : converter\n}\n\n/*\n * Unregister any custom converter classes that are registered with this factory.\n * Intended for testing only!\n */\nConverterFactory.unregisterAll = function () {\n  const internalRegistry = Converter.DefaultFactory.$$cvars['@@registry']\n  Converter.DefaultFactory.$$cvars['@@registry'] = toHash({ html5: internalRegistry['$[]']('html5') })\n}\n\n// Built-in converter\n\n/**\n * @namespace\n * @module Converter/Html5Converter\n */\nconst Html5Converter = Opal.Asciidoctor.Converter.Html5Converter\n\n// Alias\nOpal.Asciidoctor.Html5Converter = Html5Converter\n\n/**\n * Create a new Html5Converter.\n * @returns {Html5Converter} - a Html5Converter\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.create = function () {\n  return this.$new()\n}\n\n/**\n * Converts an {AbstractNode} using the given transform.\n * This method must be implemented by a concrete converter class.\n *\n * @param {AbstractNode} node - The concrete instance of AbstractNode to convert.\n * @param {string} [transform] - An optional String transform that hints at which transformation should be applied to this node.\n * If a transform is not given, the transform is often derived from the value of the {AbstractNode#getNodeName} property. (optional, default: undefined)\n * @param {Object} [opts]- An optional JSON of options hints about how to convert the node. (optional, default: undefined)\n *\n * @returns {string} - the String result.\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, opts)\n}\n\n/* global Opal, fromHash, toHash, initializeClass */\n// Extensions API\n\n/**\n * @private\n */\nconst toBlock = function (block) {\n  // arity is a mandatory field\n  block.$$arity = block.length\n  return block\n}\n\nconst registerExtension = function (registry, type, processor, name) {\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return registry['$' + type](processor, name)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(registry, type, name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @namespace\n * @description\n * Extensions provide a way to participate in the parsing and converting\n * phases of the AsciiDoc processor or extend the AsciiDoc syntax.\n *\n * The various extensions participate in AsciiDoc processing as follows:\n *\n * 1. After the source lines are normalized, {{@link Extensions/Preprocessor}}s modify or replace\n *    the source lines before parsing begins. {{@link Extensions/IncludeProcessor}}s are used to\n *    process include directives for targets which they claim to handle.\n * 2. The Parser parses the block-level content into an abstract syntax tree.\n *    Custom blocks and block macros are processed by associated {{@link Extensions/BlockProcessor}}s\n *    and {{@link Extensions/BlockMacroProcessor}}s, respectively.\n * 3. {{@link Extensions/TreeProcessor}}s are run on the abstract syntax tree.\n * 4. Conversion of the document begins, at which point inline markup is processed\n *    and converted. Custom inline macros are processed by associated {InlineMacroProcessor}s.\n * 5. {{@link Extensions/Postprocessor}}s modify or replace the converted document.\n * 6. The output is written to the output stream.\n *\n * Extensions may be registered globally using the {Extensions.register} method\n * or added to a custom {Registry} instance and passed as an option to a single\n * Asciidoctor processor.\n *\n * @example\n * asciidoctor.Extensions.register(function () {\n *   this.block(function () {\n *     const self = this\n *     self.named('shout')\n *     self.onContext('paragraph')\n *     self.process(function (parent, reader) {\n *       const lines = reader.getLines().map(function (l) { return l.toUpperCase(); })\n *       return self.createBlock(parent, 'paragraph', lines)\n *     })\n *   })\n * })\n */\nconst Extensions = Opal.const_get_qualified(Opal.Asciidoctor, 'Extensions')\n\n// Alias\nOpal.Asciidoctor.Extensions = Extensions\n\n/**\n * Create a new {@link Extensions/Registry}.\n * @param {string} name\n * @param {function} block\n * @memberof Extensions\n * @returns {Extensions/Registry} - returns a {@link Extensions/Registry}\n */\nExtensions.create = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'create', null, toBlock(name))\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'create', [name], toBlock(block))\n  } else {\n    return this.$create()\n  }\n}\n\n/**\n * @memberof Extensions\n */\nExtensions.register = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'register', null, toBlock(name))\n  } else {\n    return Opal.send(this, 'register', [name], toBlock(block))\n  }\n}\n\n/**\n * Get statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.getGroups = function () {\n  return fromHash(this.$groups())\n}\n\n/**\n * Unregister all statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.unregisterAll = function () {\n  this.$unregister_all()\n}\n\n/**\n * Unregister the specified statically-registered extension groups.\n *\n * NOTE Opal cannot delete an entry from a Hash that is indexed by symbol, so\n * we have to resort to using low-level operations in this method.\n *\n * @memberof Extensions\n */\nExtensions.unregister = function () {\n  const names = Array.prototype.concat.apply([], arguments)\n  const groups = this.$groups()\n  const groupNameIdx = {}\n  let i = 0\n  const groupSymbolNames = groups.$$keys\n  for (; i < groupSymbolNames.length; i++) {\n    const groupSymbolName = groupSymbolNames[i]\n    groupNameIdx[groupSymbolName.toString()] = groupSymbolName\n  }\n  for (let j = 0; j < names.length; j++) {\n    const groupStringName = names[j]\n    if (groupStringName in groupNameIdx) Opal.hash_delete(groups, groupNameIdx[groupStringName])\n  }\n}\n\n/**\n * @namespace\n * @module Extensions/Registry\n */\nconst Registry = Extensions.Registry\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.getGroups = Extensions.getGroups\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregisterAll = function () {\n  this.groups = Opal.hash()\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregister = Extensions.unregister\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.prefer = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return this.$prefer(name, processor)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(this, 'prefer', name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.block = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.inlineMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'inline_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.includeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'include_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.blockMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.treeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'tree_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.postprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'postprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.preprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'preprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.docinfoProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'docinfo_processor', processor, name)\n}\n\n/**\n * Checks whether any {{@link Extensions/Preprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Preprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPreprocessors = function () {\n  return this['$preprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/TreeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/TreeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasTreeProcessors = function () {\n  return this['$tree_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/IncludeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/IncludeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasIncludeProcessors = function () {\n  return this['$include_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/Postprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Postprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPostprocessors = function () {\n  return this['$postprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/DocinfoProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns a {boolean} indicating whether any {{@link Extensions/DocinfoProcessor}} extensions are registered.\n */\nRegistry.prototype.hasDocinfoProcessors = function (location) {\n  return this['$docinfo_processors?'](location)\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlocks = function () {\n  return this['$blocks?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlockMacros = function () {\n  return this['$block_macros?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/InlineMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/InlineMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasInlineMacros = function () {\n  return this['$inline_macros?']()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Preprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPreprocessors = function () {\n  return this.$preprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/TreeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getTreeProcessors = function () {\n  return this.$tree_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/IncludeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getIncludeProcessors = function () {\n  return this.$include_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Postprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPostprocessors = function () {\n  return this.$postprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/DocinfoProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getDocinfoProcessors = function (location) {\n  return this.$docinfo_processors(location)\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlocks = function () {\n  return this.block_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlockMacros = function () {\n  return this.block_macro_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/InlineMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getInlineMacros = function () {\n  return this.$inline_macros()\n}\n\n/**\n * Get any {{@link Extensions/InlineMacroProcessor}} extensions are registered to handle the specified inline macro name.\n *\n * @param name - the {string} inline macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/InlineMacroProcessor}} that matches the inline macro name or undefined if no match is found.\n */\nRegistry.prototype.getInlineMacroFor = function (name) {\n  const result = this['$registered_for_inline_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockProcessor}} extensions are registered to handle the specified block name appearing on the specified context.\n * @param name - the {string} block name\n * @param context - the context of the block: paragraph, open... (optional)\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockProcessor}} that matches the block name and context or undefined if no match is found.\n */\nRegistry.prototype.getBlockFor = function (name, context) {\n  if (typeof context === 'undefined') {\n    const ext = this.$find_block_extension(name)\n    return ext === Opal.nil ? undefined : ext\n  }\n  const result = this['$registered_for_block?'](name, context)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockMacroProcessor}} extensions are registered to handle the specified macro name.\n *\n * @param name - the {string} macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockMacroProcessor}} that matches the macro name or undefined if no match is found.\n */\nRegistry.prototype.getBlockMacroFor = function (name) {\n  const result = this['$registered_for_block_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * @namespace\n * @module Extensions/Processor\n */\nconst Processor = Extensions.Processor\n\n/**\n * The extension will be added to the beginning of the list for that extension type. (default is append).\n * @memberof Extensions/Processor\n * @deprecated Please use the <code>prefer</pre> function on the {@link Extensions/Registry},\n * the {@link Extensions/IncludeProcessor},\n * the {@link Extensions/TreeProcessor},\n * the {@link Extensions/Postprocessor},\n * the {@link Extensions/Preprocessor}\n * or the {@link Extensions/DocinfoProcessor}\n */\nProcessor.prototype.prepend = function () {\n  this.$option('position', '>>')\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.process = function (block) {\n  const handler = {\n    apply: function (target, thisArg, argumentsList) {\n      for (let i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object' && '$$smap' in argumentsList[i]) {\n          argumentsList[i] = fromHash(argumentsList[i])\n        }\n      }\n      return target.apply(thisArg, argumentsList)\n    }\n  }\n  const blockProxy = new Proxy(block, handler)\n  return Opal.send(this, 'process', null, toBlock(blockProxy))\n}\n\n/**\n * @param {string} name\n * @memberof Extensions/Processor\n */\nProcessor.prototype.named = function (name) {\n  return this.$named(name)\n}\n\n/**\n * Creates a block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} context\n * @param {string|Array<string>} source\n * @param {Object|undefined} attrs - A JSON of attributes\n * @param {Object|undefined} opts - A JSON of options\n * @return {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createBlock = function (parent, context, source, attrs, opts) {\n  return this.$create_block(parent, context, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a list block node and links it to the specified parent.\n *\n * @param parent - The parent Block (Block, Section, or Document) of this new list block.\n * @param {string} context - The list context (e.g., ulist, olist, colist, dlist)\n * @param {Object} attrs - An object of attributes to set on this list block\n * @returns {List}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createList = function (parent, context, attrs) {\n  return this.$create_list(parent, context, toHash(attrs))\n}\n\n/**\n * Creates a list item node and links it to the specified parent.\n *\n * @param {List} parent - The parent {List} of this new list item block.\n * @param {string} text - The text of the list item.\n * @returns {ListItem}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListItem = function (parent, text) {\n  return this.$create_list_item(parent, text)\n}\n\n/**\n * Creates an image block node and links it to the specified parent.\n * @param {Block|Section|Document} parent - The parent Block of this new image block.\n * @param {Object} attrs - A JSON of attributes\n * @param {string} attrs.target - the target attribute to set the source of the image.\n * @param {string} attrs.alt - the alt attribute to specify an alternative text for the image.\n * @param {Object} opts - A JSON of options\n * @returns {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createImageBlock = function (parent, attrs, opts) {\n  return this.$create_image_block(parent, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a paragraph block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a paragraph {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createParagraph = function (parent, source, attrs, opts) {\n  return this.$create_paragraph(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an open block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an open {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createOpenBlock = function (parent, source, attrs, opts) {\n  return this.$create_open_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an example block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an example {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createExampleBlock = function (parent, source, attrs, opts) {\n  return this.$create_example_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createPassBlock = function (parent, source, attrs, opts) {\n  return this.$create_pass_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a listing block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a listing {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListingBlock = function (parent, source, attrs, opts) {\n  return this.$create_listing_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createLiteralBlock = function (parent, source, attrs, opts) {\n  return this.$create_literal_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an inline anchor and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} anchor\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createAnchor = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_anchor(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline pass and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} pass\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInlinePass = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline_pass(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline node and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block of this new inline node.\n * @param {string} context - The context name\n * @param {string} text - The text\n * @param {Object|undefined} opts - A JSON of options\n * @returns {Inline} - an {Inline} node\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInline = function (parent, context, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline(parent, context, text, toHash(opts))\n}\n\n/**\n * Parses blocks in the content and attaches the block to the parent.\n * @param {AbstractBlock} parent - the parent block\n * @param {string|Array<string>} content - the content\n * @param {Object|undefined} attrs - an object of attributes\n * @returns {AbstractNode} - The parent node into which the blocks are parsed.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseContent = function (parent, content, attrs) {\n  return this.$parse_content(parent, content, toHash(attrs))\n}\n\n/**\n *  Parses the attrlist String into a JSON of attributes\n * @param {AbstractBlock} block - the current AbstractBlock or the parent AbstractBlock if there is no current block (used for applying subs)\n * @param {string} attrlist - the list of attributes as a String\n * @param {Object|undefined} opts - an optional JSON of options to control processing:\n * - positional_attributes: an Array of attribute names to map positional arguments to (optional, default: [])\n * - sub_attributes: enables attribute substitution on the attrlist argument (optional, default: false)\n *\n * @returns - a JSON of parsed attributes\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseAttributes = function (block, attrlist, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return fromHash(this.$parse_attributes(block, attrlist, toHash(opts)))\n}\n\n/**\n * @param {string|Array<string>} value - Name of a positional attribute or an Array of positional attribute names\n * @memberof Extensions/Processor\n */\nProcessor.prototype.positionalAttributes = function (value) {\n  return this.$positional_attrs(value)\n}\n\n/**\n * Specify how to resolve attributes.\n *\n * @param {string|Array<string>|Object|boolean} [value] - A specification to resolve attributes.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.resolveAttributes = function (value) {\n  if (typeof value === 'object' && !Array.isArray(value)) {\n    return this.$resolves_attributes(toHash(value))\n  }\n  if (arguments.length > 1) {\n    return this.$resolves_attributes(Array.prototype.slice.call(arguments))\n  }\n  if (typeof value === 'undefined') {\n    // Convert to nil otherwise an exception is thrown at:\n    // https://github.com/asciidoctor/asciidoctor/blob/0bcb4addc17b307f62975aad203fb556a1bcd8a5/lib/asciidoctor/extensions.rb#L583\n    //\n    // if args.size == 1 && !args[0]\n    //\n    // In the above Ruby code, args[0] is undefined and Opal will try to call the function \"!\" on an undefined object.\n    return this.$resolves_attributes(Opal.nil)\n  }\n  return this.$resolves_attributes(value)\n}\n\n/**\n * @deprecated Please use the <code>resolveAttributes</pre> function on the {@link Extensions/Processor}.\n * @memberof Extensions/Processor\n * @see {Processor#resolveAttributes}\n */\nProcessor.prototype.resolvesAttributes = Processor.prototype.resolveAttributes\n\n/**\n * Get the configuration JSON for this processor instance.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.getConfig = function () {\n  return fromHash(this.config)\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.option = function (key, value) {\n  this.$option(key, value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockProcessor\n */\nconst BlockProcessor = Extensions.BlockProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @param {string} context - A context name\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContext = function (context) {\n  return this.$on_context(context)\n}\n\n/**\n * @param {...string} contexts - A list of context names\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContexts = function (contexts) {\n  return this.$on_contexts(Array.prototype.slice.call(arguments))\n}\n\n/**\n * @returns {string}\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.getName = function () {\n  const name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockMacroProcessor\n */\nconst BlockMacroProcessor = Extensions.BlockMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the block macro name\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.getName = function () {\n  const name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/InlineMacroProcessor\n */\nconst InlineMacroProcessor = Extensions.InlineMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the inline macro name\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.getName = function () {\n  const name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.matchFormat = function (value) {\n  this.$match_format(value)\n}\n\n/**\n * @param {RegExp} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.match = function (value) {\n  this.$match(value)\n}\n\n/**\n * @namespace\n * @module Extensions/IncludeProcessor\n */\nconst IncludeProcessor = Extensions.IncludeProcessor\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.handles = function (block) {\n  return Opal.send(this, 'handles?', null, toBlock(block))\n}\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/TreeProcessor\n */\nconst TreeProcessor = Extensions.TreeProcessor\n\n/**\n * @memberof Extensions/TreeProcessor\n */\nTreeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Postprocessor\n */\nconst Postprocessor = Extensions.Postprocessor\n\n/**\n * @memberof Extensions/Postprocessor\n */\nPostprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Preprocessor\n */\nconst Preprocessor = Extensions.Preprocessor\n\n/**\n * @memberof Extensions/Preprocessor\n */\nPreprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/DocinfoProcessor\n */\nconst DocinfoProcessor = Extensions.DocinfoProcessor\n\n/**\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @param {string} value - The docinfo location (\"head\", \"header\" or \"footer\")\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.atLocation = function (value) {\n  this.$at_location(value)\n}\n\nfunction initializeProcessorClass (superclassName, className, functions) {\n  const superClass = Opal.const_get_qualified(Extensions, superclassName)\n  return initializeClass(superClass, className, functions, {\n    'handles?': function () {\n      return true\n    }\n  })\n}\n\n// Postprocessor\n\n/**\n * Create a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Postprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPostprocessor(name, functions).$new()\n}\n\n// Preprocessor\n\n/**\n * Create a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Preprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPreprocessor(name, functions).$new()\n}\n\n// Tree Processor\n\n/**\n * Create a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('TreeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createTreeProcessor(name, functions).$new()\n}\n\n// Include Processor\n\n/**\n * Create an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('IncludeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createIncludeProcessor(name, functions).$new()\n}\n\n// Docinfo Processor\n\n/**\n * Create a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('DocinfoProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createDocinfoProcessor(name, functions).$new()\n}\n\n// Block Processor\n\n/**\n * Create a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockProcessor(name, functions).$new()\n}\n\n// Inline Macro Processor\n\n/**\n * Create an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('InlineMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createInlineMacroProcessor(name, functions).$new()\n}\n\n// Block Macro Processor\n\n/**\n * Create a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockMacroProcessor(name, functions).$new()\n}\n\n\nvar ASCIIDOCTOR_JS_VERSION = '3.0.4';\n\n  /**\n   * Get Asciidoctor.js version number.\n   *\n   * @memberof Asciidoctor\n   * @returns {string} - returns the version number of Asciidoctor.js.\n   */\n  Opal.Asciidoctor.prototype.getVersion = function () {\n    return ASCIIDOCTOR_JS_VERSION\n  }\n  return Opal.Asciidoctor\n}\n", "module.exports = require('@asciidoctor/core')\n"],
  "mappings": "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",
  "names": ["Opal", "$nesting", "$base", "$parent_nesting", "self", "$$", "$super", "$a", "$$2", "$proto", "$d", "accum", "select", "$err", "window", "$b", "$post_args", "nil", "utc_offset", "functionName", "defaultFunctionName", "Asciidoctor", "i", "set", "len", "chr", "value", "other", "level", "num", "perm", "used", "str", "arg", "match", "denominator", "c", "args", "$ret_or_1"]
}
